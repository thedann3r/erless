version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000"
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - VITE_STRIPE_PUBLIC_KEY=${VITE_STRIPE_PUBLIC_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
    depends_on:
      - postgres
    volumes:
      - app_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${PGDATABASE:-erlessed}
      - POSTGRES_USER=${PGUSER:-postgres}
      - POSTGRES_PASSWORD=${PGPASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backup service for PostgreSQL
  postgres-backup:
    image: postgres:16-alpine
    depends_on:
      - postgres
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=${PGUSER:-postgres}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE:-erlessed}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "
        while true; do
          sleep 21600  # 6 hours
          echo 'Creating database backup...'
          pg_dump -h postgres -U ${PGUSER:-postgres} ${PGDATABASE:-erlessed} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup created successfully'
          # Keep only last 7 days of backups
          find /backups -name '*.sql' -mtime +7 -delete
        done
      "
    restart: unless-stopped

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

volumes:
  postgres_data:
  redis_data:
  app_logs: