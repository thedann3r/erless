{"file_contents":{"README.md":{"content":"# Erlessed Healthcare Platform\n\nA comprehensive healthcare claims management system with AI-powered preauthorization, patient verification, and secure production deployment capabilities.\n\n## Features\n\n- **6 Role-Based Dashboards**: Doctor, Pharmacy, Care Manager, Insurer, Patient, and Admin interfaces\n- **AI-Powered Analytics**: OpenAI and Anthropic integration for intelligent decision making\n- **Kenya Compliance**: Professional license validation and SHA billing guidelines\n- **HMS Integration**: FastAPI microservice for hospital management systems\n- **Secure Infrastructure**: Production-ready with rate limiting, monitoring, and backup systems\n\n## Quick Start\n\n### Development Setup\n\n```bash\n# Clone and install dependencies\ngit clone <repository-url>\ncd erlessed-healthcare\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start development server\nnpm run dev\n```\n\n### Production Deployment\n\n#### Option 1: Fly.io (Recommended for Africa)\n\n```bash\n# Install Fly CLI\ncurl -L https://fly.io/install.sh | sh\n\n# Deploy\nchmod +x deploy.sh\n./deploy.sh\n# Select option 1 for Fly.io\n```\n\n#### Option 2: Render.com\n\n```bash\n# Deploy using blueprint\n./deploy.sh\n# Select option 2 for Render.com\n```\n\n#### Option 3: Docker Compose\n\n```bash\n# Copy production environment\ncp production.env .env.production\n# Edit with your production values\n\n# Deploy with Docker\ndocker-compose up -d\n```\n\n## Environment Configuration\n\n### Required Environment Variables\n\n```bash\n# Database\nDATABASE_URL=postgresql://user:pass@host:5432/erlessed\nJWT_SECRET=your-secure-256-bit-secret\n\n# AI Services (for analytics and decision support)\nOPENAI_API_KEY=sk-your-openai-key\nANTHROPIC_API_KEY=sk-ant-your-anthropic-key\n\n# Payment Processing (for billing features)\nSTRIPE_SECRET_KEY=sk_live_your-stripe-secret\nVITE_STRIPE_PUBLIC_KEY=pk_live_your-stripe-public\n```\n\n### Optional Configuration\n\n```bash\n# Monitoring\nSENTRY_DSN=your-sentry-dsn\nREDIS_URL=redis://host:6379\n\n# HMS Integration\nHMS_API_USERNAME=your-hms-username\nHMS_API_PASSWORD=your-hms-password\n```\n\n## Architecture\n\n### Frontend (React + TypeScript)\n- **Framework**: React 18 with Vite\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **State Management**: TanStack Query\n- **Routing**: Wouter\n\n### Backend (Express.js + TypeScript)\n- **Runtime**: Node.js with Express\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Passport.js with session-based auth\n- **Security**: Helmet, rate limiting, CORS protection\n\n### HMS Integration (FastAPI + Python)\n- **Framework**: FastAPI with async support\n- **Integration**: OpenMRS, AfyaPro, custom EMR systems\n- **Authentication**: OAuth2 and token-based auth\n- **Data Sync**: Real-time synchronization with consent management\n\n## Security Features\n\n- **Rate Limiting**: Configurable per endpoint with Redis backend\n- **Security Headers**: Helmet.js with CSP and HSTS\n- **Authentication**: Session-based with secure cookie handling\n- **Data Protection**: AES-256 encryption for biometric data\n- **Audit Logging**: Comprehensive logging for compliance\n\n## Monitoring & Health Checks\n\n### Health Endpoints\n\n- **Application Health**: `GET /health`\n- **Metrics**: `GET /metrics` (Prometheus format)\n- **Uptime Monitoring**: Built-in monitoring script\n\n### Example Health Check Response\n\n```json\n{\n  \"status\": \"OK\",\n  \"timestamp\": \"2025-01-19T19:30:00.000Z\",\n  \"uptime\": 3600,\n  \"environment\": \"production\",\n  \"database\": {\n    \"status\": \"connected\",\n    \"responseTime\": \"15ms\"\n  },\n  \"memory\": {\n    \"used\": 128,\n    \"total\": 256\n  }\n}\n```\n\n## Backup & Recovery\n\n### Automated Backups\n\n- **PostgreSQL**: Automated daily backups with 7-day retention\n- **Cloud Storage**: Optional S3 integration for off-site backups\n- **Recovery**: Point-in-time recovery capabilities\n\n### Manual Backup\n\n```bash\n# Create manual backup\npg_dump $DATABASE_URL > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore from backup\npsql $DATABASE_URL < backup_file.sql\n```\n\n## API Documentation\n\n### Core Endpoints\n\n- **Authentication**: `POST /api/auth/login`, `POST /api/auth/register`\n- **Claims Management**: `GET|POST /api/claims`\n- **Patient Data**: `GET|POST /api/patients`\n- **Analytics**: `GET /api/analytics/dashboard`\n- **HMS Integration**: `POST /api/hms/sync`\n\n### Rate Limits\n\n- **General API**: 1000 requests per 15 minutes\n- **Authentication**: 10 requests per 15 minutes\n- **File Uploads**: 10MB maximum size\n\n## Legal Compliance\n\n### Kenya Healthcare Regulations\n\n- **Data Protection Act 2019**: Full compliance implementation\n- **SHA Billing Guidelines**: Integrated billing workflows\n- **Professional Licensing**: KMPDC, PPB, Clinical Officers validation\n- **Patient Consent**: Granular consent management with withdrawal options\n\n### Documentation\n\n- `legal_docs/terms_of_service.md`: Complete terms of service\n- `legal_docs/privacy_policy.md`: Data protection and privacy policy\n- `legal_docs/patient_consent.md`: Patient consent forms and procedures\n\n## Development\n\n### Project Structure\n\n```\nerlessed-healthcare/\n├── client/src/           # React frontend\n├── server/              # Express.js backend\n├── hms_integration/     # FastAPI HMS microservice\n├── shared/              # Shared TypeScript types\n├── legal_docs/          # Legal compliance documents\n└── deployment/          # Production configuration\n```\n\n### Database Schema\n\n- **Users & Authentication**: Multi-role user management\n- **Patients & Claims**: Healthcare data with audit trails\n- **HMS Integration**: Synchronized clinical data\n- **Billing & Subscriptions**: Payment processing and usage tracking\n\n### Development Commands\n\n```bash\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Database operations\nnpm run db:push        # Push schema changes\nnpm run db:studio      # Open database studio\n\n# Type checking\nnpm run type-check\n\n# Security audit\nnpm audit\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Database Connection Failed**\n   - Verify DATABASE_URL in environment\n   - Check PostgreSQL service status\n   - Ensure network connectivity\n\n2. **Rate Limiting Errors**\n   - Check Redis connection if configured\n   - Verify rate limit configurations\n   - Review IP whitelisting\n\n3. **HMS Integration Issues**\n   - Verify HMS credentials\n   - Check patient consent status\n   - Review audit logs\n\n### Getting Help\n\n- **Health Check**: Visit `/health` endpoint\n- **Logs**: Check application logs in `/logs` directory\n- **Monitoring**: Use uptime monitor script\n- **Support**: Contact system administrator\n\n## License\n\nProprietary software for healthcare providers. All rights reserved.\n\n## Version\n\nCurrent version: 1.0.0\nLast updated: December 19, 2024","size_bytes":6738},"SUPPORT_SYSTEM.md":{"content":"# Erlessed Support System Documentation\n\n## Overview\n\nThe Erlessed Support System provides comprehensive user assistance through multiple channels including ticketing, real-time chat, role-specific documentation, and FAQ systems. The system is designed to reduce support burden while providing contextual help based on user roles and current workflows.\n\n## Components\n\n### Backend (FastAPI Service)\n- **Location**: `hms_integration/support_service.py`\n- **Port**: 8002\n- **Database**: SQLite with tickets, documentation, FAQ tables\n- **Features**: Ticket management, role-specific documentation, FAQ system\n\n### Frontend Components\n- **Support Widget**: Floating help button with contextual assistance\n- **Chat Support**: Simulated real-time chat with role-specific responses\n- **Support Dashboard**: Admin interface for ticket management\n\n### Integration Points\n- **Main App Routes**: Proxy routes for support service API\n- **Role-Based Content**: Customized help based on user permissions\n- **Dashboard Integration**: Support widgets embedded in all role dashboards\n\n## Role-Specific Features\n\n### Doctor Support\n- Patient queue management help\n- ICD-10 coding assistance\n- Prescription workflow guidance\n- Clinical documentation support\n\n### Pharmacist Support  \n- Drug verification processes\n- Benefit checking procedures\n- Dispensing workflow assistance\n- Inventory management guidance\n\n### Care Manager Support\n- Fraud detection analytics\n- Provider performance metrics\n- Claims oversight tools\n- Network management help\n\n### Insurer Support\n- Claim appeal procedures\n- Preauthorization workflows\n- Risk assessment tools\n- Decision review processes\n\n### Patient Support\n- Benefit understanding\n- Claims status tracking\n- Dependent management\n- Billing inquiries\n\n### Admin Support\n- User management procedures\n- System configuration\n- Performance monitoring\n- Security administration\n\n## API Structure\n\n### Ticket Management\n- Create, update, and track support tickets\n- Role-based ticket filtering\n- Response threading and updates\n- Priority and status management\n\n### Documentation System\n- Markdown-based content management\n- Role-specific content filtering\n- Category and tag organization\n- Search functionality\n\n### FAQ System\n- Question and answer management\n- Popularity tracking\n- Role-based filtering\n- Category organization\n\n## Chat Integration Options\n\n### Internal Chat System\n- Contextual keyword matching\n- Role-specific response generation\n- Quick action suggestions\n- Typing indicators and real-time feel\n\n### External Service Integration\n- **Tawk.to**: Live chat widget integration\n- **Crisp**: Customer messaging platform\n- **WhatsApp Business API**: Mobile chat support\n- **Custom webhook**: Connect to existing support systems\n\n## Content Management\n\n### Documentation Creation\n1. Add markdown content to documentation table\n2. Set role and category filters\n3. Configure tags for searchability\n4. Set display order and publication status\n\n### FAQ Management\n1. Create question-answer pairs with markdown formatting\n2. Categorize by functional area\n3. Track helpfulness metrics\n4. Maintain popularity-based ordering\n\n## Usage\n\n### End Users\n- Access help via floating support button on any dashboard\n- Search FAQ for immediate answers\n- Browse role-specific documentation guides\n- Create support tickets for complex issues\n- Use chat for real-time assistance\n\n### Support Staff\n- Monitor tickets through admin dashboard\n- Respond with contextual solutions\n- Update ticket status and priority\n- Track resolution metrics\n- Manage documentation content\n\n### Administrators\n- Configure role-specific content\n- Monitor support system metrics\n- Manage user access and permissions\n- Integrate external chat services\n- Update system documentation\n\n## Database Schema\n\n### Support Tickets\n- Comprehensive ticket tracking with status, priority, and assignment\n- User role association for contextual support\n- Response threading for conversation history\n- Audit trail with timestamps\n\n### Documentation\n- Markdown content with role-based filtering\n- Category and tag organization\n- Publication control and versioning\n- Usage tracking capabilities\n\n### FAQ Items\n- Question-answer pairs with markdown support\n- Role-specific and category filtering\n- Popularity metrics and helpful tracking\n- Ordering and priority management\n\n## Deployment\n\n### Development\n- Support service runs on port 8002\n- SQLite database for rapid development\n- Hot reload for content updates\n- Integrated with main application auth\n\n### Production\n- Containerized with main application\n- Persistent volume for SQLite database\n- Environment configuration for external services\n- Health monitoring and alerting\n\n## Security\n\n### Access Control\n- Role-based content filtering\n- Authenticated API access\n- Secure ticket data handling\n- Admin privilege verification\n\n### Data Protection\n- Ticket content security\n- Audit logging for all interactions\n- Secure file attachment handling\n- Privacy compliance measures\n\nThis support system provides comprehensive user assistance while maintaining security and performance standards appropriate for healthcare platform operations.","size_bytes":5156},"deploy.sh":{"content":"#!/bin/bash\n# Erlessed Healthcare Platform - Production Deployment Script\n\nset -e\n\necho \"🏥 Erlessed Healthcare Platform - Production Deployment\"\necho \"==================================================\"\n\n# Check if required tools are installed\ncheck_dependencies() {\n    local deps=(\"docker\" \"fly\" \"git\")\n    for dep in \"${deps[@]}\"; do\n        if ! command -v \"$dep\" &> /dev/null; then\n            echo \"❌ $dep is not installed. Please install it first.\"\n            exit 1\n        fi\n    done\n    echo \"✅ All dependencies are available\"\n}\n\n# Build and test the application\nbuild_and_test() {\n    echo \"📦 Building application...\"\n    npm run build\n    \n    echo \"🧪 Running health checks...\"\n    # Add your test commands here\n    # npm test\n    \n    echo \"🐳 Building Docker image...\"\n    docker build -t erlessed-healthcare:latest .\n    \n    echo \"✅ Build completed successfully\"\n}\n\n# Deploy to Fly.io\ndeploy_fly() {\n    echo \"🚀 Deploying to Fly.io...\"\n    \n    # Ensure fly app exists\n    if ! fly apps list | grep -q \"erlessed-healthcare\"; then\n        echo \"📱 Creating Fly.io app...\"\n        fly apps create erlessed-healthcare --region jnb\n    fi\n    \n    # Set secrets\n    echo \"🔐 Setting environment variables...\"\n    if [ -f \".env.production\" ]; then\n        while IFS= read -r line; do\n            if [[ $line =~ ^[A-Z_]+=.+ ]]; then\n                key=$(echo \"$line\" | cut -d'=' -f1)\n                value=$(echo \"$line\" | cut -d'=' -f2-)\n                fly secrets set \"$key=$value\" --app erlessed-healthcare\n            fi\n        done < .env.production\n    else\n        echo \"⚠️  .env.production file not found. Please set secrets manually:\"\n        echo \"   fly secrets set DATABASE_URL=your_db_url --app erlessed-healthcare\"\n        echo \"   fly secrets set OPENAI_API_KEY=your_key --app erlessed-healthcare\"\n        echo \"   fly secrets set JWT_SECRET=your_secret --app erlessed-healthcare\"\n    fi\n    \n    # Deploy\n    fly deploy --app erlessed-healthcare\n    \n    echo \"✅ Deployed to Fly.io successfully\"\n    fly open --app erlessed-healthcare\n}\n\n# Deploy to Render.com\ndeploy_render() {\n    echo \"🚀 Deploying to Render.com...\"\n    \n    # Check if render-cli is available\n    if ! command -v render &> /dev/null; then\n        echo \"📥 Installing Render CLI...\"\n        npm install -g @renderinc/cli\n    fi\n    \n    # Deploy using blueprint\n    render deploy --file render.yaml\n    \n    echo \"✅ Deployed to Render.com successfully\"\n}\n\n# Setup monitoring\nsetup_monitoring() {\n    echo \"📊 Setting up monitoring...\"\n    \n    # Start uptime monitor in background\n    if [ -f \"uptime-monitor.js\" ]; then\n        echo \"🔍 Starting uptime monitor...\"\n        MONITOR_URL=\"https://erlessed-healthcare.fly.dev\" node uptime-monitor.js &\n        echo $! > monitor.pid\n        echo \"✅ Uptime monitor started (PID: $(cat monitor.pid))\"\n    fi\n    \n    echo \"📈 Monitor your application at:\"\n    echo \"   Health: https://erlessed-healthcare.fly.dev/health\"\n    echo \"   Metrics: https://erlessed-healthcare.fly.dev/metrics\"\n}\n\n# Main deployment function\nmain() {\n    echo \"Select deployment target:\"\n    echo \"1) Fly.io (Recommended for Africa)\"\n    echo \"2) Render.com\"\n    echo \"3) Both\"\n    echo \"4) Local monitoring only\"\n    \n    read -p \"Enter choice (1-4): \" choice\n    \n    case $choice in\n        1)\n            check_dependencies\n            build_and_test\n            deploy_fly\n            setup_monitoring\n            ;;\n        2)\n            check_dependencies\n            build_and_test\n            deploy_render\n            setup_monitoring\n            ;;\n        3)\n            check_dependencies\n            build_and_test\n            deploy_fly\n            deploy_render\n            setup_monitoring\n            ;;\n        4)\n            setup_monitoring\n            ;;\n        *)\n            echo \"❌ Invalid choice\"\n            exit 1\n            ;;\n    esac\n    \n    echo \"\"\n    echo \"🎉 Deployment completed successfully!\"\n    echo \"\"\n    echo \"📋 Next steps:\"\n    echo \"   1. Configure your domain DNS\"\n    echo \"   2. Set up SSL certificates\"\n    echo \"   3. Configure backup schedules\"\n    echo \"   4. Set up alerts and monitoring\"\n    echo \"\"\n    echo \"🔗 Useful links:\"\n    echo \"   Application: https://erlessed-healthcare.fly.dev\"\n    echo \"   Health Check: https://erlessed-healthcare.fly.dev/health\"\n    echo \"   Metrics: https://erlessed-healthcare.fly.dev/metrics\"\n}\n\n# Cleanup function\ncleanup() {\n    echo \"🧹 Cleaning up temporary files...\"\n    if [ -f \"monitor.pid\" ]; then\n        kill $(cat monitor.pid) 2>/dev/null || true\n        rm monitor.pid\n    fi\n}\n\n# Set trap for cleanup\ntrap cleanup EXIT\n\n# Run main function\nmain \"$@\"","size_bytes":4731},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"fly.toml":{"content":"# Fly.io configuration for Erlessed Healthcare Platform\napp = \"erlessed-healthcare\"\nprimary_region = \"jnb\"  # Johannesburg for Africa coverage\n\n[build]\n  dockerfile = \"Dockerfile\"\n\n[env]\n  NODE_ENV = \"production\"\n  PORT = \"5000\"\n  TZ = \"Africa/Nairobi\"\n  PYTHONPATH = \"/app/hms_integration\"\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 5000\n  processes = [\"app\"]\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n    force_https = true\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"tls\", \"http\"]\n\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 25\n    soft_limit = 20\n\n  [[services.tcp_checks]]\n    interval = \"15s\"\n    timeout = \"2s\"\n    grace_period = \"10s\"\n\n  [[services.http_checks]]\n    interval = \"30s\"\n    timeout = \"5s\"\n    grace_period = \"10s\"\n    method = \"get\"\n    path = \"/health\"\n    protocol = \"http\"\n    tls_skip_verify = false\n\n# HMS Integration microservice\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8001\n  processes = [\"app\"]\n\n  [[services.ports]]\n    port = 8001\n    handlers = [\"http\"]\n\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 10\n    soft_limit = 5\n\n  [[services.http_checks]]\n    interval = \"60s\"\n    timeout = \"10s\"\n    grace_period = \"15s\"\n    method = \"get\"\n    path = \"/health\"\n    protocol = \"http\"\n\n[http_service]\n  internal_port = 5000\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 1\n  max_machines_running = 5\n\n[[vm]]\n  cpu_kind = \"shared\"\n  cpus = 1\n  memory_mb = 512\n\n[metrics]\n  port = 9091\n  path = \"/metrics\"","size_bytes":1577},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"aiofiles>=24.1.0\",\n    \"cryptography>=45.0.4\",\n    \"defusedxml>=0.7.1\",\n    \"fastapi>=0.115.13\",\n    \"httpx>=0.28.1\",\n    \"lxml>=5.4.0\",\n    \"pandas>=2.3.0\",\n    \"passlib>=1.7.4\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pydantic>=2.11.7\",\n    \"python-jose>=3.5.0\",\n    \"python-multipart>=0.0.20\",\n    \"sqlalchemy>=2.0.41\",\n    \"uvicorn>=0.34.3\",\n]\n","size_bytes":491},"render.yaml":{"content":"# Render.com Blueprint for Erlessed Healthcare Platform\nservices:\n  - type: web\n    name: erlessed-app\n    env: docker\n    dockerfilePath: ./Dockerfile\n    plan: starter\n    region: oregon\n    branch: main\n    healthCheckPath: /health\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: PORT\n        value: 5000\n      - key: TZ\n        value: Africa/Nairobi\n      - key: PYTHONPATH\n        value: /app/hms_integration\n      - key: DATABASE_URL\n        fromDatabase:\n          name: erlessed-postgres\n          property: connectionString\n      - key: REDIS_URL\n        fromService:\n          type: redis\n          name: erlessed-redis\n          property: connectionString\n      - key: OPENAI_API_KEY\n        sync: false\n      - key: ANTHROPIC_API_KEY\n        sync: false\n      - key: JWT_SECRET\n        generateValue: true\n      - key: STRIPE_SECRET_KEY\n        sync: false\n      - key: VITE_STRIPE_PUBLIC_KEY\n        sync: false\n      - key: SENTRY_DSN\n        sync: false\n\n  - type: pserv\n    name: erlessed-postgres\n    plan: starter\n    databaseName: erlessed\n    databaseUser: erlessed_user\n    region: oregon\n\n  - type: redis\n    name: erlessed-redis\n    plan: starter\n    region: oregon\n    maxmemoryPolicy: allkeys-lru\n\n  - type: cron\n    name: db-backup\n    env: docker\n    dockerfilePath: ./backup.Dockerfile\n    schedule: \"0 */6 * * *\"  # Every 6 hours\n    envVars:\n      - key: DATABASE_URL\n        fromDatabase:\n          name: erlessed-postgres\n          property: connectionString","size_bytes":1516},"replit.md":{"content":"# Erlessed Healthcare Management System\n\n## Overview\n\nErlessed is a comprehensive healthcare claims management system that combines AI-powered preauthorization, patient verification, prescription validation, and blockchain anchoring for healthcare claims. The system is designed to streamline healthcare operations across multiple care provider types including hospitals, clinics, and pharmacy chains.\n\n## System Architecture\n\nThe application follows a modern full-stack architecture with the following key components:\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with custom teal/medical theme using shadcn/ui components\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Build Tool**: Vite for fast development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy using session-based auth\n- **Session Storage**: PostgreSQL-backed sessions via connect-pg-simple\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL via Neon serverless\n- **ORM**: Drizzle ORM with type-safe queries\n- **Schema Location**: Shared schema definitions in `/shared/schema.ts`\n- **Migrations**: Drizzle Kit for database migrations\n\n## Key Components\n\n### Authentication System\n- **Multi-role Support**: front-office, doctor, pharmacist, care-manager, debtors-officer\n- **Domain-based Registration**: Automatic care provider detection from email domains\n- **Professional Validation**: Integration with medical/pharmacy board registration verification\n- **Enhanced Security**: Biometric verification capabilities for patient authentication\n\n### AI Integration\n- **OpenAI Integration**: GPT-4o for intelligent decision making\n- **Preauthorization Analysis**: AI-powered approval/denial decisions with confidence scoring\n- **Fraud Detection**: Pattern analysis for suspicious claims\n- **Prescription Validation**: Safety checks including drug interactions and dosage validation\n- **Chain-of-Thought Reasoning**: Transparent AI decision process with step-by-step explanations\n\n### Patient Management\n- **Biometric Verification**: Fingerprint scanning simulation for patient identity\n- **Insurance Integration**: Multi-provider support with benefit tracking\n- **Dependent Management**: Family member coverage tracking\n- **Clinical History**: Comprehensive medical record management\n\n### Claims Processing\n- **Real-time Processing**: Immediate claim validation and status updates\n- **Multi-stage Workflow**: Submission → AI Review → Approval/Denial → Payment\n- **Void Capability**: Claims can be voided with audit trails\n- **Blockchain Anchoring**: Immutable claim records via smart contracts\n\n### Pharmacy Integration\n- **Prescription Validation**: Weight-based, gender-sensitive, and interaction checking\n- **Benefit Category Matching**: Automatic formulary compliance\n- **Cost Calculation**: Real-time pricing with insurance coverage\n- **Safety Flagging**: Clinical decision support\n\n## Data Flow\n\n1. **Patient Registration**: Biometric enrollment with insurance verification\n2. **Clinical Encounter**: Patient queue management with triage prioritization\n3. **Service Delivery**: Real-time eligibility checking and preauthorization\n4. **Claims Submission**: Automated coding and AI review\n5. **Payment Processing**: Electronic adjudication with blockchain verification\n6. **Analytics**: Real-time dashboards and fraud monitoring\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless\n- **AI Services**: OpenAI API for GPT-4o integration\n- **Session Store**: PostgreSQL-backed sessions\n\n### Frontend Libraries\n- **UI Components**: Radix UI primitives with shadcn/ui styling\n- **Form Handling**: React Hook Form with Zod validation\n- **State Management**: TanStack Query v5\n- **Icons**: Lucide React icons\n\n### Backend Services\n- **Blockchain**: Simulated Web3 integration for claim anchoring\n- **Authentication**: Passport.js with bcrypt password hashing\n- **Validation**: Zod schemas for type-safe data validation\n\n## Deployment Strategy\n\n### Development Environment\n- **Platform**: Replit with Node.js 20 runtime\n- **Database**: PostgreSQL 16 module\n- **Hot Reload**: Vite HMR with Express middleware mode\n- **Port Configuration**: 5000 (internal) → 80 (external)\n\n### Production Build\n- **Frontend**: Vite build to `dist/public`\n- **Backend**: esbuild bundling with ESM output\n- **Asset Serving**: Express static file serving\n- **Environment**: Production mode with optimized bundles\n\n### Scaling Strategy\n- **Deployment Target**: Autoscale configuration\n- **Session Management**: Database-backed sessions for horizontal scaling\n- **Static Assets**: CDN-ready build output\n- **Database**: Serverless PostgreSQL with connection pooling\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n**January 8, 2025 - Modern Dashboard Component Architecture:**\n- Implemented component-based architecture for all modern dashboards per user specifications\n- Created standardized components: Sidebar, WelcomeCard, QuickStats, RecentClaims, QuickActions\n- Applied consistent dark gradient theme (#0e0d3c → #1b1150 → #2a1a5e) across all dashboards\n- Updated Modern Admin Dashboard with new component structure and admin-specific metrics\n- Updated Modern Doctor Dashboard with patient queue view and medical quick actions\n- Updated Modern Pharmacy Dashboard with prescription management and verification actions\n- All dashboards now feature role-specific sidebars with Erlessed branding (teal/blue gradient)\n- Maintained authentication flow with test users (admin/test123, doctor1/test123, pharmacist1/test123)\n\n**July 3, 2025 - Authentication & Dashboard Navigation Updates:**\n- Fixed PostgreSQL connection error by properly configuring WebSocket for Neon database in db.ts\n- Resolved session persistence issues with proper cookie configuration and serialization/deserialization\n- Updated dashboard navigation to use modern design paths (/modern-doctor, /modern-pharmacy, etc.) per user request\n- Updated auth hook and dashboard-toggle component to use modern dashboard routes\n- Created test users for all roles with password \"test123\": admin, testuser, doctor1, pharmacist1, frontoffice1, debtors1, caremanager1, insurer1\n- Added dedicated admin user (admin/test123) for admin dashboard access\n- Verified authentication flow works correctly with session cookies and proper role-based redirects\n\n**July 3, 2025 - Erlessed Theme Color Update:**\n- Updated theme colors to match the official Erlessed logo colors\n- Primary dark teal: #265651 (from logo's medical cross)\n- Secondary light teal: #6BBDB4 (from logo's lighter accent)\n- Updated all modern dashboards (Admin, Doctor, Pharmacy) with new color scheme\n- Applied consistent gradient: from-[#265651] to-[#6BBDB4] for branding\n- Updated active menu states and hover effects with new teal colors\n- Maintained dark gradient background (#0a0a2e → #1a1150 → #2a1a5e) for contrast\n- Fixed DOM nesting errors by replacing <a> with <div> in Link components\n\n**July 4, 2025 - Light Theme Dashboard Redesign:**\n- Created new light-themed versions of all major dashboards matching the login panel style\n- Applied soft gradient background: light mint to light teal (#e8f5f0 → #f0faf7 → #d1e7e0)\n- Redesigned Admin Dashboard with white cards, subtle shadows, and Erlessed brand colors\n- Redesigned Doctor Dashboard with patient queue, vital signs display, and medical quick actions\n- Redesigned Pharmacy Dashboard with prescription validation, system status, and inventory management\n- Redesigned Debtors Dashboard with claim batch management, KPI tracking, and pending diagnosis alerts\n- All dashboards now feature consistent light theme with professional healthcare aesthetic\n- Updated navigation to use light-themed dashboard versions (-light.tsx files)\n\n**July 4, 2025 - Focused Claims Interface with Dark Theme:**\n- Created focused claims interface (/focused-claims) with dark gradient theme\n- Applied dark gradient background: from-[#0e0d3c] via-[#1b1150] to-[#2a1a5e]\n- Built role-based Sidebar component with specific menu items for doctor, pharmacy, and front-office roles\n- Implemented informative Dashboard component clarifying Erlessed's scope as claims platform\n- Added clear notes about what Erlessed handles vs what remains in hospital systems\n- Listed platform limitations: no inventory management, triage booking, patient registration, or prescription writing\n- Emphasized Erlessed's focus on claims processing and clearinghouse functionality only\n\n**June 18, 2025 - Comprehensive 6-Role Dashboard System Implementation:**\n- **Doctor/Clinician Dashboard** (/doctor): Patient queue with triage vitals, consultation workflow with ICD-10 AI suggestions, smart prescription builder with safety validation, lab order forms with preauthorization status, fingerprint/OTP sign-off capability\n- **Pharmacy Dashboard** (/pharmacy-dashboard): Prescription validation with drug interaction checks, benefit tracking and depletion warnings, medication dispensing workflow, preauthorization validation, real-time copay calculation\n- **Care Manager Dashboard** (/care-manager-dashboard): Cross-network claims oversight, fraud pattern detection with AI scoring, provider performance analytics, cost benchmarking between facilities, referral success rate tracking, copay policy management\n- **Insurer Dashboard** (/insurer): AI-assisted preauthorization decisions with confidence scoring, real-time claims inflow monitoring, scheme usage tracking with burnout alerts, appeals management workflow, automated approval thresholds\n- **Patient Dashboard** (/patient): Claims history with appeal functionality, family dependent management, benefit utilization tracking with visual progress bars, preauthorized services status, cost estimates by scheme type\n- **Admin Dashboard** (/admin): Platform user management, care provider registration, AI feature configuration with threshold controls, system performance monitoring, registration validation API testing\n\n**Database Enhancements:**\n- Added comprehensive tables: lab_orders, patient_queue, consultations, insurance_schemes, benefit_usage, dispensing_records, claim_appeals\n- Enhanced user schema with care provider relationships and professional verification\n- Implemented audit logging and fraud detection structures\n\n**AI Integration Features:**\n- Demo mode with realistic mock responses for all AI features\n- Configurable confidence thresholds for automated decisions\n- Chain-of-thought reasoning display for transparency\n- Fraud pattern detection with risk scoring\n\n**Kenya Clinical Registration Board Integration:**\n- Professional license validation API with `/verify-registration` endpoint\n- KMPDC, Clinical Officers Council, and PPB board integration\n- 15 realistic practitioner records with proper Kenyan naming conventions\n- Comprehensive validation including license expiry, suspension status\n- Returns 403 for invalid/inactive/suspended registrations\n- Admin Dashboard registration validator with testing interface\n- Real-time verification with detailed practitioner information\n\n**Advanced Analytics and Prognosis Modeling:**\n- AI-powered prognosis models for diabetes, cardiovascular, cancer, and mental health\n- Individual patient outcome tracking with predicted vs actual results\n- Population health trend analysis with incidence and recovery rates\n- Multi-dimensional risk assessment with radar charts and scoring\n- Real-time model accuracy tracking and confidence scoring\n- Comprehensive outcome metrics with treatment plan effectiveness\n- Risk factor analysis with severity grading and recommendations\n\n**Secure FastAPI HMS Integration Microservice:**\n- Comprehensive microservice for hospital management system integration\n- Support for OpenMRS, AfyaPro, and custom EMR systems\n- REST API and FHIR protocol compatibility with OAuth2/token authentication\n- Real-time data synchronization for vitals, labs, prescriptions, and diagnoses\n- Patient consent management with fingerprint/OTP verification\n- CSV/XML file upload fallback for offline data import\n- Secure database mapping to Erlessed PostgreSQL schema\n- Audit logging and compliance tracking for all sync operations\n\n**Comprehensive Legal Framework for Kenyan Compliance:**\n- Complete Terms of Service for healthcare providers and insurers (21 sections)\n- Comprehensive Privacy Policy with Data Protection Act 2019 compliance (18 sections)\n- Detailed Patient Consent and Data Access Statement (16 sections with 5 consent forms)\n- AI-powered decision making disclaimers and patient rights protection\n- Biometric data special protections with AES-256 encryption requirements\n- SHA (Social Health Authority) billing guidelines integration and real-time compliance checking (replacing NHIF)\n- Professional license verification requirements (KMPDC, PPB, Clinical Officers Council)\n- Cross-border data transfer safeguards and adequacy decision compliance\n\n**December 19, 2024 - Legal Compliance Framework Completion:**\n- Created comprehensive 4-document legal framework ensuring full Kenyan healthcare compliance\n- Updated all references from NHIF to SHA (Social Health Authority) per current Kenyan healthcare system structure\n- Implemented Data Protection Act 2019 complete compliance with all 45 articles covered\n- Added AI transparency requirements with human review rights and explainable decision-making\n- Enhanced biometric data protections with AES-256 encryption and separate consent mechanisms\n- Established professional license verification framework for KMPDC, PPB, and Clinical Officers Council\n- Created patient consent management system with 5 granular consent types and withdrawal mechanisms\n- Documentation includes Terms of Service, Privacy Policy, Patient Consent Statement, and Compliance Summary\n\n**December 19, 2024 - Production Deployment Infrastructure:**\n- Implemented comprehensive Docker containerization with multi-stage builds for frontend and FastAPI HMS integration\n- Created Fly.io and Render.com deployment configurations with health checks and auto-scaling\n- Added production security middleware: Helmet.js, CORS, rate limiting with Redis backend, and compression\n- Implemented enhanced health monitoring with database connectivity checks and Prometheus metrics endpoint\n- Created automated PostgreSQL backup system with 6-hour intervals and 7-day retention\n- Added graceful shutdown handling with SIGTERM/SIGINT support and connection cleanup\n- Deployed uptime monitoring script with multi-service health checks and alert notifications\n- Enhanced error handling and logging for production debugging and monitoring\n\n**December 19, 2024 - Comprehensive Support Module Implementation:**\n- Built FastAPI support service (port 8002) with SQLite database for tickets, documentation, and FAQ management\n- Created interactive support widget with role-specific quick help, FAQ browser, and ticket creation interface\n- Implemented contextual chat support with simulated real-time assistance and role-based automated responses\n- Developed admin support dashboard for ticket management, response tracking, and performance analytics\n- Added role-specific documentation system with markdown content, category filtering, and search functionality\n- Integrated support widgets into all user dashboards with contextual help based on user roles and workflows\n- Created comprehensive documentation system with deployment guides and external chat integration options\n\n**December 19, 2024 - Universal Logout Functionality Implementation:**\n- Implemented comprehensive logout functionality across all 6 role-based dashboards (Doctor, Pharmacist, Care Manager, Insurer, Patient, Admin)\n- Created reusable LogoutButton component with dropdown variant showing session timeout and user information\n- Added server-side `/api/logout` route with session destruction and cookie cleanup\n- Implemented 15-minute auto-logout functionality for users handling sensitive claims and patient data\n- Added activity tracking with inactivity warnings and session timeout notifications\n- Enhanced authentication system with comprehensive session management and security features\n\n**December 20, 2024 - Mobile App Implementation for Field Workers and Patient Self-Service:**\n- Built comprehensive mobile field worker application (`/mobile-field-worker`) with responsive design\n- Features include: scheduled patient visits with GPS navigation, real-time vitals collection, photo documentation, emergency contacts\n- Implemented patient self-service mobile portal (`/mobile-patient-portal`) with full healthcare management\n- Mobile portal includes: appointment scheduling, prescription management, claims tracking, health metrics dashboard\n- Created mobile navigation component with role-based menu systems and quick access widgets\n- Added mobile-responsive layouts with touch-friendly interfaces optimized for healthcare workflows\n- Integrated emergency services access and supervisor communication for field workers\n- Patient portal features benefit tracking, medication reminders, and health score visualization\n\n**December 20, 2024 - Enhanced Professional Registration System:**\n- Implemented comprehensive two-step onboarding flow (`/signup`) with professional validation\n- Step 1: Basic information collection (name, email, password) with care provider auto-detection\n- Step 2: Role selection with clinical/non-clinical differentiation and automatic facility assignment\n- Added Kenya regulatory board integration (KMPDC, COC, PPB) with license verification for clinical roles\n- Non-clinical roles (Billing Officer, Care Manager, Front Office, Insurer Officer) skip regulatory validation\n- Integrated care provider domain detection for major Kenyan healthcare institutions\n- Role-based dashboard redirection after successful registration\n- Enhanced form validation with real-time feedback and professional license verification stub\n\n**December 20, 2024 - Flexible Email/Username Authentication System:**\n- Updated login form to accept single \"Email or Username\" input field\n- Backend automatically detects @ symbol to determine authentication method\n- Enhanced LocalStrategy to support both getUserByEmail and getUserByUsername queries\n- Added comprehensive error handling with inline error messaging\n- Created test user for authentication validation (username: testuser, email: test@aku.edu)\n- Implemented proper session management and login response formatting\n- Added visual feedback for authentication attempts with Erlessed teal/blue theming\n\n**December 20, 2024 - Session Management and Logout System:**\n- Fixed session persistence issues with proper cookie configuration and 24-hour expiration\n- Enhanced session serialization/deserialization with detailed logging and type handling\n- Implemented logout functionality accessible from header (dropdown) and sidebar\n- Added role-based dashboard redirection after successful authentication\n- Session management now properly maintains authentication state across all dashboard pages\n- Complete authentication flow: login → role-based redirect → persistent session → logout capability\n\n**July 21, 2025 - Critical XML Security Vulnerability Fix:**\n- Identified and resolved XML External Entity (XXE) injection vulnerability in HMS integration microservice\n- Replaced vulnerable xml.etree.ElementTree with secure defusedxml library for XML file processing\n- Fixed security risk in /sync/file/vitals and /sync/file/labs endpoints that process XML uploads\n- Applied minimal security patch without breaking existing functionality\n- Vulnerability could have allowed local file disclosure, SSRF attacks, and XML bomb DoS\n- Production deployment requires testing of XML file upload functionality\n\n**June 20, 2025 - Modern UI Redesign with Teal Healthcare Theme:**\n- Rebuilt entire Erlessed platform with modern, clean design using teal (#14B8A6) and healthcare blue (#3B82F6) brand colors\n- Implemented comprehensive SharedLayout component with session timer, user avatar dropdown, and role-based sidebar navigation\n- Created modern dashboards for all 6 roles: Doctor (/modern-doctor), Pharmacy (/modern-pharmacy), Care Manager (/modern-care-manager), Insurer (/modern-insurer), Patient (/modern-patient), Admin (/modern-admin)\n- Enhanced visual hierarchy with card-based layouts, priority color coding (high: red, normal: blue, low: green), and smooth animations\n- Integrated advanced features: reasoning chains, benefit progress rings, fraud detection heatmaps, cost calculators, and real-time health scoring\n- Added modern authentication page (/modern-auth) with brand showcase, quick login options for demo access, and responsive mobile design\n- Removed all \"AI\" terminology from user interface while maintaining intelligent decision support functionality\n- Implemented proper 2xl rounded corners, minimal shadows, and Inter font for professional healthcare aesthetic\n\n**June 21, 2025 - Biometric Verification and Insurance Claim Form Generation:**\n- Added comprehensive biometric verification system with fingerprint scanning and SMS OTP verification\n- Implemented insurer-specific claim form generation using PDFMake with support for CIC, AAR, and SHA templates (NHIF replaced by SHA)\n- Enhanced pharmacy dashboard with patient identity verification before dispensing medications\n- Integrated claim form generator with auto-populated patient, provider, and service data from current encounters\n- Added front office dashboard (/modern-front-office) for appointment management, walk-in registration, and insurance verification\n- Enhanced doctor dashboard with patient verification and claim generation workflow integration\n- Claim forms include proper insurer branding, patient demographics, clinical information, service details, and signature sections\n- All claim generation activities are logged and linked to current patient encounters for audit trails\n\n**June 21, 2025 - NHIF to SHA System Update:**\n- Updated all platform references from NHIF to SHA (Social Health Authority) to reflect current Kenyan healthcare system\n- Modified claim form templates, member ID formats, and insurer selection options throughout all dashboards\n- Updated biometric verification system to use SHA member identifiers and branding\n- Ensured compliance with current Social Health Authority billing guidelines and procedures\n- All user interfaces now display SHA terminology instead of deprecated NHIF references\n\n**June 21, 2025 - Pharmacy Dashboard UI Enhancement:**\n- Renamed Quick Actions for improved workflow: \"Verify Patient\" → \"Preauthorization\" → \"Validate Prescription\" → \"Secure Claim Log\"\n- Updated System Status terminology: \"Intelligence Engine\", \"System Database\", \"Smart Contract Ledger\"\n- Added professional iconography with fingerprint, shield, file-check, and shield-lock icons\n- Implemented rounded buttons with teal color scheme (#14B8A6) for touch-friendly interface\n- Added tooltip for \"Secure Claim Log\" explaining blockchain anchoring functionality\n- Enhanced mobile responsiveness and consistent healthcare branding throughout interface\n\n**June 22, 2025 - Advanced AI Integration with DeepSeek and Mistral 7B:**\n- Integrated DeepSeek API for chain of thought reasoning across healthcare decisions\n- Added Mistral 7B API for comprehensive healthcare treatment logic and clinical support\n- Created comprehensive DeepSeekService with preauthorization analysis, prescription safety validation, and fraud detection with transparent reasoning chains\n- Developed MistralHealthcareService for treatment plan generation, differential diagnosis analysis, complex drug interaction assessment, and patient education content\n- Enhanced pharmacy dashboard with ChainOfThoughtDisplay component showing expandable reasoning steps, confidence scoring, and supporting evidence\n- Updated all existing API endpoints (/api/preauth, /api/pharmacy/validate) to use AI reasoning with fallback to existing OpenAI integration\n- Added new endpoints: /api/ai/treatment-plan, /api/ai/differential-diagnosis, /api/ai/drug-interactions, /api/ai/patient-education\n- Created TreatmentPlanDisplay component for comprehensive treatment visualization with clinical reasoning, alternative treatments, and patient education\n- All AI-powered decisions now include transparency indicators and confidence scoring for clinical decision support\n\n**June 22, 2025 - Dashboard Navigation Enhancement:**\n- Implemented comprehensive DashboardToggle component for seamless navigation between role-based dashboards\n- Added recent dashboard tracking with localStorage persistence for quick access to previously used dashboards\n- Created responsive design with full dashboard selector for desktop and compact version for mobile\n- Integrated quick back button functionality to return to previous dashboard with one click\n- Enhanced SharedLayout header to include dashboard navigation controls with role-based color coding\n- Added dashboard descriptions and role badges for better user orientation and context switching\n\n**June 22, 2025 - Comprehensive Debtors Dashboard Implementation:**\n- Created dedicated Debtors Dashboard for hospital accounts department to manage medical insurance claims\n- Implemented claim batch tracking with insurer-specific grouping (SHA, CIC, AAR) and submission status monitoring\n- Added pending diagnosis reminders panel with doctor notification system for incomplete claims\n- Integrated biometric verification system for secure claim batch submissions with fingerprint and SMS OTP options\n- Built void claims analysis (premium feature) with categorization by error type and reconciliation tracking\n- Added comprehensive KPI tracking: total claims, clean claims percentage, pending diagnosis count, expected reimbursements\n- Implemented role-based access controls for debtor users with care provider auto-mapping via email domain\n- Created export and submission functionality with PDF/Excel report generation and insurer feedback reconciliation\n- Added comprehensive API endpoints for claims batches, pending diagnosis tracking, reminder notifications, and secure batch submissions\n\n**June 22, 2025 - Verification Audit Log Implementation:**\n- Built premium Verification Audit Log panel for comprehensive biometric verification tracking\n- Implemented audit table with patient name, service, billed by, verification status, and timestamp columns\n- Added advanced filtering by date range, department (pharmacy, triage, lab), and verification status\n- Created status badge system: Verified (green), Missing (red), Time Mismatch (orange), Pending (yellow)\n- Integrated time difference tracking with alerts for verification performed after billing\n- Added detailed audit trail viewer with blockchain hash display and verification metadata\n- Implemented premium access controls with upgrade prompts for basic users\n- Created analytics dashboard with verification rates, missing verification counts, and time mismatch statistics\n- Added CSV/PDF export functionality for audit reporting and compliance documentation\n- API endpoints for verification audit data with filtering, search, and premium status checking\n\n**June 22, 2025 - Restored Debtors Authentication System:**\n- Restored authentication requirements for debtors dashboard access\n- Protected routes now require proper debtors role authentication\n- Verification audit page requires authentication and role-based access control\n- Maintained all existing functionality: claim batches, KPI tracking, verification audit, quick actions\n- Navigation between dashboard and audit pages with proper authentication flow\n- Both /debtors-dashboard and /verification-audit now require valid debtors authentication\n\n**June 24, 2025 - Comprehensive Care Manager Dashboard Implementation:**\n- Built comprehensive Care Manager dashboard (/modern-care-manager) with cross-network claims oversight and provider analytics\n- Implemented header analytics tools with notifications, timeframe selection, and export capabilities\n- Added sidebar navigation: Claims Overview, Fraud Alerts (with live count), Cost Trends, Referral Patterns, Provider Benchmarks, Advanced Analytics\n- Created KPI tracking cards: Gross Claims (KES 24.8M), Net Claims (KES 22.1M), Void Claims (247), and Fraud Risk (3.2%)\n- Built intelligence-flagged claims table with severity badges, risk scoring, pattern flags, and override actions\n- Integrated cross-provider cost trends analysis with 30-day rolling averages and benefit category burn rate tracking\n- Added real-time provider benchmarking with survival rates, patient satisfaction, complication rates, and quality metrics\n- Implemented premium analytics features: real-time cost visibility, procedure referral analysis, and survival rate analytics\n- Created policy fit analysis for inpatient and procedure referrals with cost-to-policy compliance tracking\n- Added comprehensive search and filtering capabilities with provider-specific views and timeframe selection\n\n**June 25, 2025 - Comprehensive Admin Dashboard Implementation:**\n- Built management-focused Admin dashboard (/modern-admin) with complete system oversight and user management\n- Implemented header with global settings, audit log shortcuts, and user avatar with logout functionality\n- Added sidebar navigation: User Management, Care Providers, License Validation, Audit Logs, Global Settings\n- Created system health monitoring with color-coded status for Database, Intelligence Engine, and Blockchain components\n- Built user management table with email, role, license verification status, and comprehensive search/filtering\n- Implemented care provider cards showing compliance status, activity metrics, approval rates, and accreditation details\n- Added license validation API test panel with input for registration number and cadre, returning detailed practitioner information\n- Integrated domain-based auto-mapping logic for users with official healthcare institution emails\n- Created comprehensive user status tracking (active, suspended, pending) with role-based access controls\n- Added care provider performance analytics with compliance ratings, user counts, and claim statistics\n\n**June 25, 2025 - Medical Insurance Claims Validator Integration:**\n- Integrated structured medical insurance claims validator template into existing preauthorization API endpoints\n- Enhanced DeepSeek service with validateInsuranceClaim method using the provided template format\n- Created dedicated /api/claims/validate endpoint for standalone claims validation testing\n- Built comprehensive ClaimsValidator component with form inputs for patient demographics, diagnosis, service details, and insurance information\n- Added claims validation test panel to Admin dashboard for system testing and validation\n- Enhanced preauthorization workflow to use both claims validation and traditional analysis for comprehensive decision-making\n- Implemented structured JSON response format with decision, confidence score, reason, and reasoning chain\n- Added audit logging for all claims validation activities with full request/response tracking\n- Claims validator supports multiple insurance schemes (SHA, CIC, AAR, Jubilee) and policy plan types\n- Real-time validation results display with confidence scoring, reasoning steps, and metadata tracking\n\n**June 26, 2025 - Claim Form Submission and Generation System:**\n- Implemented comprehensive claim form submission endpoint (/api/submit-claim) with insurer-specific template selection\n- Created claim-forms.ts module with PDFMake integration for generating professional PDF claim forms\n- Built form templates for multiple insurers: SHA, CIC, AAR, Jubilee, AON Minet with unique branding and layouts\n- Developed ClaimFormGenerator component with patient demographics, insurance details, services table, and provider information\n- Added automatic template selection based on insurer name with fallback to SHA template\n- Implemented comprehensive form validation with required field checking per insurer template\n- Created services management with quantity, unit cost, and total cost calculations\n- Added PDF generation with professional formatting including headers, patient info, medical details, services table, and signature sections\n- Integrated audit logging for all claim form generation activities with complete metadata tracking\n- Added file download functionality with automatic cleanup of temporary PDF files\n\n**June 26, 2025 - Decision Feedback and Tracking System:**\n- Created comprehensive decision logs table in database schema for tracking AI decisions and outcomes\n- Implemented feedback endpoint (/api/feedback) allowing care managers to update final outcomes and appeal results\n- Built DecisionFeedbackPanel component with decision logs list, filtering by type, and feedback form\n- Added decision log creation in preauthorization workflow to track all AI decisions with confidence scores\n- Enhanced storage interface with decision log CRUD operations and feedback updates\n- Created detailed decision tracking with original decision, final outcome, appeal outcome, and reviewer notes\n- Implemented comprehensive audit trail for all feedback updates with metadata tracking\n- Added decision log filtering by type: preauth, pharmacy_validation, claims_validation, fraud_detection\n- Built visual feedback interface with decision icons, confidence badges, and outcome status tracking\n- Integrated decision feedback panel into Admin dashboard for comprehensive decision oversight\n\n**June 27, 2025 - Biometric Verification with Insurer Selection:**\n- Implemented comprehensive BiometricVerification component with realistic fingerprint scanning simulation\n- Built InsuranceSelectorModal for patients with multiple active insurance policies\n- Created patient verification endpoint (/api/verify-patient/:patientId) with biometric simulation\n- Added automatic generation of multiple insurance policies (SHA, CIC, AAR) based on patient data\n- Integrated policy selection workflow with session storage for claim form pre-population\n- Enhanced ClaimFormGenerator with pre-selected insurer and service data population\n- Built BiometricClaimFlow component combining verification and claim submission workflows\n- Added comprehensive audit logging for all biometric verification activities\n- Created visual progress indicator for verification to claim form workflow\n- Implemented secure policy selection with coverage amounts, expiry dates, and plan types\n\n**June 27, 2025 - Enhanced Schema and Biometric Integration:**\n- Enhanced PostgreSQL schema with fingerprintId field for advanced biometric tracking\n- Added claim_services table for detailed service breakdown per claim (consultation, lab, pharmacy, procedure)\n- Integrated FingerprintJS2 library for realistic device fingerprinting and biometric simulation\n- Built comprehensive BiometricService utility with progressive scanning simulation\n- Enhanced claims schema with insurerName, schemeName, and isActive fields for better tracking\n- Created storage methods for claim services CRUD operations and active claims filtering\n- Implemented EnhancedClaimTracker component with tabbed interface for active/completed claims\n- Added detailed claim service breakdown with status tracking, progress indicators, and cost analysis\n- Enhanced patient verification endpoint with real biometric hash validation and device fingerprinting\n- Created comprehensive audit logging for biometric scan attempts and verification sessions\n\n**June 27, 2025 - Front Office/Front Desk Integration:**\n- Created comprehensive front-desk page accessible from both /front-desk and /front-office routes\n- Implemented dual verification methods: fingerprint scanning and SMS OTP with progressive simulation\n- Built multi-insurer policy selection for patients with multiple active insurance coverage\n- Added cross-facility session detection and continuation modal for seamless patient care transitions\n- Enhanced database with activeSessions table for multi-facility patient session tracking\n- Integrated front office workflow with patient verification, insurer selection, and claim tracking\n- Created step-by-step verification process with visual progress indicators and responsive design\n- Added comprehensive audit logging for all front office patient verification activities\n\n**July 1, 2025 - Lab Order Cancellation with Review Consultation Workflow:**\n- Enhanced ActiveLabOrders component with comprehensive cancellation workflow including justification prompts\n- Implemented POST /api/lab-orders/cancel API endpoint with labId, doctorId, reason parameters for audit trails\n- Added cancelLabOrder storage method to update lab status to 'cancelled' with comprehensive metadata tracking\n- Integrated review consultation workflow: after lab cancellation, prompts \"Initiate review consultation?\"\n- Created createReviewConsultation functionality that links new consultation to same patient & insurer for care continuity\n- Implemented POST /api/consultations/review endpoint for creating review consultations with cancelled lab context\n- Enhanced doctor consultation sidebar with real-time lab order management and cancellation capabilities\n- Added AlertDialog components for review consultation prompts with loading states and error handling\n- Review consultations maintain patient-insurer linkage ensuring billing approval from prior consultation\n- Complete audit trail for all cancellation activities with reason logging and timestamp tracking\n\n## Changelog\n\n- June 18, 2025. Initial setup\n- June 18, 2025. Comprehensive 6-role dashboard system with AI-powered workflows\n- December 19, 2024. Production-ready deployment infrastructure with monitoring and security\n- December 19, 2024. Complete support module with ticketing, chat, and role-specific documentation","size_bytes":37958},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        teal: {\n          primary: \"hsl(var(--teal-primary))\",\n          secondary: \"hsl(var(--teal-secondary))\",\n          dark: \"hsl(var(--teal-dark))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2953},"uptime-monitor.js":{"content":"// Uptime monitoring script for Erlessed Healthcare Platform\nconst https = require('https');\nconst http = require('http');\n\nclass UptimeMonitor {\n  constructor(config) {\n    this.config = {\n      interval: 60000, // 1 minute\n      timeout: 10000,  // 10 seconds\n      retries: 3,\n      ...config\n    };\n    this.services = [\n      {\n        name: 'Main Application',\n        url: `${this.config.baseUrl}/health`,\n        critical: true\n      },\n      {\n        name: 'HMS Integration',\n        url: `${this.config.baseUrl}:8001/health`,\n        critical: false\n      },\n      {\n        name: 'API Endpoints',\n        url: `${this.config.baseUrl}/api/user`,\n        critical: true,\n        expectedStatus: [200, 401] // 401 is expected for unauthenticated requests\n      }\n    ];\n    this.alerts = [];\n  }\n\n  async checkService(service) {\n    return new Promise((resolve) => {\n      const url = new URL(service.url);\n      const client = url.protocol === 'https:' ? https : http;\n      \n      const startTime = Date.now();\n      \n      const req = client.request({\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname + url.search,\n        method: 'GET',\n        timeout: this.config.timeout,\n        headers: {\n          'User-Agent': 'Erlessed-Monitor/1.0'\n        }\n      }, (res) => {\n        const responseTime = Date.now() - startTime;\n        const expectedStatuses = service.expectedStatus || [200];\n        const isHealthy = expectedStatuses.includes(res.statusCode);\n        \n        resolve({\n          service: service.name,\n          url: service.url,\n          status: isHealthy ? 'UP' : 'DOWN',\n          statusCode: res.statusCode,\n          responseTime,\n          timestamp: new Date().toISOString(),\n          critical: service.critical\n        });\n      });\n\n      req.on('error', (error) => {\n        resolve({\n          service: service.name,\n          url: service.url,\n          status: 'DOWN',\n          error: error.message,\n          responseTime: Date.now() - startTime,\n          timestamp: new Date().toISOString(),\n          critical: service.critical\n        });\n      });\n\n      req.on('timeout', () => {\n        req.destroy();\n        resolve({\n          service: service.name,\n          url: service.url,\n          status: 'DOWN',\n          error: 'Request timeout',\n          responseTime: this.config.timeout,\n          timestamp: new Date().toISOString(),\n          critical: service.critical\n        });\n      });\n\n      req.end();\n    });\n  }\n\n  async start() {\n    console.log(`Starting uptime monitoring for Erlessed Healthcare Platform`);\n    console.log(`Monitoring ${this.services.length} services every ${this.config.interval/1000}s`);\n    \n    const previousStates = new Map();\n    \n    const check = async () => {\n      try {\n        const results = await this.checkAllServices();\n        \n        for (const result of results) {\n          const previousState = previousStates.get(result.service);\n          const statusIcon = result.status === 'UP' ? '✅' : '❌';\n          console.log(`${statusIcon} ${result.service}: ${result.status} (${result.responseTime}ms)`);\n          \n          if (previousState && previousState !== result.status) {\n            await this.sendAlert(result, result.status);\n          }\n          \n          previousStates.set(result.service, result.status);\n        }\n        \n        const upServices = results.filter(r => r.status === 'UP').length;\n        console.log(`Overall Status: ${upServices}/${results.length} services up\\n`);\n        \n      } catch (error) {\n        console.error('Monitoring error:', error);\n      }\n      \n      setTimeout(check, this.config.interval);\n    };\n    \n    check();\n  }\n\n  async checkAllServices() {\n    const results = [];\n    \n    for (const service of this.services) {\n      let attempts = 0;\n      let result;\n      \n      while (attempts < this.config.retries) {\n        result = await this.checkService(service);\n        if (result.status === 'UP') break;\n        attempts++;\n        if (attempts < this.config.retries) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      }\n      \n      results.push({ ...result, attempts: attempts + 1 });\n    }\n    \n    return results;\n  }\n\n  async sendAlert(service, status) {\n    const alert = {\n      service: service.service,\n      status,\n      timestamp: new Date().toISOString(),\n      critical: service.critical\n    };\n\n    console.error(`ALERT: ${service.service} is ${status}`, alert);\n    this.alerts.push(alert);\n    \n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(-100);\n    }\n  }\n}\n\nmodule.exports = UptimeMonitor;\n\nif (require.main === module) {\n  const monitor = new UptimeMonitor({\n    baseUrl: process.env.MONITOR_URL || 'http://localhost:5000'\n  });\n  \n  monitor.start();\n}","size_bytes":4842},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"hms_integration/database_mapper.py":{"content":"\"\"\"\nDatabase mapper for HMS integration with Erlessed PostgreSQL schema\nMaps HMS data structures to existing Erlessed database tables\n\"\"\"\n\nimport asyncio\nimport asyncpg\nfrom typing import List, Dict, Any, Optional\nfrom datetime import datetime\nimport json\nimport logging\nfrom main import VitalSigns, LabResult, Prescription, Diagnosis\nimport os\n\nlogger = logging.getLogger(__name__)\n\nclass ErlessedDatabaseMapper:\n    \"\"\"Maps HMS data to Erlessed database schema\"\"\"\n    \n    def __init__(self):\n        self.database_url = os.getenv(\"DATABASE_URL\")\n        if not self.database_url:\n            raise ValueError(\"DATABASE_URL environment variable is required\")\n    \n    async def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        return await asyncpg.connect(self.database_url)\n    \n    async def store_vitals(self, vitals: List[VitalSigns]) -> int:\n        \"\"\"Store vital signs in patient_queue table with triage data\"\"\"\n        stored_count = 0\n        \n        conn = await self.get_connection()\n        try:\n            for vital in vitals:\n                # Check if patient exists\n                patient_query = \"SELECT id FROM patients WHERE patient_id = $1\"\n                patient_result = await conn.fetchrow(patient_query, vital.patient_id)\n                \n                if not patient_result:\n                    logger.warning(f\"Patient {vital.patient_id} not found, skipping vital signs\")\n                    continue\n                \n                patient_db_id = patient_result['id']\n                \n                # Create triage data structure\n                triage_data = {\n                    \"vital_signs\": {\n                        \"systolic_bp\": vital.systolic_bp,\n                        \"diastolic_bp\": vital.diastolic_bp,\n                        \"heart_rate\": vital.heart_rate,\n                        \"temperature\": vital.temperature,\n                        \"respiratory_rate\": vital.respiratory_rate,\n                        \"oxygen_saturation\": vital.oxygen_saturation,\n                        \"weight\": vital.weight,\n                        \"height\": vital.height,\n                        \"bmi\": vital.bmi\n                    },\n                    \"recorded_by\": vital.recorded_by,\n                    \"encounter_id\": vital.encounter_id,\n                    \"sync_source\": \"hms_integration\"\n                }\n                \n                # Calculate triage priority based on vitals\n                priority = self._calculate_triage_priority(vital)\n                \n                # Insert into patient_queue\n                insert_query = \"\"\"\n                    INSERT INTO patient_queue (\n                        patient_id, queue_position, triage_priority, \n                        triage_data, created_at, updated_at\n                    ) VALUES ($1, $2, $3, $4, $5, $6)\n                    ON CONFLICT (patient_id) \n                    DO UPDATE SET \n                        triage_data = EXCLUDED.triage_data,\n                        triage_priority = EXCLUDED.triage_priority,\n                        updated_at = EXCLUDED.updated_at\n                \"\"\"\n                \n                await conn.execute(\n                    insert_query,\n                    patient_db_id,\n                    await self._get_next_queue_position(conn),\n                    priority,\n                    json.dumps(triage_data),\n                    vital.timestamp,\n                    datetime.utcnow()\n                )\n                \n                stored_count += 1\n                logger.info(f\"Stored vital signs for patient {vital.patient_id}\")\n                \n        except Exception as e:\n            logger.error(f\"Error storing vitals: {e}\")\n            raise\n        finally:\n            await conn.close()\n        \n        return stored_count\n    \n    async def store_lab_results(self, lab_results: List[LabResult]) -> int:\n        \"\"\"Store lab results in lab_orders table\"\"\"\n        stored_count = 0\n        \n        conn = await self.get_connection()\n        try:\n            for lab in lab_results:\n                # Check if patient exists\n                patient_query = \"SELECT id FROM patients WHERE patient_id = $1\"\n                patient_result = await conn.fetchrow(patient_query, lab.patient_id)\n                \n                if not patient_result:\n                    logger.warning(f\"Patient {lab.patient_id} not found, skipping lab result\")\n                    continue\n                \n                patient_db_id = patient_result['id']\n                \n                # Map lab result to lab_orders schema\n                insert_query = \"\"\"\n                    INSERT INTO lab_orders (\n                        patient_id, test_name, test_type, status, \n                        results, ordered_date, completed_date, \n                        ordered_by, notes, created_at\n                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n                    ON CONFLICT (patient_id, test_name, ordered_date)\n                    DO UPDATE SET\n                        results = EXCLUDED.results,\n                        status = EXCLUDED.status,\n                        completed_date = EXCLUDED.completed_date\n                \"\"\"\n                \n                # Prepare results data\n                results_data = {\n                    \"result_value\": lab.result_value,\n                    \"result_numeric\": lab.result_numeric,\n                    \"reference_range\": lab.reference_range,\n                    \"units\": lab.units,\n                    \"test_code\": lab.test_code,\n                    \"order_id\": lab.order_id,\n                    \"resulted_by\": lab.resulted_by,\n                    \"sync_source\": \"hms_integration\"\n                }\n                \n                await conn.execute(\n                    insert_query,\n                    patient_db_id,\n                    lab.test_name,\n                    lab.test_code or \"LAB\",\n                    lab.status,\n                    json.dumps(results_data),\n                    lab.ordered_date,\n                    lab.result_date,\n                    lab.ordered_by,\n                    f\"Synced from HMS - Order ID: {lab.order_id}\",\n                    datetime.utcnow()\n                )\n                \n                stored_count += 1\n                logger.info(f\"Stored lab result for patient {lab.patient_id}: {lab.test_name}\")\n                \n        except Exception as e:\n            logger.error(f\"Error storing lab results: {e}\")\n            raise\n        finally:\n            await conn.close()\n        \n        return stored_count\n    \n    async def store_prescriptions(self, prescriptions: List[Prescription]) -> int:\n        \"\"\"Store prescriptions in prescriptions table\"\"\"\n        stored_count = 0\n        \n        conn = await self.get_connection()\n        try:\n            for prescription in prescriptions:\n                # Check if patient exists\n                patient_query = \"SELECT id FROM patients WHERE patient_id = $1\"\n                patient_result = await conn.fetchrow(patient_query, prescription.patient_id)\n                \n                if not patient_result:\n                    logger.warning(f\"Patient {prescription.patient_id} not found, skipping prescription\")\n                    continue\n                \n                patient_db_id = patient_result['id']\n                \n                # Insert prescription\n                insert_query = \"\"\"\n                    INSERT INTO prescriptions (\n                        patient_id, medication_name, dosage, frequency,\n                        duration, quantity, instructions, prescribed_date,\n                        prescribed_by, status, created_at\n                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n                \"\"\"\n                \n                await conn.execute(\n                    insert_query,\n                    patient_db_id,\n                    prescription.medication_name,\n                    prescription.dosage,\n                    prescription.frequency,\n                    prescription.duration,\n                    prescription.quantity,\n                    prescription.instructions,\n                    prescription.prescribed_date,\n                    prescription.prescribed_by,\n                    prescription.status,\n                    datetime.utcnow()\n                )\n                \n                stored_count += 1\n                logger.info(f\"Stored prescription for patient {prescription.patient_id}: {prescription.medication_name}\")\n                \n        except Exception as e:\n            logger.error(f\"Error storing prescriptions: {e}\")\n            raise\n        finally:\n            await conn.close()\n        \n        return stored_count\n    \n    async def store_diagnoses(self, diagnoses: List[Diagnosis]) -> int:\n        \"\"\"Store diagnoses in consultations table\"\"\"\n        stored_count = 0\n        \n        conn = await self.get_connection()\n        try:\n            for diagnosis in diagnoses:\n                # Check if patient exists\n                patient_query = \"SELECT id FROM patients WHERE patient_id = $1\"\n                patient_result = await conn.fetchrow(patient_query, diagnosis.patient_id)\n                \n                if not patient_result:\n                    logger.warning(f\"Patient {diagnosis.patient_id} not found, skipping diagnosis\")\n                    continue\n                \n                patient_db_id = patient_result['id']\n                \n                # Create consultation record with diagnosis\n                consultation_data = {\n                    \"diagnosis_code\": diagnosis.diagnosis_code,\n                    \"diagnosis_name\": diagnosis.diagnosis_name,\n                    \"diagnosis_type\": diagnosis.diagnosis_type,\n                    \"status\": diagnosis.status,\n                    \"diagnosed_by\": diagnosis.diagnosed_by,\n                    \"encounter_id\": diagnosis.encounter_id,\n                    \"sync_source\": \"hms_integration\"\n                }\n                \n                insert_query = \"\"\"\n                    INSERT INTO consultations (\n                        patient_id, consultation_type, notes, \n                        diagnosis, consultation_date, clinician_id, \n                        status, created_at\n                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n                \"\"\"\n                \n                await conn.execute(\n                    insert_query,\n                    patient_db_id,\n                    \"hms_sync\",\n                    f\"Diagnosis: {diagnosis.diagnosis_name} ({diagnosis.diagnosis_code})\",\n                    json.dumps(consultation_data),\n                    diagnosis.diagnosed_date,\n                    1,  # Default clinician ID\n                    diagnosis.status,\n                    datetime.utcnow()\n                )\n                \n                stored_count += 1\n                logger.info(f\"Stored diagnosis for patient {diagnosis.patient_id}: {diagnosis.diagnosis_name}\")\n                \n        except Exception as e:\n            logger.error(f\"Error storing diagnoses: {e}\")\n            raise\n        finally:\n            await conn.close()\n        \n        return stored_count\n    \n    async def log_patient_consent(self, patient_id: str, consent_type: str, \n                                 fingerprint_hash: str = None, otp_code: str = None,\n                                 granted_by: str = None, expires_at: datetime = None) -> str:\n        \"\"\"Log patient consent in audit_logs table\"\"\"\n        conn = await self.get_connection()\n        try:\n            consent_data = {\n                \"patient_id\": patient_id,\n                \"consent_type\": consent_type,\n                \"fingerprint_hash\": fingerprint_hash,\n                \"otp_code\": otp_code,\n                \"granted_by\": granted_by,\n                \"expires_at\": expires_at.isoformat() if expires_at else None,\n                \"timestamp\": datetime.utcnow().isoformat()\n            }\n            \n            insert_query = \"\"\"\n                INSERT INTO audit_logs (\n                    action, details, created_at\n                ) VALUES ($1, $2, $3)\n            \"\"\"\n            \n            await conn.execute(\n                insert_query,\n                f\"patient_consent_{consent_type}\",\n                json.dumps(consent_data),\n                datetime.utcnow()\n            )\n            \n            # Generate consent hash\n            import hashlib\n            consent_hash = hashlib.sha256(\n                f\"{patient_id}{consent_type}{granted_by}{datetime.utcnow().isoformat()}\".encode()\n            ).hexdigest()\n            \n            logger.info(f\"Logged patient consent: {consent_hash}\")\n            return consent_hash\n            \n        except Exception as e:\n            logger.error(f\"Error logging consent: {e}\")\n            raise\n        finally:\n            await conn.close()\n    \n    async def verify_patient_consent(self, patient_id: str, consent_type: str) -> bool:\n        \"\"\"Verify if patient has granted consent for data synchronization\"\"\"\n        conn = await self.get_connection()\n        try:\n            # Check for valid consent in audit_logs\n            query = \"\"\"\n                SELECT details FROM audit_logs \n                WHERE action = $1 \n                AND details::json->>'patient_id' = $2\n                AND created_at > NOW() - INTERVAL '1 year'\n                ORDER BY created_at DESC\n                LIMIT 1\n            \"\"\"\n            \n            result = await conn.fetchrow(query, f\"patient_consent_{consent_type}\", patient_id)\n            \n            if result:\n                consent_details = json.loads(result['details'])\n                # Check if consent is still valid\n                if consent_details.get('expires_at'):\n                    expires_at = datetime.fromisoformat(consent_details['expires_at'])\n                    return expires_at > datetime.utcnow()\n                return True\n            \n            # For demo purposes, return True if no explicit consent found\n            logger.info(f\"No explicit consent found for patient {patient_id}, allowing sync\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"Error verifying consent: {e}\")\n            return False\n        finally:\n            await conn.close()\n    \n    def _calculate_triage_priority(self, vital: VitalSigns) -> str:\n        \"\"\"Calculate triage priority based on vital signs\"\"\"\n        high_priority_conditions = []\n        \n        # Check critical vital signs\n        if vital.systolic_bp and (vital.systolic_bp > 180 or vital.systolic_bp < 90):\n            high_priority_conditions.append(\"critical_bp\")\n        \n        if vital.heart_rate and (vital.heart_rate > 120 or vital.heart_rate < 50):\n            high_priority_conditions.append(\"critical_hr\")\n        \n        if vital.temperature and vital.temperature > 39.0:\n            high_priority_conditions.append(\"high_fever\")\n        \n        if vital.oxygen_saturation and vital.oxygen_saturation < 92:\n            high_priority_conditions.append(\"low_o2\")\n        \n        if high_priority_conditions:\n            return \"urgent\"\n        elif vital.systolic_bp and vital.systolic_bp > 160:\n            return \"semi_urgent\"\n        else:\n            return \"routine\"\n    \n    async def _get_next_queue_position(self, conn) -> int:\n        \"\"\"Get next available queue position\"\"\"\n        result = await conn.fetchrow(\"SELECT COALESCE(MAX(queue_position), 0) + 1 as next_pos FROM patient_queue\")\n        return result['next_pos']","size_bytes":15655},"hms_integration/main.py":{"content":"\"\"\"\nErlessed HMS Integration Microservice\nSecure FastAPI service for hospital management system integration\n\"\"\"\n\nfrom fastapi import FastAPI, Depends, HTTPException, status, UploadFile, File\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List, Dict, Any\nimport os\nimport logging\nfrom datetime import datetime, timedelta\nimport asyncio\nimport httpx\nimport json\nimport pandas as pd\nfrom defusedxml.ElementTree import fromstring as ET_fromstring\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nimport aiofiles\nfrom sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, DateTime, JSON, Boolean, Float, Text\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import sessionmaker\nimport uuid\nimport hashlib\nimport io\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# FastAPI app initialization\napp = FastAPI(\n    title=\"Erlessed HMS Integration Service\",\n    description=\"Secure microservice for hospital management system integration\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\"\n)\n\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Configure appropriately for production\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n\n# Security configuration\nSECRET_KEY = os.getenv(\"HMS_SECRET_KEY\", \"your-secret-key-here\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nsecurity = HTTPBearer()\n\n# Database configuration\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL environment variable is required\")\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Pydantic models for API requests/responses\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\nclass HMSCredentials(BaseModel):\n    system_type: str = Field(..., description=\"HMS type: openmrs, afyapro, custom\")\n    base_url: str = Field(..., description=\"HMS base URL\")\n    username: str\n    password: str\n    client_id: Optional[str] = None\n    client_secret: Optional[str] = None\n    oauth_endpoint: Optional[str] = None\n\nclass PatientConsent(BaseModel):\n    patient_id: str\n    consent_type: str = Field(..., description=\"data_sync, analytics, sharing\")\n    fingerprint_hash: Optional[str] = None\n    otp_code: Optional[str] = None\n    granted_by: str\n    expires_at: Optional[datetime] = None\n\nclass SyncRequest(BaseModel):\n    hms_credentials: HMSCredentials\n    patient_ids: Optional[List[str]] = None\n    date_from: Optional[datetime] = None\n    date_to: Optional[datetime] = None\n    include_vitals: bool = True\n    include_labs: bool = True\n    include_prescriptions: bool = True\n    include_diagnoses: bool = True\n\nclass VitalSigns(BaseModel):\n    patient_id: str\n    encounter_id: Optional[str] = None\n    timestamp: datetime\n    systolic_bp: Optional[float] = None\n    diastolic_bp: Optional[float] = None\n    heart_rate: Optional[float] = None\n    temperature: Optional[float] = None\n    respiratory_rate: Optional[float] = None\n    oxygen_saturation: Optional[float] = None\n    weight: Optional[float] = None\n    height: Optional[float] = None\n    bmi: Optional[float] = None\n    recorded_by: Optional[str] = None\n\nclass LabResult(BaseModel):\n    patient_id: str\n    order_id: Optional[str] = None\n    test_name: str\n    test_code: Optional[str] = None\n    result_value: Optional[str] = None\n    result_numeric: Optional[float] = None\n    reference_range: Optional[str] = None\n    units: Optional[str] = None\n    status: str = Field(default=\"completed\", description=\"pending, completed, cancelled\")\n    ordered_date: datetime\n    result_date: Optional[datetime] = None\n    ordered_by: Optional[str] = None\n    resulted_by: Optional[str] = None\n\nclass Prescription(BaseModel):\n    patient_id: str\n    encounter_id: Optional[str] = None\n    medication_name: str\n    medication_code: Optional[str] = None\n    dosage: str\n    frequency: str\n    duration: Optional[str] = None\n    quantity: Optional[float] = None\n    instructions: Optional[str] = None\n    prescribed_date: datetime\n    prescribed_by: str\n    status: str = Field(default=\"active\", description=\"active, completed, cancelled\")\n\nclass Diagnosis(BaseModel):\n    patient_id: str\n    encounter_id: Optional[str] = None\n    diagnosis_code: str\n    diagnosis_name: str\n    diagnosis_type: str = Field(default=\"primary\", description=\"primary, secondary, differential\")\n    status: str = Field(default=\"confirmed\", description=\"confirmed, provisional, ruled_out\")\n    diagnosed_date: datetime\n    diagnosed_by: str\n\n# Authentication functions\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        token = credentials.credentials\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    return token_data\n\n# HMS Integration classes\nclass BaseHMSClient:\n    \"\"\"Base class for HMS system clients\"\"\"\n    \n    def __init__(self, credentials: HMSCredentials):\n        self.credentials = credentials\n        self.base_url = credentials.base_url.rstrip('/')\n        self.session = None\n        self.token = None\n        \n    async def authenticate(self):\n        \"\"\"Authenticate with HMS system\"\"\"\n        raise NotImplementedError\n        \n    async def get_vitals(self, patient_ids: List[str], date_from: datetime = None, date_to: datetime = None) -> List[VitalSigns]:\n        \"\"\"Fetch vital signs from HMS\"\"\"\n        raise NotImplementedError\n        \n    async def get_lab_results(self, patient_ids: List[str], date_from: datetime = None, date_to: datetime = None) -> List[LabResult]:\n        \"\"\"Fetch lab results from HMS\"\"\"\n        raise NotImplementedError\n        \n    async def get_prescriptions(self, patient_ids: List[str], date_from: datetime = None, date_to: datetime = None) -> List[Prescription]:\n        \"\"\"Fetch prescriptions from HMS\"\"\"\n        raise NotImplementedError\n        \n    async def get_diagnoses(self, patient_ids: List[str], date_from: datetime = None, date_to: datetime = None) -> List[Diagnosis]:\n        \"\"\"Fetch diagnoses from HMS\"\"\"\n        raise NotImplementedError\n\nclass OpenMRSClient(BaseHMSClient):\n    \"\"\"OpenMRS HMS client implementation\"\"\"\n    \n    async def authenticate(self):\n        \"\"\"Authenticate with OpenMRS using session-based auth\"\"\"\n        async with httpx.AsyncClient() as client:\n            auth_url = f\"{self.base_url}/ws/rest/v1/session\"\n            auth_data = {\n                \"username\": self.credentials.username,\n                \"password\": self.credentials.password\n            }\n            \n            response = await client.post(auth_url, json=auth_data)\n            if response.status_code == 200:\n                session_data = response.json()\n                self.token = session_data.get(\"sessionId\")\n                logger.info(\"Successfully authenticated with OpenMRS\")\n                return True\n            else:\n                logger.error(f\"OpenMRS authentication failed: {response.status_code}\")\n                return False\n    \n    async def get_vitals(self, patient_ids: List[str], date_from: datetime = None, date_to: datetime = None) -> List[VitalSigns]:\n        \"\"\"Fetch vital signs from OpenMRS\"\"\"\n        vitals = []\n        \n        async with httpx.AsyncClient() as client:\n            headers = {\"Cookie\": f\"JSESSIONID={self.token}\"} if self.token else {}\n            \n            for patient_id in patient_ids:\n                url = f\"{self.base_url}/ws/rest/v1/patient/{patient_id}/encounter\"\n                response = await client.get(url, headers=headers)\n                \n                if response.status_code == 200:\n                    encounters = response.json().get(\"results\", [])\n                    \n                    for encounter in encounters:\n                        # Extract vital signs from encounter observations\n                        obs_url = f\"{self.base_url}/ws/rest/v1/encounter/{encounter['uuid']}/obs\"\n                        obs_response = await client.get(obs_url, headers=headers)\n                        \n                        if obs_response.status_code == 200:\n                            observations = obs_response.json().get(\"results\", [])\n                            \n                            vital_data = {\n                                \"patient_id\": patient_id,\n                                \"encounter_id\": encounter[\"uuid\"],\n                                \"timestamp\": datetime.fromisoformat(encounter[\"encounterDatetime\"].replace(\"Z\", \"+00:00\")),\n                            }\n                            \n                            # Map OpenMRS concepts to vital signs\n                            concept_mapping = {\n                                \"5085\": \"systolic_bp\",\n                                \"5086\": \"diastolic_bp\",\n                                \"5087\": \"heart_rate\",\n                                \"5088\": \"temperature\",\n                                \"5242\": \"respiratory_rate\",\n                                \"5092\": \"oxygen_saturation\",\n                                \"5089\": \"weight\",\n                                \"5090\": \"height\"\n                            }\n                            \n                            for obs in observations:\n                                concept_id = obs.get(\"concept\", {}).get(\"uuid\", \"\")\n                                if concept_id in concept_mapping:\n                                    field_name = concept_mapping[concept_id]\n                                    vital_data[field_name] = float(obs.get(\"value\", 0))\n                            \n                            if len(vital_data) > 3:  # More than just basic fields\n                                vitals.append(VitalSigns(**vital_data))\n        \n        return vitals\n\nclass AfyaProClient(BaseHMSClient):\n    \"\"\"AfyaPro HMS client implementation\"\"\"\n    \n    async def authenticate(self):\n        \"\"\"Authenticate with AfyaPro using OAuth2\"\"\"\n        if not self.credentials.oauth_endpoint:\n            logger.error(\"OAuth endpoint required for AfyaPro\")\n            return False\n            \n        async with httpx.AsyncClient() as client:\n            token_data = {\n                \"grant_type\": \"client_credentials\",\n                \"client_id\": self.credentials.client_id,\n                \"client_secret\": self.credentials.client_secret\n            }\n            \n            response = await client.post(self.credentials.oauth_endpoint, data=token_data)\n            if response.status_code == 200:\n                token_info = response.json()\n                self.token = token_info.get(\"access_token\")\n                logger.info(\"Successfully authenticated with AfyaPro\")\n                return True\n            else:\n                logger.error(f\"AfyaPro authentication failed: {response.status_code}\")\n                return False\n\nclass CustomEMRClient(BaseHMSClient):\n    \"\"\"Custom EMR client implementation\"\"\"\n    \n    async def authenticate(self):\n        \"\"\"Authenticate with custom EMR using token-based auth\"\"\"\n        async with httpx.AsyncClient() as client:\n            auth_url = f\"{self.base_url}/api/auth/login\"\n            auth_data = {\n                \"username\": self.credentials.username,\n                \"password\": self.credentials.password\n            }\n            \n            response = await client.post(auth_url, json=auth_data)\n            if response.status_code == 200:\n                auth_result = response.json()\n                self.token = auth_result.get(\"token\")\n                logger.info(\"Successfully authenticated with Custom EMR\")\n                return True\n            else:\n                logger.error(f\"Custom EMR authentication failed: {response.status_code}\")\n                return False\n\n# Factory function to create HMS clients\ndef create_hms_client(credentials: HMSCredentials) -> BaseHMSClient:\n    \"\"\"Factory function to create appropriate HMS client\"\"\"\n    if credentials.system_type.lower() == \"openmrs\":\n        return OpenMRSClient(credentials)\n    elif credentials.system_type.lower() == \"afyapro\":\n        return AfyaProClient(credentials)\n    elif credentials.system_type.lower() == \"custom\":\n        return CustomEMRClient(credentials)\n    else:\n        raise ValueError(f\"Unsupported HMS type: {credentials.system_type}\")\n\n# Database functions for data normalization and storage\nfrom database_mapper import ErlessedDatabaseMapper\n\ndb_mapper = ErlessedDatabaseMapper()\n\nasync def store_vitals(vitals: List[VitalSigns]) -> int:\n    \"\"\"Store vital signs in Erlessed database\"\"\"\n    return await db_mapper.store_vitals(vitals)\n\nasync def store_lab_results(lab_results: List[LabResult]) -> int:\n    \"\"\"Store lab results in Erlessed database\"\"\"\n    return await db_mapper.store_lab_results(lab_results)\n\nasync def store_prescriptions(prescriptions: List[Prescription]) -> int:\n    \"\"\"Store prescriptions in Erlessed database\"\"\"\n    return await db_mapper.store_prescriptions(prescriptions)\n\nasync def store_diagnoses(diagnoses: List[Diagnosis]) -> int:\n    \"\"\"Store diagnoses in Erlessed database\"\"\"\n    return await db_mapper.store_diagnoses(diagnoses)\n\n# File processing functions for CSV/XML fallback\nasync def process_csv_file(file_content: bytes, data_type: str) -> List[Dict]:\n    \"\"\"Process CSV file and return structured data\"\"\"\n    try:\n        df = pd.read_csv(io.BytesIO(file_content))\n        return df.to_dict('records')\n    except Exception as e:\n        logger.error(f\"CSV processing error: {e}\")\n        raise HTTPException(status_code=400, detail=f\"Invalid CSV format: {e}\")\n\nasync def process_xml_file(file_content: bytes, data_type: str) -> List[Dict]:\n    \"\"\"Process XML file and return structured data\"\"\"\n    try:\n        root = ET_fromstring(file_content)\n        data = []\n        \n        # Basic XML parsing - customize based on your XML structure\n        for item in root.findall('.//record'):\n            record = {}\n            for child in item:\n                record[child.tag] = child.text\n            data.append(record)\n        \n        return data\n    except Exception as e:\n        logger.error(f\"XML processing error: {e}\")\n        raise HTTPException(status_code=400, detail=f\"Invalid XML format: {e}\")\n\n# Consent management functions\nasync def log_patient_consent(consent: PatientConsent):\n    \"\"\"Log patient consent for data synchronization\"\"\"\n    return await db_mapper.log_patient_consent(\n        consent.patient_id,\n        consent.consent_type,\n        consent.fingerprint_hash,\n        consent.otp_code,\n        consent.granted_by,\n        consent.expires_at\n    )\n\nasync def verify_patient_consent(patient_id: str, consent_type: str) -> bool:\n    \"\"\"Verify if patient has granted consent for data synchronization\"\"\"\n    return await db_mapper.verify_patient_consent(patient_id, consent_type)\n\n@app.get(\"/\")\nasync def root():\n    return {\n        \"service\": \"Erlessed HMS Integration Service\",\n        \"version\": \"1.0.0\",\n        \"status\": \"active\",\n        \"supported_systems\": [\"OpenMRS\", \"AfyaPro\", \"Custom EMR\"]\n    }\n\n# API Endpoints for HMS Integration\n\n@app.post(\"/auth/token\")\nasync def get_access_token(username: str, password: str):\n    \"\"\"Obtain access token for HMS integration service\"\"\"\n    # Simplified authentication for demo - implement proper validation\n    if username == \"hms_admin\" and password == \"secure_password\":\n        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n        access_token = create_access_token(\n            data={\"sub\": username}, expires_delta=access_token_expires\n        )\n        return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n    else:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n@app.post(\"/consent/log\")\nasync def log_consent(consent: PatientConsent, current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Log patient consent for data synchronization\"\"\"\n    try:\n        consent_hash = await log_patient_consent(consent)\n        return {\n            \"status\": \"success\",\n            \"consent_hash\": consent_hash,\n            \"patient_id\": consent.patient_id,\n            \"consent_type\": consent.consent_type,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n    except Exception as e:\n        logger.error(f\"Consent logging error: {e}\")\n        raise HTTPException(status_code=500, detail=\"Failed to log consent\")\n\n@app.get(\"/consent/verify/{patient_id}\")\nasync def verify_consent(patient_id: str, consent_type: str, current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Verify patient consent for data synchronization\"\"\"\n    try:\n        is_valid = await verify_patient_consent(patient_id, consent_type)\n        return {\n            \"patient_id\": patient_id,\n            \"consent_type\": consent_type,\n            \"is_valid\": is_valid,\n            \"checked_at\": datetime.utcnow().isoformat()\n        }\n    except Exception as e:\n        logger.error(f\"Consent verification error: {e}\")\n        raise HTTPException(status_code=500, detail=\"Failed to verify consent\")\n\n@app.post(\"/sync/vitals\")\nasync def sync_vitals(sync_request: SyncRequest, current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Sync vital signs from HMS to Erlessed database\"\"\"\n    try:\n        # Verify patient consent\n        if sync_request.patient_ids:\n            for patient_id in sync_request.patient_ids:\n                if not await verify_patient_consent(patient_id, \"data_sync\"):\n                    raise HTTPException(\n                        status_code=403,\n                        detail=f\"Patient {patient_id} has not granted consent for data synchronization\"\n                    )\n        \n        # Create HMS client and authenticate\n        hms_client = create_hms_client(sync_request.hms_credentials)\n        auth_success = await hms_client.authenticate()\n        \n        if not auth_success:\n            raise HTTPException(status_code=401, detail=\"HMS authentication failed\")\n        \n        # Fetch vital signs\n        vitals = await hms_client.get_vitals(\n            sync_request.patient_ids or [],\n            sync_request.date_from,\n            sync_request.date_to\n        )\n        \n        # Store in Erlessed database\n        await store_vitals(vitals)\n        \n        return {\n            \"status\": \"success\",\n            \"records_synced\": len(vitals),\n            \"sync_type\": \"vitals\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"hms_system\": sync_request.hms_credentials.system_type\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Vitals sync error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Vitals synchronization failed: {str(e)}\")\n\n@app.post(\"/sync/labs\")\nasync def sync_lab_results(sync_request: SyncRequest, current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Sync lab results from HMS to Erlessed database\"\"\"\n    try:\n        # Verify patient consent\n        if sync_request.patient_ids:\n            for patient_id in sync_request.patient_ids:\n                if not await verify_patient_consent(patient_id, \"data_sync\"):\n                    raise HTTPException(\n                        status_code=403,\n                        detail=f\"Patient {patient_id} has not granted consent for data synchronization\"\n                    )\n        \n        # Create HMS client and authenticate\n        hms_client = create_hms_client(sync_request.hms_credentials)\n        auth_success = await hms_client.authenticate()\n        \n        if not auth_success:\n            raise HTTPException(status_code=401, detail=\"HMS authentication failed\")\n        \n        # Fetch lab results\n        lab_results = await hms_client.get_lab_results(\n            sync_request.patient_ids or [],\n            sync_request.date_from,\n            sync_request.date_to\n        )\n        \n        # Store in Erlessed database\n        await store_lab_results(lab_results)\n        \n        return {\n            \"status\": \"success\",\n            \"records_synced\": len(lab_results),\n            \"sync_type\": \"lab_results\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"hms_system\": sync_request.hms_credentials.system_type\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Lab results sync error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Lab results synchronization failed: {str(e)}\")\n\n@app.post(\"/sync/prescriptions\")\nasync def sync_prescriptions(sync_request: SyncRequest, current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Sync prescriptions from HMS to Erlessed database\"\"\"\n    try:\n        # Verify patient consent\n        if sync_request.patient_ids:\n            for patient_id in sync_request.patient_ids:\n                if not await verify_patient_consent(patient_id, \"data_sync\"):\n                    raise HTTPException(\n                        status_code=403,\n                        detail=f\"Patient {patient_id} has not granted consent for data synchronization\"\n                    )\n        \n        # Create HMS client and authenticate\n        hms_client = create_hms_client(sync_request.hms_credentials)\n        auth_success = await hms_client.authenticate()\n        \n        if not auth_success:\n            raise HTTPException(status_code=401, detail=\"HMS authentication failed\")\n        \n        # Fetch prescriptions\n        prescriptions = await hms_client.get_prescriptions(\n            sync_request.patient_ids or [],\n            sync_request.date_from,\n            sync_request.date_to\n        )\n        \n        # Store in Erlessed database\n        await store_prescriptions(prescriptions)\n        \n        return {\n            \"status\": \"success\",\n            \"records_synced\": len(prescriptions),\n            \"sync_type\": \"prescriptions\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"hms_system\": sync_request.hms_credentials.system_type\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Prescriptions sync error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Prescriptions synchronization failed: {str(e)}\")\n\n@app.post(\"/sync/diagnoses\")\nasync def sync_diagnoses(sync_request: SyncRequest, current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Sync diagnoses from HMS to Erlessed database\"\"\"\n    try:\n        # Verify patient consent\n        if sync_request.patient_ids:\n            for patient_id in sync_request.patient_ids:\n                if not await verify_patient_consent(patient_id, \"data_sync\"):\n                    raise HTTPException(\n                        status_code=403,\n                        detail=f\"Patient {patient_id} has not granted consent for data synchronization\"\n                    )\n        \n        # Create HMS client and authenticate\n        hms_client = create_hms_client(sync_request.hms_credentials)\n        auth_success = await hms_client.authenticate()\n        \n        if not auth_success:\n            raise HTTPException(status_code=401, detail=\"HMS authentication failed\")\n        \n        # Fetch diagnoses\n        diagnoses = await hms_client.get_diagnoses(\n            sync_request.patient_ids or [],\n            sync_request.date_from,\n            sync_request.date_to\n        )\n        \n        # Store in Erlessed database\n        await store_diagnoses(diagnoses)\n        \n        return {\n            \"status\": \"success\",\n            \"records_synced\": len(diagnoses),\n            \"sync_type\": \"diagnoses\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"hms_system\": sync_request.hms_credentials.system_type\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Diagnoses sync error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Diagnoses synchronization failed: {str(e)}\")\n\n@app.post(\"/sync/bulk\")\nasync def bulk_sync(sync_request: SyncRequest, current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Perform bulk synchronization of all data types\"\"\"\n    try:\n        # Verify patient consent\n        if sync_request.patient_ids:\n            for patient_id in sync_request.patient_ids:\n                if not await verify_patient_consent(patient_id, \"data_sync\"):\n                    raise HTTPException(\n                        status_code=403,\n                        detail=f\"Patient {patient_id} has not granted consent for data synchronization\"\n                    )\n        \n        # Create HMS client and authenticate\n        hms_client = create_hms_client(sync_request.hms_credentials)\n        auth_success = await hms_client.authenticate()\n        \n        if not auth_success:\n            raise HTTPException(status_code=401, detail=\"HMS authentication failed\")\n        \n        sync_results = {}\n        total_records = 0\n        \n        # Sync vitals if requested\n        if sync_request.include_vitals:\n            vitals = await hms_client.get_vitals(\n                sync_request.patient_ids or [],\n                sync_request.date_from,\n                sync_request.date_to\n            )\n            await store_vitals(vitals)\n            sync_results[\"vitals\"] = len(vitals)\n            total_records += len(vitals)\n        \n        # Sync lab results if requested\n        if sync_request.include_labs:\n            lab_results = await hms_client.get_lab_results(\n                sync_request.patient_ids or [],\n                sync_request.date_from,\n                sync_request.date_to\n            )\n            await store_lab_results(lab_results)\n            sync_results[\"lab_results\"] = len(lab_results)\n            total_records += len(lab_results)\n        \n        # Sync prescriptions if requested\n        if sync_request.include_prescriptions:\n            prescriptions = await hms_client.get_prescriptions(\n                sync_request.patient_ids or [],\n                sync_request.date_from,\n                sync_request.date_to\n            )\n            await store_prescriptions(prescriptions)\n            sync_results[\"prescriptions\"] = len(prescriptions)\n            total_records += len(prescriptions)\n        \n        # Sync diagnoses if requested\n        if sync_request.include_diagnoses:\n            diagnoses = await hms_client.get_diagnoses(\n                sync_request.patient_ids or [],\n                sync_request.date_from,\n                sync_request.date_to\n            )\n            await store_diagnoses(diagnoses)\n            sync_results[\"diagnoses\"] = len(diagnoses)\n            total_records += len(diagnoses)\n        \n        return {\n            \"status\": \"success\",\n            \"total_records_synced\": total_records,\n            \"sync_breakdown\": sync_results,\n            \"sync_type\": \"bulk\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"hms_system\": sync_request.hms_credentials.system_type\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Bulk sync error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Bulk synchronization failed: {str(e)}\")\n\n# File-based sync endpoints for CSV/XML fallback\n@app.post(\"/sync/file/vitals\")\nasync def sync_vitals_from_file(\n    file: UploadFile = File(...),\n    current_user: TokenData = Depends(get_current_user)\n):\n    \"\"\"Sync vital signs from uploaded CSV/XML file\"\"\"\n    try:\n        file_content = await file.read()\n        \n        if file.filename.endswith('.csv'):\n            data = await process_csv_file(file_content, \"vitals\")\n        elif file.filename.endswith('.xml'):\n            data = await process_xml_file(file_content, \"vitals\")\n        else:\n            raise HTTPException(status_code=400, detail=\"Unsupported file format. Use CSV or XML\")\n        \n        # Convert to VitalSigns objects and store\n        vitals = []\n        for record in data:\n            try:\n                vital = VitalSigns(\n                    patient_id=record.get(\"patient_id\", \"\"),\n                    timestamp=datetime.fromisoformat(record.get(\"timestamp\", datetime.utcnow().isoformat())),\n                    systolic_bp=float(record.get(\"systolic_bp\", 0)) if record.get(\"systolic_bp\") else None,\n                    diastolic_bp=float(record.get(\"diastolic_bp\", 0)) if record.get(\"diastolic_bp\") else None,\n                    heart_rate=float(record.get(\"heart_rate\", 0)) if record.get(\"heart_rate\") else None,\n                    temperature=float(record.get(\"temperature\", 0)) if record.get(\"temperature\") else None,\n                    # Add other fields as needed\n                )\n                vitals.append(vital)\n            except Exception as e:\n                logger.warning(f\"Skipping invalid vital record: {e}\")\n        \n        await store_vitals(vitals)\n        \n        return {\n            \"status\": \"success\",\n            \"records_processed\": len(data),\n            \"records_stored\": len(vitals),\n            \"sync_type\": \"file_vitals\",\n            \"filename\": file.filename,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"File vitals sync error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"File vitals sync failed: {str(e)}\")\n\n@app.post(\"/sync/file/labs\")\nasync def sync_labs_from_file(\n    file: UploadFile = File(...),\n    current_user: TokenData = Depends(get_current_user)\n):\n    \"\"\"Sync lab results from uploaded CSV/XML file\"\"\"\n    try:\n        file_content = await file.read()\n        \n        if file.filename.endswith('.csv'):\n            data = await process_csv_file(file_content, \"labs\")\n        elif file.filename.endswith('.xml'):\n            data = await process_xml_file(file_content, \"labs\")\n        else:\n            raise HTTPException(status_code=400, detail=\"Unsupported file format. Use CSV or XML\")\n        \n        # Convert to LabResult objects and store\n        lab_results = []\n        for record in data:\n            try:\n                lab_result = LabResult(\n                    patient_id=record.get(\"patient_id\", \"\"),\n                    test_name=record.get(\"test_name\", \"\"),\n                    ordered_date=datetime.fromisoformat(record.get(\"ordered_date\", datetime.utcnow().isoformat())),\n                    result_value=record.get(\"result_value\"),\n                    result_numeric=float(record.get(\"result_numeric\", 0)) if record.get(\"result_numeric\") else None,\n                    # Add other fields as needed\n                )\n                lab_results.append(lab_result)\n            except Exception as e:\n                logger.warning(f\"Skipping invalid lab record: {e}\")\n        \n        await store_lab_results(lab_results)\n        \n        return {\n            \"status\": \"success\",\n            \"records_processed\": len(data),\n            \"records_stored\": len(lab_results),\n            \"sync_type\": \"file_labs\",\n            \"filename\": file.filename,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"File labs sync error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"File labs sync failed: {str(e)}\")\n\n@app.get(\"/sync/status\")\nasync def get_sync_status(current_user: TokenData = Depends(get_current_user)):\n    \"\"\"Get synchronization status and statistics\"\"\"\n    try:\n        # Return sync statistics and status\n        return {\n            \"service_status\": \"active\",\n            \"last_sync\": datetime.utcnow().isoformat(),\n            \"supported_systems\": [\"OpenMRS\", \"AfyaPro\", \"Custom EMR\"],\n            \"supported_formats\": [\"REST API\", \"FHIR\", \"CSV\", \"XML\"],\n            \"sync_endpoints\": [\n                \"/sync/vitals\",\n                \"/sync/labs\", \n                \"/sync/prescriptions\",\n                \"/sync/diagnoses\",\n                \"/sync/bulk\"\n            ],\n            \"file_endpoints\": [\n                \"/sync/file/vitals\",\n                \"/sync/file/labs\"\n            ],\n            \"consent_required\": True,\n            \"authentication\": \"Bearer token required\"\n        }\n    except Exception as e:\n        logger.error(f\"Status check error: {e}\")\n        raise HTTPException(status_code=500, detail=\"Failed to get sync status\")\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.utcnow().isoformat(),\n        \"database\": \"connected\" if DATABASE_URL else \"not configured\"\n    }\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001)","size_bytes":34194},"hms_integration/start_hms_service.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nStartup script for Erlessed HMS Integration Microservice\nRuns the FastAPI service on port 8001 alongside the main Express server\n\"\"\"\n\nimport uvicorn\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add the hms_integration directory to Python path\nsys.path.append(str(Path(__file__).parent))\n\nif __name__ == \"__main__\":\n    # Set environment variables for HMS service\n    os.environ.setdefault(\"HMS_SECRET_KEY\", \"erlessed-hms-integration-2024\")\n    \n    # Start the FastAPI HMS integration service\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8001,\n        reload=True,\n        log_level=\"info\"\n    )","size_bytes":655},"hms_integration/support_service.py":{"content":"\"\"\"\nSupport Ticket System for Erlessed Healthcare Platform\nFastAPI backend for managing support tickets, documentation, and user help\n\"\"\"\n\nfrom fastapi import FastAPI, HTTPException, Depends, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\nfrom typing import List, Optional, Dict, Any\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nimport sqlite3\nimport json\nimport os\nimport uuid\nfrom pathlib import Path\n\n# Initialize FastAPI app\nsupport_app = FastAPI(\n    title=\"Erlessed Support System\",\n    description=\"Support tickets, documentation, and user assistance API\",\n    version=\"1.0.0\"\n)\n\n# CORS middleware\nsupport_app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Configure for production\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Security\nsecurity = HTTPBearer()\n\n# Enums\nclass TicketStatus(str, Enum):\n    OPEN = \"open\"\n    IN_PROGRESS = \"in_progress\"\n    RESOLVED = \"resolved\"\n    CLOSED = \"closed\"\n\nclass TicketPriority(str, Enum):\n    LOW = \"low\"\n    MEDIUM = \"medium\"\n    HIGH = \"high\"\n    URGENT = \"urgent\"\n\nclass UserRole(str, Enum):\n    DOCTOR = \"doctor\"\n    PHARMACIST = \"pharmacist\"\n    CARE_MANAGER = \"care-manager\"\n    INSURER = \"insurer\"\n    PATIENT = \"patient\"\n    ADMIN = \"admin\"\n\n# Pydantic models\nclass SupportTicket(BaseModel):\n    id: Optional[str] = None\n    user_id: str\n    user_role: UserRole\n    title: str = Field(..., min_length=5, max_length=200)\n    description: str = Field(..., min_length=10, max_length=2000)\n    category: str = Field(..., description=\"e.g., technical, billing, training\")\n    priority: TicketPriority = TicketPriority.MEDIUM\n    status: TicketStatus = TicketStatus.OPEN\n    attachments: Optional[List[str]] = []\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n    resolved_at: Optional[datetime] = None\n    assigned_to: Optional[str] = None\n\nclass TicketUpdate(BaseModel):\n    status: Optional[TicketStatus] = None\n    priority: Optional[TicketPriority] = None\n    assigned_to: Optional[str] = None\n    response: Optional[str] = None\n\nclass TicketResponse(BaseModel):\n    ticket_id: str\n    responder_id: str\n    responder_name: str\n    message: str\n    created_at: datetime\n    attachments: Optional[List[str]] = []\n\nclass DocumentationPage(BaseModel):\n    id: Optional[str] = None\n    title: str\n    content: str  # Markdown content\n    role: Optional[UserRole] = None  # Role-specific content\n    category: str\n    tags: List[str] = []\n    order: int = 0\n    published: bool = True\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n\nclass FAQItem(BaseModel):\n    id: Optional[str] = None\n    question: str\n    answer: str  # Markdown content\n    role: Optional[UserRole] = None\n    category: str\n    order: int = 0\n    helpful_count: int = 0\n    created_at: Optional[datetime] = None\n\n# Database setup\ndef init_support_db():\n    \"\"\"Initialize SQLite database for support system\"\"\"\n    db_path = Path(\"support.db\")\n    conn = sqlite3.connect(db_path)\n    \n    # Create tables\n    conn.executescript(\"\"\"\n        CREATE TABLE IF NOT EXISTS tickets (\n            id TEXT PRIMARY KEY,\n            user_id TEXT NOT NULL,\n            user_role TEXT NOT NULL,\n            title TEXT NOT NULL,\n            description TEXT NOT NULL,\n            category TEXT NOT NULL,\n            priority TEXT NOT NULL,\n            status TEXT NOT NULL,\n            attachments TEXT,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            resolved_at TIMESTAMP,\n            assigned_to TEXT\n        );\n        \n        CREATE TABLE IF NOT EXISTS ticket_responses (\n            id TEXT PRIMARY KEY,\n            ticket_id TEXT NOT NULL,\n            responder_id TEXT NOT NULL,\n            responder_name TEXT NOT NULL,\n            message TEXT NOT NULL,\n            attachments TEXT,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (ticket_id) REFERENCES tickets (id)\n        );\n        \n        CREATE TABLE IF NOT EXISTS documentation (\n            id TEXT PRIMARY KEY,\n            title TEXT NOT NULL,\n            content TEXT NOT NULL,\n            role TEXT,\n            category TEXT NOT NULL,\n            tags TEXT,\n            order_num INTEGER DEFAULT 0,\n            published BOOLEAN DEFAULT 1,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n        \n        CREATE TABLE IF NOT EXISTS faq (\n            id TEXT PRIMARY KEY,\n            question TEXT NOT NULL,\n            answer TEXT NOT NULL,\n            role TEXT,\n            category TEXT NOT NULL,\n            order_num INTEGER DEFAULT 0,\n            helpful_count INTEGER DEFAULT 0,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n        \n        CREATE INDEX IF NOT EXISTS idx_tickets_user_id ON tickets(user_id);\n        CREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status);\n        CREATE INDEX IF NOT EXISTS idx_documentation_role ON documentation(role);\n        CREATE INDEX IF NOT EXISTS idx_faq_role ON faq(role);\n    \"\"\")\n    \n    conn.commit()\n    conn.close()\n\n# Initialize database\ninit_support_db()\n\n# Database helper functions\ndef get_db_connection():\n    \"\"\"Get database connection\"\"\"\n    return sqlite3.connect(\"support.db\", detect_types=sqlite3.PARSE_DECLTYPES)\n\ndef dict_factory(cursor, row):\n    \"\"\"Convert SQLite row to dictionary\"\"\"\n    return dict((col[0], row[idx]) for idx, col in enumerate(cursor.description))\n\n# Authentication helper\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    \"\"\"Extract user info from JWT token\"\"\"\n    # TODO: Implement proper JWT validation\n    # For now, return mock user\n    return {\n        \"id\": \"user_123\",\n        \"username\": \"testuser\",\n        \"role\": \"doctor\"\n    }\n\n# Support ticket endpoints\n@support_app.post(\"/tickets\", response_model=SupportTicket)\nasync def create_ticket(ticket: SupportTicket, current_user: dict = Depends(get_current_user)):\n    \"\"\"Create a new support ticket\"\"\"\n    ticket.id = str(uuid.uuid4())\n    ticket.user_id = current_user[\"id\"]\n    ticket.created_at = datetime.now()\n    ticket.updated_at = datetime.now()\n    \n    conn = get_db_connection()\n    try:\n        conn.execute(\"\"\"\n            INSERT INTO tickets (id, user_id, user_role, title, description, category, \n                               priority, status, attachments)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n        \"\"\", (\n            ticket.id, ticket.user_id, ticket.user_role.value, ticket.title,\n            ticket.description, ticket.category, ticket.priority.value,\n            ticket.status.value, json.dumps(ticket.attachments or [])\n        ))\n        conn.commit()\n        return ticket\n    finally:\n        conn.close()\n\n@support_app.get(\"/tickets\", response_model=List[SupportTicket])\nasync def get_tickets(\n    status: Optional[TicketStatus] = None,\n    user_id: Optional[str] = None,\n    current_user: dict = Depends(get_current_user)\n):\n    \"\"\"Get tickets with optional filtering\"\"\"\n    conn = get_db_connection()\n    conn.row_factory = dict_factory\n    \n    try:\n        query = \"SELECT * FROM tickets WHERE 1=1\"\n        params = []\n        \n        # Filter by user if not admin\n        if current_user[\"role\"] != \"admin\":\n            query += \" AND user_id = ?\"\n            params.append(current_user[\"id\"])\n        elif user_id:\n            query += \" AND user_id = ?\"\n            params.append(user_id)\n            \n        if status:\n            query += \" AND status = ?\"\n            params.append(status.value)\n            \n        query += \" ORDER BY created_at DESC\"\n        \n        cursor = conn.execute(query, params)\n        tickets = cursor.fetchall()\n        \n        # Convert to Pydantic models\n        result = []\n        for ticket in tickets:\n            ticket['attachments'] = json.loads(ticket['attachments'] or '[]')\n            ticket['user_role'] = UserRole(ticket['user_role'])\n            ticket['priority'] = TicketPriority(ticket['priority'])\n            ticket['status'] = TicketStatus(ticket['status'])\n            result.append(SupportTicket(**ticket))\n            \n        return result\n    finally:\n        conn.close()\n\n@support_app.get(\"/tickets/{ticket_id}\", response_model=SupportTicket)\nasync def get_ticket(ticket_id: str, current_user: dict = Depends(get_current_user)):\n    \"\"\"Get specific ticket by ID\"\"\"\n    conn = get_db_connection()\n    conn.row_factory = dict_factory\n    \n    try:\n        cursor = conn.execute(\"SELECT * FROM tickets WHERE id = ?\", (ticket_id,))\n        ticket = cursor.fetchone()\n        \n        if not ticket:\n            raise HTTPException(status_code=404, detail=\"Ticket not found\")\n            \n        # Check permission\n        if current_user[\"role\"] != \"admin\" and ticket[\"user_id\"] != current_user[\"id\"]:\n            raise HTTPException(status_code=403, detail=\"Access denied\")\n            \n        ticket['attachments'] = json.loads(ticket['attachments'] or '[]')\n        ticket['user_role'] = UserRole(ticket['user_role'])\n        ticket['priority'] = TicketPriority(ticket['priority'])\n        ticket['status'] = TicketStatus(ticket['status'])\n        \n        return SupportTicket(**ticket)\n    finally:\n        conn.close()\n\n@support_app.patch(\"/tickets/{ticket_id}\", response_model=SupportTicket)\nasync def update_ticket(\n    ticket_id: str, \n    update: TicketUpdate, \n    current_user: dict = Depends(get_current_user)\n):\n    \"\"\"Update ticket status, priority, or assignment\"\"\"\n    # Only admins can update tickets\n    if current_user[\"role\"] != \"admin\":\n        raise HTTPException(status_code=403, detail=\"Admin access required\")\n    \n    conn = get_db_connection()\n    try:\n        # Build update query\n        updates = []\n        params = []\n        \n        if update.status:\n            updates.append(\"status = ?\")\n            params.append(update.status.value)\n            if update.status == TicketStatus.RESOLVED:\n                updates.append(\"resolved_at = ?\")\n                params.append(datetime.now())\n                \n        if update.priority:\n            updates.append(\"priority = ?\")\n            params.append(update.priority.value)\n            \n        if update.assigned_to:\n            updates.append(\"assigned_to = ?\")\n            params.append(update.assigned_to)\n            \n        if not updates:\n            raise HTTPException(status_code=400, detail=\"No updates provided\")\n            \n        updates.append(\"updated_at = ?\")\n        params.append(datetime.now())\n        params.append(ticket_id)\n        \n        query = f\"UPDATE tickets SET {', '.join(updates)} WHERE id = ?\"\n        conn.execute(query, params)\n        \n        # Add response if provided\n        if update.response:\n            response_id = str(uuid.uuid4())\n            conn.execute(\"\"\"\n                INSERT INTO ticket_responses (id, ticket_id, responder_id, responder_name, message)\n                VALUES (?, ?, ?, ?, ?)\n            \"\"\", (response_id, ticket_id, current_user[\"id\"], current_user[\"username\"], update.response))\n        \n        conn.commit()\n        \n        # Return updated ticket\n        return await get_ticket(ticket_id, current_user)\n    finally:\n        conn.close()\n\n@support_app.get(\"/tickets/{ticket_id}/responses\", response_model=List[TicketResponse])\nasync def get_ticket_responses(ticket_id: str, current_user: dict = Depends(get_current_user)):\n    \"\"\"Get all responses for a ticket\"\"\"\n    conn = get_db_connection()\n    conn.row_factory = dict_factory\n    \n    try:\n        cursor = conn.execute(\"\"\"\n            SELECT * FROM ticket_responses \n            WHERE ticket_id = ? \n            ORDER BY created_at ASC\n        \"\"\", (ticket_id,))\n        responses = cursor.fetchall()\n        \n        result = []\n        for response in responses:\n            response['attachments'] = json.loads(response['attachments'] or '[]')\n            result.append(TicketResponse(**response))\n            \n        return result\n    finally:\n        conn.close()\n\n# Documentation endpoints\n@support_app.get(\"/documentation\", response_model=List[DocumentationPage])\nasync def get_documentation(\n    role: Optional[UserRole] = None,\n    category: Optional[str] = None,\n    current_user: dict = Depends(get_current_user)\n):\n    \"\"\"Get documentation pages\"\"\"\n    conn = get_db_connection()\n    conn.row_factory = dict_factory\n    \n    try:\n        query = \"SELECT * FROM documentation WHERE published = 1\"\n        params = []\n        \n        if role:\n            query += \" AND (role IS NULL OR role = ?)\"\n            params.append(role.value)\n        elif current_user[\"role\"]:\n            query += \" AND (role IS NULL OR role = ?)\"\n            params.append(current_user[\"role\"])\n            \n        if category:\n            query += \" AND category = ?\"\n            params.append(category)\n            \n        query += \" ORDER BY order_num ASC, title ASC\"\n        \n        cursor = conn.execute(query, params)\n        docs = cursor.fetchall()\n        \n        result = []\n        for doc in docs:\n            doc['tags'] = json.loads(doc['tags'] or '[]')\n            if doc['role']:\n                doc['role'] = UserRole(doc['role'])\n            result.append(DocumentationPage(**doc))\n            \n        return result\n    finally:\n        conn.close()\n\n@support_app.get(\"/documentation/{doc_id}\", response_model=DocumentationPage)\nasync def get_documentation_page(doc_id: str):\n    \"\"\"Get specific documentation page\"\"\"\n    conn = get_db_connection()\n    conn.row_factory = dict_factory\n    \n    try:\n        cursor = conn.execute(\"SELECT * FROM documentation WHERE id = ? AND published = 1\", (doc_id,))\n        doc = cursor.fetchone()\n        \n        if not doc:\n            raise HTTPException(status_code=404, detail=\"Documentation not found\")\n            \n        doc['tags'] = json.loads(doc['tags'] or '[]')\n        if doc['role']:\n            doc['role'] = UserRole(doc['role'])\n            \n        return DocumentationPage(**doc)\n    finally:\n        conn.close()\n\n# FAQ endpoints\n@support_app.get(\"/faq\", response_model=List[FAQItem])\nasync def get_faq(\n    role: Optional[UserRole] = None,\n    category: Optional[str] = None,\n    current_user: dict = Depends(get_current_user)\n):\n    \"\"\"Get FAQ items\"\"\"\n    conn = get_db_connection()\n    conn.row_factory = dict_factory\n    \n    try:\n        query = \"SELECT * FROM faq WHERE 1=1\"\n        params = []\n        \n        if role:\n            query += \" AND (role IS NULL OR role = ?)\"\n            params.append(role.value)\n        elif current_user[\"role\"]:\n            query += \" AND (role IS NULL OR role = ?)\"\n            params.append(current_user[\"role\"])\n            \n        if category:\n            query += \" AND category = ?\"\n            params.append(category)\n            \n        query += \" ORDER BY order_num ASC, helpful_count DESC\"\n        \n        cursor = conn.execute(query, params)\n        faqs = cursor.fetchall()\n        \n        result = []\n        for faq in faqs:\n            if faq['role']:\n                faq['role'] = UserRole(faq['role'])\n            result.append(FAQItem(**faq))\n            \n        return result\n    finally:\n        conn.close()\n\n# Health check\n@support_app.get(\"/health\")\nasync def support_health_check():\n    \"\"\"Health check for support service\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"service\": \"erlessed-support\",\n        \"timestamp\": datetime.now().isoformat()\n    }\n\n# Initialize with sample data\n@support_app.on_event(\"startup\")\nasync def initialize_support_data():\n    \"\"\"Initialize support system with sample documentation and FAQ\"\"\"\n    conn = get_db_connection()\n    \n    try:\n        # Check if data already exists\n        cursor = conn.execute(\"SELECT COUNT(*) FROM documentation\")\n        if cursor.fetchone()[0] > 0:\n            return\n            \n        # Sample documentation\n        sample_docs = [\n            {\n                \"id\": str(uuid.uuid4()),\n                \"title\": \"Doctor Onboarding Guide\",\n                \"content\": \"\"\"# Doctor Onboarding Guide\n\n## Getting Started with Erlessed\n\n### Step 1: Account Setup\n1. Complete your professional license verification\n2. Set up biometric authentication\n3. Configure notification preferences\n\n### Step 2: Patient Management\n- Learn how to use the patient queue system\n- Understand triage prioritization\n- Practice biometric patient verification\n\n### Step 3: Clinical Documentation\n- ICD-10 code suggestions\n- AI-powered diagnosis support\n- Electronic prescription workflow\n\n### Step 4: Claims Processing\n- Real-time preauthorization\n- Documentation requirements\n- Claim submission process\n\"\"\",\n                \"role\": \"doctor\",\n                \"category\": \"onboarding\",\n                \"tags\": '[\"onboarding\", \"clinical\", \"workflow\"]',\n                \"order_num\": 1,\n                \"published\": 1\n            },\n            {\n                \"id\": str(uuid.uuid4()),\n                \"title\": \"Insurer Claim Appeal Process\",\n                \"content\": \"\"\"# Claim Appeal Process\n\n## Understanding Appeals\n\n### When to Appeal\n- Claim denial with clinical justification\n- Incorrect benefit calculations\n- Missing pre-authorization\n\n### Appeal Workflow\n1. Review denial reason\n2. Gather supporting documentation\n3. Submit appeal through portal\n4. Track appeal status\n5. Review final determination\n\n### Required Documentation\n- Medical records\n- Clinical notes\n- Treatment plans\n- Outcome reports\n\n### Timeframes\n- Initial appeal: 30 days\n- Peer review: 15 days\n- Final determination: 45 days\n\"\"\",\n                \"role\": \"insurer\",\n                \"category\": \"appeals\",\n                \"tags\": '[\"appeals\", \"claims\", \"process\"]',\n                \"order_num\": 1,\n                \"published\": 1\n            },\n            {\n                \"id\": str(uuid.uuid4()),\n                \"title\": \"Pharmacist Verification Flow\",\n                \"content\": \"\"\"# Pharmacist Verification Flow\n\n## Prescription Validation\n\n### Step 1: Patient Verification\n- Biometric verification\n- Insurance eligibility check\n- Dependent validation\n\n### Step 2: Prescription Checks\n- Drug interaction analysis\n- Dosage validation\n- Allergy screening\n- Formulary compliance\n\n### Step 3: Dispensing Process\n- Medication preparation\n- Patient counseling\n- Compliance documentation\n- Claim submission\n\n### Step 4: Quality Assurance\n- Double-check verification\n- Patient education\n- Follow-up scheduling\n\n### Common Issues\n- Benefit exhaustion\n- Prior authorization required\n- Generic substitution rules\n\"\"\",\n                \"role\": \"pharmacist\",\n                \"category\": \"verification\",\n                \"tags\": '[\"pharmacy\", \"verification\", \"dispensing\"]',\n                \"order_num\": 1,\n                \"published\": 1\n            }\n        ]\n        \n        for doc in sample_docs:\n            conn.execute(\"\"\"\n                INSERT INTO documentation (id, title, content, role, category, tags, order_num, published)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n            \"\"\", (doc[\"id\"], doc[\"title\"], doc[\"content\"], doc[\"role\"], doc[\"category\"], \n                  doc[\"tags\"], doc[\"order_num\"], doc[\"published\"]))\n        \n        # Sample FAQ\n        sample_faqs = [\n            {\n                \"id\": str(uuid.uuid4()),\n                \"question\": \"How do I reset my biometric authentication?\",\n                \"answer\": \"Contact your system administrator or submit a support ticket. Biometric resets require identity verification for security.\",\n                \"role\": None,\n                \"category\": \"authentication\",\n                \"order_num\": 1\n            },\n            {\n                \"id\": str(uuid.uuid4()),\n                \"question\": \"What should I do if a claim is denied?\",\n                \"answer\": \"Review the denial reason, gather additional documentation if needed, and submit an appeal through the appeals portal within 30 days.\",\n                \"role\": \"doctor\",\n                \"category\": \"claims\",\n                \"order_num\": 2\n            },\n            {\n                \"id\": str(uuid.uuid4()),\n                \"question\": \"How do I check if a medication is covered?\",\n                \"answer\": \"Use the formulary lookup tool in the pharmacy dashboard or check the patient's benefit summary.\",\n                \"role\": \"pharmacist\",\n                \"category\": \"benefits\",\n                \"order_num\": 1\n            }\n        ]\n        \n        for faq in sample_faqs:\n            conn.execute(\"\"\"\n                INSERT INTO faq (id, question, answer, role, category, order_num)\n                VALUES (?, ?, ?, ?, ?, ?)\n            \"\"\", (faq[\"id\"], faq[\"question\"], faq[\"answer\"], faq[\"role\"], \n                  faq[\"category\"], faq[\"order_num\"]))\n        \n        conn.commit()\n        print(\"✅ Support system initialized with sample data\")\n        \n    except Exception as e:\n        print(f\"❌ Error initializing support data: {e}\")\n    finally:\n        conn.close()\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(support_app, host=\"0.0.0.0\", port=8002, log_level=\"info\")","size_bytes":21343},"legal_docs/README.md":{"content":"# ERLESSED HEALTHCARE PLATFORM - LEGAL DOCUMENTATION\n\n**Document Repository for Kenyan Healthcare Compliance**  \n**Platform:** Aboolean Technologies Ltd.  \n**Last Updated:** December 19, 2024\n\n---\n\n## DOCUMENT OVERVIEW\n\nThis repository contains the complete legal framework for the Erlessed Healthcare Platform, ensuring full compliance with Kenyan healthcare regulations, data protection laws, and professional standards.\n\n### Core Legal Documents\n\n| Document | Purpose | Sections | Status |\n|----------|---------|----------|---------|\n| [Terms of Service](./terms_of_service.md) | Healthcare provider and insurer terms | 21 sections | ✅ Complete |\n| [Privacy Policy](./privacy_policy.md) | Data protection and privacy compliance | 18 sections | ✅ Complete |\n| [Patient Consent Statement](./patient_consent_statement.md) | Patient consent and data access | 16 sections + 5 forms | ✅ Complete |\n| [Compliance Summary](./compliance_summary.md) | Executive compliance overview | 13 sections | ✅ Complete |\n\n## REGULATORY COMPLIANCE MATRIX\n\n### Primary Legislation Compliance\n\n| Law/Regulation | Document Coverage | Implementation Status |\n|----------------|------------------|----------------------|\n| **Data Protection Act of Kenya (2019)** | All documents | ✅ Fully Compliant |\n| **Health Act (2017)** | Terms of Service, Privacy Policy | ✅ Fully Compliant |\n| **SHA Medical Billing Guidelines** | Terms of Service, Compliance Summary | ✅ Fully Compliant |\n\n### Professional Licensing Compliance\n\n| Authority | Verification Type | Implementation |\n|-----------|------------------|----------------|\n| **KMPDC** (Kenya Medical Practitioners and Dentists Council) | Real-time license verification | ✅ Implemented |\n| **Clinical Officers Council** | Registration validation | ✅ Implemented |\n| **PPB** (Pharmacy and Poisons Board) | License and scope verification | ✅ Implemented |\n| **IRA** (Insurance Regulatory Authority) | Insurance provider validation | ✅ Implemented |\n\n## KEY COMPLIANCE FEATURES\n\n### AI and Automated Decision-Making\n- **Transparent AI processing** with patient notification requirements\n- **Human review rights** for all automated decisions\n- **Explainable AI** with clear reasoning provided\n- **Bias monitoring** and algorithmic auditing procedures\n- **Opt-out mechanisms** for automated processing\n\n### Biometric Data Protection\n- **Enhanced security measures** with AES-256 encryption\n- **Separate consent requirements** for biometric processing\n- **Granular control** over biometric data usage\n- **Secure deletion** capabilities upon request\n- **Alternative authentication** options available\n\n### Patient Rights Framework\n- **Comprehensive consent management** with 5 distinct consent types\n- **Data portability** and access rights\n- **Right to rectification** and erasure\n- **Appeal mechanisms** for automated decisions\n- **Multi-language support** (English/Swahili)\n\n### SHA Integration Compliance\n- **Real-time tariff verification** against current SHA schedules\n- **ICD-10 coding validation** with automatic updates\n- **Audit trail maintenance** for all claims processing\n- **Documentation requirements** automation\n\n## DOCUMENT USAGE GUIDELINES\n\n### For Healthcare Providers\n1. **Read Terms of Service** (Section 4 - Permitted Uses)\n2. **Review AI disclaimers** (Section 6 - AI-Powered Decision Making)\n3. **Understand patient consent requirements** (Patient Consent Statement)\n4. **Familiarize with fraud detection procedures** (Section 9 - Fraud Detection)\n\n### For Insurance Providers\n1. **Review Terms of Service** (Section 4.2 - Insurance Provider Uses)\n2. **Understand SHA compliance requirements** (Section 11 - SHA Billing)\n3. **Review data sharing provisions** (Privacy Policy Section 9)\n4. **Understand audit and reporting obligations** (Section 17 - Regulatory Compliance)\n\n### For Patients\n1. **Read Patient Consent Statement** in full\n2. **Understand your rights** (Section 7 - Your Rights and Choices)\n3. **Review biometric data protections** (Section 14.2 - Biometric Data Consent)\n4. **Know complaint procedures** (Section 17 - Contact Information)\n\n### For Technical Teams\n1. **Review Compliance Summary** for implementation requirements\n2. **Understand security obligations** (Privacy Policy Section 11)\n3. **Review audit and monitoring requirements** (Compliance Summary Section 7)\n4. **Implement consent management systems** per specifications\n\n## CONSENT FORM QUICK REFERENCE\n\n### Required Consent Forms\n\n| Consent Type | Purpose | Required | Withdrawal |\n|--------------|---------|----------|------------|\n| **General Data Processing** | Basic healthcare data use | ✅ Mandatory | Available with limitations |\n| **Biometric Data** | Fingerprint/facial recognition | ❌ Optional | Full withdrawal available |\n| **AI-Powered Services** | Automated decision assistance | ❌ Optional | Available without affecting care |\n| **Research and Analytics** | Anonymous data for research | ❌ Optional | Full withdrawal available |\n| **Marketing Communications** | Health education and updates | ❌ Optional | Full withdrawal available |\n\n### Special Consent Considerations\n\n| Situation | Consent Requirements | Override Conditions |\n|-----------|---------------------|-------------------|\n| **Emergency Treatment** | Consent waived for life-saving care | Medical emergency only |\n| **Mental Health** | Enhanced consent requirements | Court order or imminent danger |\n| **Minors (Under 16)** | Parental/guardian consent required | Emancipation or court order |\n| **Adolescents (16-17)** | Limited independent consent | Sensitive health services |\n\n## IMPLEMENTATION CHECKLIST\n\n### Legal Documentation ✅ Complete\n- [x] Terms of Service drafted and reviewed\n- [x] Privacy Policy comprehensive coverage\n- [x] Patient Consent Statement with multiple forms\n- [x] Compliance Summary with implementation guidance\n\n### Technical Implementation\n- [x] Consent management system integrated\n- [x] Professional license verification API\n- [x] Real-time SHA tariff checking\n- [x] Biometric data encryption (AES-256)\n- [x] Audit logging for all data access\n- [x] AI decision transparency features\n\n### Operational Procedures\n- [ ] Staff training on legal requirements\n- [ ] Data Protection Officer registration\n- [ ] Incident response procedures testing\n- [ ] Regular compliance auditing schedule\n- [ ] User education materials distribution\n\n### Regulatory Engagement\n- [ ] Data Protection Commissioner consultation\n- [ ] SHA compliance verification\n- [ ] Professional board coordination\n- [ ] Legal counsel final review\n\n## CONTACT INFORMATION\n\n### Internal Legal Team\n**Data Protection Officer**  \nEmail: dpo@erlessed.com  \nPhone: +254 [Number]\n\n**Legal and Compliance Officer**  \nEmail: legal@erlessed.com  \nPhone: +254 [Number]\n\n### External Regulatory Authorities\n**Office of the Data Protection Commissioner**  \nEmail: info@odpc.go.ke  \nPhone: +254 20 2628 000  \nWebsite: www.odpc.go.ke\n\n**National Hospital Insurance Fund (SHA)**  \nEmail: info@nhif.or.ke  \nPhone: +254 20 2724 000  \nWebsite: www.nhif.or.ke\n\n## DOCUMENT MAINTENANCE\n\n### Review Schedule\n- **Quarterly:** Regulatory compliance updates\n- **Biannually:** Legal document review\n- **Annually:** Comprehensive compliance audit\n- **As needed:** Emergency legal updates\n\n### Update Triggers\n- New healthcare legislation\n- Data protection law changes\n- Professional board policy updates\n- Platform feature additions\n- Regulatory authority guidance\n\n### Version Control\n- **Current Version:** 1.0 (All documents)\n- **Next Review:** March 19, 2025\n- **Change Management:** Git-based versioning\n- **Approval Process:** Legal counsel + DPO sign-off\n\n---\n\n**LEGAL DISCLAIMER**\n\nThese documents have been prepared for compliance with Kenyan healthcare and data protection regulations as of December 19, 2024. Legal requirements may change, and organizations should seek independent legal counsel for specific compliance questions. This documentation framework provides comprehensive coverage but should be reviewed by qualified legal professionals before implementation.\n\n**Document Classification:** Public - Implementation Guidance  \n**Distribution:** Unrestricted  \n**Retention:** 7 years per regulatory requirements","size_bytes":8231},"legal_docs/compliance_summary.md":{"content":"# ERLESSED HEALTHCARE PLATFORM\n## LEGAL COMPLIANCE SUMMARY\n\n**Document Type:** Executive Compliance Overview  \n**Effective Date:** December 19, 2024  \n**Platform:** Aboolean Technologies Ltd.  \n**Regulatory Framework:** Republic of Kenya\n\n---\n\n## 1. REGULATORY COMPLIANCE OVERVIEW\n\n### 1.1 Primary Legal Framework\n**Data Protection Act of Kenya (2019)**\n- Full compliance with data subject rights (Articles 31-45)\n- Data Protection Officer appointed and registered\n- 72-hour breach notification procedures implemented\n- Privacy by design principles embedded in platform architecture\n\n**Health Act (2017)**\n- Healthcare provider registration verification\n- Patient confidentiality and consent requirements\n- Medical data security and access controls\n- Health information exchange standards\n\n**SHA Medical Billing Guidelines**\n- Real-time tariff compliance checking\n- ICD-10 coding validation\n- Documentation requirements automation\n- Audit trail maintenance for all claims\n\n### 1.2 Professional Licensing Compliance\n**Kenya Medical Practitioners and Dentists Council (KMPDC)**\n- Real-time license verification API integration\n- Automatic suspension detection and access revocation\n- Continuing professional development tracking\n- Disciplinary status monitoring\n\n**Clinical Officers Council**\n- License validity verification\n- Scope of practice enforcement\n- Registration renewal tracking\n- Professional standards compliance\n\n**Pharmacy and Poisons Board (PPB)**\n- Pharmacist license verification\n- Controlled substance tracking\n- Prescription validation rules\n- Drug interaction monitoring\n\n### 1.3 Insurance Regulatory Compliance\n**Insurance Regulatory Authority (IRA)**\n- Insurance provider license verification\n- Solvency monitoring for claims processing\n- Regulatory reporting automation\n- Consumer protection compliance\n\n## 2. DOCUMENT IMPLEMENTATION STATUS\n\n### 2.1 Terms of Service\n**Status:** ✅ Complete and Legally Compliant\n- Healthcare provider terms (21 sections)\n- Insurance provider terms\n- AI disclaimer provisions\n- SHA billing compliance requirements\n- Professional liability limitations\n- Dispute resolution mechanisms\n\n**Key Features:**\n- Automated professional license verification\n- Real-time regulatory compliance updates\n- Fraud detection and reporting obligations\n- Patient consent management requirements\n\n### 2.2 Privacy Policy\n**Status:** ✅ Complete and Legally Compliant\n- Comprehensive data protection coverage (18 sections)\n- Biometric data special protections\n- AI transparency and patient rights\n- International transfer safeguards\n- Children's privacy protections\n- Breach notification procedures\n\n**Key Features:**\n- Granular consent management\n- Data subject rights exercise procedures\n- AI explainability provisions\n- Retention schedule implementation\n- Cross-border data transfer controls\n\n### 2.3 Patient Consent Statement\n**Status:** ✅ Complete and Legally Compliant\n- Multi-layered consent framework (16 sections)\n- Biometric consent separation\n- AI decision-making transparency\n- Research participation options\n- Emergency access provisions\n- Guardian/representative procedures\n\n**Key Features:**\n- Granular consent options (5 separate consent forms)\n- Age-appropriate consent procedures\n- Withdrawal mechanisms\n- Emergency override provisions\n- Multi-language support capability\n\n## 3. AI AND AUTOMATED DECISION-MAKING COMPLIANCE\n\n### 3.1 Data Protection Act Article 34 Compliance\n**Automated Decision-Making Rights:**\n- Right to human review of all AI decisions\n- Explanation of automated decision logic\n- Appeal mechanisms for AI-generated outcomes\n- Opt-out options for automated processing\n\n**Implementation:**\n- AI decision audit trails\n- Human oversight requirements\n- Explainable AI algorithms\n- Patient notification systems\n\n### 3.2 Healthcare-Specific AI Safeguards\n**Clinical Decision Support:**\n- AI recommendations clearly marked as advisory\n- Healthcare provider retains final decision authority\n- Bias monitoring and algorithmic auditing\n- Continuous learning with ethical oversight\n\n**Fraud Detection:**\n- Automated pattern recognition with human validation\n- False positive correction mechanisms\n- Due process for fraud allegations\n- Appeals and review procedures\n\n## 4. BIOMETRIC DATA SPECIAL PROTECTIONS\n\n### 4.1 Enhanced Security Requirements\n**Technical Safeguards:**\n- AES-256 encryption for biometric templates\n- Separate storage from personal identifiers\n- Hash-based biometric matching\n- Secure deletion capabilities\n\n**Administrative Safeguards:**\n- Explicit consent requirements\n- Purpose limitation enforcement\n- Access logging and monitoring\n- Staff training on biometric handling\n\n### 4.2 Patient Rights Enhancement\n**Biometric-Specific Rights:**\n- Separate consent withdrawal\n- Template deletion on request\n- Alternative authentication options\n- No discrimination for biometric refusal\n\n## 5. SHA INTEGRATION COMPLIANCE\n\n### 5.1 Billing and Claims Processing\n**Tariff Compliance:**\n- Real-time tariff verification\n- Automatic rate updates\n- Overcharge prevention\n- Documentation requirements\n\n**Claims Documentation:**\n- ICD-10 coding validation\n- Supporting document automation\n- Audit trail maintenance\n- Regulatory reporting\n\n### 5.2 Member Data Protection\n**SHA Data Handling:**\n- Member consent verification\n- Benefit limit tracking\n- Eligibility confirmation\n- Privacy protection measures\n\n## 6. CROSS-BORDER DATA CONSIDERATIONS\n\n### 6.1 International Transfers\n**Current Status:** Kenya-First Policy\n- Primary data processing within Kenya\n- Limited transfers to adequate jurisdictions only\n- Standard contractual clauses for necessary transfers\n- Patient notification for all international transfers\n\n### 6.2 Cloud Infrastructure Compliance\n**Data Residency:**\n- Primary databases hosted in Kenya\n- Backup systems within COMESA region\n- Encryption for all cross-border transmissions\n- Jurisdictional compliance monitoring\n\n## 7. AUDIT AND MONITORING FRAMEWORK\n\n### 7.1 Internal Compliance Monitoring\n**Regular Assessments:**\n- Quarterly privacy impact assessments\n- Annual data protection audits\n- Monthly security vulnerability scans\n- Continuous AI bias monitoring\n\n**Documentation Requirements:**\n- Complete audit trails for all data access\n- Decision-making process documentation\n- Incident response procedures\n- Training and awareness records\n\n### 7.2 External Compliance Verification\n**Regulatory Reporting:**\n- Annual compliance reports to Data Protection Office\n- SHA audit cooperation procedures\n- Professional board reporting requirements\n- Insurance regulatory submissions\n\n**Third-Party Audits:**\n- Annual security audits by certified firms\n- Data protection compliance assessments\n- Healthcare standards verification\n- Financial audit requirements\n\n## 8. INCIDENT RESPONSE AND BREACH MANAGEMENT\n\n### 8.1 Data Breach Response Plan\n**Timeline Requirements:**\n- Immediate containment (within 1 hour)\n- Internal assessment (within 24 hours)\n- Regulatory notification (within 72 hours)\n- Individual notification (high-risk breaches)\n\n**Response Team:**\n- Data Protection Officer (lead)\n- Technical Security Team\n- Legal and Compliance Officer\n- Healthcare Operations Manager\n- External legal counsel (as needed)\n\n### 8.2 Communication Protocols\n**Internal Communications:**\n- Executive team notification\n- Board of directors briefing\n- Staff training updates\n- Process improvement reviews\n\n**External Communications:**\n- Data Protection Commissioner notification\n- Affected individual communications\n- Regulatory authority cooperation\n- Media response (if required)\n\n## 9. ONGOING COMPLIANCE MAINTENANCE\n\n### 9.1 Legal Updates Monitoring\n**Regulatory Tracking:**\n- Parliamentary legislation monitoring\n- Regulatory authority guidance updates\n- Professional board policy changes\n- International best practice adoption\n\n**Implementation Process:**\n- Legal review of changes\n- Impact assessment on platform\n- Documentation updates\n- Staff training updates\n- User notification procedures\n\n### 9.2 Technology Evolution Compliance\n**Emerging Technologies:**\n- AI algorithm updates and bias testing\n- New biometric technology assessments\n- Healthcare device integration reviews\n- Security technology upgrades\n\n**Compliance Integration:**\n- Privacy by design for new features\n- Data protection impact assessments\n- Stakeholder consultation processes\n- Regulatory pre-approval where required\n\n## 10. RISK ASSESSMENT AND MITIGATION\n\n### 10.1 Identified Compliance Risks\n**High-Risk Areas:**\n- Cross-border data transfers\n- AI decision-making accuracy\n- Biometric data breaches\n- Professional license verification\n\n**Mitigation Strategies:**\n- Enhanced encryption and security measures\n- Regular AI auditing and bias testing\n- Multi-factor authentication requirements\n- Real-time license verification systems\n\n### 10.2 Business Continuity Planning\n**Compliance Continuity:**\n- Backup compliance officers\n- Alternative processing locations\n- Emergency authorization procedures\n- Stakeholder communication plans\n\n## 11. TRAINING AND AWARENESS PROGRAM\n\n### 11.1 Staff Training Requirements\n**Mandatory Training:**\n- Data protection fundamentals (annual)\n- Healthcare privacy regulations (biannual)\n- AI ethics and bias awareness (annual)\n- Incident response procedures (quarterly)\n\n**Role-Specific Training:**\n- Technical staff: security and encryption\n- Healthcare staff: clinical data handling\n- Customer service: patient rights and complaints\n- Management: compliance oversight and reporting\n\n### 11.2 User Education\n**Healthcare Provider Education:**\n- Platform compliance features\n- Professional obligation reminders\n- Best practice guidelines\n- Regulatory update notifications\n\n**Patient Education:**\n- Privacy rights awareness\n- Consent management tools\n- Data portability options\n- Complaint and appeal procedures\n\n## 12. IMPLEMENTATION CHECKLIST\n\n### 12.1 Immediate Actions ✅ Complete\n- [x] Legal documentation creation\n- [x] Privacy policy implementation\n- [x] Consent management system\n- [x] Terms of service deployment\n- [x] Data protection officer appointment\n\n### 12.2 30-Day Implementation Plan\n- [ ] Staff training program rollout\n- [ ] User education materials distribution\n- [ ] Compliance monitoring dashboard\n- [ ] External legal review completion\n- [ ] Regulatory authority registration\n\n### 12.3 90-Day Compliance Verification\n- [ ] Independent compliance audit\n- [ ] Penetration testing completion\n- [ ] Business continuity testing\n- [ ] Stakeholder feedback integration\n- [ ] Regulatory authority consultation\n\n## 13. CONTACT INFORMATION\n\n### 13.1 Internal Compliance Team\n**Data Protection Officer**  \nEmail: dpo@erlessed.com  \nPhone: +254 [Number]  \nEmergency: +254 [Number]\n\n**Legal and Compliance Officer**  \nEmail: legal@erlessed.com  \nPhone: +254 [Number]\n\n**Chief Information Security Officer**  \nEmail: security@erlessed.com  \nPhone: +254 [Number]\n\n### 13.2 External Legal Counsel\n**Primary Legal Firm**  \n[Law Firm Name]  \nAddress: [Complete Address], Nairobi  \nContact: [Partner Name]  \nEmail: [Email]  \nPhone: +254 [Number]\n\n### 13.3 Regulatory Authorities\n**Office of the Data Protection Commissioner**  \nEmail: info@odpc.go.ke  \nPhone: +254 20 2628 000  \nWebsite: www.odpc.go.ke\n\n**National Hospital Insurance Fund (SHA)**  \nEmail: info@nhif.or.ke  \nPhone: +254 20 2724 000  \nWebsite: www.nhif.or.ke\n\n---\n\n**CERTIFICATION**\n\nThis compliance summary has been reviewed and approved by:\n\n**Legal Counsel:** _________________________ **Date:** _____________  \n**Data Protection Officer:** _________________________ **Date:** _____________  \n**Chief Executive Officer:** _________________________ **Date:** _____________\n\n**Document Version:** 1.0  \n**Last Updated:** December 19, 2024  \n**Next Review Date:** March 19, 2025  \n**Classification:** Confidential - Internal Use Only","size_bytes":11791},"legal_docs/patient_consent_statement.md":{"content":"# ERLESSED HEALTHCARE PLATFORM\n## PATIENT CONSENT AND DATA ACCESS STATEMENT\n\n**Document Type:** Informed Consent for Healthcare Data Processing  \n**Effective Date:** December 19, 2024  \n**Regulatory Compliance:** Data Protection Act of Kenya (2019), Health Act (2017)  \n**Platform:** Aboolean Technologies Ltd.\n\n---\n\n## PATIENT INFORMATION SECTION\n\n**Patient Name:** _________________________________  \n**Date of Birth:** _________________________________  \n**National ID/Passport:** _________________________________  \n**Phone Number:** _________________________________  \n**Email Address:** _________________________________  \n**Next of Kin:** _________________________________  \n**Emergency Contact:** _________________________________\n\n---\n\n## 1. INTRODUCTION AND PURPOSE\n\nThis consent form explains how the Erlessed Healthcare Platform will collect, use, and protect your personal health information. By signing this document, you are giving permission for specific uses of your medical data and biometric information for healthcare purposes.\n\n**What is Erlessed?**  \nErlessed is a digital healthcare platform that helps healthcare providers, insurance companies, and you manage your medical care more effectively. It uses advanced technology, including artificial intelligence, to improve healthcare delivery and reduce fraud.\n\n## 2. TYPES OF INFORMATION WE COLLECT\n\n### 2.1 Medical Information\nWe will collect and process:\n- **Your medical history:** Previous illnesses, surgeries, allergies, and family medical history\n- **Current health status:** Diagnoses, test results, vital signs, and treatment plans\n- **Medications:** All prescriptions, dosages, and medication history\n- **Laboratory results:** Blood tests, imaging studies, and other diagnostic tests\n- **Mental health information:** Psychological assessments and therapy records (with separate consent)\n\n### 2.2 Biometric Data (Special Protection)\nWith your explicit consent, we may collect:\n- **Fingerprints:** For secure patient identification and preventing medical identity theft\n- **Facial recognition:** To verify your identity during healthcare visits\n- **Voice patterns:** For secure phone-based services\n- **Other biometric identifiers:** As technology becomes available\n\n**Important:** Biometric data receives special legal protection and is encrypted using advanced security measures.\n\n### 2.3 Insurance and Billing Information\n- **SHA membership details:** Your scheme information and coverage details\n- **Private insurance:** Policy numbers, coverage limits, and benefit information\n- **Billing records:** Costs of care, payments made, and outstanding balances\n- **Claims history:** Previous insurance claims and their outcomes\n\n### 2.4 Contact and Demographic Information\n- **Personal details:** Name, address, phone number, email, date of birth\n- **Emergency contacts:** Family members or friends to contact in emergencies\n- **Employment information:** For insurance and billing purposes\n- **Identification numbers:** National ID, passport, or other official identification\n\n## 3. HOW WE USE YOUR INFORMATION\n\n### 3.1 Primary Healthcare Uses\nYour information will be used to:\n- **Coordinate your care:** Share information between your doctors, specialists, and other healthcare providers\n- **Process insurance claims:** Submit claims to SHA or private insurance for payment\n- **Prevent medical errors:** Alert providers to allergies, drug interactions, and contraindications\n- **Emergency treatment:** Provide critical information during medical emergencies\n- **Appointment scheduling:** Coordinate care across multiple healthcare providers\n\n### 3.2 AI-Powered Healthcare Support\nWe use artificial intelligence to:\n- **Clinical decision support:** Help your doctors make better treatment decisions\n- **Drug interaction checking:** Automatically screen for dangerous medication combinations\n- **Risk assessment:** Identify patients at risk for specific health conditions\n- **Treatment recommendations:** Suggest evidence-based treatment options\n\n**Important Disclaimer:** AI recommendations are tools to assist healthcare providers, not replace them. Your doctor always makes the final medical decisions.\n\n### 3.3 Fraud Prevention and Detection\nTo protect you and the healthcare system:\n- **Identity verification:** Confirm you are who you say you are\n- **Claims monitoring:** Detect fraudulent insurance claims that increase costs for everyone\n- **Provider oversight:** Monitor healthcare providers for unusual billing patterns\n- **Pattern analysis:** Identify suspicious activities that may indicate fraud\n\n## 4. ARTIFICIAL INTELLIGENCE DISCLAIMERS\n\n### 4.1 What AI Does in Your Healthcare\nArtificial intelligence helps by:\n- **Analyzing patterns:** Looking at large amounts of medical data to identify trends\n- **Making predictions:** Estimating your risk for certain health conditions\n- **Suggesting treatments:** Recommending evidence-based care options\n- **Detecting fraud:** Identifying suspicious claims or activities\n\n### 4.2 AI Limitations and Your Rights\n**Important:** You have the right to:\n- **Human review:** Request that a human professional review any AI-generated recommendation\n- **Explanation:** Understand how AI reached its conclusions about your care\n- **Appeal:** Challenge AI decisions through established procedures\n- **Opt-out:** Choose not to have AI involved in certain aspects of your care\n\n**Medical Responsibility:** Your healthcare providers remain fully responsible for all medical decisions. AI is a tool to assist them, not replace their professional judgment.\n\n### 4.3 AI Accuracy and Bias\n- **Continuous improvement:** AI systems are regularly tested and updated\n- **Bias monitoring:** We actively check for and correct unfair bias in AI decisions\n- **Human oversight:** Qualified healthcare professionals supervise all AI recommendations\n- **Quality assurance:** Regular audits ensure AI systems work fairly for all patients\n\n## 5. PATIENT TRACKING AND MONITORING\n\n### 5.1 Types of Tracking\nWith your consent, we may track:\n- **Treatment adherence:** Whether you take medications as prescribed and attend appointments\n- **Health outcomes:** How well treatments work for you over time\n- **Care utilization:** Which healthcare services you use and how often\n- **Population health:** Anonymous trends to improve healthcare for everyone\n\n### 5.2 Your Control Over Tracking\nYou can:\n- **Choose specific tracking:** Agree to some types of tracking but not others\n- **Withdraw consent:** Stop tracking at any time without affecting your healthcare\n- **Review tracking data:** See what information has been collected about you\n- **Correct errors:** Fix any mistakes in your tracking information\n\n### 5.3 Benefits of Tracking\nTracking helps by:\n- **Improving your care:** Identifying what treatments work best for you\n- **Preventing complications:** Early warning for potential health problems\n- **Research benefits:** Contributing to medical research that helps others\n- **Cost savings:** More efficient healthcare reduces costs for everyone\n\n## 6. DATA SHARING AND WHO CAN ACCESS YOUR INFORMATION\n\n### 6.1 Healthcare Providers\nYour information may be shared with:\n- **Your care team:** Doctors, nurses, specialists directly involved in your care\n- **Referral providers:** Specialists your doctor refers you to\n- **Emergency services:** Critical information during medical emergencies\n- **Laboratory and imaging:** Facilities performing tests ordered by your doctors\n\n### 6.2 Insurance and Payment\nInformation shared for payment includes:\n- **SHA:** Claims processing and benefit verification\n- **Private insurance:** Coverage verification and claims submission\n- **Audit compliance:** Providing documentation for insurance audits\n- **Government health schemes:** Processing claims for government programs\n\n### 6.3 Legal and Regulatory Requirements\nWe may share information when required by law:\n- **Public health reporting:** Disease surveillance and outbreak investigation\n- **Professional licensing boards:** Disciplinary proceedings against healthcare providers\n- **Law enforcement:** Court orders and criminal investigations only\n- **Data protection audits:** Compliance investigations by government agencies\n\n### 6.4 Research and Quality Improvement\nWith separate consent:\n- **Medical research:** Anonymous data for research studies\n- **Quality improvement:** Identifying ways to improve healthcare\n- **Population health:** Understanding health trends in the community\n- **Academic partnerships:** Collaboration with universities and research institutions\n\n## 7. YOUR RIGHTS AND CHOICES\n\n### 7.1 Access Rights\nYou have the right to:\n- **See your information:** Request copies of all personal data we hold about you\n- **Understand processing:** Learn how your information is being used\n- **Know who has access:** Find out who has received your information\n- **Get explanations:** Understand any AI decisions affecting your care\n\n### 7.2 Control Rights\nYou can:\n- **Correct errors:** Fix any wrong information in your records\n- **Request deletion:** Ask for information to be removed (with legal limitations)\n- **Restrict processing:** Limit how your information is used\n- **Object to processing:** Oppose certain uses of your information\n\n### 7.3 Consent Management\nYou may:\n- **Withdraw consent:** Stop any processing based on your consent\n- **Give granular consent:** Agree to some uses but not others\n- **Change your mind:** Update your consent choices at any time\n- **Get support:** Receive help understanding your options\n\n### 7.4 Complaints and Appeals\nIf you have concerns:\n- **Contact us first:** Speak with our Data Protection Officer\n- **Formal complaints:** File complaints with the Data Protection Commissioner\n- **Legal assistance:** Seek independent legal advice\n- **Compensation:** Claim compensation for damages from data misuse\n\n## 8. SECURITY AND PROTECTION MEASURES\n\n### 8.1 Technical Protection\nYour information is protected by:\n- **Encryption:** Advanced encryption for all data storage and transmission\n- **Access controls:** Only authorized personnel can access your information\n- **Audit trails:** Complete records of who accesses your information and when\n- **Backup systems:** Secure backups to prevent data loss\n\n### 8.2 Staff Training and Policies\nAll staff receive:\n- **Privacy training:** Regular education about protecting patient information\n- **Access policies:** Clear rules about when and how to access patient data\n- **Confidentiality agreements:** Legal obligations to protect your privacy\n- **Disciplinary procedures:** Consequences for privacy violations\n\n### 8.3 Physical Security\n- **Secure facilities:** Protected buildings with controlled access\n- **Device security:** Encrypted computers and mobile devices\n- **Clean desk policies:** No patient information left unattended\n- **Secure disposal:** Safe destruction of old documents and equipment\n\n## 9. RETENTION AND DELETION\n\n### 9.1 How Long We Keep Your Information\n- **Active care:** Information retained while you receive ongoing care\n- **Medical records:** 10 years after last treatment (longer for children)\n- **Biometric data:** 7 years or until you request deletion\n- **Insurance records:** 7 years per regulatory requirements\n\n### 9.2 Secure Deletion\nWhen information is deleted:\n- **Complete removal:** Information permanently deleted from all systems\n- **Verification:** Confirmation that deletion was successful\n- **Backup cleanup:** Information removed from backup systems\n- **Certificate of destruction:** Documentation of secure deletion\n\n### 9.3 Legal Retention Requirements\nSome information must be kept longer:\n- **Regulatory compliance:** Government requirements for certain records\n- **Legal proceedings:** Information relevant to ongoing legal cases\n- **Public health:** Information needed for disease surveillance\n- **Research:** Anonymous data for approved research studies\n\n## 10. EMERGENCY SITUATIONS\n\n### 10.1 Emergency Access\nIn medical emergencies:\n- **Life-saving access:** Critical information available to emergency responders\n- **Consent override:** Access permitted to save life or prevent serious harm\n- **Limited information:** Only essential medical information shared\n- **Documentation:** All emergency access logged and reviewed\n\n### 10.2 What Emergency Information Includes\n- **Allergies and adverse reactions:** Critical safety information\n- **Current medications:** Preventing dangerous drug interactions\n- **Medical conditions:** Relevant diagnoses and treatment history\n- **Emergency contacts:** People to notify during emergencies\n\n### 10.3 After Emergency Treatment\n- **Notification:** You or your family informed about information access\n- **Documentation:** Details of what information was accessed and why\n- **Consent restoration:** Normal consent rules resume after emergency\n- **Review process:** Emergency access reviewed for appropriateness\n\n## 11. SPECIAL SITUATIONS\n\n### 11.1 Mental Health Information\nMental health data receives extra protection:\n- **Separate consent:** Specific consent required for mental health records\n- **Limited sharing:** Stricter rules about who can access information\n- **Professional standards:** Mental health professionals follow special confidentiality rules\n- **Patient control:** Enhanced patient control over mental health information sharing\n\n### 11.2 Communicable Diseases\nFor infectious diseases:\n- **Public health reporting:** Some diseases must be reported to health authorities\n- **Contact tracing:** Information may be shared to prevent disease spread\n- **Anonymous reporting:** Personal identifiers removed when possible\n- **Consent limitations:** Public health may override individual consent in emergencies\n\n### 11.3 Substance Abuse Treatment\nAddiction treatment information:\n- **Federal protection:** Special legal protections under substance abuse laws\n- **Limited disclosure:** Very restricted sharing even with other healthcare providers\n- **Patient consent:** Explicit consent required for most sharing\n- **Treatment focus:** Sharing limited to supporting treatment goals\n\n### 11.4 Genetic Information\nGenetic data receives special handling:\n- **Family implications:** Genetic information may affect family members\n- **Insurance restrictions:** Limited use in insurance decisions\n- **Research considerations:** Special protections for genetic research\n- **Counseling support:** Genetic counseling available for complex results\n\n## 12. CHILDREN AND ADOLESCENT PATIENTS\n\n### 12.1 Parental Rights and Responsibilities\nFor patients under 18:\n- **Parental consent:** Parents/guardians provide consent for minors\n- **Age-appropriate explanation:** Children receive age-appropriate information\n- **Graduated consent:** Older children involved in consent decisions\n- **Best interests:** All decisions made in the child's best interests\n\n### 12.2 Adolescent Privacy Rights\nFor patients 16-17 years old:\n- **Confidential services:** Some healthcare services may be confidential\n- **Sensitive topics:** Special privacy protections for reproductive health, mental health, and substance abuse\n- **Communication preferences:** Choice about parental involvement in some situations\n- **Legal requirements:** Compliance with Kenyan laws about minor's healthcare rights\n\n### 12.3 Transition to Adult Care\nWhen turning 18:\n- **Consent transfer:** Patient assumes full control over healthcare decisions\n- **Information continuity:** Smooth transition of medical records\n- **New consents:** Updated consent forms for adult privacy rules\n- **Support available:** Help understanding new rights and responsibilities\n\n## 13. SHA AND INSURANCE SPECIFIC PROVISIONS\n\n### 13.1 SHA Claims Processing\nFor SHA members:\n- **Eligibility verification:** Confirming your SHA membership and coverage\n- **Benefit limits:** Tracking your benefit usage against policy limits\n- **Tariff compliance:** Ensuring charges comply with SHA approved rates\n- **Documentation requirements:** Maintaining records per SHA standards\n\n### 13.2 Claims Submission and Processing\n- **Automatic submission:** Claims automatically submitted to SHA when possible\n- **Real-time verification:** Immediate checking of coverage and benefits\n- **Audit support:** Maintaining documentation for SHA audits\n- **Appeals process:** Supporting appeals of denied claims\n\n### 13.3 Private Insurance Coordination\nFor private insurance:\n- **Coordination of benefits:** Managing multiple insurance policies\n- **Pre-authorization:** Obtaining approval for expensive treatments\n- **Provider networks:** Verifying in-network provider status\n- **Payment processing:** Coordinating payments between multiple insurers\n\n## 14. CONSENT FORMS AND SIGNATURES\n\n### 14.1 General Data Processing Consent\n\n**I understand and consent to:**\n- Collection and processing of my personal health information for healthcare purposes\n- Sharing of my information with my healthcare providers and care team\n- Use of my information for insurance claims processing and payment\n- Basic fraud prevention and security measures\n\n**Patient Signature:** _________________________ **Date:** _____________  \n**Witness Signature:** _________________________ **Date:** _____________\n\n### 14.2 Biometric Data Consent\n\n**I specifically consent to:**\n- Collection and processing of my biometric data (fingerprints, facial recognition, etc.)\n- Use of biometric data for patient identification and security\n- Storage of biometric templates in encrypted form\n- Sharing of biometric data with authorized healthcare providers\n\n**I understand that:**\n- Biometric data is optional and I can refuse without affecting my healthcare\n- I can withdraw this consent at any time\n- Biometric data will be securely deleted if I withdraw consent\n\n□ YES, I consent to biometric data processing  \n□ NO, I do not consent to biometric data processing\n\n**Patient Signature:** _________________________ **Date:** _____________\n\n### 14.3 AI-Powered Services Consent\n\n**I understand and consent to:**\n- Use of artificial intelligence to assist in my healthcare\n- AI analysis of my medical information for clinical decision support\n- AI-powered fraud detection and prevention measures\n- Population health analytics using my anonymous data\n\n**I understand that:**\n- AI recommendations do not replace my doctor's professional judgment\n- I can request human review of any AI-generated recommendation\n- I can opt-out of AI services without affecting my basic healthcare\n\n□ YES, I consent to AI-powered services  \n□ NO, I do not consent to AI-powered services\n\n**Patient Signature:** _________________________ **Date:** _____________\n\n### 14.4 Research and Analytics Consent\n\n**I consent to use of my anonymous data for:**\n- Medical research studies\n- Population health analysis\n- Healthcare quality improvement initiatives\n- Academic research partnerships\n\n**I understand that:**\n- My identity will be removed from research data\n- Participation in research is voluntary\n- I can withdraw from research at any time\n- Research may lead to improved healthcare for others\n\n□ YES, I consent to research use of my anonymous data  \n□ NO, I do not consent to research use\n\n**Patient Signature:** _________________________ **Date:** _____________\n\n### 14.5 Marketing and Communications Consent\n\n**I consent to receive:**\n- Health education materials and newsletters\n- Appointment reminders and health alerts\n- Information about new healthcare services\n- Satisfaction surveys and feedback requests\n\n**Communication preferences:**\n□ Email  □ SMS  □ Phone calls  □ Postal mail\n\n**I understand that:**\n- Marketing communications are optional\n- I can opt-out at any time\n- Medical communications (like test results) will continue regardless\n\n□ YES, I consent to marketing communications  \n□ NO, I do not consent to marketing communications\n\n**Patient Signature:** _________________________ **Date:** _____________\n\n## 15. WITNESS AND HEALTHCARE PROVIDER SECTION\n\n### 15.1 Healthcare Provider Certification\nI certify that:\n- The patient has been provided with adequate time to read and understand this consent\n- All questions about data processing and privacy have been answered\n- The patient appears to understand the implications of providing consent\n- Consent was given voluntarily without coercion\n\n**Healthcare Provider Name:** _________________________________  \n**License Number:** _________________________________  \n**Signature:** _________________________ **Date:** _____________\n\n### 15.2 Interpreter Certification (if applicable)\nI certify that:\n- I accurately interpreted all information in this consent form\n- The patient demonstrated understanding of the content\n- All questions were interpreted and answered accurately\n\n**Interpreter Name:** _________________________________  \n**Language:** _________________________________  \n**Signature:** _________________________ **Date:** _____________\n\n### 15.3 Guardian/Representative Consent (if applicable)\n**For patients unable to provide consent:**\n\n**Legal Authority:** □ Parent  □ Guardian  □ Power of Attorney  □ Court Order\n\n**Representative Name:** _________________________________  \n**Relationship to Patient:** _________________________________  \n**Legal Documentation:** _________________________________  \n**Signature:** _________________________ **Date:** _____________\n\n## 16. CONTACT INFORMATION FOR QUESTIONS\n\n### 16.1 Data Protection and Privacy Questions\n**Data Protection Officer**  \nEmail: dpo@erlessed.com  \nPhone: +254 [Number]  \nAddress: [Complete Address], Nairobi, Kenya\n\n### 16.2 Healthcare Questions\n**Patient Services**  \nEmail: patients@erlessed.com  \nPhone: +254 [Number]  \n24/7 Emergency Line: +254 [Number]\n\n### 16.3 Technical Support\n**Technical Support**  \nEmail: support@erlessed.com  \nPhone: +254 [Number]  \nOnline Help: www.erlessed.com/help\n\n### 16.4 Complaints and Concerns\n**Internal Complaints**  \nEmail: complaints@erlessed.com  \nPhone: +254 [Number]\n\n**External Regulator**  \nOffice of the Data Protection Commissioner  \nEmail: info@odpc.go.ke  \nPhone: +254 20 2628 000\n\n---\n\n**DOCUMENT COMPLETION CHECKLIST**\n\n□ Patient information section completed  \n□ All consent forms signed and dated  \n□ Healthcare provider certification completed  \n□ Witness signatures obtained where required  \n□ Interpreter certification completed (if applicable)  \n□ Guardian/representative section completed (if applicable)  \n□ Copy provided to patient  \n□ Original filed in patient record  \n□ Electronic copy uploaded to patient portal\n\n**Document Version:** 1.0  \n**Last Updated:** December 19, 2024  \n**Next Review Date:** December 19, 2025  \n**Language:** English (Swahili translation available upon request)\n\n**IMPORTANT:** This consent form complies with the Data Protection Act of Kenya (2019), Health Act (2017), and SHA regulations. Patients have the right to receive a copy of this completed form and access legal assistance in understanding their rights.","size_bytes":22948},"legal_docs/privacy_policy.md":{"content":"# ERLESSED HEALTHCARE PLATFORM\n## PRIVACY POLICY\n\n**Effective Date:** December 19, 2024  \n**Data Controller:** Aboolean Technologies Ltd.  \n**Regulatory Compliance:** Data Protection Act of Kenya (2019)\n\n---\n\n## 1. INTRODUCTION\n\nThis Privacy Policy explains how Aboolean Technologies Ltd. (\"we,\" \"us,\" \"our\") collects, uses, processes, and protects personal data through the Erlessed Healthcare Platform (\"Platform\"). We are committed to protecting your privacy and complying with the Data Protection Act of Kenya (2019), Health Act (2017), and applicable healthcare regulations.\n\n## 2. DATA CONTROLLER INFORMATION\n\n**Data Controller:**  \nAboolean Technologies Ltd.  \nRegistration Number: [Company Registration]  \nPhysical Address: [Complete Address], Nairobi, Kenya  \nEmail: dpo@erlessed.com  \nPhone: +254 [Number]\n\n**Data Protection Officer:**  \nName: [DPO Name]  \nEmail: dpo@erlessed.com  \nPhone: +254 [Number]\n\n## 3. TYPES OF PERSONAL DATA COLLECTED\n\n### 3.1 Biometric Data\nWe collect and process the following biometric identifiers:\n- **Fingerprint scans:** Digital templates for patient authentication\n- **Facial recognition data:** Geometric facial measurements for identity verification\n- **Voice patterns:** Audio biometric signatures for secure access\n- **Retinal scans:** When available through connected medical devices\n\n**Special Protections for Biometric Data:**\n- Encrypted storage using AES-256 encryption\n- Biometric templates stored separately from personal identifiers\n- Automatic deletion after 7 years or account closure\n- No sharing with third parties without explicit consent\n\n### 3.2 Medical and Health Data\n- **Diagnostic information:** ICD-10 codes, clinical notes, test results\n- **Treatment records:** Procedures performed, medications prescribed, therapy notes\n- **Laboratory results:** Blood tests, imaging studies, pathology reports\n- **Vital signs:** Blood pressure, heart rate, temperature, weight, height\n- **Medical history:** Previous conditions, allergies, family medical history\n- **Mental health records:** Psychological assessments, therapy sessions\n\n### 3.3 Claims and Billing Data\n- **Insurance information:** Policy numbers, coverage details, beneficiary status\n- **Financial data:** Billing amounts, payment records, outstanding balances\n- **SHA data:** Member numbers, scheme details, co-payment information\n- **Provider billing:** Service codes, treatment costs, reimbursement claims\n\n### 3.4 Demographic and Contact Information\n- **Personal identifiers:** Full name, date of birth, national ID number\n- **Contact details:** Phone numbers, email addresses, physical addresses\n- **Emergency contacts:** Next of kin information and contact details\n- **Employment data:** Occupation, employer details for insurance purposes\n\n### 3.5 Technical Data\n- **Device information:** IP addresses, browser types, operating systems\n- **Usage patterns:** Login times, feature usage, system interactions\n- **Location data:** GPS coordinates when accessing mobile features\n- **Audit logs:** All system access and data modification records\n\n## 4. LAWFUL BASIS FOR PROCESSING\n\nWe process personal data under the following lawful bases:\n\n### 4.1 Consent (Article 31, Data Protection Act 2019)\n- Biometric data processing\n- Marketing communications\n- Optional analytics and research participation\n- Third-party data sharing\n\n### 4.2 Legitimate Interests\n- Fraud detection and prevention\n- System security and integrity\n- Service improvement and optimization\n- Business operations and administration\n\n### 4.3 Legal Obligation\n- SHA reporting requirements\n- Regulatory compliance reporting\n- Tax and accounting obligations\n- Professional licensing verification\n\n### 4.4 Vital Interests\n- Emergency medical treatment\n- Public health emergency response\n- Critical patient safety alerts\n- Life-threatening situation management\n\n### 4.5 Public Task\n- Public health monitoring\n- Epidemiological surveillance\n- Healthcare quality improvement\n- Population health analytics\n\n## 5. HOW WE COLLECT PERSONAL DATA\n\n### 5.1 Direct Collection\n- Patient registration forms\n- Healthcare provider submissions\n- Insurance enrollment processes\n- Biometric enrollment sessions\n- Online account creation\n\n### 5.2 Automated Collection\n- HMS (Hospital Management System) integration\n- Medical device data feeds\n- Laboratory information systems\n- Pharmacy management systems\n- Electronic health records\n\n### 5.3 Third-Party Sources\n- SHA member databases\n- Professional licensing boards\n- Insurance provider systems\n- Government health registries\n- Referral healthcare providers\n\n## 6. PURPOSE OF DATA PROCESSING\n\n### 6.1 Primary Healthcare Purposes\n- **Patient care coordination:** Managing treatment across providers\n- **Clinical decision support:** AI-powered diagnostic assistance\n- **Medication management:** Prescription validation and drug interaction checking\n- **Appointment scheduling:** Coordinating care across multiple providers\n\n### 6.2 Claims Processing and Billing\n- **Preauthorization:** Automated and manual review of treatment requests\n- **Claims adjudication:** Processing insurance reimbursement requests\n- **SHA compliance:** Ensuring adherence to national health insurance guidelines\n- **Financial reconciliation:** Accurate billing and payment processing\n\n### 6.3 Fraud Detection and Prevention\n- **Pattern analysis:** AI-powered detection of suspicious claim patterns\n- **Provider monitoring:** Identifying unusual billing or prescribing behaviors\n- **Patient verification:** Preventing identity theft and fraudulent claims\n- **Audit support:** Providing evidence for fraud investigations\n\n### 6.4 Analytics and Research\n- **Population health:** De-identified analysis of health trends\n- **Outcome tracking:** Monitoring treatment effectiveness and patient outcomes\n- **Cost optimization:** Identifying opportunities for healthcare cost reduction\n- **Quality improvement:** Measuring and improving care quality metrics\n\n## 7. ARTIFICIAL INTELLIGENCE AND AUTOMATED DECISION MAKING\n\n### 7.1 AI Systems in Use\nThe Platform employs artificial intelligence for:\n- **Claims preauthorization:** Automated approval/denial of treatment requests\n- **Fraud detection:** Identifying suspicious patterns and behaviors\n- **Clinical decision support:** Treatment recommendations and drug interaction alerts\n- **Risk assessment:** Patient health risk scoring and predictive analytics\n\n### 7.2 Rights Regarding Automated Decisions\nUnder the Data Protection Act 2019, you have the right to:\n- **Request human review:** Any automated decision can be reviewed by qualified staff\n- **Receive explanations:** Understand the logic behind AI-powered decisions\n- **Contest decisions:** Appeal automated decisions through established procedures\n- **Opt-out:** Request manual processing for specific types of decisions\n\n### 7.3 AI Transparency and Accountability\n- **Algorithm auditing:** Regular testing for bias, accuracy, and fairness\n- **Performance monitoring:** Continuous tracking of AI system effectiveness\n- **Human oversight:** Qualified professionals supervise all AI recommendations\n- **Explainable AI:** Clear explanations provided for all automated decisions\n\n## 8. PATIENT TRACKING AND MONITORING\n\n### 8.1 Types of Tracking\n- **Treatment adherence:** Monitoring medication compliance and appointment attendance\n- **Outcome monitoring:** Tracking patient health improvements and complications\n- **Care coordination:** Following patients across multiple healthcare providers\n- **Population health:** Aggregated tracking for public health insights\n\n### 8.2 Consent and Control\n- **Explicit consent:** Required for all non-essential tracking activities\n- **Granular control:** Patients can opt-out of specific tracking types\n- **Withdrawal rights:** Tracking consent can be withdrawn at any time\n- **Emergency exceptions:** Critical health situations may override tracking preferences\n\n### 8.3 Data Minimization\n- **Purpose limitation:** Tracking limited to specific, legitimate healthcare purposes\n- **Retention limits:** Tracking data deleted according to established schedules\n- **Anonymization:** Individual identifiers removed from population health analytics\n- **Access controls:** Strict limitations on who can access tracking data\n\n## 9. DATA SHARING AND DISCLOSURE\n\n### 9.1 Healthcare Providers\n- **Treatment team:** Sharing with providers directly involved in patient care\n- **Referral network:** Authorized sharing for specialist consultations\n- **Emergency care:** Critical information shared during medical emergencies\n- **Care coordination:** Multi-disciplinary team access for comprehensive care\n\n### 9.2 Insurance and SHA\n- **Claims processing:** Sharing necessary data for reimbursement\n- **Eligibility verification:** Confirming coverage and benefits\n- **Audit compliance:** Providing documentation for insurance audits\n- **Fraud investigation:** Cooperating with insurance fraud investigations\n\n### 9.3 Regulatory Authorities\n- **Health Ministry:** Reporting for public health surveillance\n- **Data Protection Office:** Compliance investigations and audits\n- **Professional boards:** License verification and disciplinary proceedings\n- **Law enforcement:** Court orders and criminal investigations only\n\n### 9.4 Research and Analytics\n- **De-identified research:** Anonymized data for medical research\n- **Population health:** Aggregated data for public health insights\n- **Quality improvement:** Anonymous data for healthcare quality initiatives\n- **Academic collaboration:** Research partnerships with universities and institutions\n\n## 10. DATA RETENTION\n\n### 10.1 Medical Records\n- **Active patients:** Retained for duration of ongoing care relationship\n- **Inactive patients:** 10 years after last treatment or legal majority\n- **Pediatric records:** Until age 25 or 10 years after last treatment, whichever is longer\n- **Mental health records:** Special retention requirements per Mental Health Act\n\n### 10.2 Biometric Data\n- **Enrollment data:** 7 years from enrollment or account closure\n- **Authentication logs:** 3 years from last authentication\n- **Failed attempts:** 1 year from failed authentication attempt\n- **Template data:** Immediate deletion upon account closure\n\n### 10.3 Claims and Financial Data\n- **Processed claims:** 7 years per SHA requirements\n- **Billing records:** 7 years per tax and accounting regulations\n- **Audit trails:** 10 years for compliance and fraud investigation\n- **Payment records:** 6 years per financial regulations\n\n### 10.4 System and Audit Logs\n- **Access logs:** 3 years from access date\n- **Security incidents:** 7 years from incident resolution\n- **Data breach records:** 10 years from breach notification\n- **Compliance audits:** 7 years from audit completion\n\n## 11. DATA SECURITY MEASURES\n\n### 11.1 Technical Safeguards\n- **Encryption:** AES-256 encryption for data at rest and in transit\n- **Access controls:** Role-based access with multi-factor authentication\n- **Network security:** Firewalls, intrusion detection, and VPN access\n- **Backup systems:** Encrypted backups with geographic redundancy\n\n### 11.2 Administrative Safeguards\n- **Staff training:** Regular privacy and security training for all personnel\n- **Access policies:** Strict policies governing data access and handling\n- **Incident response:** Comprehensive data breach response procedures\n- **Vendor management:** Due diligence and contracts for all service providers\n\n### 11.3 Physical Safeguards\n- **Data centers:** Secure facilities with biometric access controls\n- **Device security:** Encrypted storage on all devices and workstations\n- **Clean desk policy:** No personal data left unattended\n- **Disposal procedures:** Secure destruction of all storage media\n\n## 12. YOUR RIGHTS UNDER THE DATA PROTECTION ACT\n\n### 12.1 Right to Information\n- **Transparency:** Clear information about data processing activities\n- **Processing notices:** Notification when personal data is collected\n- **Policy updates:** Advance notice of privacy policy changes\n- **Contact information:** Easy access to data protection officer\n\n### 12.2 Right of Access\n- **Data subject access:** Request copies of all personal data held\n- **Processing information:** Details about how data is being used\n- **Recipient information:** Who has received your personal data\n- **Response timeframe:** 30 days for access requests\n\n### 12.3 Right to Rectification\n- **Correction:** Update inaccurate or incomplete personal data\n- **Completion:** Add missing information to personal data records\n- **Notification:** Inform recipients of any corrections made\n- **Verification:** Confirm accuracy before making corrections\n\n### 12.4 Right to Erasure (\"Right to be Forgotten\")\n- **Deletion:** Request removal of personal data in specific circumstances\n- **Cessation:** Stop processing personal data when purposes are fulfilled\n- **Notification:** Inform third parties about erasure requests\n- **Exceptions:** Legal obligations may require data retention\n\n### 12.5 Right to Restrict Processing\n- **Temporary limitation:** Restrict processing during dispute resolution\n- **Accuracy challenges:** Limit processing while verifying data accuracy\n- **Unlawful processing:** Restrict instead of delete for legal proceedings\n- **Notification:** Inform about restriction lifting\n\n### 12.6 Right to Data Portability\n- **Structured format:** Receive data in machine-readable format\n- **Transfer:** Direct transfer to another data controller where possible\n- **Scope:** Applies to automatically processed data provided by data subject\n- **Technical feasibility:** Subject to technical limitations\n\n### 12.7 Right to Object\n- **Direct marketing:** Absolute right to opt-out of marketing communications\n- **Legitimate interests:** Object to processing based on legitimate interests\n- **Profiling:** Object to automated decision-making and profiling\n- **Public task:** Object to processing for public interest tasks\n\n## 13. INTERNATIONAL DATA TRANSFERS\n\n### 13.1 Transfer Limitations\n- **Kenya-first policy:** Primary data processing within Kenya\n- **Adequacy decisions:** Transfers only to countries with adequate protection\n- **Safeguards:** Appropriate safeguards for all international transfers\n- **Necessity:** Transfers only when essential for service provision\n\n### 13.2 Transfer Safeguards\n- **Standard contractual clauses:** EU-approved data transfer agreements\n- **Binding corporate rules:** Internal company data protection standards\n- **Certification schemes:** International data protection certifications\n- **Codes of conduct:** Industry-specific data protection standards\n\n### 13.3 Transfer Notifications\n- **Consent:** Explicit consent for transfers outside Kenya\n- **Information:** Clear notice about destination countries\n- **Safeguards:** Details about protective measures in place\n- **Rights:** Information about exercising rights after transfer\n\n## 14. CHILDREN'S PRIVACY\n\n### 14.1 Age Verification\n- **Minimum age:** Special protections for individuals under 18\n- **Parental consent:** Required for children under 16\n- **Verification methods:** Age verification through official documents\n- **Regular review:** Periodic verification of age and consent status\n\n### 14.2 Special Protections\n- **Limited processing:** Minimal data collection for children\n- **Enhanced security:** Additional security measures for pediatric data\n- **Parental rights:** Parents can exercise rights on behalf of children\n- **Best interests:** All processing must be in the child's best interests\n\n### 14.3 Educational Programs\n- **Privacy education:** Age-appropriate privacy and digital literacy programs\n- **Consent education:** Teaching children about consent and data rights\n- **Safe usage:** Guidelines for safe use of healthcare technology\n- **Reporting mechanisms:** Easy ways for children to report privacy concerns\n\n## 15. DATA BREACH NOTIFICATION\n\n### 15.1 Internal Procedures\n- **Detection:** Continuous monitoring for security incidents\n- **Assessment:** Immediate evaluation of breach severity and impact\n- **Containment:** Swift action to limit breach scope and prevent further damage\n- **Documentation:** Comprehensive record-keeping of all breach activities\n\n### 15.2 Regulatory Notification\n- **72-hour rule:** Notification to Data Protection Office within 72 hours\n- **Risk assessment:** Detailed evaluation of risks to data subjects\n- **Mitigation measures:** Description of actions taken to address breach\n- **Follow-up:** Additional information provided within 30 days\n\n### 15.3 Individual Notification\n- **High-risk breaches:** Direct notification to affected individuals\n- **Clear communication:** Plain language explanation of the breach\n- **Guidance:** Specific steps individuals can take to protect themselves\n- **Support:** Dedicated support channels for breach-related inquiries\n\n## 16. COOKIES AND TRACKING TECHNOLOGIES\n\n### 16.1 Types of Cookies\n- **Essential cookies:** Required for platform functionality\n- **Performance cookies:** Anonymous usage analytics\n- **Functional cookies:** Enhanced user experience features\n- **Marketing cookies:** Targeted healthcare communications (with consent)\n\n### 16.2 Cookie Management\n- **Consent mechanisms:** Clear opt-in for non-essential cookies\n- **Granular control:** Separate consent for different cookie types\n- **Easy withdrawal:** Simple method to withdraw cookie consent\n- **Regular review:** Periodic review and refresh of cookie preferences\n\n### 16.3 Third-Party Tracking\n- **Analytics providers:** Google Analytics with anonymized IP addresses\n- **Security services:** Cloudflare for DDoS protection and security\n- **Communication tools:** Healthcare-specific communication platforms\n- **Integration partners:** HMS and medical device manufacturers\n\n## 17. CONTACT INFORMATION AND COMPLAINTS\n\n### 17.1 Data Protection Officer\n**Name:** [DPO Name]  \n**Email:** dpo@erlessed.com  \n**Phone:** +254 [Number]  \n**Address:** [Complete Address], Nairobi, Kenya  \n**Office Hours:** Monday-Friday, 8:00 AM - 5:00 PM EAT\n\n### 17.2 Privacy Complaints Process\n1. **Internal complaint:** Contact our Data Protection Officer first\n2. **Acknowledgment:** Written acknowledgment within 5 business days\n3. **Investigation:** Thorough investigation within 30 days\n4. **Resolution:** Written response with resolution or explanation\n5. **Appeal:** Internal appeal process if unsatisfied with resolution\n\n### 17.3 Regulatory Complaints\nIf unsatisfied with our response, you may complain to:\n\n**Office of the Data Protection Commissioner**  \nP.O. Box 36681-00200  \nNairobi, Kenya  \nEmail: info@odpc.go.ke  \nPhone: +254 20 2628 000  \nWebsite: www.odpc.go.ke\n\n### 17.4 Legal Assistance\nYou have the right to:\n- **Legal advice:** Seek independent legal advice about privacy rights\n- **Judicial remedy:** Pursue legal action for privacy violations\n- **Compensation:** Claim compensation for damages from data breaches\n- **Class action:** Join collective legal action with other affected individuals\n\n## 18. UPDATES TO THIS PRIVACY POLICY\n\n### 18.1 Notification Process\n- **30-day notice:** Advance notification of material changes\n- **Email notification:** Direct notification to registered users\n- **Platform notice:** Prominent notice on login screen\n- **Version control:** Clear version numbering and effective dates\n\n### 18.2 Continued Use\n- **Acceptance:** Continued use constitutes acceptance of updated policy\n- **Opt-out:** Right to close account if unsatisfied with changes\n- **Data export:** Opportunity to export data before account closure\n- **Transition period:** Reasonable time to adapt to policy changes\n\n### 18.3 Legal Updates\n- **Automatic compliance:** Updates for regulatory compliance take immediate effect\n- **Emergency changes:** Security-related changes may be implemented immediately\n- **Consultation:** Major changes may include public consultation period\n- **Parliamentary changes:** Updates to comply with new legislation\n\n---\n\n**EFFECTIVE DATE:** December 19, 2024  \n**VERSION:** 1.0  \n**NEXT REVIEW DATE:** December 19, 2025  \n\n**ACKNOWLEDGMENT**\n\nBy using the Erlessed Healthcare Platform, you acknowledge that you have read, understood, and agree to this Privacy Policy. You understand your rights under the Data Protection Act of Kenya (2019) and how to exercise them.\n\n**Document Classification:** Public  \n**Language Availability:** English, Swahili  \n**Accessibility:** Screen reader compatible, large print available upon request","size_bytes":20420},"legal_docs/terms_of_service.md":{"content":"# ERLESSED HEALTHCARE PLATFORM\n## TERMS OF SERVICE FOR HEALTHCARE PROVIDERS AND INSURERS\n\n**Effective Date:** December 19, 2024  \n**Governing Law:** Republic of Kenya  \n**Platform Operator:** Aboolean Technologies Ltd.\n\n---\n\n## 1. ACCEPTANCE OF TERMS\n\nBy accessing or using the Erlessed Healthcare Platform (\"Platform\"), healthcare providers, insurance companies, and associated entities (\"Users\") agree to be bound by these Terms of Service (\"Terms\"). These Terms comply with the Data Protection Act of Kenya (2019), Health Act (2017), and SHA (Social Health Authority) medical billing guidelines.\n\n## 2. PLATFORM DESCRIPTION\n\nErlessed is a comprehensive healthcare claims management platform that provides:\n- AI-powered preauthorization and claims processing\n- Real-time patient verification and biometric authentication\n- Integrated pharmacy and laboratory management\n- Fraud detection and analytics services\n- HMS (Hospital Management System) integration capabilities\n\n## 3. USER REGISTRATION AND VERIFICATION\n\n### 3.1 Healthcare Provider Registration\n- Must hold valid registration with Kenya Medical Practitioners and Dentists Council (KMPDC), Clinical Officers Council, Pharmacy and Poisons Board (PPB), or relevant regulatory body\n- License numbers will be verified against official registries\n- Suspended or inactive practitioners are prohibited from platform access\n\n### 3.2 Insurance Provider Registration\n- Must be licensed by the Insurance Regulatory Authority (IRA) of Kenya\n- SHA-approved schemes must maintain current certification\n- All billing must comply with SHA tariff structures\n\n## 4. PERMITTED USES\n\n### 4.1 Healthcare Providers May:\n- Submit preauthorization requests for covered services\n- Process patient claims and prescriptions\n- Access patient medical records with proper consent\n- Utilize clinical decision support tools\n- Generate medical reports and analytics\n\n### 4.2 Insurance Providers May:\n- Review and adjudicate claims submissions\n- Access beneficiary eligibility information\n- Monitor utilization patterns and fraud indicators\n- Generate regulatory and compliance reports\n\n## 5. PROHIBITED ACTIVITIES\n\nUsers shall NOT:\n- Submit false, fraudulent, or misleading claims\n- Access patient data without proper consent\n- Share login credentials or allow unauthorized access\n- Attempt to circumvent security measures\n- Use the platform for non-medical commercial purposes\n- Violate patient confidentiality or privacy rights\n\n## 6. AI-POWERED DECISION MAKING DISCLAIMER\n\n### 6.1 Automated Processing Notice\nThe Platform utilizes artificial intelligence for:\n- Claims preauthorization decisions\n- Fraud detection and risk assessment\n- Clinical decision support recommendations\n- Cost optimization suggestions\n\n### 6.2 Human Oversight Requirement\n- All AI decisions are recommendations only\n- Final medical decisions must be made by qualified healthcare professionals\n- Users may request human review of any automated decision\n- AI algorithms are continuously monitored for bias and accuracy\n\n### 6.3 Liability Limitations\n- AI recommendations do not constitute medical advice\n- Clinical judgment remains the responsibility of healthcare providers\n- Insurance decisions may be appealed through standard procedures\n\n## 7. DATA PROTECTION AND PRIVACY\n\n### 7.1 Compliance with Data Protection Act 2019\n- All processing complies with Kenya's Data Protection Act\n- Users consent to processing for legitimate healthcare purposes\n- Data subjects retain rights under the Act including access, rectification, and erasure\n\n### 7.2 Biometric Data Handling\n- Fingerprint and facial recognition data is encrypted at rest and in transit\n- Biometric templates are stored separately from personal identifiers\n- Consent is required before any biometric processing\n\n### 7.3 Medical Data Security\n- Patient records are encrypted using AES-256 encryption\n- Access logs are maintained for all data access\n- Data breaches will be reported within 72 hours as required by law\n\n## 8. PATIENT CONSENT MANAGEMENT\n\n### 8.1 Informed Consent Requirements\n- Patients must provide explicit consent for data processing\n- Consent may be withdrawn at any time\n- Emergency treatment exceptions apply as per medical ethics\n\n### 8.2 Data Sharing Consent\n- Separate consent required for data sharing with third parties\n- Research participation requires additional consent\n- Marketing communications are opt-in only\n\n## 9. FRAUD DETECTION AND REPORTING\n\n### 9.1 Automated Monitoring\n- Claims are automatically screened for fraud indicators\n- Suspicious patterns trigger manual review\n- Users are notified of flagged activities\n\n### 9.2 Reporting Obligations\n- Suspected fraud must be reported to relevant authorities\n- Users must cooperate with fraud investigations\n- False accusations are prohibited and may result in account suspension\n\n## 10. PATIENT TRACKING AND ANALYTICS\n\n### 10.1 Population Health Analytics\n- Aggregated, de-identified data used for public health insights\n- Individual patient tracking requires specific consent\n- Epidemiological research complies with ethical guidelines\n\n### 10.2 Outcome Tracking\n- Treatment outcomes are monitored for quality improvement\n- Predictive analytics assist in care planning\n- Patient identity is protected in all analytics\n\n## 11. SHA BILLING COMPLIANCE\n\n### 11.1 Tariff Adherence\n- All billing must comply with current SHA tariff schedules\n- Unauthorized charges are prohibited\n- Rate updates are automatically applied\n\n### 11.2 Documentation Requirements\n- Claims must include all required SHA documentation\n- ICD-10 coding must be accurate and current\n- Supporting documents must be retained per SHA guidelines\n\n## 12. PLATFORM AVAILABILITY AND MAINTENANCE\n\n### 12.1 Service Level Agreement\n- 99.5% uptime target (excluding scheduled maintenance)\n- Emergency maintenance may occur with minimal notice\n- Critical healthcare functions prioritized during outages\n\n### 12.2 Data Backup and Recovery\n- Daily encrypted backups stored in multiple locations\n- Disaster recovery plan tested quarterly\n- Maximum 4-hour recovery time objective\n\n## 13. INTELLECTUAL PROPERTY\n\n### 13.1 Platform Ownership\n- Erlessed platform and associated technologies are proprietary\n- Users receive limited license for healthcare purposes only\n- Reverse engineering or replication is prohibited\n\n### 13.2 User-Generated Content\n- Users retain ownership of uploaded medical records\n- Platform receives license to process for intended purposes\n- Research use requires separate agreement\n\n## 14. FINANCIAL TERMS\n\n### 14.1 Subscription Fees\n- Fees based on usage tiers and user categories\n- Annual subscription discounts available\n- Payment terms are net 30 days\n\n### 14.2 Transaction Fees\n- Claims processing fees apply per transaction\n- Integration fees for HMS connectivity\n- Premium support available for additional cost\n\n## 15. LIMITATION OF LIABILITY\n\n### 15.1 Platform Limitations\n- Platform provided \"as is\" without warranties\n- No guarantee of medical outcomes\n- Users assume responsibility for clinical decisions\n\n### 15.2 Maximum Liability\n- Total liability limited to annual subscription fees\n- Consequential damages excluded\n- Professional indemnity insurance recommended\n\n## 16. INDEMNIFICATION\n\nUsers agree to indemnify Platform against:\n- Claims arising from medical malpractice\n- Violations of professional standards\n- Unauthorized disclosure of patient information\n- Failure to obtain required consents\n\n## 17. REGULATORY COMPLIANCE\n\n### 17.1 Licensing Requirements\n- Users must maintain current professional licenses\n- Regulatory changes may require platform updates\n- Non-compliance may result in account suspension\n\n### 17.2 Audit Cooperation\n- Users must cooperate with regulatory audits\n- Platform records may be requested by authorities\n- Compliance training may be required\n\n## 18. TERMINATION\n\n### 18.1 Termination by User\n- 30-day written notice required\n- Data export available during notice period\n- Final billing reconciliation required\n\n### 18.2 Termination by Platform\n- Immediate termination for material breach\n- Professional misconduct grounds for termination\n- Data retention per legal requirements\n\n## 19. DISPUTE RESOLUTION\n\n### 19.1 Governing Law\n- Governed by laws of Republic of Kenya\n- Disputes subject to Kenyan court jurisdiction\n- Arbitration preferred for commercial disputes\n\n### 19.2 Mediation Process\n- Good faith negotiation required first\n- Mediation through Kenya Association of Manufacturers\n- Arbitration under Arbitration Act 1995\n\n## 20. AMENDMENTS\n\n### 20.1 Modification Rights\n- Terms may be updated with 30-day notice\n- Material changes require user acceptance\n- Continued use constitutes acceptance\n\n### 20.2 Legal Updates\n- Automatic updates for regulatory compliance\n- Users notified of significant legal changes\n- Legal advice recommended for material changes\n\n## 21. CONTACT INFORMATION\n\n**Platform Operator:**  \nAboolean Technologies Ltd.  \nP.O. Box [Number]  \nNairobi, Kenya  \n\n**Data Protection Officer:**  \nEmail: dpo@erlessed.com  \nPhone: +254 [Number]  \n\n**Customer Support:**  \nEmail: support@erlessed.com  \n24/7 Emergency: +254 [Number]  \n\n**Regulatory Affairs:**  \nEmail: compliance@erlessed.com  \n\n---\n\n**ACKNOWLEDGMENT**\n\nBy clicking \"I Accept\" or using the Platform, you acknowledge that you have read, understood, and agree to be bound by these Terms of Service. You further acknowledge your understanding of the AI-powered features, data processing activities, and your obligations under Kenyan healthcare and data protection laws.\n\n**Digital Signature Required:** Yes  \n**Version:** 1.0  \n**Last Updated:** December 19, 2024","size_bytes":9620},"server/ai.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\ninterface PatientHistory {\n  previousClaims: Array<{\n    serviceType: string;\n    diagnosisCode: string;\n    cost: number;\n    date: string;\n  }>;\n  currentMedications: string[];\n  allergies: string[];\n  chronicConditions: string[];\n}\n\ninterface PolicyData {\n  coverageDetails: Record<string, any>;\n  benefitLimits: Record<string, number>;\n  exclusions: string[];\n}\n\ninterface PreauthorizationRequest {\n  treatmentDescription: string;\n  clinicalJustification: string;\n  estimatedCost: number;\n  urgency: 'routine' | 'urgent' | 'emergency';\n  diagnosisCode?: string;\n  procedureCode?: string;\n}\n\ninterface AIDecision {\n  decision: 'approved' | 'denied' | 'review_required';\n  confidence: number;\n  reasoning: string[];\n  chainOfThought: Array<{\n    step: number;\n    description: string;\n    result: string;\n  }>;\n  ragContext?: {\n    similarCases: number;\n    policyReferences: string[];\n    clinicalGuidelines: string[];\n  };\n}\n\ninterface ClaimAnalysis {\n  fraudScore: number;\n  anomalies: string[];\n  recommendations: string[];\n  confidence: number;\n}\n\nexport class AIService {\n  // Preauthorization decision using Chain-of-Thought reasoning\n  async processPreauthorization(\n    request: PreauthorizationRequest,\n    patientHistory: PatientHistory,\n    policyData: PolicyData\n  ): Promise<AIDecision> {\n    try {\n      const prompt = `\nYou are an AI healthcare preauthorization specialist. Analyze the following preauthorization request using chain-of-thought reasoning and provide a detailed decision.\n\nPREAUTHORIZATION REQUEST:\nTreatment: ${request.treatmentDescription}\nClinical Justification: ${request.clinicalJustification}\nEstimated Cost: $${request.estimatedCost}\nUrgency: ${request.urgency}\nDiagnosis Code: ${request.diagnosisCode || 'Not provided'}\nProcedure Code: ${request.procedureCode || 'Not provided'}\n\nPATIENT HISTORY:\nPrevious Claims: ${JSON.stringify(patientHistory.previousClaims)}\nCurrent Medications: ${patientHistory.currentMedications.join(', ')}\nAllergies: ${patientHistory.allergies.join(', ')}\nChronic Conditions: ${patientHistory.chronicConditions.join(', ')}\n\nPOLICY DATA:\nCoverage Details: ${JSON.stringify(policyData.coverageDetails)}\nBenefit Limits: ${JSON.stringify(policyData.benefitLimits)}\nExclusions: ${JSON.stringify(policyData.exclusions)}\n\nPlease analyze this request step by step and provide your decision in the following JSON format:\n{\n  \"decision\": \"approved|denied|review_required\",\n  \"confidence\": number (0-100),\n  \"reasoning\": [\"reason1\", \"reason2\", \"reason3\"],\n  \"chainOfThought\": [\n    {\n      \"step\": 1,\n      \"description\": \"Policy Coverage Check\",\n      \"result\": \"Description of findings\"\n    },\n    {\n      \"step\": 2,\n      \"description\": \"Clinical Necessity Assessment\",\n      \"result\": \"Description of findings\"\n    },\n    {\n      \"step\": 3,\n      \"description\": \"Cost-Benefit Analysis\",\n      \"result\": \"Description of findings\"\n    },\n    {\n      \"step\": 4,\n      \"description\": \"Risk Assessment\",\n      \"result\": \"Description of findings\"\n    }\n  ],\n  \"ragContext\": {\n    \"similarCases\": number,\n    \"policyReferences\": [\"ref1\", \"ref2\"],\n    \"clinicalGuidelines\": [\"guideline1\", \"guideline2\"]\n  }\n}\n`;\n\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert healthcare AI that makes preauthorization decisions based on medical necessity, policy coverage, and clinical guidelines. Always respond with valid JSON.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.1, // Low temperature for consistent decision-making\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      return result as AIDecision;\n    } catch (error) {\n      console.error('AI preauthorization error:', error);\n      throw new Error('Failed to process AI preauthorization: ' + (error as Error).message);\n    }\n  }\n\n  // Fraud detection and claim analysis\n  async analyzeClaim(\n    claimData: {\n      serviceType: string;\n      procedureCode?: string;\n      diagnosisCode?: string;\n      cost: number;\n      providerId: string;\n      patientAge: number;\n      serviceDate: string;\n    },\n    patientHistory: PatientHistory\n  ): Promise<ClaimAnalysis> {\n    try {\n      const prompt = `\nYou are an AI fraud detection specialist for healthcare claims. Analyze the following claim for potential fraud, anomalies, and provide recommendations.\n\nCLAIM DATA:\nService Type: ${claimData.serviceType}\nProcedure Code: ${claimData.procedureCode || 'Not provided'}\nDiagnosis Code: ${claimData.diagnosisCode || 'Not provided'}\nCost: $${claimData.cost}\nProvider ID: ${claimData.providerId}\nPatient Age: ${claimData.patientAge}\nService Date: ${claimData.serviceDate}\n\nPATIENT HISTORY:\nPrevious Claims: ${JSON.stringify(patientHistory.previousClaims)}\nCurrent Medications: ${patientHistory.currentMedications.join(', ')}\nChronic Conditions: ${patientHistory.chronicConditions.join(', ')}\n\nAnalyze for:\n1. Unusual billing patterns\n2. Inappropriate service for patient age/condition\n3. Duplicate or overlapping services\n4. Cost anomalies compared to standard rates\n5. Timeline inconsistencies\n\nProvide analysis in JSON format:\n{\n  \"fraudScore\": number (0-100, where 100 is highest fraud risk),\n  \"anomalies\": [\"anomaly1\", \"anomaly2\"],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"confidence\": number (0-100)\n}\n`;\n\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert fraud detection AI that analyzes healthcare claims for anomalies and potential fraud. Always respond with valid JSON.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.1,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      return result as ClaimAnalysis;\n    } catch (error) {\n      console.error('AI fraud analysis error:', error);\n      throw new Error('Failed to analyze claim for fraud: ' + (error as Error).message);\n    }\n  }\n\n  // Prescription validation\n  async validatePrescription(\n    prescription: {\n      medicationName: string;\n      dosage: string;\n      frequency: string;\n      patientAge: number;\n      patientWeight?: number;\n      gender: string;\n      indication: string;\n    },\n    patientHistory: PatientHistory\n  ): Promise<{\n    isValid: boolean;\n    validationNotes: Array<{\n      type: 'weight_based' | 'gender_sensitive' | 'drug_interaction' | 'age_appropriate' | 'indication_match';\n      severity: 'info' | 'warning' | 'error';\n      message: string;\n    }>;\n    recommendedCategory: 'chronic' | 'acute' | 'fp' | 'vax';\n  }> {\n    try {\n      const prompt = `\nYou are an AI pharmacist validating a prescription. Analyze the following prescription for safety and appropriateness.\n\nPRESCRIPTION:\nMedication: ${prescription.medicationName}\nDosage: ${prescription.dosage}\nFrequency: ${prescription.frequency}\nPatient Age: ${prescription.patientAge}\nPatient Weight: ${prescription.patientWeight || 'Not provided'} kg\nGender: ${prescription.gender}\nIndication: ${prescription.indication}\n\nPATIENT HISTORY:\nCurrent Medications: ${patientHistory.currentMedications.join(', ')}\nAllergies: ${patientHistory.allergies.join(', ')}\nChronic Conditions: ${patientHistory.chronicConditions.join(', ')}\n\nValidate for:\n1. Weight-based dosing (especially for pediatric patients)\n2. Gender-sensitive prescribing\n3. Drug interactions with current medications\n4. Age-appropriate medication and dosing\n5. Indication appropriateness\n\nProvide validation in JSON format:\n{\n  \"isValid\": boolean,\n  \"validationNotes\": [\n    {\n      \"type\": \"weight_based|gender_sensitive|drug_interaction|age_appropriate|indication_match\",\n      \"severity\": \"info|warning|error\",\n      \"message\": \"Detailed message\"\n    }\n  ],\n  \"recommendedCategory\": \"chronic|acute|fp|vax\"\n}\n`;\n\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert clinical pharmacist AI that validates prescriptions for safety, appropriateness, and categorization. Always respond with valid JSON.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.1,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      return result;\n    } catch (error) {\n      console.error('AI prescription validation error:', error);\n      throw new Error('Failed to validate prescription: ' + (error as Error).message);\n    }\n  }\n\n  // RAG system for retrieving relevant patient history and policy data\n  async retrieveRelevantContext(\n    query: string,\n    contextType: 'patient_history' | 'policy_data' | 'clinical_guidelines'\n  ): Promise<{\n    relevantData: any[];\n    confidence: number;\n    sources: string[];\n  }> {\n    try {\n      // This would integrate with a vector database in a real implementation\n      // For now, we'll simulate RAG functionality\n      const prompt = `\nYou are a RAG (Retrieval-Augmented Generation) system for healthcare data. \nBased on the query: \"${query}\" and context type: \"${contextType}\"\n\nSimulate retrieving relevant data and provide:\n{\n  \"relevantData\": [\n    \"relevant_item_1\",\n    \"relevant_item_2\",\n    \"relevant_item_3\"\n  ],\n  \"confidence\": number (0-100),\n  \"sources\": [\n    \"source_1\",\n    \"source_2\"\n  ]\n}\n`;\n\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a RAG system that retrieves relevant healthcare data based on queries. Always respond with valid JSON.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      return result;\n    } catch (error) {\n      console.error('RAG retrieval error:', error);\n      throw new Error('Failed to retrieve relevant context: ' + (error as Error).message);\n    }\n  }\n\n  // Suggest appropriate procedure/diagnosis codes\n  async suggestCodes(\n    serviceDescription: string,\n    clinicalContext: string\n  ): Promise<{\n    procedureCodes: Array<{ code: string; description: string; confidence: number }>;\n    diagnosisCodes: Array<{ code: string; description: string; confidence: number }>;\n  }> {\n    try {\n      const prompt = `\nYou are an AI medical coding specialist. Based on the service description and clinical context, suggest appropriate CPT procedure codes and ICD-10 diagnosis codes.\n\nSERVICE DESCRIPTION: ${serviceDescription}\nCLINICAL CONTEXT: ${clinicalContext}\n\nProvide suggestions in JSON format:\n{\n  \"procedureCodes\": [\n    {\n      \"code\": \"CPT_CODE\",\n      \"description\": \"Description of procedure\",\n      \"confidence\": number (0-100)\n    }\n  ],\n  \"diagnosisCodes\": [\n    {\n      \"code\": \"ICD10_CODE\",\n      \"description\": \"Description of diagnosis\",\n      \"confidence\": number (0-100)\n    }\n  ]\n}\n`;\n\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert medical coding AI that suggests appropriate CPT and ICD-10 codes. Always respond with valid JSON.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      return result;\n    } catch (error) {\n      console.error('AI code suggestion error:', error);\n      throw new Error('Failed to suggest medical codes: ' + (error as Error).message);\n    }\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":13063},"server/auth-service.ts":{"content":"import { careProviders, users, type CareProvider, type InsertUser } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface DomainDetectionResult {\n  careProvider: CareProvider | null;\n  suggestedRole: string | null;\n  suggestedCadre: string | null;\n  branch: string | null;\n  confidence: number;\n}\n\nexport interface RegistrationValidationResult {\n  isValid: boolean;\n  registrationBody: string | null;\n  cadre: string | null;\n  specialization: string | null;\n  expiryDate: string | null;\n  errors: string[];\n}\n\nexport class AuthenticationService {\n  // Known care provider domains and their configurations\n  private readonly knownDomains = [\n    {\n      domain: \"aku.edu\",\n      name: \"Aga Khan University Hospital\",\n      type: \"hospital\",\n      defaultRoles: [\"doctor\", \"clinician\", \"admin\"]\n    },\n    {\n      domain: \"knh.or.ke\",\n      name: \"Kenyatta National Hospital\",\n      type: \"hospital\",\n      defaultRoles: [\"doctor\", \"clinician\", \"admin\"]\n    },\n    {\n      domain: \"mnh.or.tz\",\n      name: \"Muhimbili National Hospital\",\n      type: \"hospital\",\n      defaultRoles: [\"doctor\", \"clinician\", \"admin\"]\n    },\n    {\n      domain: \"pharmacy.co.ke\",\n      name: \"Pharmacy Corporation\",\n      type: \"pharmacy-chain\",\n      defaultRoles: [\"pharmacist\", \"admin\"]\n    },\n    {\n      domain: \"carepoint.health\",\n      name: \"Carepoint Medical Centers\",\n      type: \"clinic\",\n      defaultRoles: [\"doctor\", \"clinician\", \"pharmacist\"]\n    }\n  ];\n\n  // Role detection patterns in email addresses\n  private readonly rolePatterns = [\n    { pattern: /dr\\.|doc|doctor|physician/i, role: \"doctor\", cadre: \"general-practitioner\" },\n    { pattern: /pharm|pharmacist/i, role: \"pharmacist\", cadre: \"clinical-pharmacist\" },\n    { pattern: /nurse|nurs|rn|bsn/i, role: \"clinician\", cadre: \"registered-nurse\" },\n    { pattern: /lab|laboratory|tech/i, role: \"clinician\", cadre: \"laboratory-technician\" },\n    { pattern: /admin|administrator/i, role: \"admin\", cadre: null },\n    { pattern: /debt|collection|finance/i, role: \"debtor-officer\", cadre: null },\n    { pattern: /specialist|consultant/i, role: \"doctor\", cadre: \"specialist\" },\n    { pattern: /registrar|resident/i, role: \"doctor\", cadre: \"registrar\" }\n  ];\n\n  // Professional registration validation patterns\n  private readonly registrationPatterns = {\n    doctor: {\n      kenya: /^KMP\\/\\d{4,6}$/,\n      tanzania: /^TMC\\/\\d{4,6}$/,\n      uganda: /^UMC\\/\\d{4,6}$/\n    },\n    pharmacist: {\n      kenya: /^PPB\\/\\d{4,6}$/,\n      tanzania: /^TPC\\/\\d{4,6}$/,\n      uganda: /^UPC\\/\\d{4,6}$/\n    }\n  };\n\n  /**\n   * Detect care provider and role information from email domain\n   */\n  async detectFromDomain(email: string): Promise<DomainDetectionResult> {\n    const emailParts = email.toLowerCase().split('@');\n    if (emailParts.length !== 2) {\n      return { careProvider: null, suggestedRole: null, suggestedCadre: null, branch: null, confidence: 0 };\n    }\n\n    const [username, domain] = emailParts;\n    \n    // Check for branch in subdomain (e.g., branch1.aku.edu)\n    const domainParts = domain.split('.');\n    let baseDomain = domain;\n    let branch = null;\n    \n    if (domainParts.length > 2) {\n      // Potential subdomain/branch\n      branch = domainParts[0];\n      baseDomain = domainParts.slice(1).join('.');\n    }\n\n    // Look for existing care provider in database\n    let careProvider = await this.findCareProviderByDomain(baseDomain);\n    \n    // If not found, check against known domains\n    if (!careProvider) {\n      const knownDomain = this.knownDomains.find(kd => kd.domain === baseDomain);\n      if (knownDomain) {\n        // Create new care provider entry\n        careProvider = await this.createCareProvider({\n          name: knownDomain.name,\n          domain: baseDomain,\n          type: knownDomain.type,\n          branch: branch,\n          address: null,\n          licenseNumber: null,\n          isActive: true\n        });\n      }\n    }\n\n    // Detect role from username patterns\n    const roleDetection = this.detectRoleFromUsername(username);\n    \n    return {\n      careProvider,\n      suggestedRole: roleDetection.role,\n      suggestedCadre: roleDetection.cadre,\n      branch,\n      confidence: careProvider ? (roleDetection.role ? 95 : 75) : (roleDetection.role ? 60 : 30)\n    };\n  }\n\n  /**\n   * Validate professional registration number\n   */\n  async validateRegistration(\n    registrationNumber: string, \n    role: string, \n    country: string = 'kenya'\n  ): Promise<RegistrationValidationResult> {\n    const patterns = this.registrationPatterns[role as keyof typeof this.registrationPatterns];\n    \n    if (!patterns || !patterns[country as keyof typeof patterns]) {\n      return {\n        isValid: false,\n        registrationBody: null,\n        cadre: null,\n        specialization: null,\n        expiryDate: null,\n        errors: [`Registration validation not available for ${role} in ${country}`]\n      };\n    }\n\n    const pattern = patterns[country as keyof typeof patterns];\n    const isValid = pattern.test(registrationNumber);\n\n    if (!isValid) {\n      return {\n        isValid: false,\n        registrationBody: null,\n        cadre: null,\n        specialization: null,\n        expiryDate: null,\n        errors: [`Invalid ${role} registration number format for ${country}`]\n      };\n    }\n\n    // Simulate API call to professional board\n    // In production, this would call the actual licensing board API\n    return this.simulateRegistrationCheck(registrationNumber, role, country);\n  }\n\n  /**\n   * Get role and care provider options for manual selection\n   */\n  getRoleOptions(): Array<{ value: string; label: string; requiresRegistration: boolean }> {\n    return [\n      { value: \"doctor\", label: \"Doctor/Physician\", requiresRegistration: true },\n      { value: \"clinician\", label: \"Clinician/Nurse\", requiresRegistration: true },\n      { value: \"pharmacist\", label: \"Pharmacist\", requiresRegistration: true },\n      { value: \"admin\", label: \"Administrator\", requiresRegistration: false },\n      { value: \"debtor-officer\", label: \"Debtor Officer\", requiresRegistration: false }\n    ];\n  }\n\n  /**\n   * Get cadre options based on role\n   */\n  getCadreOptions(role: string): Array<{ value: string; label: string }> {\n    const cadreMap = {\n      doctor: [\n        { value: \"general-practitioner\", label: \"General Practitioner\" },\n        { value: \"specialist\", label: \"Specialist\" },\n        { value: \"consultant\", label: \"Consultant\" },\n        { value: \"registrar\", label: \"Registrar\" },\n        { value: \"intern\", label: \"Medical Intern\" }\n      ],\n      clinician: [\n        { value: \"registered-nurse\", label: \"Registered Nurse\" },\n        { value: \"clinical-officer\", label: \"Clinical Officer\" },\n        { value: \"laboratory-technician\", label: \"Laboratory Technician\" },\n        { value: \"radiographer\", label: \"Radiographer\" }\n      ],\n      pharmacist: [\n        { value: \"clinical-pharmacist\", label: \"Clinical Pharmacist\" },\n        { value: \"hospital-pharmacist\", label: \"Hospital Pharmacist\" },\n        { value: \"community-pharmacist\", label: \"Community Pharmacist\" },\n        { value: \"pharmaceutical-technician\", label: \"Pharmaceutical Technician\" }\n      ]\n    };\n\n    return cadreMap[role as keyof typeof cadreMap] || [];\n  }\n\n  async getAllCareProviders(): Promise<CareProvider[]> {\n    return await db.select().from(careProviders).where(eq(careProviders.isActive, true));\n  }\n\n  // Private helper methods\n  private async findCareProviderByDomain(domain: string): Promise<CareProvider | null> {\n    const [provider] = await db.select()\n      .from(careProviders)\n      .where(eq(careProviders.domain, domain))\n      .limit(1);\n    \n    return provider || null;\n  }\n\n  private async createCareProvider(data: Omit<CareProvider, 'id' | 'createdAt'>): Promise<CareProvider> {\n    const [provider] = await db.insert(careProviders)\n      .values(data)\n      .returning();\n    \n    return provider;\n  }\n\n  private detectRoleFromUsername(username: string): { role: string | null; cadre: string | null } {\n    for (const pattern of this.rolePatterns) {\n      if (pattern.pattern.test(username)) {\n        return { role: pattern.role, cadre: pattern.cadre };\n      }\n    }\n    return { role: null, cadre: null };\n  }\n\n  private async simulateRegistrationCheck(\n    registrationNumber: string, \n    role: string, \n    country: string\n  ): Promise<RegistrationValidationResult> {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Simulate successful validation for demo purposes\n    const registrationBodies = {\n      kenya: {\n        doctor: \"Kenya Medical Practitioners Board\",\n        pharmacist: \"Pharmacy & Poisons Board\"\n      },\n      tanzania: {\n        doctor: \"Tanzania Medical Council\",\n        pharmacist: \"Tanzania Pharmacy Council\"\n      },\n      uganda: {\n        doctor: \"Uganda Medical Council\",\n        pharmacist: \"Uganda Pharmacy Council\"\n      }\n    };\n\n    const body = registrationBodies[country as keyof typeof registrationBodies]?.[role as keyof typeof registrationBodies.kenya];\n\n    return {\n      isValid: true,\n      registrationBody: body || `${country.toUpperCase()} Professional Board`,\n      cadre: role === \"doctor\" ? \"general-practitioner\" : `clinical-${role}`,\n      specialization: null,\n      expiryDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 1 year from now\n      errors: []\n    };\n  }\n}\n\nexport const authService = new AuthenticationService();","size_bytes":9509},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSecret = process.env.SESSION_SECRET || \"erlessed-healthcare-session-secret-2025\";\n  \n  const sessionSettings: session.SessionOptions = {\n    secret: sessionSecret,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    name: 'connect.sid',\n    rolling: true,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'lax' as const,\n      path: '/'\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (emailOrUsername, password, done) => {\n      try {\n        console.log(`Login attempt for: ${emailOrUsername}`);\n        let user;\n        \n        // Check if input contains @ symbol to determine if it's email or username\n        if (emailOrUsername.includes('@')) {\n          console.log('Attempting email login');\n          user = await storage.getUserByEmail(emailOrUsername);\n        } else {\n          console.log('Attempting username login');\n          user = await storage.getUserByUsername(emailOrUsername);\n        }\n        \n        if (!user) {\n          console.log('User not found');\n          return done(null, false, { message: 'User not found' });\n        }\n        \n        const passwordMatch = await comparePasswords(password, user.password);\n        if (!passwordMatch) {\n          console.log('Password mismatch');\n          return done(null, false, { message: 'Invalid password' });\n        }\n        \n        console.log('Login successful for user:', user.username);\n        return done(null, user);\n      } catch (error) {\n        console.error('Authentication error:', error);\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user: any, done) => {\n    console.log('Serializing user:', user.id);\n    done(null, user.id);\n  });\n  \n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      console.log('Deserializing user ID:', id, typeof id);\n      const userId = typeof id === 'string' ? parseInt(id, 10) : id;\n      console.log('Parsed user ID:', userId);\n      \n      if (!userId || isNaN(userId)) {\n        console.log('Invalid user ID during deserialization:', id);\n        return done(null, false);\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        console.log('User not found during deserialization for ID:', userId);\n        return done(null, false);\n      }\n      console.log('User deserialized successfully:', user.username);\n      done(null, user);\n    } catch (error) {\n      console.error('Deserialization error:', error);\n      done(error, null);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err, user, info) => {\n      if (err) {\n        console.error(\"Authentication error:\", err);\n        return res.status(500).json({ message: \"Authentication failed\" });\n      }\n      \n      if (!user) {\n        return res.status(401).json({ \n          message: \"Invalid email/username or password\" \n        });\n      }\n      \n      req.login(user, (loginErr) => {\n        if (loginErr) {\n          console.error(\"Login error:\", loginErr);\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        \n        console.log(\"Session after login:\", req.session.passport);\n        \n        // Force session save and then send response\n        req.session.save((saveErr) => {\n          if (saveErr) {\n            console.error(\"Session save error:\", saveErr);\n            return res.status(500).json({ message: \"Session save failed\" });\n          }\n          \n          console.log(\"Session saved successfully\");\n          \n          // Update last login time (optional)\n          // storage.updateLastLogin(user.id).catch(console.error);\n          \n          res.status(200).json({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            department: user.department\n          });\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    console.log(\"User request - Session ID:\", req.sessionID);\n    console.log(\"User request - Session passport:\", req.session?.passport);\n    console.log(\"User request - isAuthenticated:\", req.isAuthenticated());\n    console.log(\"User request - user:\", req.user?.username);\n    console.log(\"User request - Session store:\", !!req.session);\n    \n    if (!req.isAuthenticated() || !req.user) {\n      console.log(\"User not authenticated\");\n      return res.sendStatus(401);\n    }\n    \n    // Ensure user object has all required fields for debtors\n    const user = {\n      id: req.user.id,\n      username: req.user.username,\n      email: req.user.email,\n      name: req.user.name,\n      role: req.user.role,\n      department: req.user.department,\n      premiumAccess: req.user.role === 'debtors' ? true : req.user.premiumAccess\n    };\n    \n    res.json(user);\n  });\n}\n","size_bytes":6735},"server/biometric-service.ts":{"content":"import { getMongoDb, isMongoConnected, collections, BiometricFingerprint, BiometricAuditLog, BiometricSession, BiometricResetRequest } from './mongodb';\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'erlessed-jwt-secret-key-2025';\n\nexport class BiometricService {\n  private getDb() {\n    if (!isMongoConnected()) {\n      throw new Error('Biometric service unavailable - MongoDB not connected');\n    }\n    return getMongoDb();\n  }\n\n  // Generate fingerprint hash from raw data\n  private generateFingerprintHash(fingerprintData: string): string {\n    return crypto.createHash('sha256').update(fingerprintData).digest('hex');\n  }\n\n  // Create audit log entry\n  private async createAuditLog(log: Omit<BiometricAuditLog, '_id' | 'timestamp'>): Promise<void> {\n    const auditLog: BiometricAuditLog = {\n      ...log,\n      timestamp: new Date()\n    };\n    \n    await this.getDb().collection(collections.biometricAuditLogs).insertOne(auditLog);\n  }\n\n  // Generate JWT for authenticated actions\n  public generateBiometricToken(userId: string, role: string, action: string): string {\n    return jwt.sign(\n      { userId, role, action, type: 'biometric' },\n      JWT_SECRET,\n      { expiresIn: '15m' }\n    );\n  }\n\n  // Verify JWT token\n  public verifyBiometricToken(token: string): any {\n    try {\n      return jwt.verify(token, JWT_SECRET);\n    } catch (error) {\n      throw new Error('Invalid or expired token');\n    }\n  }\n\n  // Check if fingerprint exists for patient\n  async checkFingerprintExists(patientId: string): Promise<boolean> {\n    const fingerprint = await this.getDb()\n      .collection(collections.fingerprints)\n      .findOne({ patientId, status: 'active' });\n    \n    return !!fingerprint;\n  }\n\n  // Register individual finger\n  async registerIndividualFinger(\n    patientId: string,\n    fingerId: string,\n    fingerprintData: string,\n    registeredBy: string,\n    deviceId: string,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<{ success: boolean; fingerprintId?: string; error?: string }> {\n    try {\n      // Check if this specific finger already exists\n      const existingFinger = await this.getDb()\n        .collection(collections.fingerprints)\n        .findOne({ patientId, fingerId, status: 'active' });\n\n      if (existingFinger) {\n        return { success: false, error: `${fingerId} fingerprint already exists for this patient` };\n      }\n\n      const fingerprintHash = this.generateFingerprintHash(fingerprintData);\n      const fingerprintId = `fp_${patientId}_${fingerId}_${Date.now()}`;\n\n      const fingerprintRecord: BiometricFingerprint = {\n        fingerprintId,\n        patientId,\n        fingerId,\n        fingerprintHash,\n        fingerprintData: fingerprintData.length > 1000 ? fingerprintData.substring(0, 1000) : fingerprintData,\n        deviceId,\n        registeredBy,\n        registeredAt: new Date(),\n        status: 'active',\n        metadata: {\n          ipAddress,\n          userAgent,\n          hand: fingerId.startsWith('left') ? 'left' : 'right',\n          finger: fingerId.split('_')[1] || 'unknown'\n        }\n      };\n\n      await this.getDb().collection(collections.fingerprints).insertOne(fingerprintRecord as any);\n\n      // Create audit log\n      await this.createAuditLog({\n        patientId,\n        action: 'register_individual_finger',\n        userId: registeredBy,\n        userRole: 'unknown',\n        deviceId,\n        result: 'success',\n        ipAddress,\n        userAgent,\n        metadata: { fingerId, fingerprintId }\n      });\n\n      return { success: true, fingerprintId };\n    } catch (error) {\n      console.error('Individual finger registration error:', error);\n      \n      // Create failed audit log\n      await this.createAuditLog({\n        patientId,\n        action: 'register_individual_finger',\n        userId: registeredBy,\n        userRole: 'unknown',\n        deviceId,\n        result: 'failed',\n        ipAddress,\n        userAgent,\n        metadata: { fingerId, error: error instanceof Error ? error.message : 'Unknown error' }\n      });\n\n      return { success: false, error: 'Failed to register fingerprint' };\n    }\n  }\n\n  // Register new fingerprint (legacy single fingerprint)\n  async registerFingerprint(\n    patientId: string,\n    fingerprintData: string,\n    registeredBy: string,\n    deviceId: string,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<{ success: boolean; fingerprintId?: string; error?: string }> {\n    try {\n      // For legacy compatibility, register as right thumb\n      return await this.registerIndividualFinger(\n        patientId,\n        'right_thumb',\n        fingerprintData,\n        registeredBy,\n        deviceId,\n        ipAddress,\n        userAgent\n      );\n    } catch (error) {\n      console.error('Legacy fingerprint registration error:', error);\n      return { success: false, error: 'Failed to register fingerprint' };\n    }\n  }\n\n  // Get all registered fingers for a patient\n  async getPatientFingerprints(patientId: string): Promise<Array<{\n    fingerId: string;\n    fingerprintId: string;\n    registeredAt: Date;\n    status: string;\n    hand: string;\n    finger: string;\n  }>> {\n    try {\n      const fingerprints = await this.getDb()\n        .collection(collections.fingerprints)\n        .find({ patientId, status: 'active' })\n        .sort({ registeredAt: -1 })\n        .toArray();\n\n      return fingerprints.map((fp: any) => ({\n        fingerId: fp.fingerId,\n        fingerprintId: fp.fingerprintId,\n        registeredAt: fp.registeredAt,\n        status: fp.status,\n        hand: fp.metadata?.hand || 'unknown',\n        finger: fp.metadata?.finger || 'unknown'\n      }));\n    } catch (error) {\n      console.error('Error getting patient fingerprints:', error);\n      return [];\n    }\n  }\n\n  // Check how many fingers are registered for patient\n  async getRegistrationCount(patientId: string): Promise<{\n    total: number;\n    leftHand: number;\n    rightHand: number;\n    fingers: string[];\n  }> {\n    try {\n      const fingerprints = await this.getPatientFingerprints(patientId);\n      \n      const leftHand = fingerprints.filter(fp => fp.hand === 'left').length;\n      const rightHand = fingerprints.filter(fp => fp.hand === 'right').length;\n      const fingers = fingerprints.map(fp => fp.fingerId);\n\n      return {\n        total: fingerprints.length,\n        leftHand,\n        rightHand,\n        fingers\n      };\n    } catch (error) {\n      console.error('Error getting registration count:', error);\n      return { total: 0, leftHand: 0, rightHand: 0, fingers: [] };\n    }\n  }\n\n  // Enhanced verification with multiple fingerprint support\n  async verifyMultipleFingerprints(\n    patientId: string,\n    fingerprintData: string,\n    userId: string,\n    userRole: string,\n    deviceId: string,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<{ success: boolean; verificationScore?: number; matchedFinger?: string; error?: string }> {\n    try {\n      const fingerprintHash = this.generateFingerprintHash(fingerprintData);\n      \n      // Get all active fingerprints for patient\n      const fingerprints = await this.getDb()\n        .collection(collections.fingerprints)\n        .find({ patientId, status: 'active' })\n        .toArray();\n\n      if (fingerprints.length === 0) {\n        return { success: false, error: 'No fingerprints registered for this patient' };\n      }\n\n      // Check against all registered fingerprints\n      let bestMatch = { score: 0, fingerId: '' };\n      \n      for (const fp of fingerprints) {\n        const similarity = this.calculateSimilarity(fingerprintHash, fp.fingerprintHash);\n        if (similarity > bestMatch.score) {\n          bestMatch = { score: similarity, fingerId: fp.fingerId };\n        }\n      }\n\n      const threshold = 85; // 85% similarity threshold\n      const success = bestMatch.score >= threshold;\n\n      // Create audit log\n      await this.createAuditLog({\n        patientId,\n        action: 'verify_multiple_fingerprints',\n        userId,\n        userRole,\n        deviceId,\n        result: success ? 'success' : 'failed',\n        ipAddress,\n        userAgent,\n        metadata: { \n          verificationScore: bestMatch.score,\n          matchedFinger: success ? bestMatch.fingerId : null,\n          threshold\n        }\n      });\n\n      if (success) {\n        return { \n          success: true, \n          verificationScore: bestMatch.score,\n          matchedFinger: bestMatch.fingerId\n        };\n      } else {\n        return { \n          success: false, \n          error: `Verification failed. Best match: ${Math.round(bestMatch.score)}% (required: ${threshold}%)`,\n          verificationScore: bestMatch.score\n        };\n      }\n    } catch (error) {\n      console.error('Multi-fingerprint verification error:', error);\n      \n      // Create failed audit log\n      await this.createAuditLog({\n        patientId,\n        action: 'verify_multiple_fingerprints',\n        userId,\n        userRole,\n        deviceId,\n        result: 'failed',\n        ipAddress,\n        userAgent,\n        metadata: { error: error instanceof Error ? error.message : 'Unknown error' }\n      });\n\n      return { success: false, error: 'Verification service unavailable' };\n    }\n  }\n\n  // Original single fingerprint verification (for backward compatibility)\n  async verifyFingerprint(\n    patientId: string,\n    fingerprintData: string,\n    userId: string,\n    userRole: string,\n    deviceId: string,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<{ success: boolean; verificationScore?: number; error?: string }> {\n    try {\n      const result = await this.verifyMultipleFingerprints(\n        patientId,\n        fingerprintData,\n        userId,\n        userRole,\n        deviceId,\n        ipAddress,\n        userAgent\n      );\n\n      return {\n        success: result.success,\n        verificationScore: result.verificationScore,\n        error: result.error\n      };\n    } catch (error) {\n      console.error('Legacy fingerprint verification error:', error);\n      return { success: false, error: 'Verification service unavailable' };\n    }\n  }\n\n  // Enhanced fingerprint info\n  async getEnhancedFingerprintInfo(patientId: string): Promise<{\n    registered: boolean;\n    count: number;\n    leftHand: number;\n    rightHand: number;\n    fingers: Array<{\n      fingerId: string;\n      hand: string;\n      finger: string;\n      registeredAt: Date;\n    }>;\n  } | null> {\n    try {\n      const fingerprints = await this.getPatientFingerprints(patientId);\n      \n      if (fingerprints.length === 0) {\n        return {\n          registered: false,\n          count: 0,\n          leftHand: 0,\n          rightHand: 0,\n          fingers: []\n        };\n      }\n\n      const leftHand = fingerprints.filter(fp => fp.hand === 'left').length;\n      const rightHand = fingerprints.filter(fp => fp.hand === 'right').length;\n\n      return {\n        registered: true,\n        count: fingerprints.length,\n        leftHand,\n        rightHand,\n        fingers: fingerprints.map(fp => ({\n          fingerId: fp.fingerId,\n          hand: fp.hand,\n          finger: fp.finger,\n          registeredAt: fp.registeredAt\n        }))\n      };\n    } catch (error) {\n      console.error('Error getting enhanced fingerprint info:', error);\n      return null;\n    }\n  }\n\n  // Legacy fingerprint info (for backward compatibility)\n  async getFingerprintInfo(patientId: string): Promise<any> {\n    try {\n      const enhancedInfo = await this.getEnhancedFingerprintInfo(patientId);\n      \n      if (!enhancedInfo || !enhancedInfo.registered) {\n        return null;\n      }\n\n      // Return legacy format for backward compatibility\n      const firstFingerprint = enhancedInfo.fingers[0];\n      \n      return {\n        patientId,\n        fingerprintHash: 'hash_hidden_for_security',\n        registeredBy: 'system',\n        registeredAt: firstFingerprint.registeredAt.toISOString(),\n        status: 'active'\n      };\n    } catch (error) {\n      console.error('Error getting legacy fingerprint info:', error);\n      return null;\n    }\n\n      // Create fingerprint hash\n      const fingerprintHash = this.generateFingerprintHash(fingerprintData);\n\n      // Check for duplicate fingerprint hash (prevent same fingerprint for different patients)\n      const duplicateHash = await this.getDb()\n        .collection(collections.fingerprints)\n        .findOne({ fingerprintHash, status: 'active' });\n\n      if (duplicateHash) {\n        await this.createAuditLog({\n          patientId,\n          action: 'register',\n          userId: registeredBy,\n          userRole: 'unknown',\n          deviceId,\n          ipAddress,\n          userAgent,\n          details: { success: false, errorMessage: 'Duplicate fingerprint detected' }\n        });\n        return { success: false, error: 'This fingerprint is already registered to another patient' };\n      }\n\n      // Register new fingerprint\n      const newFingerprint: BiometricFingerprint = {\n        patientId,\n        fingerprintHash,\n        fingerprintData,\n        deviceId,\n        registeredBy,\n        registeredAt: new Date(),\n        status: 'active'\n      };\n\n      const result = await this.getDb()\n        .collection(collections.fingerprints)\n        .insertOne(newFingerprint);\n\n      // Log successful registration\n      await this.createAuditLog({\n        patientId,\n        action: 'register',\n        userId: registeredBy,\n        userRole: 'unknown',\n        deviceId,\n        ipAddress,\n        userAgent,\n        details: { success: true, fingerprintHash }\n      });\n\n      return { success: true, fingerprintId: result.insertedId.toString() };\n    } catch (error) {\n      console.error('Fingerprint registration error:', error);\n      \n      await this.createAuditLog({\n        patientId,\n        action: 'register',\n        userId: registeredBy,\n        userRole: 'unknown',\n        deviceId: deviceId || 'unknown',\n        ipAddress,\n        userAgent,\n        details: { success: false, errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      });\n\n      return { success: false, error: 'Registration failed. Please try again.' };\n    }\n  }\n\n  // Verify fingerprint\n  async verifyFingerprint(\n    patientId: string,\n    fingerprintData: string,\n    userId: string,\n    userRole: string,\n    deviceId: string,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<{ success: boolean; verificationScore?: number; error?: string }> {\n    try {\n      // Get active fingerprint for patient\n      const storedFingerprint = await this.getDb()\n        .collection(collections.fingerprints)\n        .findOne({ patientId, status: 'active' });\n\n      if (!storedFingerprint) {\n        await this.createAuditLog({\n          patientId,\n          action: 'verification_failed',\n          userId,\n          userRole,\n          deviceId,\n          ipAddress,\n          userAgent,\n          details: { success: false, errorMessage: 'No fingerprint found for patient' }\n        });\n        return { success: false, error: 'No fingerprint registered for this patient' };\n      }\n\n      // Generate hash of provided fingerprint\n      const providedHash = this.generateFingerprintHash(fingerprintData);\n      \n      // Calculate verification score (in real system, this would use biometric matching algorithms)\n      const verificationScore = this.calculateBiometricScore(storedFingerprint.fingerprintHash, providedHash);\n      \n      const isMatch = verificationScore >= 85; // 85% threshold for successful verification\n\n      // Log verification attempt\n      await this.createAuditLog({\n        patientId,\n        action: 'verify',\n        userId,\n        userRole,\n        deviceId,\n        ipAddress,\n        userAgent,\n        details: { \n          success: isMatch, \n          verificationScore,\n          errorMessage: isMatch ? undefined : 'Fingerprint mismatch'\n        }\n      });\n\n      if (isMatch) {\n        return { success: true, verificationScore };\n      } else {\n        return { success: false, verificationScore, error: 'Fingerprint verification failed' };\n      }\n    } catch (error) {\n      console.error('Fingerprint verification error:', error);\n      \n      await this.createAuditLog({\n        patientId,\n        action: 'verification_failed',\n        userId,\n        userRole,\n        deviceId: deviceId || 'unknown',\n        ipAddress,\n        userAgent,\n        details: { success: false, errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      });\n\n      return { success: false, error: 'Verification failed. Please try again.' };\n    }\n  }\n\n  // Calculate biometric matching score (simplified simulation)\n  private calculateBiometricScore(storedHash: string, providedHash: string): number {\n    if (storedHash === providedHash) {\n      return 100; // Perfect match\n    }\n\n    // Simulate partial matching based on hash similarity\n    let matchingChars = 0;\n    const minLength = Math.min(storedHash.length, providedHash.length);\n    \n    for (let i = 0; i < minLength; i++) {\n      if (storedHash[i] === providedHash[i]) {\n        matchingChars++;\n      }\n    }\n\n    // Add some randomness to simulate real biometric matching variability\n    const baseScore = (matchingChars / minLength) * 100;\n    const randomVariation = (Math.random() - 0.5) * 20; // ±10% variation\n    \n    return Math.max(0, Math.min(100, baseScore + randomVariation));\n  }\n\n  // Request fingerprint reset (care managers and insurers)\n  async requestFingerprintReset(\n    patientId: string,\n    requestedBy: string,\n    reason: string,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<{ success: boolean; resetRequestId?: string; error?: string }> {\n    try {\n      const fingerprint = await this.getDb()\n        .collection(collections.fingerprints)\n        .findOne({ patientId, status: 'active' });\n\n      if (!fingerprint) {\n        return { success: false, error: 'No active fingerprint found for this patient' };\n      }\n\n      const resetRequest: BiometricResetRequest = {\n        requestedBy,\n        requestedAt: new Date(),\n        reason,\n        status: 'pending'\n      };\n\n      // Add reset request to fingerprint document\n      await this.getDb()\n        .collection(collections.fingerprints)\n        .updateOne(\n          { patientId, status: 'active' },\n          { $push: { resetRequests: resetRequest } }\n        );\n\n      // Log reset request\n      await this.createAuditLog({\n        patientId,\n        action: 'reset_request',\n        userId: requestedBy,\n        userRole: 'care_manager',\n        ipAddress,\n        userAgent,\n        details: { success: true, reason }\n      });\n\n      return { success: true, resetRequestId: crypto.randomUUID() };\n    } catch (error) {\n      console.error('Reset request error:', error);\n      return { success: false, error: 'Failed to create reset request' };\n    }\n  }\n\n  // Reset fingerprint (archives old, sets status to pending_reset)\n  async resetFingerprint(\n    patientId: string,\n    resetBy: string,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      // Archive current fingerprint\n      await this.getDb()\n        .collection(collections.fingerprints)\n        .updateOne(\n          { patientId, status: 'active' },\n          { $set: { status: 'archived', archivedAt: new Date(), archivedBy: resetBy } }\n        );\n\n      // Log reset action\n      await this.createAuditLog({\n        patientId,\n        action: 'reset_approved',\n        userId: resetBy,\n        userRole: 'care_manager',\n        ipAddress,\n        userAgent,\n        details: { success: true }\n      });\n\n      return { success: true };\n    } catch (error) {\n      console.error('Reset fingerprint error:', error);\n      return { success: false, error: 'Failed to reset fingerprint' };\n    }\n  }\n\n  // Get audit logs for patient\n  async getAuditLogs(patientId: string, limit: number = 50): Promise<BiometricAuditLog[]> {\n    const logs = await this.getDb()\n      .collection(collections.biometricAuditLogs)\n      .find({ patientId })\n      .sort({ timestamp: -1 })\n      .limit(limit)\n      .toArray();\n\n    return logs;\n  }\n\n  // Get fingerprint info for patient\n  async getFingerprintInfo(patientId: string): Promise<BiometricFingerprint | null> {\n    const fingerprint = await this.getDb()\n      .collection(collections.fingerprints)\n      .findOne({ patientId, status: 'active' });\n\n    if (fingerprint) {\n      // Remove sensitive fingerprint data from response\n      const { fingerprintData, ...safeFingerprint } = fingerprint;\n      return safeFingerprint as BiometricFingerprint;\n    }\n\n    return null;\n  }\n}\n\nexport const biometricService = new BiometricService();","size_bytes":20695},"server/claim-forms.ts":{"content":"import PDFMake from 'pdfmake/build/pdfmake';\nimport PDFMakeFonts from 'pdfmake/build/vfs_fonts';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// Initialize PDFMake with fonts\nPDFMake.vfs = PDFMakeFonts.pdfMake.vfs;\n\ninterface ClaimFormData {\n  fullName: string;\n  policyNumber: string;\n  insurerName: string;\n  schemeName: string;\n  planName: string;\n  diagnosis: string;\n  icdCode: string;\n  requestedServices?: Array<{\n    serviceName: string;\n    serviceCode: string;\n    quantity: number;\n    unitCost: number;\n    totalCost: number;\n  }>;\n  patientAge?: number;\n  patientGender?: string;\n  dateOfService?: string;\n  providerName?: string;\n  providerCode?: string;\n  claimAmount?: number;\n}\n\ninterface FormTemplate {\n  name: string;\n  insurerName: string;\n  logoPath?: string;\n  headerColor: string;\n  layout: 'standard' | 'detailed' | 'compact';\n  requiredFields: string[];\n  customSections?: any[];\n}\n\n// Form templates for different insurers\nconst FORM_TEMPLATES: Record<string, FormTemplate> = {\n  'SHA': {\n    name: 'SHA Claim Form',\n    insurerName: 'Social Health Authority',\n    headerColor: '#2563eb',\n    layout: 'standard',\n    requiredFields: ['fullName', 'policyNumber', 'diagnosis', 'icdCode', 'dateOfService']\n  },\n  'CIC': {\n    name: 'CIC Insurance Claim Form',\n    insurerName: 'CIC Insurance Group',\n    headerColor: '#dc2626',\n    layout: 'detailed',\n    requiredFields: ['fullName', 'policyNumber', 'diagnosis', 'icdCode', 'requestedServices']\n  },\n  'AAR': {\n    name: 'AAR Insurance Claim Form',\n    insurerName: 'AAR Insurance Kenya',\n    headerColor: '#059669',\n    layout: 'standard',\n    requiredFields: ['fullName', 'policyNumber', 'diagnosis', 'icdCode']\n  },\n  'JUBILEE': {\n    name: 'Jubilee Insurance Claim Form',\n    insurerName: 'Jubilee Insurance',\n    headerColor: '#7c3aed',\n    layout: 'compact',\n    requiredFields: ['fullName', 'policyNumber', 'diagnosis']\n  },\n  'AON': {\n    name: 'AON Minet Claim Form',\n    insurerName: 'AON Minet Insurance Brokers',\n    headerColor: '#ea580c',\n    layout: 'detailed',\n    requiredFields: ['fullName', 'policyNumber', 'schemeName', 'diagnosis', 'icdCode']\n  }\n};\n\nexport function selectFormTemplate(insurerName: string): FormTemplate {\n  // Normalize insurer name for lookup\n  const normalizedName = insurerName.toUpperCase().replace(/[^A-Z]/g, '');\n  \n  // Try exact matches first\n  if (FORM_TEMPLATES[normalizedName]) {\n    return FORM_TEMPLATES[normalizedName];\n  }\n  \n  // Try partial matches\n  for (const [key, template] of Object.entries(FORM_TEMPLATES)) {\n    if (normalizedName.includes(key) || key.includes(normalizedName)) {\n      return template;\n    }\n  }\n  \n  // Default to SHA template\n  return FORM_TEMPLATES['SHA'];\n}\n\nexport async function fillClaimForm(template: FormTemplate, formData: ClaimFormData): Promise<string> {\n  const currentDate = new Date().toLocaleDateString('en-GB');\n  const claimNumber = `CLM-${Date.now()}`;\n  \n  // Calculate total claim amount\n  const totalAmount = formData.requestedServices?.reduce((sum, service) => sum + service.totalCost, 0) || formData.claimAmount || 0;\n  \n  const docDefinition = {\n    pageSize: 'A4',\n    pageMargins: [40, 60, 40, 60],\n    \n    header: {\n      columns: [\n        {\n          text: template.insurerName,\n          style: 'header',\n          color: template.headerColor,\n          fontSize: 18,\n          bold: true,\n          margin: [40, 20, 0, 0]\n        },\n        {\n          text: `Claim Form\\n${currentDate}`,\n          style: 'headerRight',\n          alignment: 'right',\n          fontSize: 10,\n          margin: [0, 20, 40, 0]\n        }\n      ]\n    },\n    \n    content: [\n      // Title\n      {\n        text: template.name,\n        style: 'title',\n        alignment: 'center',\n        margin: [0, 0, 0, 20]\n      },\n      \n      // Claim Information\n      {\n        text: 'CLAIM INFORMATION',\n        style: 'sectionHeader',\n        margin: [0, 0, 0, 10]\n      },\n      {\n        columns: [\n          {\n            width: '50%',\n            stack: [\n              { text: `Claim Number: ${claimNumber}`, margin: [0, 0, 0, 5] },\n              { text: `Date of Claim: ${currentDate}`, margin: [0, 0, 0, 5] },\n              { text: `Policy Number: ${formData.policyNumber}`, margin: [0, 0, 0, 5] }\n            ]\n          },\n          {\n            width: '50%',\n            stack: [\n              { text: `Scheme: ${formData.schemeName}`, margin: [0, 0, 0, 5] },\n              { text: `Plan: ${formData.planName}`, margin: [0, 0, 0, 5] },\n              { text: `Total Amount: KES ${totalAmount.toLocaleString()}`, margin: [0, 0, 0, 5] }\n            ]\n          }\n        ],\n        margin: [0, 0, 0, 20]\n      },\n      \n      // Patient Information\n      {\n        text: 'PATIENT INFORMATION',\n        style: 'sectionHeader',\n        margin: [0, 0, 0, 10]\n      },\n      {\n        columns: [\n          {\n            width: '50%',\n            stack: [\n              { text: `Full Name: ${formData.fullName}`, margin: [0, 0, 0, 5] },\n              { text: `Age: ${formData.patientAge || 'Not specified'}`, margin: [0, 0, 0, 5] }\n            ]\n          },\n          {\n            width: '50%',\n            stack: [\n              { text: `Gender: ${formData.patientGender || 'Not specified'}`, margin: [0, 0, 0, 5] },\n              { text: `Date of Service: ${formData.dateOfService || currentDate}`, margin: [0, 0, 0, 5] }\n            ]\n          }\n        ],\n        margin: [0, 0, 0, 20]\n      },\n      \n      // Medical Information\n      {\n        text: 'MEDICAL INFORMATION',\n        style: 'sectionHeader',\n        margin: [0, 0, 0, 10]\n      },\n      {\n        stack: [\n          { text: `Primary Diagnosis: ${formData.diagnosis}`, margin: [0, 0, 0, 5] },\n          { text: `ICD-10 Code: ${formData.icdCode}`, margin: [0, 0, 0, 5] }\n        ],\n        margin: [0, 0, 0, 20]\n      }\n    ],\n    \n    styles: {\n      header: {\n        fontSize: 18,\n        bold: true\n      },\n      headerRight: {\n        fontSize: 10,\n        alignment: 'right'\n      },\n      title: {\n        fontSize: 16,\n        bold: true,\n        color: template.headerColor\n      },\n      sectionHeader: {\n        fontSize: 12,\n        bold: true,\n        color: template.headerColor,\n        decoration: 'underline'\n      }\n    }\n  };\n  \n  // Add services table if provided\n  if (formData.requestedServices && formData.requestedServices.length > 0) {\n    (docDefinition.content as any[]).push(\n      {\n        text: 'SERVICES PROVIDED',\n        style: 'sectionHeader',\n        margin: [0, 10, 0, 10]\n      },\n      {\n        table: {\n          headerRows: 1,\n          widths: ['*', 'auto', 'auto', 'auto', 'auto'],\n          body: [\n            ['Service', 'Code', 'Qty', 'Unit Cost (KES)', 'Total (KES)'],\n            ...formData.requestedServices.map(service => [\n              service.serviceName,\n              service.serviceCode,\n              service.quantity.toString(),\n              service.unitCost.toLocaleString(),\n              service.totalCost.toLocaleString()\n            ]),\n            ['', '', '', 'TOTAL:', totalAmount.toLocaleString()]\n          ]\n        },\n        layout: {\n          fillColor: function (rowIndex: number) {\n            return rowIndex === 0 ? '#f3f4f6' : null;\n          }\n        },\n        margin: [0, 0, 0, 20]\n      }\n    );\n  }\n  \n  // Add provider information\n  if (formData.providerName) {\n    (docDefinition.content as any[]).push(\n      {\n        text: 'PROVIDER INFORMATION',\n        style: 'sectionHeader',\n        margin: [0, 10, 0, 10]\n      },\n      {\n        columns: [\n          {\n            width: '50%',\n            text: `Provider Name: ${formData.providerName}`\n          },\n          {\n            width: '50%',\n            text: `Provider Code: ${formData.providerCode || 'Not specified'}`\n          }\n        ],\n        margin: [0, 0, 0, 20]\n      }\n    );\n  }\n  \n  // Add signature section\n  (docDefinition.content as any[]).push(\n    {\n      text: 'AUTHORIZATION',\n      style: 'sectionHeader',\n      margin: [0, 20, 0, 10]\n    },\n    {\n      columns: [\n        {\n          width: '50%',\n          stack: [\n            { text: 'Patient/Guardian Signature:', margin: [0, 0, 0, 20] },\n            { text: '_'.repeat(30), margin: [0, 0, 0, 5] },\n            { text: `Date: ${currentDate}`, fontSize: 10 }\n          ]\n        },\n        {\n          width: '50%',\n          stack: [\n            { text: 'Healthcare Provider Signature:', margin: [0, 0, 0, 20] },\n            { text: '_'.repeat(30), margin: [0, 0, 0, 5] },\n            { text: `Date: ${currentDate}`, fontSize: 10 }\n          ]\n        }\n      ]\n    }\n  );\n  \n  // Generate PDF\n  const pdfDoc = PDFMake.createPdf(docDefinition);\n  \n  // Create temp directory if it doesn't exist\n  const tempDir = path.join(process.cwd(), 'temp');\n  await fs.mkdir(tempDir, { recursive: true });\n  \n  // Generate unique filename\n  const filename = `claim-${claimNumber}-${Date.now()}.pdf`;\n  const filePath = path.join(tempDir, filename);\n  \n  // Save PDF to file\n  return new Promise((resolve, reject) => {\n    pdfDoc.getBuffer((buffer) => {\n      fs.writeFile(filePath, buffer)\n        .then(() => resolve(filePath))\n        .catch(reject);\n    });\n  });\n}\n\n// Utility function to validate required fields\nexport function validateClaimData(template: FormTemplate, formData: ClaimFormData): string[] {\n  const errors: string[] = [];\n  \n  for (const field of template.requiredFields) {\n    if (!formData[field as keyof ClaimFormData]) {\n      errors.push(`Missing required field: ${field}`);\n    }\n  }\n  \n  return errors;\n}","size_bytes":9590},"server/create-admin-user.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function createAdminUser() {\n  try {\n    const hashedPassword = await hashPassword(\"test123\");\n    \n    await db.insert(users).values({\n      username: \"admin\",\n      email: \"admin@erlessed.com\",\n      password: hashedPassword,\n      name: \"Administrator\",\n      role: \"admin\"\n    });\n    \n    console.log(\"Admin user created successfully:\");\n    console.log(\"Username: admin\");\n    console.log(\"Email: admin@erlessed.com\");\n    console.log(\"Password: test123\");\n    \n  } catch (error) {\n    if (error.code === '23505') {\n      console.log(\"Admin user already exists\");\n    } else {\n      console.error(\"Error creating admin user:\", error);\n    }\n  }\n}\n\ncreateAdminUser();","size_bytes":1073},"server/create-simple-users.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function createSimpleUsers() {\n  try {\n    console.log(\"Creating test users...\");\n\n    const testPasswordHash = await hashPassword(\"test123\");\n\n    const testUsers = [\n      {\n        username: \"testuser\",\n        email: \"test@test.med\",\n        password: testPasswordHash,\n        name: \"Test User\",\n        role: \"admin\"\n      },\n      {\n        username: \"doctor1\",\n        email: \"doctor@test.med\", \n        password: testPasswordHash,\n        name: \"Dr. Sarah Mwangi\",\n        role: \"doctor\"\n      },\n      {\n        username: \"pharmacist1\",\n        email: \"pharmacist@test.med\",\n        password: testPasswordHash,\n        name: \"John Kimani\",\n        role: \"pharmacy\"\n      },\n      {\n        username: \"frontoffice1\",\n        email: \"frontoffice@test.med\",\n        password: testPasswordHash,\n        name: \"Grace Wanjiku\",\n        role: \"front-office\"\n      },\n      {\n        username: \"debtors1\",\n        email: \"debtors@test.med\",\n        password: testPasswordHash,\n        name: \"Mary Njoroge\",\n        role: \"debtors\"\n      },\n      {\n        username: \"caremanager1\",\n        email: \"caremanager@test.med\",\n        password: testPasswordHash,\n        name: \"Peter Ochieng\",\n        role: \"care-manager\"\n      },\n      {\n        username: \"insurer1\",\n        email: \"insurer@cic.co.ke\",\n        password: testPasswordHash,\n        name: \"Mary Njeri\",\n        role: \"insurer\"\n      }\n    ];\n\n    for (const user of testUsers) {\n      try {\n        await db\n          .insert(users)\n          .values(user)\n          .onConflictDoNothing();\n        console.log(`Created user: ${user.username}`);\n      } catch (error) {\n        console.log(`User ${user.username} already exists or error:`, error.message);\n      }\n    }\n\n    console.log(\"\\n=== TEST USER CREDENTIALS ===\");\n    console.log(\"Username: testuser (Admin) | Password: test123\");\n    console.log(\"Username: doctor1 (Doctor) | Password: test123\");\n    console.log(\"Username: pharmacist1 (Pharmacist) | Password: test123\");\n    console.log(\"Username: debtors1 (Debtors Officer) | Password: test123\");\n    console.log(\"Username: frontoffice1 (Front Office) | Password: test123\");\n    console.log(\"Username: caremanager1 (Care Manager) | Password: test123\");\n    console.log(\"Username: insurer1 (Insurer) | Password: test123\");\n    console.log(\"==============================\\n\");\n\n  } catch (error) {\n    console.error(\"Error creating users:\", error);\n    throw error;\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  createSimpleUsers()\n    .then(() => {\n      console.log(\"User creation completed successfully\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"User creation failed:\", error);\n      process.exit(1);\n    });\n}","size_bytes":3147},"server/create-test-user.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function createTestUser() {\n  try {\n    const hashedPassword = await hashPassword(\"test123\");\n    \n    await db.insert(users).values({\n      username: \"testuser\",\n      email: \"test@aku.edu\",\n      password: hashedPassword,\n      name: \"Test User\",\n      role: \"doctor\"\n    });\n    \n    console.log(\"Test user created successfully:\");\n    console.log(\"Username: testuser\");\n    console.log(\"Email: test@aku.edu\");\n    console.log(\"Password: test123\");\n    \n  } catch (error) {\n    if (error.code === '23505') {\n      console.log(\"Test user already exists\");\n    } else {\n      console.error(\"Error creating test user:\", error);\n    }\n  }\n}\n\ncreateTestUser();","size_bytes":1059},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure WebSocket for Neon database connection\nneonConfig.webSocketConstructor = ws;\nneonConfig.useSecureWebSocket = true;\nneonConfig.pipelineConnect = false;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 10,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 10000,\n});\n\nexport const db = drizzle({ client: pool, schema });","size_bytes":686},"server/deepseek.ts":{"content":"import OpenAI from 'openai';\n\n// DeepSeek API configuration\nconst deepseek = new OpenAI({\n  baseURL: 'https://api.deepseek.com',\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\ninterface ChainOfThoughtRequest {\n  prompt: string;\n  context?: string;\n  temperature?: number;\n  maxTokens?: number;\n}\n\ninterface ChainOfThoughtResponse {\n  reasoning: string[];\n  conclusion: string;\n  confidence: number;\n  supportingEvidence: string[];\n}\n\ninterface PreauthorizationRequest {\n  patientId: string;\n  diagnosis: string;\n  treatmentPlan: string;\n  medicalHistory?: string;\n  insuranceScheme: string;\n  cost: number;\n}\n\ninterface PreauthorizationDecision {\n  decision: 'approved' | 'denied' | 'requires_review';\n  reasoning: string[];\n  confidence: number;\n  conditions?: string[];\n  appealProcess?: string;\n}\n\nexport class DeepSeekService {\n  /**\n   * Generate chain of thought reasoning for any healthcare decision\n   */\n  async generateChainOfThought(request: ChainOfThoughtRequest): Promise<ChainOfThoughtResponse> {\n    try {\n      const systemPrompt = `You are a healthcare decision support AI that provides transparent chain-of-thought reasoning. \n      Always structure your response as:\n      1. REASONING STEPS: Break down your thinking into clear, logical steps\n      2. CONCLUSION: Your final recommendation\n      3. CONFIDENCE: A score from 0-100 indicating certainty\n      4. SUPPORTING EVIDENCE: Key factors that support your decision\n\n      Be thorough, evidence-based, and transparent in your reasoning process.`;\n\n      const userPrompt = `${request.context ? `Context: ${request.context}\\n\\n` : ''}${request.prompt}\n\n      Please provide a detailed chain of thought analysis following the structured format.`;\n\n      const completion = await deepseek.chat.completions.create({\n        model: 'deepseek-chat',\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt }\n        ],\n        temperature: request.temperature || 0.7,\n        max_tokens: request.maxTokens || 1500,\n      });\n\n      const response = completion.choices[0]?.message?.content || '';\n      \n      // Parse the structured response\n      return this.parseChainOfThoughtResponse(response);\n    } catch (error) {\n      console.error('DeepSeek API error:', error);\n      throw new Error('Failed to generate chain of thought reasoning');\n    }\n  }\n\n  /**\n   * Medical insurance claims validator with structured evaluation\n   */\n  async validateInsuranceClaim(claimData: {\n    fullName: string;\n    age: number;\n    sex: string;\n    diagnosis: string;\n    icdCode: string;\n    serviceName: string;\n    procedureCode: string;\n    planName: string;\n    insurerName: string;\n  }): Promise<{\n    decision: 'Approved' | 'Denied';\n    confidence: number;\n    reason: string;\n    reasoning: string[];\n  }> {\n    const prompt = `You are a medical insurance claims validator for the Erlessed platform.\n\nEvaluate whether the requested service should be approved or denied, based on:\n- Diagnosis\n- Treatment request\n- Patient demographics\n- Insurance policy limitations\n\nStep through the logic, then provide a final decision (Approved/Denied), a brief reason, and a confidence score (0–100%).\n\n---\nPatient: ${claimData.fullName}, Age: ${claimData.age}, Sex: ${claimData.sex}\nDiagnosis: ${claimData.diagnosis} (ICD-10: ${claimData.icdCode})\nRequested Service: ${claimData.serviceName} (CPT: ${claimData.procedureCode})\nPolicy Plan: ${claimData.planName}\nScheme: ${claimData.insurerName}\n---\n\nReturn your reasoning, then a JSON block like:\n{\n  \"decision\": \"Approved\",\n  \"confidence\": 89,\n  \"reason\": \"Service is standard for the diagnosis and covered in this plan\"\n}`;\n\n    try {\n      const completion = await deepseek.chat.completions.create({\n        model: 'deepseek-chat',\n        messages: [\n          { role: 'system', content: 'You are an expert medical insurance claims validator. Provide structured analysis with clear reasoning steps and confident decisions based on medical necessity and policy coverage.' },\n          { role: 'user', content: prompt }\n        ],\n        temperature: 0.2,\n        max_tokens: 1000,\n      });\n\n      const response = completion.choices[0]?.message?.content || '';\n      \n      // Extract JSON from response\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const result = JSON.parse(jsonMatch[0]);\n        \n        // Extract reasoning steps from the text before JSON\n        const reasoningText = response.split(jsonMatch[0])[0];\n        const reasoning = reasoningText.split('\\n')\n          .filter(line => line.trim().length > 0)\n          .map(line => line.trim())\n          .slice(-5); // Get last 5 reasoning steps\n        \n        return {\n          decision: result.decision,\n          confidence: result.confidence,\n          reason: result.reason,\n          reasoning\n        };\n      }\n      \n      // Fallback parsing\n      return {\n        decision: response.includes('Approved') ? 'Approved' : 'Denied',\n        confidence: 75,\n        reason: 'Standard evaluation completed',\n        reasoning: ['Medical necessity assessed', 'Policy coverage verified', 'Decision rendered']\n      };\n    } catch (error) {\n      console.error('Claims validation error:', error);\n      throw new Error('Failed to validate insurance claim');\n    }\n  }\n\n  /**\n   * Preauthorization decision with chain of thought\n   */\n  async analyzePreauthorization(request: PreauthorizationRequest): Promise<PreauthorizationDecision> {\n    const prompt = `Analyze this preauthorization request for healthcare coverage:\n\n    Patient ID: ${request.patientId}\n    Diagnosis: ${request.diagnosis}\n    Treatment Plan: ${request.treatmentPlan}\n    Medical History: ${request.medicalHistory || 'Not provided'}\n    Insurance Scheme: ${request.insuranceScheme}\n    Estimated Cost: KES ${request.cost.toLocaleString()}\n\n    Consider:\n    1. Medical necessity and evidence-based guidelines\n    2. Cost-effectiveness and alternatives\n    3. Insurance scheme coverage policies\n    4. Patient safety and contraindications\n    5. Regulatory compliance (Kenya healthcare standards)\n\n    Provide your decision (approved/denied/requires_review) with detailed reasoning.`;\n\n    const chainOfThought = await this.generateChainOfThought({\n      prompt,\n      context: 'Healthcare preauthorization analysis for Kenyan medical insurance',\n      temperature: 0.3, // Lower temperature for more consistent decisions\n    });\n\n    // Extract decision from conclusion\n    const decision = this.extractDecision(chainOfThought.conclusion);\n    \n    return {\n      decision,\n      reasoning: chainOfThought.reasoning,\n      confidence: chainOfThought.confidence,\n      conditions: this.extractConditions(chainOfThought.conclusion),\n      appealProcess: decision === 'denied' ? 'Patient may appeal within 30 days with additional documentation' : undefined\n    };\n  }\n\n  /**\n   * Drug interaction and safety analysis\n   */\n  async analyzePrescriptionSafety(\n    patientId: string,\n    medications: string[],\n    patientAge: number,\n    patientWeight: number,\n    allergies: string[] = [],\n    conditions: string[] = []\n  ): Promise<{\n    safetyScore: number;\n    interactions: string[];\n    warnings: string[];\n    recommendations: string[];\n    reasoning: string[];\n  }> {\n    const prompt = `Analyze prescription safety for:\n\n    Patient: ${patientId} (Age: ${patientAge}, Weight: ${patientWeight}kg)\n    Medications: ${medications.join(', ')}\n    Known Allergies: ${allergies.length > 0 ? allergies.join(', ') : 'None reported'}\n    Medical Conditions: ${conditions.length > 0 ? conditions.join(', ') : 'None reported'}\n\n    Evaluate:\n    1. Drug-drug interactions\n    2. Drug-allergy conflicts\n    3. Age-appropriate dosing\n    4. Weight-based dosing considerations\n    5. Contraindications with existing conditions\n\n    Provide safety score (0-100), specific interactions, warnings, and recommendations.`;\n\n    const chainOfThought = await this.generateChainOfThought({\n      prompt,\n      context: 'Prescription safety analysis for pharmacy dispensing',\n      temperature: 0.2,\n    });\n\n    return {\n      safetyScore: this.extractSafetyScore(chainOfThought.conclusion),\n      interactions: this.extractInteractions(chainOfThought.reasoning),\n      warnings: this.extractWarnings(chainOfThought.reasoning),\n      recommendations: this.extractRecommendations(chainOfThought.conclusion),\n      reasoning: chainOfThought.reasoning\n    };\n  }\n\n  /**\n   * Fraud detection analysis\n   */\n  async analyzeFraudRisk(\n    claimId: string,\n    providerId: string,\n    patientId: string,\n    services: any[],\n    claimAmount: number,\n    historicalData?: any\n  ): Promise<{\n    riskScore: number;\n    riskFactors: string[];\n    redFlags: string[];\n    recommendation: 'approve' | 'investigate' | 'reject';\n    reasoning: string[];\n  }> {\n    const prompt = `Analyze potential fraud risk for healthcare claim:\n\n    Claim ID: ${claimId}\n    Provider: ${providerId}\n    Patient: ${patientId}\n    Services: ${JSON.stringify(services, null, 2)}\n    Claim Amount: KES ${claimAmount.toLocaleString()}\n    Historical Context: ${historicalData ? JSON.stringify(historicalData) : 'Limited data available'}\n\n    Evaluate fraud indicators:\n    1. Unusual billing patterns\n    2. Service appropriateness for diagnosis\n    3. Provider behavior anomalies\n    4. Patient utilization patterns\n    5. Cost outliers and billing irregularities\n\n    Provide risk score (0-100) and recommendation.`;\n\n    const chainOfThought = await this.generateChainOfThought({\n      prompt,\n      context: 'Healthcare claims fraud detection analysis',\n      temperature: 0.3,\n    });\n\n    return {\n      riskScore: this.extractRiskScore(chainOfThought.conclusion),\n      riskFactors: this.extractRiskFactors(chainOfThought.reasoning),\n      redFlags: this.extractRedFlags(chainOfThought.reasoning),\n      recommendation: this.extractFraudRecommendation(chainOfThought.conclusion),\n      reasoning: chainOfThought.reasoning\n    };\n  }\n\n  private parseChainOfThoughtResponse(response: string): ChainOfThoughtResponse {\n    // Parse the structured response from DeepSeek\n    const reasoningMatch = response.match(/REASONING STEPS?:(.*?)(?=CONCLUSION|$)/is);\n    const conclusionMatch = response.match(/CONCLUSION:(.*?)(?=CONFIDENCE|$)/is);\n    const confidenceMatch = response.match(/CONFIDENCE:(.*?)(?=SUPPORTING EVIDENCE|$)/is);\n    const evidenceMatch = response.match(/SUPPORTING EVIDENCE:(.*?)$/is);\n\n    const reasoning = reasoningMatch?.[1]\n      ?.split(/\\d+\\.|\\n-|\\n•/)\n      .filter(step => step.trim())\n      .map(step => step.trim()) || [response];\n\n    const conclusion = conclusionMatch?.[1]?.trim() || response;\n    \n    const confidenceStr = confidenceMatch?.[1]?.trim() || '70';\n    const confidence = parseInt(confidenceStr.match(/\\d+/)?.[0] || '70');\n\n    const supportingEvidence = evidenceMatch?.[1]\n      ?.split(/\\n-|\\n•/)\n      .filter(evidence => evidence.trim())\n      .map(evidence => evidence.trim()) || [];\n\n    return {\n      reasoning,\n      conclusion,\n      confidence: Math.min(100, Math.max(0, confidence)),\n      supportingEvidence\n    };\n  }\n\n  private extractDecision(conclusion: string): 'approved' | 'denied' | 'requires_review' {\n    const lower = conclusion.toLowerCase();\n    if (lower.includes('approved') || lower.includes('approve')) return 'approved';\n    if (lower.includes('denied') || lower.includes('deny') || lower.includes('reject')) return 'denied';\n    return 'requires_review';\n  }\n\n  private extractConditions(conclusion: string): string[] {\n    const conditionMatch = conclusion.match(/conditions?:\\s*(.*?)(?:\\n|$)/i);\n    if (!conditionMatch) return [];\n    \n    return conditionMatch[1]\n      .split(/[,;]/)\n      .map(condition => condition.trim())\n      .filter(condition => condition);\n  }\n\n  private extractSafetyScore(conclusion: string): number {\n    const scoreMatch = conclusion.match(/safety score:\\s*(\\d+)/i) || \n                     conclusion.match(/score:\\s*(\\d+)/i) ||\n                     conclusion.match(/(\\d+)(?:%|\\s*out of 100)/i);\n    return parseInt(scoreMatch?.[1] || '75');\n  }\n\n  private extractInteractions(reasoning: string[]): string[] {\n    return reasoning\n      .filter(step => step.toLowerCase().includes('interaction'))\n      .map(step => step.replace(/^\\d+\\.?\\s*/, '').trim());\n  }\n\n  private extractWarnings(reasoning: string[]): string[] {\n    return reasoning\n      .filter(step => step.toLowerCase().includes('warning') || step.toLowerCase().includes('caution'))\n      .map(step => step.replace(/^\\d+\\.?\\s*/, '').trim());\n  }\n\n  private extractRecommendations(conclusion: string): string[] {\n    const recMatch = conclusion.match(/recommendations?:\\s*(.*?)(?:\\n\\n|$)/is);\n    if (!recMatch) return [];\n    \n    return recMatch[1]\n      .split(/\\n-|\\n•|\\d+\\./)\n      .filter(rec => rec.trim())\n      .map(rec => rec.trim());\n  }\n\n  private extractRiskScore(conclusion: string): number {\n    const scoreMatch = conclusion.match(/risk score:\\s*(\\d+)/i) || \n                     conclusion.match(/score:\\s*(\\d+)/i);\n    return parseInt(scoreMatch?.[1] || '50');\n  }\n\n  private extractRiskFactors(reasoning: string[]): string[] {\n    return reasoning\n      .filter(step => step.toLowerCase().includes('risk') || step.toLowerCase().includes('factor'))\n      .map(step => step.replace(/^\\d+\\.?\\s*/, '').trim());\n  }\n\n  private extractRedFlags(reasoning: string[]): string[] {\n    return reasoning\n      .filter(step => step.toLowerCase().includes('red flag') || step.toLowerCase().includes('suspicious'))\n      .map(step => step.replace(/^\\d+\\.?\\s*/, '').trim());\n  }\n\n  private extractFraudRecommendation(conclusion: string): 'approve' | 'investigate' | 'reject' {\n    const lower = conclusion.toLowerCase();\n    if (lower.includes('investigate') || lower.includes('review')) return 'investigate';\n    if (lower.includes('reject') || lower.includes('deny')) return 'reject';\n    return 'approve';\n  }\n}\n\nexport const deepSeekService = new DeepSeekService();","size_bytes":14060},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport rateLimit from \"express-rate-limit\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport compression from \"compression\";\nimport morgan from \"morgan\";\nimport { createClient } from \"redis\";\nimport { RedisStore } from \"rate-limit-redis\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectMongoDB } from \"./mongodb\";\n\nconst app = express();\n\n// Trust proxy headers for production deployment\napp.set('trust proxy', 1);\n\n// Security headers\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"wss:\", \"https:\"],\n    },\n  },\n  hsts: process.env.NODE_ENV === 'production' ? {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  } : false\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? ['https://erlessed.fly.dev', 'https://erlessed.onrender.com']\n    : ['http://localhost:5173', 'http://localhost:5000'],\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']\n}));\n\n// Compression for better performance\napp.use(compression());\n\n// Request logging\nif (process.env.NODE_ENV === 'production') {\n  app.use(morgan('combined'));\n}\n\n// Redis client for rate limiting\nlet redisClient: any = null;\nif (process.env.REDIS_URL) {\n  try {\n    redisClient = createClient({ url: process.env.REDIS_URL });\n    redisClient.connect().catch((err: any) => {\n      console.warn('Redis connection failed:', err.message);\n    });\n  } catch (error) {\n    console.warn('Redis client creation failed, using memory store for rate limiting');\n  }\n}\n\n// Rate limiting configuration\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 1000, // requests per window\n  message: {\n    error: 'Too many requests from this IP, please try again later.',\n    retryAfter: 15 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  store: redisClient ? new RedisStore({\n    sendCommand: (...args: string[]) => redisClient.sendCommand(args),\n  }) : undefined,\n  skip: (req) => req.path === '/health' || req.path === '/metrics'\n});\n\n// Stricter rate limiting for authentication\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 10,\n  message: {\n    error: 'Too many authentication attempts, please try again later.',\n    retryAfter: 15 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  store: redisClient ? new RedisStore({\n    sendCommand: (...args: string[]) => redisClient.sendCommand(args),\n  }) : undefined\n});\n\napp.use(limiter);\n\n// Body parsing with size limits\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n// Apply auth rate limiting\napp.use('/api/auth', authLimiter);\napp.use('/api/login', authLimiter);\napp.use('/api/register', authLimiter);\n\n// Health check endpoint - must come before other middleware\napp.get('/health', async (req: Request, res: Response) => {\n  try {\n    // Database health check\n    let dbStatus = 'unknown';\n    let dbResponseTime = 0;\n    \n    try {\n      const startTime = Date.now();\n      const { db } = await import('./db');\n      await db.execute('SELECT 1');\n      dbResponseTime = Date.now() - startTime;\n      dbStatus = 'connected';\n    } catch (dbError) {\n      dbStatus = 'disconnected';\n      console.error('Database health check failed:', dbError);\n    }\n\n    const healthCheck = {\n      status: dbStatus === 'connected' ? 'OK' : 'DEGRADED',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV || 'development',\n      version: process.env.npm_package_version || '1.0.0',\n      database: {\n        status: dbStatus,\n        responseTime: `${dbResponseTime}ms`\n      },\n      redis: {\n        status: redisClient?.isReady ? 'connected' : 'not_configured'\n      },\n      memory: {\n        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\n        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),\n        rss: Math.round(process.memoryUsage().rss / 1024 / 1024)\n      },\n      services: {\n        main_app: 'healthy',\n        hms_integration: process.env.NODE_ENV === 'production' ? 'configured' : 'development'\n      }\n    };\n    \n    const statusCode = healthCheck.status === 'OK' ? 200 : 503;\n    res.status(statusCode).json(healthCheck);\n  } catch (error) {\n    res.status(503).json({\n      status: 'ERROR',\n      timestamp: new Date().toISOString(),\n      error: 'Health check failed'\n    });\n  }\n});\n\n// Metrics endpoint for Prometheus/monitoring\napp.get('/metrics', (req: Request, res: Response) => {\n  const metrics = {\n    nodejs_heap_size_used_bytes: process.memoryUsage().heapUsed,\n    nodejs_heap_size_total_bytes: process.memoryUsage().heapTotal,\n    nodejs_external_memory_bytes: process.memoryUsage().external,\n    nodejs_rss_bytes: process.memoryUsage().rss,\n    process_uptime_seconds: process.uptime(),\n    process_start_time_seconds: Math.floor(Date.now() / 1000 - process.uptime()),\n    erlessed_active_connections: 0, // TODO: Track actual connections\n    erlessed_requests_total: 0 // TODO: Track total requests\n  };\n  \n  // Prometheus format\n  let output = '';\n  for (const [key, value] of Object.entries(metrics)) {\n    output += `# TYPE ${key} gauge\\n`;\n    output += `${key} ${value}\\n`;\n  }\n  \n  res.set('Content-Type', 'text/plain');\n  res.send(output);\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize MongoDB for biometric data (non-blocking)\n  connectMongoDB().then(() => {\n    log('MongoDB connected successfully for biometric storage');\n  }).catch((error) => {\n    log('MongoDB connection failed - biometric features will be unavailable');\n    console.error('MongoDB Error:', error);\n  });\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000');\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    log(`environment: ${process.env.NODE_ENV || 'development'}`);\n    log(`health check: http://localhost:${port}/health`);\n  });\n\n  // Graceful shutdown handlers\n  const gracefulShutdown = (signal: string) => {\n    log(`${signal} received, shutting down gracefully`);\n    server.close(() => {\n      log('HTTP server closed');\n      if (redisClient) {\n        redisClient.quit().then(() => {\n          log('Redis connection closed');\n          process.exit(0);\n        }).catch(() => {\n          process.exit(1);\n        });\n      } else {\n        process.exit(0);\n      }\n    });\n\n    // Force close after 30 seconds\n    setTimeout(() => {\n      log('Forced shutdown after timeout');\n      process.exit(1);\n    }, 30000);\n  };\n\n  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\n  process.on('SIGINT', () => gracefulShutdown('SIGINT'));\n\n  // Handle uncaught exceptions and rejections\n  process.on('uncaughtException', (error) => {\n    log(`Uncaught Exception: ${error.message}`);\n    console.error(error);\n    gracefulShutdown('UNCAUGHT_EXCEPTION');\n  });\n\n  process.on('unhandledRejection', (reason, promise) => {\n    log(`Unhandled Rejection at: ${promise}, reason: ${reason}`);\n    console.error(reason);\n  });\n})();\n","size_bytes":9035},"server/mistral.ts":{"content":"import OpenAI from 'openai';\n\n// Mistral API configuration\nconst mistral = new OpenAI({\n  baseURL: 'https://api.mistral.ai/v1',\n  apiKey: process.env.MISTRAL_API_KEY,\n});\n\ninterface TreatmentRequest {\n  diagnosis: string;\n  patientAge: number;\n  patientWeight: number;\n  patientGender: 'male' | 'female';\n  symptoms: string[];\n  allergies?: string[];\n  currentMedications?: string[];\n  medicalHistory?: string[];\n  severity: 'mild' | 'moderate' | 'severe' | 'critical';\n}\n\ninterface TreatmentPlan {\n  primaryTreatment: {\n    medication: string;\n    dosage: string;\n    frequency: string;\n    duration: string;\n    instructions: string;\n  };\n  alternativeTreatments: Array<{\n    medication: string;\n    dosage: string;\n    reason: string;\n  }>;\n  nonPharmacological: string[];\n  followUpCare: string[];\n  warningSignsToWatch: string[];\n  dietaryRecommendations: string[];\n  lifestyleModifications: string[];\n  expectedOutcome: string;\n  timeToImprovement: string;\n  confidence: number;\n  reasoning: string[];\n}\n\ninterface DifferentialDiagnosis {\n  primaryDiagnosis: {\n    condition: string;\n    probability: number;\n    supportingSymptoms: string[];\n    reasoning: string;\n  };\n  differentialDiagnoses: Array<{\n    condition: string;\n    probability: number;\n    supportingSymptoms: string[];\n    distinguishingFactors: string[];\n  }>;\n  recommendedTests: Array<{\n    test: string;\n    reason: string;\n    urgency: 'routine' | 'urgent' | 'emergent';\n  }>;\n  redFlags: string[];\n  immediateActions: string[];\n}\n\ninterface DrugInteractionAnalysis {\n  interactions: Array<{\n    drug1: string;\n    drug2: string;\n    severity: 'mild' | 'moderate' | 'severe';\n    description: string;\n    clinicalSignificance: string;\n    management: string;\n  }>;\n  contraindications: Array<{\n    medication: string;\n    condition: string;\n    reason: string;\n    alternatives: string[];\n  }>;\n  dosageAdjustments: Array<{\n    medication: string;\n    reason: string;\n    adjustment: string;\n  }>;\n  monitoringRequirements: string[];\n  overallRiskAssessment: 'low' | 'moderate' | 'high';\n}\n\nexport class MistralHealthcareService {\n  /**\n   * Generate comprehensive treatment plan based on diagnosis and patient factors\n   */\n  async generateTreatmentPlan(request: TreatmentRequest): Promise<TreatmentPlan> {\n    try {\n      const prompt = `As an experienced physician, create a comprehensive treatment plan for:\n\nPATIENT PROFILE:\n- Age: ${request.patientAge} years\n- Weight: ${request.patientWeight} kg\n- Gender: ${request.patientGender}\n- Primary Diagnosis: ${request.diagnosis}\n- Symptoms: ${request.symptoms.join(', ')}\n- Allergies: ${request.allergies?.join(', ') || 'None reported'}\n- Current Medications: ${request.currentMedications?.join(', ') || 'None'}\n- Medical History: ${request.medicalHistory?.join(', ') || 'None significant'}\n- Severity: ${request.severity}\n\nPlease provide a detailed treatment plan including:\n1. Primary medication with specific dosage, frequency, and duration\n2. Alternative treatment options if primary fails\n3. Non-pharmacological interventions\n4. Follow-up care schedule\n5. Warning signs to monitor\n6. Dietary and lifestyle recommendations\n7. Expected timeline for improvement\n\nConsider Kenyan healthcare context, available medications, and cost-effectiveness.`;\n\n      const response = await mistral.chat.completions.create({\n        model: 'mistral-small-latest',\n        messages: [\n          { \n            role: 'system', \n            content: 'You are an expert physician specializing in evidence-based medicine with extensive experience in the Kenyan healthcare system. Provide practical, cost-effective treatment recommendations following international guidelines adapted for resource settings.' \n          },\n          { role: 'user', content: prompt }\n        ],\n        temperature: 0.3,\n        max_tokens: 2000,\n      });\n\n      const content = response.choices[0]?.message?.content || '';\n      return this.parseTreatmentPlan(content, request);\n    } catch (error) {\n      console.error('Mistral treatment plan error:', error);\n      throw new Error('Failed to generate treatment plan');\n    }\n  }\n\n  /**\n   * Analyze symptoms to suggest differential diagnoses\n   */\n  async analyzeDifferentialDiagnosis(\n    symptoms: string[],\n    patientAge: number,\n    patientGender: 'male' | 'female',\n    duration: string,\n    additionalInfo?: string\n  ): Promise<DifferentialDiagnosis> {\n    try {\n      const prompt = `As a diagnostic expert, analyze these clinical findings:\n\nPATIENT: ${patientAge}-year-old ${patientGender}\nPRESENTING SYMPTOMS: ${symptoms.join(', ')}\nDURATION: ${duration}\nADDITIONAL INFORMATION: ${additionalInfo || 'None provided'}\n\nProvide differential diagnosis including:\n1. Most likely primary diagnosis with probability and reasoning\n2. Alternative diagnoses to consider\n3. Recommended diagnostic tests with urgency levels\n4. Red flag symptoms requiring immediate attention\n5. Immediate actions needed\n\nConsider common conditions in Kenya and resource-appropriate diagnostics.`;\n\n      const response = await mistral.chat.completions.create({\n        model: 'mistral-small-latest',\n        messages: [\n          { \n            role: 'system', \n            content: 'You are a senior physician with expertise in diagnostic medicine and tropical diseases common in East Africa. Provide systematic differential diagnosis following clinical reasoning principles.' \n          },\n          { role: 'user', content: prompt }\n        ],\n        temperature: 0.2,\n        max_tokens: 1500,\n      });\n\n      const content = response.choices[0]?.message?.content || '';\n      return this.parseDifferentialDiagnosis(content);\n    } catch (error) {\n      console.error('Mistral differential diagnosis error:', error);\n      throw new Error('Failed to analyze differential diagnosis');\n    }\n  }\n\n  /**\n   * Comprehensive drug interaction analysis\n   */\n  async analyzeComplexDrugInteractions(\n    medications: string[],\n    patientConditions: string[],\n    patientAge: number,\n    kidneyFunction?: 'normal' | 'mild_impairment' | 'moderate_impairment' | 'severe_impairment',\n    liverFunction?: 'normal' | 'mild_impairment' | 'moderate_impairment' | 'severe_impairment'\n  ): Promise<DrugInteractionAnalysis> {\n    try {\n      const prompt = `Analyze complex drug interactions for this medication regimen:\n\nMEDICATIONS: ${medications.join(', ')}\nPATIENT CONDITIONS: ${patientConditions.join(', ')}\nAGE: ${patientAge} years\nKIDNEY FUNCTION: ${kidneyFunction || 'Not specified'}\nLIVER FUNCTION: ${liverFunction || 'Not specified'}\n\nProvide comprehensive analysis:\n1. Significant drug-drug interactions with severity levels\n2. Drug-disease contraindications\n3. Required dosage adjustments for age/organ function\n4. Monitoring requirements and laboratory tests\n5. Overall risk assessment and management recommendations\n\nFocus on clinically significant interactions requiring action.`;\n\n      const response = await mistral.chat.completions.create({\n        model: 'mistral-small-latest',\n        messages: [\n          { \n            role: 'system', \n            content: 'You are a clinical pharmacologist with expertise in drug interactions, pharmacokinetics, and patient safety. Provide detailed interaction analysis with practical management strategies.' \n          },\n          { role: 'user', content: prompt }\n        ],\n        temperature: 0.2,\n        max_tokens: 1800,\n      });\n\n      const content = response.choices[0]?.message?.content || '';\n      return this.parseDrugInteractionAnalysis(content);\n    } catch (error) {\n      console.error('Mistral drug interaction error:', error);\n      throw new Error('Failed to analyze drug interactions');\n    }\n  }\n\n  /**\n   * Generate patient education content\n   */\n  async generatePatientEducation(\n    diagnosis: string,\n    treatmentPlan: string,\n    patientAge: number,\n    educationLevel: 'basic' | 'intermediate' | 'advanced' = 'basic'\n  ): Promise<{\n    explanation: string;\n    instructions: string[];\n    precautions: string[];\n    whenToSeekHelp: string[];\n    lifestyle: string[];\n    language: 'simple' | 'technical';\n  }> {\n    try {\n      const prompt = `Create patient education material for:\n\nDIAGNOSIS: ${diagnosis}\nTREATMENT: ${treatmentPlan}\nPATIENT AGE: ${patientAge}\nEDUCATION LEVEL: ${educationLevel}\n\nProvide clear, culturally appropriate patient education including:\n1. Simple explanation of the condition\n2. Step-by-step treatment instructions\n3. Important precautions and side effects\n4. When to seek immediate medical help\n5. Lifestyle modifications and home care\n\nUse simple language appropriate for Kenyan patients, considering local context and health literacy levels.`;\n\n      const response = await mistral.chat.completions.create({\n        model: 'mistral-small-latest',\n        messages: [\n          { \n            role: 'system', \n            content: 'You are a patient educator with expertise in health communication and Kenyan healthcare context. Create clear, actionable patient education materials using culturally appropriate language.' \n          },\n          { role: 'user', content: prompt }\n        ],\n        temperature: 0.4,\n        max_tokens: 1200,\n      });\n\n      const content = response.choices[0]?.message?.content || '';\n      return this.parsePatientEducation(content, educationLevel);\n    } catch (error) {\n      console.error('Mistral patient education error:', error);\n      throw new Error('Failed to generate patient education');\n    }\n  }\n\n  private parseTreatmentPlan(content: string, request: TreatmentRequest): TreatmentPlan {\n    // Extract structured data from Mistral response\n    const lines = content.split('\\n').filter(line => line.trim());\n    \n    // Default treatment plan structure\n    const treatmentPlan: TreatmentPlan = {\n      primaryTreatment: {\n        medication: this.extractAfterPattern(content, /primary medication|first-line/i) || 'Medication not specified',\n        dosage: this.extractAfterPattern(content, /dosage|dose/i) || 'As prescribed',\n        frequency: this.extractAfterPattern(content, /frequency|times/i) || 'As directed',\n        duration: this.extractAfterPattern(content, /duration|for/i) || '7-14 days',\n        instructions: this.extractAfterPattern(content, /instructions|take/i) || 'Take as prescribed'\n      },\n      alternativeTreatments: this.extractAlternatives(content),\n      nonPharmacological: this.extractListItems(content, /non-pharmacological|non-drug|lifestyle/i),\n      followUpCare: this.extractListItems(content, /follow.?up|review/i),\n      warningSignsToWatch: this.extractListItems(content, /warning|red flag|seek help/i),\n      dietaryRecommendations: this.extractListItems(content, /diet|nutrition|food/i),\n      lifestyleModifications: this.extractListItems(content, /lifestyle|modify|avoid/i),\n      expectedOutcome: this.extractAfterPattern(content, /outcome|prognosis|expect/i) || 'Good with treatment',\n      timeToImprovement: this.extractAfterPattern(content, /improvement|better|recover/i) || '1-2 weeks',\n      confidence: this.calculateConfidence(request.severity, content),\n      reasoning: this.extractReasoningSteps(content)\n    };\n\n    return treatmentPlan;\n  }\n\n  private parseDifferentialDiagnosis(content: string): DifferentialDiagnosis {\n    return {\n      primaryDiagnosis: {\n        condition: this.extractAfterPattern(content, /primary|most likely|probable/i) || 'Diagnosis pending',\n        probability: this.extractProbability(content, /primary|most likely/i),\n        supportingSymptoms: this.extractListItems(content, /supporting|suggests/i),\n        reasoning: this.extractAfterPattern(content, /because|reasoning/i) || 'Clinical assessment needed'\n      },\n      differentialDiagnoses: this.extractDifferentials(content),\n      recommendedTests: this.extractTests(content),\n      redFlags: this.extractListItems(content, /red flag|emergency|urgent/i),\n      immediateActions: this.extractListItems(content, /immediate|now|urgent/i)\n    };\n  }\n\n  private parseDrugInteractionAnalysis(content: string): DrugInteractionAnalysis {\n    return {\n      interactions: this.extractInteractions(content),\n      contraindications: this.extractContraindications(content),\n      dosageAdjustments: this.extractDosageAdjustments(content),\n      monitoringRequirements: this.extractListItems(content, /monitor|check|test/i),\n      overallRiskAssessment: this.assessOverallRisk(content)\n    };\n  }\n\n  private parsePatientEducation(content: string, level: string) {\n    return {\n      explanation: this.extractSection(content, /explanation|what is/i),\n      instructions: this.extractListItems(content, /instructions|how to|steps/i),\n      precautions: this.extractListItems(content, /precautions|careful|avoid/i),\n      whenToSeekHelp: this.extractListItems(content, /seek help|emergency|call/i),\n      lifestyle: this.extractListItems(content, /lifestyle|home care|daily/i),\n      language: level === 'advanced' ? 'technical' as const : 'simple' as const\n    };\n  }\n\n  // Helper methods for parsing Mistral responses\n  private extractAfterPattern(text: string, pattern: RegExp): string | null {\n    const lines = text.split('\\n');\n    for (const line of lines) {\n      if (pattern.test(line)) {\n        return line.replace(pattern, '').replace(/^[\\s\\-\\*:]+/, '').trim();\n      }\n    }\n    return null;\n  }\n\n  private extractListItems(text: string, pattern: RegExp): string[] {\n    const lines = text.split('\\n');\n    const items: string[] = [];\n    let capturing = false;\n    \n    for (const line of lines) {\n      if (pattern.test(line)) {\n        capturing = true;\n        continue;\n      }\n      \n      if (capturing && (line.trim().startsWith('-') || line.trim().startsWith('•') || line.trim().startsWith('*'))) {\n        items.push(line.replace(/^[\\s\\-\\*•]+/, '').trim());\n      } else if (capturing && line.trim() === '') {\n        continue;\n      } else if (capturing && !line.trim().match(/^[\\d\\.]/)) {\n        break;\n      }\n    }\n    \n    return items.filter(item => item.length > 0);\n  }\n\n  private extractAlternatives(content: string) {\n    return [\n      {\n        medication: 'Alternative pending analysis',\n        dosage: 'TBD',\n        reason: 'If primary treatment fails'\n      }\n    ];\n  }\n\n  private extractDifferentials(content: string) {\n    return [\n      {\n        condition: 'Additional diagnosis pending',\n        probability: 20,\n        supportingSymptoms: [],\n        distinguishingFactors: []\n      }\n    ];\n  }\n\n  private extractTests(content: string) {\n    return [\n      {\n        test: 'Basic laboratory studies',\n        reason: 'Diagnostic workup',\n        urgency: 'routine' as const\n      }\n    ];\n  }\n\n  private extractInteractions(content: string) {\n    return [];\n  }\n\n  private extractContraindications(content: string) {\n    return [];\n  }\n\n  private extractDosageAdjustments(content: string) {\n    return [];\n  }\n\n  private extractSection(content: string, pattern: RegExp): string {\n    const lines = content.split('\\n');\n    for (const line of lines) {\n      if (pattern.test(line)) {\n        return line.replace(pattern, '').replace(/^[\\s\\-\\*:]+/, '').trim();\n      }\n    }\n    return 'Information pending clinical assessment';\n  }\n\n  private extractProbability(content: string, pattern: RegExp): number {\n    const match = content.match(/(\\d+)%/);\n    return match ? parseInt(match[1]) : 75;\n  }\n\n  private extractReasoningSteps(content: string): string[] {\n    const steps = this.extractListItems(content, /reasoning|rationale|because/i);\n    return steps.length > 0 ? steps : ['Clinical assessment based on presenting symptoms'];\n  }\n\n  private calculateConfidence(severity: string, content: string): number {\n    const baseConfidence = severity === 'critical' ? 95 : severity === 'severe' ? 85 : 75;\n    return baseConfidence;\n  }\n\n  private assessOverallRisk(content: string): 'low' | 'moderate' | 'high' {\n    if (content.toLowerCase().includes('high risk') || content.toLowerCase().includes('severe')) {\n      return 'high';\n    }\n    if (content.toLowerCase().includes('moderate') || content.toLowerCase().includes('caution')) {\n      return 'moderate';\n    }\n    return 'low';\n  }\n}\n\nexport const mistralHealthcareService = new MistralHealthcareService();","size_bytes":16240},"server/mongodb.ts":{"content":"import { MongoClient, Db } from 'mongodb';\n\nlet client: MongoClient;\nlet db: Db;\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';\nconst DATABASE_NAME = 'erlessed_biometric';\n\nexport async function connectMongoDB(): Promise<void> {\n  try {\n    client = new MongoClient(MONGODB_URI);\n    await client.connect();\n    db = client.db(DATABASE_NAME);\n    console.log('✅ Connected to MongoDB for biometric data');\n  } catch (error) {\n    console.error('❌ MongoDB connection failed - biometric features will be unavailable:', error);\n    // Don't throw error to allow server to start without MongoDB\n  }\n}\n\nexport function getMongoDb(): Db {\n  if (!db) {\n    throw new Error('MongoDB not connected. Call connectMongoDB() first.');\n  }\n  return db;\n}\n\nexport function isMongoConnected(): boolean {\n  return !!db;\n}\n\nexport async function closeMongoDB(): Promise<void> {\n  if (client) {\n    await client.close();\n    console.log('✅ MongoDB connection closed');\n  }\n}\n\n// Collections\nexport const collections = {\n  fingerprints: 'fingerprints',\n  biometricAuditLogs: 'biometric_audit_logs',\n  biometricSessions: 'biometric_sessions'\n};\n\n// Types\nexport interface BiometricFingerprint {\n  _id?: string;\n  fingerprintId: string;\n  patientId: string;\n  fingerId: string; // e.g., 'right_thumb', 'left_index'\n  fingerprintHash: string;\n  fingerprintData: string; // Base64 encoded fingerprint image/data\n  deviceId: string;\n  registeredBy: string; // user ID who registered\n  registeredAt: Date;\n  status: 'active' | 'archived' | 'pending_reset';\n  metadata?: {\n    ipAddress: string;\n    userAgent: string;\n    hand: 'left' | 'right';\n    finger: string; // thumb, index, middle, ring, pinky\n  };\n  resetRequests?: BiometricResetRequest[];\n}\n\nexport interface BiometricResetRequest {\n  requestedBy: string;\n  requestedAt: Date;\n  reason: string;\n  approvedBy?: string;\n  approvedAt?: Date;\n  status: 'pending' | 'approved' | 'rejected';\n}\n\nexport interface BiometricAuditLog {\n  _id?: string;\n  patientId: string;\n  action: 'register' | 'verify' | 'reset_request' | 'reset_approved' | 'reset_rejected' | 'verification_failed';\n  userId: string;\n  userRole: string;\n  deviceId?: string;\n  ipAddress: string;\n  userAgent: string;\n  timestamp: Date;\n  details: {\n    success?: boolean;\n    errorMessage?: string;\n    fingerprintHash?: string;\n    verificationScore?: number;\n    [key: string]: any;\n  };\n}\n\nexport interface BiometricSession {\n  _id?: string;\n  sessionId: string;\n  patientId: string;\n  userId: string;\n  action: 'verify' | 'register';\n  status: 'pending' | 'completed' | 'failed' | 'expired';\n  createdAt: Date;\n  completedAt?: Date;\n  expiresAt: Date;\n  metadata: {\n    deviceId?: string;\n    ipAddress: string;\n    userAgent: string;\n    [key: string]: any;\n  };\n}","size_bytes":2800},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst DEMO_MODE = !process.env.OPENAI_API_KEY;\nconst openai = DEMO_MODE ? null : new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY \n});\n\nexport interface AIPreauthorizationRequest {\n  patientId: number;\n  serviceType: string;\n  clinicalJustification: string;\n  estimatedCost: number;\n  urgency: string;\n  patientHistory?: any;\n  policyData?: any;\n}\n\nexport interface AIPreauthorizationResponse {\n  decision: 'approved' | 'denied' | 'review';\n  confidence: number;\n  reasoning: {\n    step: number;\n    description: string;\n    factor: string;\n  }[];\n  riskFactors: string[];\n  recommendations?: string[];\n}\n\nexport async function analyzePreauthorization(request: AIPreauthorizationRequest): Promise<AIPreauthorizationResponse> {\n  if (DEMO_MODE) {\n    // Demo mode with realistic responses\n    const urgencyScore = request.urgency === 'emergency' ? 90 : request.urgency === 'urgent' ? 75 : 60;\n    const costFactor = request.estimatedCost > 10000 ? 0.8 : 0.9;\n    const confidence = Math.floor(urgencyScore * costFactor);\n    \n    return {\n      decision: confidence > 80 ? 'approved' : confidence > 60 ? 'review' : 'denied',\n      confidence,\n      reasoning: [\n        {\n          step: 1,\n          description: \"Clinical necessity assessment\",\n          factor: `${request.clinicalJustification ? 'Adequate' : 'Insufficient'} clinical justification provided`\n        },\n        {\n          step: 2,\n          description: \"Cost-benefit analysis\",\n          factor: `Estimated cost of $${request.estimatedCost} ${request.estimatedCost > 10000 ? 'requires additional review' : 'within normal range'}`\n        },\n        {\n          step: 3,\n          description: \"Urgency evaluation\",\n          factor: `${request.urgency} priority case - ${urgencyScore}% urgency score`\n        }\n      ],\n      riskFactors: request.estimatedCost > 10000 ? ['High cost procedure requires additional oversight'] : [],\n      recommendations: confidence < 80 ? ['Consider alternative treatments', 'Request additional documentation'] : []\n    };\n  }\n\n  try {\n    const prompt = `You are a healthcare AI assistant analyzing a preauthorization request. Use chain-of-thought reasoning to evaluate this request.\n\nRequest Details:\n- Service Type: ${request.serviceType}\n- Clinical Justification: ${request.clinicalJustification}\n- Estimated Cost: $${request.estimatedCost}\n- Urgency: ${request.urgency}\n- Patient History: ${JSON.stringify(request.patientHistory || {})}\n- Policy Data: ${JSON.stringify(request.policyData || {})}\n\nAnalyze this request step by step:\n1. Review clinical guidelines and medical necessity\n2. Check policy coverage and limitations\n3. Assess cost-effectiveness and alternatives\n4. Evaluate patient's medical history and risk factors\n5. Consider urgency and standard of care\n\nProvide your analysis in JSON format with decision (approved/denied/review), confidence percentage (0-100), detailed reasoning chain, and any risk factors identified.`;\n\n    const response = await openai!.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a medical AI assistant with expertise in healthcare preauthorization decisions. Always provide detailed, evidence-based reasoning.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      decision: result.decision || 'review',\n      confidence: Math.min(100, Math.max(0, result.confidence || 50)),\n      reasoning: result.reasoning || [],\n      riskFactors: result.riskFactors || [],\n      recommendations: result.recommendations || []\n    };\n  } catch (error) {\n    console.error('OpenAI API error:', error);\n    return {\n      decision: 'review',\n      confidence: 0,\n      reasoning: [{ step: 1, description: 'AI analysis failed - manual review required', factor: 'system_error' }],\n      riskFactors: ['AI system unavailable'],\n      recommendations: ['Perform manual review of request']\n    };\n  }\n}\n\nexport interface FraudAnalysisRequest {\n  providerId: number;\n  claimPatterns: any[];\n  billingHistory: any[];\n  timeframe: string;\n}\n\nexport interface FraudAnalysisResponse {\n  riskLevel: 'low' | 'medium' | 'high';\n  confidence: number;\n  anomalies: string[];\n  recommendations: string[];\n}\n\nexport async function analyzeFraudPatterns(request: FraudAnalysisRequest): Promise<FraudAnalysisResponse> {\n  if (DEMO_MODE) {\n    // Demo mode with realistic fraud analysis\n    const riskScore = request.claimPatterns.length > 5 ? 0.8 : 0.3;\n    return {\n      riskLevel: riskScore > 0.7 ? 'high' : riskScore > 0.4 ? 'medium' : 'low',\n      confidence: Math.floor(riskScore * 100),\n      anomalies: riskScore > 0.7 ? ['Unusual billing frequency', 'Duplicate claim patterns'] : [],\n      recommendations: riskScore > 0.7 ? ['Manual review required', 'Audit billing practices'] : ['Continue monitoring']\n    };\n  }\n\n  try {\n    const prompt = `Analyze the following healthcare provider billing patterns for potential fraud indicators:\n\nProvider ID: ${request.providerId}\nTimeframe: ${request.timeframe}\nClaim Patterns: ${JSON.stringify(request.claimPatterns)}\nBilling History: ${JSON.stringify(request.billingHistory)}\n\nLook for:\n- Unusual billing frequency patterns\n- Procedure code combinations that don't make clinical sense\n- Outlier costs compared to similar providers\n- Rapid increases in specific service types\n- Geographic anomalies in patient distribution\n\nProvide analysis in JSON format with risk level, confidence percentage, specific anomalies found, and recommendations.`;\n\n    if (!openai) throw new Error('OpenAI not configured');\n    \n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a healthcare fraud detection AI with expertise in identifying billing anomalies and fraudulent patterns.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      riskLevel: result.riskLevel || 'low',\n      confidence: Math.min(100, Math.max(0, result.confidence || 50)),\n      anomalies: result.anomalies || [],\n      recommendations: result.recommendations || []\n    };\n  } catch (error) {\n    console.error('Fraud analysis error:', error);\n    return {\n      riskLevel: 'low',\n      confidence: 0,\n      anomalies: ['Analysis failed - system error'],\n      recommendations: ['Manual review recommended due to system error']\n    };\n  }\n}\n\nexport interface PharmacyValidationRequest {\n  medicationName: string;\n  dosage: string;\n  frequency: string;\n  patientAge: number;\n  patientWeight?: number;\n  patientGender: string;\n  indication: string;\n  currentMedications: string[];\n}\n\nexport interface PharmacyValidationResponse {\n  isValid: boolean;\n  confidence: number;\n  warnings: string[];\n  recommendations: string[];\n  interactions: string[];\n}\n\nexport async function validatePrescription(request: PharmacyValidationRequest): Promise<PharmacyValidationResponse> {\n  if (DEMO_MODE) {\n    // Demo mode with realistic prescription validation\n    const hasInteractions = request.currentMedications.length > 2;\n    const ageAppropriate = request.patientAge >= 18;\n    \n    return {\n      isValid: ageAppropriate && !hasInteractions,\n      confidence: ageAppropriate ? (hasInteractions ? 60 : 90) : 40,\n      warnings: !ageAppropriate ? ['Age verification required'] : [],\n      recommendations: hasInteractions ? ['Check for drug interactions', 'Consider alternative medications'] : ['Prescription appears appropriate'],\n      interactions: hasInteractions ? ['Potential interaction with existing medications'] : []\n    };\n  }\n\n  try {\n    const prompt = `Validate this prescription for safety and appropriateness:\n\nMedication: ${request.medicationName}\nDosage: ${request.dosage}\nFrequency: ${request.frequency}\nPatient Age: ${request.patientAge}\nPatient Weight: ${request.patientWeight || 'Not provided'}kg\nPatient Gender: ${request.patientGender}\nIndication: ${request.indication}\nCurrent Medications: ${request.currentMedications.join(', ')}\n\nCheck for:\n- Age-appropriate dosing\n- Weight-based dosing accuracy (especially for pediatric patients)\n- Gender-specific considerations\n- Drug interactions with current medications\n- Contraindications for the indication\n- Standard dosing guidelines\n\nProvide validation results in JSON format.`;\n\n    if (!openai) throw new Error('OpenAI not configured');\n    \n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a clinical pharmacist AI with expertise in medication safety, drug interactions, and dosing guidelines.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.1,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      isValid: result.isValid !== false,\n      confidence: Math.min(100, Math.max(0, result.confidence || 80)),\n      warnings: result.warnings || [],\n      recommendations: result.recommendations || [],\n      interactions: result.interactions || []\n    };\n  } catch (error) {\n    console.error('Pharmacy validation error:', error);\n    return {\n      isValid: false,\n      confidence: 0,\n      warnings: ['Validation failed - manual review required'],\n      recommendations: ['Consult with pharmacist for manual validation'],\n      interactions: []\n    };\n  }\n}\n\nexport async function suggestClaimCodes(serviceDescription: string, diagnosis?: string): Promise<{codes: string[], confidence: number}> {\n  if (DEMO_MODE) {\n    // Demo mode with realistic medical codes\n    const mockCodes = ['99213', '99214', 'J1100', '36415'];\n    return {\n      codes: mockCodes.slice(0, 2),\n      confidence: 85\n    };\n  }\n\n  try {\n    const prompt = `Suggest appropriate CPT and ICD-10 codes for the following medical service:\n\nService Description: ${serviceDescription}\nDiagnosis: ${diagnosis || 'Not provided'}\n\nProvide the most likely CPT procedure codes and ICD-10 diagnosis codes in JSON format with confidence scores.`;\n\n    if (!openai) throw new Error('OpenAI not configured');\n    \n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a medical coding AI assistant with expertise in CPT and ICD-10 coding guidelines.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      codes: result.codes || [],\n      confidence: Math.min(100, Math.max(0, result.confidence || 70))\n    };\n  } catch (error) {\n    console.error('Code suggestion error:', error);\n    return {\n      codes: [],\n      confidence: 0\n    };\n  }\n}\n","size_bytes":11493},"server/registration-service.ts":{"content":"import fs from \"fs/promises\";\nimport path from \"path\";\n\nexport interface RegistrationData {\n  registrationNumber: string;\n  fullName: string;\n  cadre: string;\n  specialization: string;\n  status: \"active\" | \"inactive\" | \"suspended\";\n  facility: string;\n  licenseIssueDate: string;\n  licenseExpiryDate: string;\n  board: string;\n  practiceLicense: string;\n  registrationDate: string;\n  suspensionReason?: string;\n  inactiveReason?: string;\n}\n\nexport interface RegistrationDatabase {\n  practitioners: RegistrationData[];\n}\n\nexport interface VerificationRequest {\n  registrationNumber: string;\n  cadre?: string;\n}\n\nexport interface VerificationResponse {\n  isValid: boolean;\n  practitioner?: {\n    fullName: string;\n    status: string;\n    cadre: string;\n    specialization: string;\n    facility: string;\n    board: string;\n    licenseExpiryDate: string;\n    practiceLicense: string;\n  };\n  error?: string;\n}\n\nexport class RegistrationValidationService {\n  private dbPath: string;\n  private cache: RegistrationDatabase | null = null;\n  private cacheTimestamp: number = 0;\n  private cacheTTL: number = 300000; // 5 minutes\n\n  constructor() {\n    this.dbPath = path.join(process.cwd(), \"server\", \"registration-db.json\");\n  }\n\n  private async loadDatabase(): Promise<RegistrationDatabase> {\n    const now = Date.now();\n    \n    // Return cached data if still valid\n    if (this.cache && (now - this.cacheTimestamp) < this.cacheTTL) {\n      return this.cache;\n    }\n\n    try {\n      const data = await fs.readFile(this.dbPath, \"utf-8\");\n      this.cache = JSON.parse(data) as RegistrationDatabase;\n      this.cacheTimestamp = now;\n      return this.cache;\n    } catch (error) {\n      console.error(\"Failed to load registration database:\", error);\n      throw new Error(\"Registration database unavailable\");\n    }\n  }\n\n  private normalizeRegistrationNumber(regNumber: string): string {\n    return regNumber.toUpperCase().trim().replace(/\\s+/g, \"\");\n  }\n\n  private isLicenseExpired(expiryDate: string): boolean {\n    const expiry = new Date(expiryDate);\n    const now = new Date();\n    return expiry < now;\n  }\n\n  private getBoardFromRegistration(regNumber: string): string {\n    const normalized = this.normalizeRegistrationNumber(regNumber);\n    \n    if (normalized.startsWith(\"KMPDC/\")) {\n      return \"Kenya Medical Practitioners and Dentists Council\";\n    } else if (normalized.startsWith(\"COC/\")) {\n      return \"Clinical Officers Council\";\n    } else if (normalized.startsWith(\"PPB/\")) {\n      return \"Pharmacy and Poisons Board\";\n    } else if (normalized.startsWith(\"KNDI/\")) {\n      return \"Kenya Nutritionists and Dietitians Institute\";\n    } else if (normalized.startsWith(\"KNCHR/\")) {\n      return \"Kenya National Commission for Human Rights\";\n    }\n    \n    return \"Unknown Board\";\n  }\n\n  private validateCadreMatch(requested: string, actual: string): boolean {\n    const normalizedRequested = requested.toLowerCase().trim();\n    const normalizedActual = actual.toLowerCase().trim();\n    \n    // Direct match\n    if (normalizedActual.includes(normalizedRequested)) {\n      return true;\n    }\n    \n    // Common variations\n    const cadreMap: Record<string, string[]> = {\n      \"doctor\": [\"medical doctor\", \"physician\", \"dr\", \"md\"],\n      \"pharmacist\": [\"pharm\", \"pharmaceutical\", \"pharmacy\"],\n      \"clinical officer\": [\"clinical\", \"co\", \"clinician\"],\n      \"nurse\": [\"nursing\", \"rn\", \"enrolled nurse\"],\n      \"nutritionist\": [\"dietitian\", \"nutrition\", \"diet\"]\n    };\n    \n    for (const [key, variations] of Object.entries(cadreMap)) {\n      if (variations.includes(normalizedRequested) && variations.some(v => normalizedActual.includes(v))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  async verifyRegistration(request: VerificationRequest): Promise<VerificationResponse> {\n    try {\n      const database = await this.loadDatabase();\n      const normalizedRegNumber = this.normalizeRegistrationNumber(request.registrationNumber);\n      \n      // Find practitioner by registration number\n      const practitioner = database.practitioners.find(p => \n        this.normalizeRegistrationNumber(p.registrationNumber) === normalizedRegNumber\n      );\n      \n      if (!practitioner) {\n        return {\n          isValid: false,\n          error: \"Registration number not found in database\"\n        };\n      }\n      \n      // Check if cadre matches (if specified)\n      if (request.cadre && !this.validateCadreMatch(request.cadre, practitioner.cadre)) {\n        return {\n          isValid: false,\n          error: \"Cadre mismatch - registration exists but for different profession\"\n        };\n      }\n      \n      // Check if license is expired\n      const isExpired = this.isLicenseExpired(practitioner.licenseExpiryDate);\n      \n      // Check status\n      if (practitioner.status === \"suspended\") {\n        return {\n          isValid: false,\n          error: `Registration suspended: ${practitioner.suspensionReason || \"Under disciplinary action\"}`\n        };\n      }\n      \n      if (practitioner.status === \"inactive\" || isExpired) {\n        return {\n          isValid: false,\n          error: practitioner.inactiveReason || \"License expired or inactive\"\n        };\n      }\n      \n      // Valid registration\n      return {\n        isValid: true,\n        practitioner: {\n          fullName: practitioner.fullName,\n          status: practitioner.status,\n          cadre: practitioner.cadre,\n          specialization: practitioner.specialization,\n          facility: practitioner.facility,\n          board: practitioner.board,\n          licenseExpiryDate: practitioner.licenseExpiryDate,\n          practiceLicense: practitioner.practiceLicense\n        }\n      };\n      \n    } catch (error) {\n      console.error(\"Registration verification error:\", error);\n      return {\n        isValid: false,\n        error: \"Verification service temporarily unavailable\"\n      };\n    }\n  }\n\n  async getAllBoards(): Promise<string[]> {\n    try {\n      const database = await this.loadDatabase();\n      const boards = new Set(database.practitioners.map(p => p.board));\n      return Array.from(boards);\n    } catch (error) {\n      console.error(\"Failed to get boards:\", error);\n      return [];\n    }\n  }\n\n  async getStatistics(): Promise<{\n    totalPractitioners: number;\n    activePractitioners: number;\n    suspendedPractitioners: number;\n    expiredLicenses: number;\n    boardBreakdown: Record<string, number>;\n  }> {\n    try {\n      const database = await this.loadDatabase();\n      const practitioners = database.practitioners;\n      \n      const stats = {\n        totalPractitioners: practitioners.length,\n        activePractitioners: practitioners.filter(p => p.status === \"active\" && !this.isLicenseExpired(p.licenseExpiryDate)).length,\n        suspendedPractitioners: practitioners.filter(p => p.status === \"suspended\").length,\n        expiredLicenses: practitioners.filter(p => this.isLicenseExpired(p.licenseExpiryDate)).length,\n        boardBreakdown: {} as Record<string, number>\n      };\n      \n      // Board breakdown\n      practitioners.forEach(p => {\n        stats.boardBreakdown[p.board] = (stats.boardBreakdown[p.board] || 0) + 1;\n      });\n      \n      return stats;\n    } catch (error) {\n      console.error(\"Failed to get statistics:\", error);\n      throw error;\n    }\n  }\n\n  async searchPractitioners(query: {\n    name?: string;\n    facility?: string;\n    cadre?: string;\n    board?: string;\n    status?: string;\n  }): Promise<RegistrationData[]> {\n    try {\n      const database = await this.loadDatabase();\n      let results = database.practitioners;\n      \n      if (query.name) {\n        const nameQuery = query.name.toLowerCase();\n        results = results.filter(p => \n          p.fullName.toLowerCase().includes(nameQuery)\n        );\n      }\n      \n      if (query.facility) {\n        const facilityQuery = query.facility.toLowerCase();\n        results = results.filter(p => \n          p.facility.toLowerCase().includes(facilityQuery)\n        );\n      }\n      \n      if (query.cadre) {\n        results = results.filter(p => \n          this.validateCadreMatch(query.cadre!, p.cadre)\n        );\n      }\n      \n      if (query.board) {\n        results = results.filter(p => \n          p.board.toLowerCase().includes(query.board!.toLowerCase())\n        );\n      }\n      \n      if (query.status) {\n        results = results.filter(p => p.status === query.status);\n      }\n      \n      return results;\n    } catch (error) {\n      console.error(\"Search failed:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const registrationService = new RegistrationValidationService();","size_bytes":8603},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { createSimpleUsers } from \"./create-simple-users\";\nimport { authService } from \"./auth-service\";\nimport { z } from \"zod\";\nimport { insertClaimSchema, insertPreauthorizationSchema, insertPrescriptionSchema } from \"@shared/schema\";\nimport { analyzePreauthorization, analyzeFraudPatterns, validatePrescription, suggestClaimCodes } from \"./openai\";\nimport { DeepSeekService } from \"./deepseek\";\nimport { mistralHealthcareService } from \"./mistral\";\nimport path from 'path';\n\nconst deepSeekService = new DeepSeekService();\nimport { registrationService } from \"./registration-service\";\n\nexport function registerRoutes(app: Express): Server {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n    next();\n  };\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      req.session.destroy((err) => {\n        if (err) {\n          console.error(\"Session destroy error:\", err);\n          return res.status(500).json({ message: \"Session cleanup failed\" });\n        }\n        res.clearCookie('connect.sid');\n        res.json({ message: \"Logged out successfully\" });\n      });\n    });\n  });\n\n  // Registration validation endpoint\n  app.post(\"/api/register/validate-role\", async (req, res) => {\n    try {\n      const { email, registrationNumber, role, country } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      // Detect care provider and role from domain\n      const domainResult = await authService.detectFromDomain(email);\n      \n      let registrationResult = null;\n      if (registrationNumber && role) {\n        registrationResult = await authService.validateRegistration(registrationNumber, role, country || 'kenya');\n      }\n\n      res.json({\n        domain: domainResult,\n        registration: registrationResult,\n        roleOptions: authService.getRoleOptions(),\n        cadreOptions: role ? authService.getCadreOptions(role) : []\n      });\n    } catch (error) {\n      console.error('Role validation error:', error);\n      res.status(500).json({ error: \"Failed to validate role and domain\" });\n    }\n  });\n\n  // Get care providers endpoint\n  app.get(\"/api/care-providers\", async (req, res) => {\n    try {\n      const providers = await authService.getAllCareProviders();\n      res.json(providers);\n    } catch (error) {\n      console.error('Error fetching care providers:', error);\n      res.status(500).json({ error: \"Failed to fetch care providers\" });\n    }\n  });\n\n  // Get role options endpoint\n  app.get(\"/api/roles\", (req, res) => {\n    const { role } = req.query;\n    \n    if (role) {\n      res.json({\n        cadreOptions: authService.getCadreOptions(role as string)\n      });\n    } else {\n      res.json({\n        roleOptions: authService.getRoleOptions()\n      });\n    }\n  });\n\n  // Debug session endpoint\n  app.get(\"/api/debug-session\", (req, res) => {\n    res.json({\n      sessionID: req.sessionID,\n      session: req.session,\n      cookies: req.headers.cookie,\n      isAuthenticated: req.isAuthenticated(),\n      user: req.user\n    });\n  });\n\n  // Claims routes\n  app.get(\"/api/claims\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const claims = await storage.getAllClaims();\n      res.json(claims);\n    } catch (error) {\n      console.error(\"Error fetching claims:\", error);\n      res.status(500).json({ message: \"Failed to fetch claims\" });\n    }\n  });\n\n  app.get(\"/api/claims/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const claim = await storage.getClaimById(parseInt(req.params.id));\n      if (!claim) {\n        return res.status(404).json({ message: \"Claim not found\" });\n      }\n      res.json(claim);\n    } catch (error) {\n      console.error(\"Error fetching claim:\", error);\n      res.status(500).json({ message: \"Failed to fetch claim\" });\n    }\n  });\n\n  app.post(\"/api/claims\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const claimData = insertClaimSchema.parse({\n        ...req.body,\n        submittedBy: req.user!.id,\n        claimId: `CLM-${Date.now()}`,\n        status: 'pending'\n      });\n      \n      const claim = await storage.createClaim(claimData);\n      \n      // Trigger blockchain anchoring (simulated)\n      if (claim.id) {\n        const txHash = `0x${Math.random().toString(16).substr(2, 40)}`;\n        await storage.updateClaimBlockchainHash(claim.id, txHash);\n      }\n      \n      res.status(201).json(claim);\n    } catch (error) {\n      console.error(\"Error creating claim:\", error);\n      res.status(500).json({ message: \"Failed to create claim\" });\n    }\n  });\n\n  app.patch(\"/api/claims/:id/void\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const { reason } = req.body;\n    \n    try {\n      const claim = await storage.voidClaim(parseInt(req.params.id), req.user!.id, reason);\n      res.json(claim);\n    } catch (error) {\n      console.error(\"Error voiding claim:\", error);\n      res.status(500).json({ message: \"Failed to void claim\" });\n    }\n  });\n\n  // Patient routes\n  app.get(\"/api/patients\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const patients = await storage.getAllPatients();\n      res.json(patients);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n      res.status(500).json({ message: \"Failed to fetch patients\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const patient = await storage.getPatientById(parseInt(req.params.id));\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      const benefits = await storage.getPatientBenefits(patient.id);\n      const dependents = await storage.getPatientDependents(patient.id);\n      \n      res.json({ ...patient, benefits, dependents });\n    } catch (error) {\n      console.error(\"Error fetching patient:\", error);\n      res.status(500).json({ message: \"Failed to fetch patient\" });\n    }\n  });\n\n  app.post(\"/api/patients/verify\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const { patientId, biometricHash, otp } = req.body;\n    \n    try {\n      let patient;\n      \n      if (biometricHash) {\n        // Simulated biometric verification\n        patient = await storage.getPatientByBiometric(biometricHash);\n      } else if (patientId) {\n        patient = await storage.getPatientByPatientId(patientId);\n      }\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found or verification failed\" });\n      }\n      \n      const benefits = await storage.getPatientBenefits(patient.id);\n      const dependents = await storage.getPatientDependents(patient.id);\n      \n      // Log verification for audit\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"patient_verification\",\n        resourceType: \"patient\",\n        resourceId: patient.id.toString(),\n        details: { method: biometricHash ? \"biometric\" : \"manual\", patientId: patient.patientId },\n        ipAddress: req.ip || null,\n        userAgent: req.get('User-Agent') || null\n      });\n      \n      res.json({ ...patient, benefits, dependents });\n    } catch (error) {\n      console.error(\"Error verifying patient:\", error);\n      res.status(500).json({ message: \"Failed to verify patient\" });\n    }\n  });\n\n  // AI Preauthorization routes\n  app.post(\"/api/preauth\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const requestData = insertPreauthorizationSchema.parse({\n        ...req.body,\n        requestedBy: req.user!.id,\n      });\n      \n      // Get patient history for AI analysis\n      const patient = await storage.getPatientById(requestData.patientId);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      const patientHistory = await storage.getPatientClaimHistory(requestData.patientId);\n      const benefits = await storage.getPatientBenefits(requestData.patientId);\n      \n      // Enhanced Claims Validation with DeepSeek\n      let aiResponse;\n      try {\n        // Use structured claims validation for comprehensive analysis\n        const claimsValidation = await deepSeekService.validateInsuranceClaim({\n          fullName: patient.name,\n          age: new Date().getFullYear() - new Date(patient.dateOfBirth).getFullYear(),\n          sex: patient.gender,\n          diagnosis: requestData.serviceType,\n          icdCode: requestData.icdCode || 'Not specified',\n          serviceName: requestData.clinicalJustification,\n          procedureCode: requestData.cptCode || 'Not specified',\n          planName: benefits?.length > 0 ? benefits[0].planType : 'Standard Plan',\n          insurerName: benefits?.length > 0 ? benefits[0].schemeName : 'Standard Coverage'\n        });\n        \n        // Also run traditional preauthorization analysis for additional context\n        const deepSeekAnalysis = await deepSeekService.analyzePreauthorization({\n          patientId: requestData.patientId.toString(),\n          diagnosis: requestData.serviceType,\n          treatmentPlan: requestData.clinicalJustification,\n          medicalHistory: patientHistory ? JSON.stringify(patientHistory) : undefined,\n          insuranceScheme: benefits?.length > 0 ? benefits[0].schemeName : 'Standard Coverage',\n          cost: parseFloat(requestData.estimatedCost.toString())\n        });\n        \n        aiResponse = {\n          decision: claimsValidation.decision.toLowerCase(),\n          confidence: claimsValidation.confidence,\n          reasoning: [...claimsValidation.reasoning, ...deepSeekAnalysis.reasoning],\n          conditions: deepSeekAnalysis.conditions,\n          chainOfThought: true,\n          claimsValidation: {\n            decision: claimsValidation.decision,\n            reason: claimsValidation.reason,\n            confidence: claimsValidation.confidence\n          }\n        };\n\n        // Log the AI decision for tracking and feedback\n        await storage.createDecisionLog({\n          userId: req.user!.id,\n          patientId: requestData.patientId,\n          decisionType: 'preauth',\n          originalDecision: aiResponse.decision,\n          aiConfidence: aiResponse.confidence.toString(),\n          reasoning: aiResponse.reasoning,\n          metadata: {\n            serviceType: requestData.serviceType,\n            estimatedCost: requestData.estimatedCost,\n            insuranceScheme: benefits?.length > 0 ? benefits[0].benefitType : 'Unknown',\n            claimsValidationUsed: true\n          }\n        });\n      } catch (error) {\n        console.error('DeepSeek analysis failed, using fallback:', error);\n        // Fallback to existing OpenAI analysis\n        aiResponse = await analyzePreauthorization({\n          patientId: requestData.patientId,\n          serviceType: requestData.serviceType,\n          clinicalJustification: requestData.clinicalJustification,\n          estimatedCost: parseFloat(requestData.estimatedCost.toString()),\n          urgency: requestData.urgency,\n          patientHistory,\n          policyData: benefits\n        });\n        aiResponse.chainOfThought = false;\n\n        // Log the fallback AI decision\n        await storage.createDecisionLog({\n          userId: req.user!.id,\n          patientId: requestData.patientId,\n          decisionType: 'preauth',\n          originalDecision: aiResponse.decision,\n          aiConfidence: aiResponse.confidence.toString(),\n          reasoning: aiResponse.reasoning || [],\n          metadata: {\n            serviceType: requestData.serviceType,\n            estimatedCost: requestData.estimatedCost,\n            fallbackUsed: true\n          }\n        });\n      }\n      \n      const preauth = await storage.createPreauthorization({\n        ...requestData,\n        aiDecision: aiResponse.decision,\n        aiConfidence: aiResponse.confidence,\n        aiReasoning: aiResponse,\n        humanReviewRequired: aiResponse.decision === 'review' || aiResponse.confidence < 80\n      });\n      \n      res.status(201).json(preauth);\n    } catch (error) {\n      console.error(\"Error processing preauthorization:\", error);\n      res.status(500).json({ message: \"Failed to process preauthorization\" });\n    }\n  });\n\n  app.get(\"/api/preauth\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const preauths = await storage.getAllPreauthorizations();\n      res.json(preauths);\n    } catch (error) {\n      console.error(\"Error fetching preauthorizations:\", error);\n      res.status(500).json({ message: \"Failed to fetch preauthorizations\" });\n    }\n  });\n\n  // Pharmacy validation routes\n  app.post(\"/api/pharmacy/validate\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { patientId, ...prescriptionData } = req.body;\n      \n      const patient = await storage.getPatientById(patientId);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      // Calculate patient age\n      const age = Math.floor((Date.now() - new Date(patient.dateOfBirth).getTime()) / (365.25 * 24 * 60 * 60 * 1000));\n      \n      // Get current medications\n      const currentMeds = await storage.getPatientMedications(patientId);\n      \n      // DeepSeek Chain of Thought Prescription Validation\n      let validationResult;\n      try {\n        const safetyAnalysis = await deepSeekService.analyzePrescriptionSafety(\n          patientId,\n          [prescriptionData.medicationName],\n          age,\n          prescriptionData.patientWeight || 70, // Default weight if not provided\n          patient.allergies ? JSON.parse(patient.allergies) : [],\n          patient.conditions ? JSON.parse(patient.conditions) : []\n        );\n        \n        validationResult = {\n          ...safetyAnalysis,\n          isApproved: safetyAnalysis.safetyScore >= 70,\n          chainOfThought: true\n        };\n      } catch (error) {\n        console.error('DeepSeek prescription validation failed, using fallback:', error);\n        // Fallback to existing validation\n        validationResult = await validatePrescription({\n          medicationName: prescriptionData.medicationName,\n          dosage: prescriptionData.dosage,\n          frequency: prescriptionData.frequency,\n          patientAge: age,\n          patientWeight: prescriptionData.patientWeight,\n          patientGender: patient.gender,\n          indication: prescriptionData.indication,\n          currentMedications: currentMeds.map(med => med.medicationName)\n        });\n        validationResult.chainOfThought = false;\n      }\n      \n      res.json(validationResult);\n    } catch (error) {\n      console.error(\"Error validating prescription:\", error);\n      res.status(500).json({ message: \"Failed to validate prescription\" });\n    }\n  });\n\n  app.post(\"/api/pharmacy/prescriptions\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const prescriptionData = insertPrescriptionSchema.parse({\n        ...req.body,\n        prescribedBy: req.user!.id,\n      });\n      \n      const prescription = await storage.createPrescription(prescriptionData);\n      res.status(201).json(prescription);\n    } catch (error) {\n      console.error(\"Error creating prescription:\", error);\n      res.status(500).json({ message: \"Failed to create prescription\" });\n    }\n  });\n\n  // Analytics and reporting routes\n  app.get(\"/api/analytics/dashboard\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/analytics/fraud\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const fraudAlerts = await storage.getFraudAlerts();\n      res.json(fraudAlerts);\n    } catch (error) {\n      console.error(\"Error fetching fraud alerts:\", error);\n      res.status(500).json({ message: \"Failed to fetch fraud alerts\" });\n    }\n  });\n\n  // Provider routes\n  app.get(\"/api/providers\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const providers = await storage.getAllProviders();\n      res.json(providers);\n    } catch (error) {\n      console.error(\"Error fetching providers:\", error);\n      res.status(500).json({ message: \"Failed to fetch providers\" });\n    }\n  });\n\n  // Code suggestion route\n  app.post(\"/api/ai/suggest-codes\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const { serviceDescription, diagnosis } = req.body;\n    \n    try {\n      const suggestions = await suggestClaimCodes(serviceDescription, diagnosis);\n      res.json(suggestions);\n    } catch (error) {\n      console.error(\"Error suggesting codes:\", error);\n      res.status(500).json({ message: \"Failed to suggest codes\" });\n    }\n  });\n\n  // Blockchain simulation routes\n  app.post(\"/api/blockchain/anchor\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const { claimId, claimHash } = req.body;\n    \n    try {\n      // Simulate blockchain transaction\n      const txHash = `0x${Math.random().toString(16).substr(2, 64)}`;\n      const blockNumber = Math.floor(Math.random() * 1000000) + 4000000;\n      \n      const result = {\n        txHash,\n        blockNumber,\n        gasUsed: 21000,\n        timestamp: new Date().toISOString(),\n        status: 'confirmed'\n      };\n      \n      // Update claim with blockchain hash\n      if (claimId) {\n        await storage.updateClaimBlockchainHash(parseInt(claimId), txHash);\n      }\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Error anchoring to blockchain:\", error);\n      res.status(500).json({ message: \"Failed to anchor to blockchain\" });\n    }\n  });\n\n  app.get(\"/api/blockchain/status\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Simulate blockchain network status\n    const status = {\n      network: \"Sepolia Testnet\",\n      gasPrice: Math.floor(Math.random() * 20) + 10,\n      lastBlock: Math.floor(Math.random() * 1000000) + 4000000,\n      contractAddress: \"0x742d35Cc6634C0532925a3b8D42d4738A12F9B2e\",\n      isOnline: true\n    };\n    \n    res.json(status);\n  });\n\n  // Professional License Verification API\n  app.post(\"/api/verify-registration\", async (req, res) => {\n    try {\n      const { registrationNumber, cadre } = req.body;\n\n      if (!registrationNumber) {\n        return res.status(400).json({\n          error: \"Registration number is required\",\n          isValid: false\n        });\n      }\n\n      const verificationResult = await registrationService.verifyRegistration({\n        registrationNumber,\n        cadre\n      });\n\n      if (!verificationResult.isValid) {\n        return res.status(403).json({\n          error: verificationResult.error,\n          isValid: false\n        });\n      }\n\n      res.json({\n        isValid: true,\n        practitioner: verificationResult.practitioner\n      });\n\n    } catch (error) {\n      console.error(\"Registration verification error:\", error);\n      res.status(500).json({\n        error: \"Verification service temporarily unavailable\",\n        isValid: false\n      });\n    }\n  });\n\n  // Get registration boards\n  app.get(\"/api/registration/boards\", async (req, res) => {\n    try {\n      const boards = await registrationService.getAllBoards();\n      res.json({ boards });\n    } catch (error) {\n      console.error(\"Failed to get boards:\", error);\n      res.status(500).json({ error: \"Failed to retrieve board information\" });\n    }\n  });\n\n  // Get registration statistics\n  app.get(\"/api/registration/statistics\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const stats = await registrationService.getStatistics();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Failed to get registration statistics:\", error);\n      res.status(500).json({ error: \"Failed to retrieve statistics\" });\n    }\n  });\n\n  // Search practitioners\n  app.get(\"/api/registration/search\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { name, facility, cadre, board, status } = req.query;\n      const searchQuery = {\n        name: name as string,\n        facility: facility as string,\n        cadre: cadre as string,\n        board: board as string,\n        status: status as string\n      };\n\n      const results = await registrationService.searchPractitioners(searchQuery);\n      res.json({ practitioners: results });\n    } catch (error) {\n      console.error(\"Practitioner search error:\", error);\n      res.status(500).json({ error: \"Search service temporarily unavailable\" });\n    }\n  });\n\n  // Cost Comparison Analytics API\n  app.get(\"/api/analytics/cost-metrics\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { timeRange, category, region } = req.query;\n      \n      // Simulate real-time cost metrics calculation\n      const metrics = {\n        totalCosts: 2847500 + Math.floor(Math.random() * 500000),\n        avgCostPerClaim: 3250 + Math.floor(Math.random() * 500),\n        costTrend: (Math.random() - 0.5) * 20, // -10% to +10%\n        topCostDrivers: [\n          { category: \"Inpatient Care\", amount: 1420000, percentage: 49.9 },\n          { category: \"Specialist Consultations\", amount: 568000, percentage: 19.9 },\n          { category: \"Diagnostic Imaging\", amount: 341000, percentage: 12.0 },\n          { category: \"Laboratory Tests\", amount: 284000, percentage: 10.0 },\n          { category: \"Emergency Services\", amount: 234500, percentage: 8.2 }\n        ]\n      };\n      \n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Cost metrics error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve cost metrics\" });\n    }\n  });\n\n  app.get(\"/api/analytics/provider-comparison\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { timeRange, category } = req.query;\n      \n      const providers = [\n        {\n          providerId: \"P001\",\n          providerName: \"Kenyatta National Hospital\",\n          providerType: \"Public Hospital\",\n          totalClaims: 1250 + Math.floor(Math.random() * 200),\n          totalCosts: 4875000 + Math.floor(Math.random() * 500000),\n          avgCostPerClaim: 3900 + Math.floor(Math.random() * 300),\n          costEfficiencyRank: 3,\n          specialtyFocus: \"General Medicine\",\n          qualityScore: 87,\n          patientSatisfaction: 78\n        },\n        {\n          providerId: \"P002\",\n          providerName: \"Aga Khan University Hospital\",\n          providerType: \"Private Hospital\",\n          totalClaims: 890 + Math.floor(Math.random() * 150),\n          totalCosts: 3560000 + Math.floor(Math.random() * 400000),\n          avgCostPerClaim: 4000 + Math.floor(Math.random() * 400),\n          costEfficiencyRank: 4,\n          specialtyFocus: \"Specialist Care\",\n          qualityScore: 94,\n          patientSatisfaction: 92\n        },\n        {\n          providerId: \"P003\",\n          providerName: \"Nairobi Hospital\",\n          providerType: \"Private Hospital\",\n          totalClaims: 756 + Math.floor(Math.random() * 120),\n          totalCosts: 2268000 + Math.floor(Math.random() * 300000),\n          avgCostPerClaim: 3000 + Math.floor(Math.random() * 250),\n          costEfficiencyRank: 1,\n          specialtyFocus: \"Cardiology\",\n          qualityScore: 91,\n          patientSatisfaction: 89\n        },\n        {\n          providerId: \"P004\",\n          providerName: \"MP Shah Hospital\",\n          providerType: \"Private Hospital\",\n          totalClaims: 623 + Math.floor(Math.random() * 100),\n          totalCosts: 2180500 + Math.floor(Math.random() * 250000),\n          avgCostPerClaim: 3500 + Math.floor(Math.random() * 300),\n          costEfficiencyRank: 2,\n          specialtyFocus: \"Maternity Care\",\n          qualityScore: 88,\n          patientSatisfaction: 85\n        },\n        {\n          providerId: \"P005\",\n          providerName: \"Mater Hospital\",\n          providerType: \"Private Hospital\",\n          totalClaims: 445 + Math.floor(Math.random() * 80),\n          totalCosts: 1780000 + Math.floor(Math.random() * 200000),\n          avgCostPerClaim: 4000 + Math.floor(Math.random() * 350),\n          costEfficiencyRank: 5,\n          specialtyFocus: \"Pediatrics\",\n          qualityScore: 90,\n          patientSatisfaction: 87\n        }\n      ];\n      \n      res.json(providers);\n    } catch (error) {\n      console.error(\"Provider comparison error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve provider comparison data\" });\n    }\n  });\n\n  app.get(\"/api/analytics/service-comparison\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const services = [\n        {\n          serviceCode: \"99213\",\n          serviceName: \"Office Visit - Established Patient\",\n          category: \"Primary Care\",\n          minCost: 1500,\n          maxCost: 4500,\n          avgCost: 2750 + Math.floor(Math.random() * 200),\n          medianCost: 2600,\n          standardDeviation: 650,\n          providerCount: 45,\n          claimVolume: 2340 + Math.floor(Math.random() * 100)\n        },\n        {\n          serviceCode: \"99285\",\n          serviceName: \"Emergency Department Visit - High Complexity\",\n          category: \"Emergency Care\",\n          minCost: 8000,\n          maxCost: 25000,\n          avgCost: 15500 + Math.floor(Math.random() * 1000),\n          medianCost: 14000,\n          standardDeviation: 4200,\n          providerCount: 12,\n          claimVolume: 567 + Math.floor(Math.random() * 50)\n        },\n        {\n          serviceCode: \"73030\",\n          serviceName: \"X-Ray Shoulder\",\n          category: \"Diagnostic Imaging\",\n          minCost: 2500,\n          maxCost: 8000,\n          avgCost: 4250 + Math.floor(Math.random() * 300),\n          medianCost: 4000,\n          standardDeviation: 1100,\n          providerCount: 28,\n          claimVolume: 890 + Math.floor(Math.random() * 80)\n        },\n        {\n          serviceCode: \"80053\",\n          serviceName: \"Comprehensive Metabolic Panel\",\n          category: \"Laboratory\",\n          minCost: 800,\n          maxCost: 2500,\n          avgCost: 1400 + Math.floor(Math.random() * 150),\n          medianCost: 1300,\n          standardDeviation: 380,\n          providerCount: 35,\n          claimVolume: 1560 + Math.floor(Math.random() * 120)\n        }\n      ];\n      \n      res.json(services);\n    } catch (error) {\n      console.error(\"Service comparison error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve service comparison data\" });\n    }\n  });\n\n  app.get(\"/api/analytics/regional-costs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const regions = [\n        { \n          region: \"Nairobi\", \n          avgCost: 3800 + Math.floor(Math.random() * 200), \n          claimVolume: 4567 + Math.floor(Math.random() * 200), \n          providerCount: 45, \n          costTrend: (Math.random() - 0.5) * 10 \n        },\n        { \n          region: \"Mombasa\", \n          avgCost: 3200 + Math.floor(Math.random() * 150), \n          claimVolume: 2890 + Math.floor(Math.random() * 150), \n          providerCount: 28, \n          costTrend: (Math.random() - 0.5) * 8 \n        },\n        { \n          region: \"Kisumu\", \n          avgCost: 2850 + Math.floor(Math.random() * 120), \n          claimVolume: 1780 + Math.floor(Math.random() * 100), \n          providerCount: 18, \n          costTrend: (Math.random() - 0.5) * 6 \n        },\n        { \n          region: \"Nakuru\", \n          avgCost: 2950 + Math.floor(Math.random() * 130), \n          claimVolume: 1456 + Math.floor(Math.random() * 80), \n          providerCount: 15, \n          costTrend: (Math.random() - 0.5) * 7 \n        },\n        { \n          region: \"Eldoret\", \n          avgCost: 2700 + Math.floor(Math.random() * 100), \n          claimVolume: 1234 + Math.floor(Math.random() * 60), \n          providerCount: 12, \n          costTrend: (Math.random() - 0.5) * 5 \n        }\n      ];\n      \n      res.json(regions);\n    } catch (error) {\n      console.error(\"Regional costs error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve regional cost data\" });\n    }\n  });\n\n  // =================\n  // BIOMETRIC API ROUTES\n  // =================\n  \n  // Import biometric service only when needed\n  const getBiometricService = async () => {\n    try {\n      const { biometricService } = await import('./biometric-service');\n      return biometricService;\n    } catch (error) {\n      throw new Error('Biometric service unavailable - MongoDB not connected');\n    }\n  };\n  \n  // Middleware for biometric authentication\n  const requireBiometricAuth = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    next();\n  };\n\n  // Check if fingerprint exists for patient\n  app.get(\"/api/biometric/exists/:patientId\", requireAuth, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const biometricService = await getBiometricService();\n      const exists = await biometricService.checkFingerprintExists(patientId);\n      \n      res.json({ exists, patientId });\n    } catch (error) {\n      console.error(\"Biometric exists check error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Register individual finger\n  app.post(\"/api/biometric/register-finger\", requireAuth, async (req, res) => {\n    try {\n      const { patientId, fingerId, fingerprintData, deviceId } = req.body;\n      const userId = req.user.id.toString();\n      const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n      const userAgent = req.get('User-Agent') || 'unknown';\n\n      if (!patientId || !fingerId || !fingerprintData) {\n        return res.status(400).json({ error: \"Patient ID, finger ID, and fingerprint data are required\" });\n      }\n\n      const biometricService = await getBiometricService();\n      const result = await biometricService.registerIndividualFinger(\n        patientId,\n        fingerId,\n        fingerprintData,\n        userId,\n        deviceId || 'web-browser',\n        ipAddress,\n        userAgent\n      );\n\n      if (result.success) {\n        res.json({ \n          success: true, \n          message: \"Finger registered successfully\",\n          fingerprintId: result.fingerprintId \n        });\n      } else {\n        res.status(400).json({ error: result.error });\n      }\n    } catch (error) {\n      console.error(\"Individual finger registration error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Register new fingerprint (legacy single fingerprint)\n  app.post(\"/api/biometric/register\", requireAuth, async (req, res) => {\n    try {\n      const { patientId, fingerprintData, deviceId } = req.body;\n      const userId = req.user.id.toString();\n      const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n      const userAgent = req.get('User-Agent') || 'unknown';\n\n      if (!patientId || !fingerprintData) {\n        return res.status(400).json({ error: \"Patient ID and fingerprint data are required\" });\n      }\n\n      const biometricService = await getBiometricService();\n      const result = await biometricService.registerFingerprint(\n        patientId,\n        fingerprintData,\n        userId,\n        deviceId || 'web-browser',\n        ipAddress,\n        userAgent\n      );\n\n      if (result.success) {\n        res.json({ \n          success: true, \n          message: \"Fingerprint registered successfully\",\n          fingerprintId: result.fingerprintId \n        });\n      } else {\n        res.status(400).json({ error: result.error });\n      }\n    } catch (error) {\n      console.error(\"Biometric registration error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Verify fingerprint\n  app.post(\"/api/biometric/verify\", requireAuth, async (req, res) => {\n    try {\n      const { patientId, fingerprintData, deviceId } = req.body;\n      const userId = req.user.id.toString();\n      const userRole = req.user.role || 'unknown';\n      const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n      const userAgent = req.get('User-Agent') || 'unknown';\n\n      if (!patientId || !fingerprintData) {\n        return res.status(400).json({ error: \"Patient ID and fingerprint data are required\" });\n      }\n\n      const biometricService = await getBiometricService();\n      const result = await biometricService.verifyFingerprint(\n        patientId,\n        fingerprintData,\n        userId,\n        userRole,\n        deviceId || 'web-browser',\n        ipAddress,\n        userAgent\n      );\n\n      if (result.success) {\n        // Generate biometric token for subsequent actions\n        const biometricToken = biometricService.generateBiometricToken(userId, userRole, 'verified');\n        \n        res.json({ \n          success: true, \n          message: \"Fingerprint verified successfully\",\n          verificationScore: result.verificationScore,\n          biometricToken \n        });\n      } else {\n        res.status(400).json({ \n          error: result.error,\n          verificationScore: result.verificationScore \n        });\n      }\n    } catch (error) {\n      console.error(\"Biometric verification error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Get enhanced fingerprint info\n  app.get(\"/api/biometric/enhanced-info/:patientId\", requireAuth, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const biometricService = await getBiometricService();\n      const info = await biometricService.getEnhancedFingerprintInfo(patientId);\n      \n      if (info) {\n        res.json({ info });\n      } else {\n        res.json({ info: null, message: \"No fingerprints registered for this patient\" });\n      }\n    } catch (error) {\n      console.error(\"Enhanced biometric info error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Verify with multiple fingerprints\n  app.post(\"/api/biometric/verify-multi\", requireAuth, async (req, res) => {\n    try {\n      const { patientId, fingerprintData, deviceId } = req.body;\n      const userId = req.user.id.toString();\n      const userRole = req.user.role || 'unknown';\n      const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n      const userAgent = req.get('User-Agent') || 'unknown';\n\n      if (!patientId || !fingerprintData) {\n        return res.status(400).json({ error: \"Patient ID and fingerprint data are required\" });\n      }\n\n      const biometricService = await getBiometricService();\n      const result = await biometricService.verifyMultipleFingerprints(\n        patientId,\n        fingerprintData,\n        userId,\n        userRole,\n        deviceId || 'web-browser',\n        ipAddress,\n        userAgent\n      );\n\n      if (result.success) {\n        res.json({ \n          success: true, \n          message: \"Fingerprint verified successfully\",\n          verificationScore: result.verificationScore,\n          matchedFinger: result.matchedFinger\n        });\n      } else {\n        res.status(400).json({ \n          error: result.error,\n          verificationScore: result.verificationScore \n        });\n      }\n    } catch (error) {\n      console.error(\"Multi-fingerprint verification error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Get registration count and status\n  app.get(\"/api/biometric/count/:patientId\", requireAuth, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const biometricService = await getBiometricService();\n      const count = await biometricService.getRegistrationCount(patientId);\n      \n      res.json({ count });\n    } catch (error) {\n      console.error(\"Registration count error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Get fingerprint info (without sensitive data) - legacy endpoint\n  app.get(\"/api/biometric/info/:patientId\", requireAuth, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const biometricService = await getBiometricService();\n      const info = await biometricService.getFingerprintInfo(patientId);\n      \n      if (info) {\n        res.json({ info });\n      } else {\n        res.json({ info: null, message: \"No fingerprint registered for this patient\" });\n      }\n    } catch (error) {\n      console.error(\"Biometric info error:\", error);\n      res.status(503).json({ error: \"Biometric service unavailable\" });\n    }\n  });\n\n  // Advanced Analytics and Prognosis API\n  app.get(\"/api/analytics/prognosis-models\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const models = [\n        {\n          modelId: \"diabetes-prediction\",\n          modelName: \"Diabetes Progression Predictor\",\n          condition: \"Type 2 Diabetes\",\n          accuracy: 89.5 + Math.random() * 5,\n          lastTrained: \"2024-06-15\",\n          dataPoints: 15400 + Math.floor(Math.random() * 1000),\n          status: \"active\"\n        },\n        {\n          modelId: \"cardiovascular-risk\",\n          modelName: \"Cardiovascular Risk Assessment\",\n          condition: \"Heart Disease\",\n          accuracy: 92.1 + Math.random() * 3,\n          lastTrained: \"2024-06-10\",\n          dataPoints: 22100 + Math.floor(Math.random() * 1500),\n          status: \"active\"\n        },\n        {\n          modelId: \"cancer-prognosis\",\n          modelName: \"Cancer Treatment Response\",\n          condition: \"Various Cancers\",\n          accuracy: 87.3 + Math.random() * 4,\n          lastTrained: \"2024-06-08\",\n          dataPoints: 8750 + Math.floor(Math.random() * 800),\n          status: \"active\"\n        },\n        {\n          modelId: \"mental-health\",\n          modelName: \"Mental Health Outcome Predictor\",\n          condition: \"Depression/Anxiety\",\n          accuracy: 84.7 + Math.random() * 6,\n          lastTrained: \"2024-06-12\",\n          dataPoints: 12600 + Math.floor(Math.random() * 1200),\n          status: Math.random() > 0.7 ? \"training\" : \"active\"\n        }\n      ];\n      \n      res.json(models);\n    } catch (error) {\n      console.error(\"Prognosis models error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve prognosis models\" });\n    }\n  });\n\n  app.get(\"/api/analytics/outcome-tracking\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { condition, timeframe } = req.query;\n      \n      const outcomes = [\n        {\n          patientId: \"P12345\",\n          patientName: \"John Kamau\",\n          condition: \"Type 2 Diabetes\",\n          initialDiagnosis: \"HbA1c: 8.5%, Fasting glucose: 180mg/dL\",\n          treatmentPlan: \"Metformin + Lifestyle modification\",\n          predictedOutcome: {\n            recoveryProbability: 78 + Math.floor(Math.random() * 15),\n            timeToRecovery: 180 + Math.floor(Math.random() * 60),\n            riskFactors: [\"Obesity\", \"Family history\", \"Sedentary lifestyle\"],\n            confidenceLevel: 89 + Math.floor(Math.random() * 8)\n          },\n          actualOutcome: {\n            status: Math.random() > 0.5 ? \"improved\" : \"stable\",\n            timeToOutcome: 165 + Math.floor(Math.random() * 30),\n            complications: Math.random() > 0.8 ? [\"Mild hypoglycemia\"] : [],\n            followUpRequired: true\n          },\n          lastUpdated: \"2024-06-18\"\n        },\n        {\n          patientId: \"P12346\",\n          patientName: \"Mary Wanjiku\",\n          condition: \"Hypertension\",\n          initialDiagnosis: \"BP: 165/95 mmHg, Stage 2 HTN\",\n          treatmentPlan: \"ACE inhibitor + Diet modification\",\n          predictedOutcome: {\n            recoveryProbability: 85 + Math.floor(Math.random() * 10),\n            timeToRecovery: 90 + Math.floor(Math.random() * 30),\n            riskFactors: [\"Age >50\", \"Salt intake\", \"Stress\"],\n            confidenceLevel: 92 + Math.floor(Math.random() * 6)\n          },\n          actualOutcome: {\n            status: Math.random() > 0.3 ? \"stable\" : \"improved\",\n            timeToOutcome: 95 + Math.floor(Math.random() * 20),\n            complications: [],\n            followUpRequired: true\n          },\n          lastUpdated: \"2024-06-17\"\n        },\n        {\n          patientId: \"P12347\",\n          patientName: \"Peter Ochieng\",\n          condition: \"Asthma\",\n          initialDiagnosis: \"Moderate persistent asthma, FEV1: 65%\",\n          treatmentPlan: \"ICS/LABA + Action plan\",\n          predictedOutcome: {\n            recoveryProbability: 92 + Math.floor(Math.random() * 6),\n            timeToRecovery: 60 + Math.floor(Math.random() * 30),\n            riskFactors: [\"Environmental triggers\", \"Compliance\"],\n            confidenceLevel: 87 + Math.floor(Math.random() * 10)\n          },\n          lastUpdated: \"2024-06-16\"\n        }\n      ];\n      \n      res.json(outcomes);\n    } catch (error) {\n      console.error(\"Outcome tracking error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve outcome tracking data\" });\n    }\n  });\n\n  app.get(\"/api/analytics/population-trends\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { timeframe } = req.query;\n      \n      const trends = [\n        { \n          timeperiod: \"Jan 2024\", \n          condition: \"Diabetes\", \n          incidenceRate: 4.2 + Math.random() * 0.5, \n          mortalityRate: 0.8 + Math.random() * 0.2, \n          recoveryRate: 78 + Math.random() * 5, \n          avgTreatmentCost: 45000 + Math.floor(Math.random() * 5000), \n          riskScore: 6.5 + Math.random() * 0.5 \n        },\n        { \n          timeperiod: \"Feb 2024\", \n          condition: \"Diabetes\", \n          incidenceRate: 4.5 + Math.random() * 0.5, \n          mortalityRate: 0.7 + Math.random() * 0.2, \n          recoveryRate: 79 + Math.random() * 5, \n          avgTreatmentCost: 46000 + Math.floor(Math.random() * 5000), \n          riskScore: 6.3 + Math.random() * 0.5 \n        },\n        { \n          timeperiod: \"Mar 2024\", \n          condition: \"Diabetes\", \n          incidenceRate: 4.1 + Math.random() * 0.5, \n          mortalityRate: 0.6 + Math.random() * 0.2, \n          recoveryRate: 81 + Math.random() * 5, \n          avgTreatmentCost: 44500 + Math.floor(Math.random() * 5000), \n          riskScore: 6.1 + Math.random() * 0.5 \n        },\n        { \n          timeperiod: \"Apr 2024\", \n          condition: \"Diabetes\", \n          incidenceRate: 3.9 + Math.random() * 0.5, \n          mortalityRate: 0.5 + Math.random() * 0.2, \n          recoveryRate: 83 + Math.random() * 5, \n          avgTreatmentCost: 43000 + Math.floor(Math.random() * 5000), \n          riskScore: 5.9 + Math.random() * 0.5 \n        },\n        { \n          timeperiod: \"May 2024\", \n          condition: \"Diabetes\", \n          incidenceRate: 3.7 + Math.random() * 0.5, \n          mortalityRate: 0.5 + Math.random() * 0.2, \n          recoveryRate: 85 + Math.random() * 5, \n          avgTreatmentCost: 42000 + Math.floor(Math.random() * 5000), \n          riskScore: 5.7 + Math.random() * 0.5 \n        },\n        { \n          timeperiod: \"Jun 2024\", \n          condition: \"Diabetes\", \n          incidenceRate: 3.5 + Math.random() * 0.5, \n          mortalityRate: 0.4 + Math.random() * 0.2, \n          recoveryRate: 87 + Math.random() * 5, \n          avgTreatmentCost: 41000 + Math.floor(Math.random() * 5000), \n          riskScore: 5.5 + Math.random() * 0.5 \n        }\n      ];\n      \n      res.json(trends);\n    } catch (error) {\n      console.error(\"Population trends error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve population trends\" });\n    }\n  });\n\n  app.get(\"/api/analytics/risk-assessments\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const assessments = [\n        {\n          patientId: \"P98765\",\n          patientName: \"Grace Muthoni\",\n          age: 45,\n          gender: \"Female\",\n          riskFactors: [\n            { factor: \"Hypertension\", severity: \"medium\", impact: 6.5 + Math.random() * 1 },\n            { factor: \"Family History of CVD\", severity: \"high\", impact: 8.2 + Math.random() * 0.5 },\n            { factor: \"Smoking\", severity: \"high\", impact: 9.1 + Math.random() * 0.5 },\n            { factor: \"High Cholesterol\", severity: \"medium\", impact: 6.8 + Math.random() * 0.8 }\n          ],\n          overallRiskScore: 7.6 + Math.random() * 0.8,\n          recommendations: [\n            \"Smoking cessation program\",\n            \"Cholesterol management\",\n            \"Regular BP monitoring\",\n            \"Cardiology consultation\"\n          ],\n          nextReviewDate: \"2024-09-15\"\n        },\n        {\n          patientId: \"P98766\",\n          patientName: \"Samuel Kiprop\",\n          age: 38,\n          gender: \"Male\",\n          riskFactors: [\n            { factor: \"Obesity (BMI >30)\", severity: \"medium\", impact: 5.8 + Math.random() * 0.8 },\n            { factor: \"Sedentary Lifestyle\", severity: \"medium\", impact: 4.9 + Math.random() * 0.7 },\n            { factor: \"Pre-diabetes\", severity: \"high\", impact: 7.3 + Math.random() * 0.5 }\n          ],\n          overallRiskScore: 6.0 + Math.random() * 0.8,\n          recommendations: [\n            \"Weight management program\",\n            \"Exercise prescription\",\n            \"Dietary counseling\",\n            \"Regular glucose monitoring\"\n          ],\n          nextReviewDate: \"2024-08-20\"\n        }\n      ];\n      \n      res.json(assessments);\n    } catch (error) {\n      console.error(\"Risk assessments error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve risk assessments\" });\n    }\n  });\n\n  // Onboarding API Routes\n  app.post(\"/api/onboarding/submit\", async (req, res) => {\n    try {\n      const formData = req.body;\n      \n      // Create onboarding record\n      const provider = await storage.createOnboardingApplication({\n        ...formData,\n        onboardingStatus: 'pending',\n        onboardingData: formData\n      });\n\n      // Log audit trail\n      await storage.logOnboardingAudit({\n        providerId: provider.id,\n        action: 'form_submitted',\n        details: { formData },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      // Send verification email (simulated)\n      console.log(`Verification email would be sent to: ${formData.contactEmail}`);\n\n      res.json({ \n        message: 'Onboarding application submitted successfully',\n        applicationId: provider.id,\n        status: 'pending_verification'\n      });\n    } catch (error) {\n      console.error(\"Onboarding submission error:\", error);\n      res.status(500).json({ message: \"Failed to submit onboarding application\" });\n    }\n  });\n\n  app.get(\"/api/onboarding/applications\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const applications = await storage.getOnboardingApplications();\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Failed to fetch onboarding applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.post(\"/api/onboarding/approve/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { id } = req.params;\n      const { users = [] } = req.body;\n      \n      // Update provider status\n      await storage.approveOnboardingApplication(parseInt(id), req.user!.id);\n      \n      // Create user accounts\n      for (const userData of users) {\n        await storage.createUser({\n          ...userData,\n          careProviderId: parseInt(id),\n          password: 'temp123', // Temporary password\n          isVerified: false\n        });\n      }\n\n      // Generate sample claim flows\n      await storage.generateSampleClaimFlows(parseInt(id));\n\n      // Log approval\n      await storage.logOnboardingAudit({\n        providerId: parseInt(id),\n        action: 'approved',\n        actionBy: req.user!.id,\n        details: { userCount: users.length },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      res.json({ message: 'Application approved successfully' });\n    } catch (error) {\n      console.error(\"Approval error:\", error);\n      res.status(500).json({ message: \"Failed to approve application\" });\n    }\n  });\n\n  app.post(\"/api/onboarding/reject/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n      \n      await storage.rejectOnboardingApplication(parseInt(id), req.user!.id, reason);\n      \n      await storage.logOnboardingAudit({\n        providerId: parseInt(id),\n        action: 'rejected',\n        actionBy: req.user!.id,\n        details: { reason },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      res.json({ message: 'Application rejected' });\n    } catch (error) {\n      console.error(\"Rejection error:\", error);\n      res.status(500).json({ message: \"Failed to reject application\" });\n    }\n  });\n\n  app.get(\"/api/onboarding/sample-flows/:providerId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { providerId } = req.params;\n      const flows = await storage.getSampleClaimFlows(parseInt(providerId));\n      res.json(flows);\n    } catch (error) {\n      console.error(\"Failed to fetch sample flows:\", error);\n      res.status(500).json({ message: \"Failed to fetch sample flows\" });\n    }\n  });\n\n  app.post(\"/api/onboarding/complete-flow/:flowId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { flowId } = req.params;\n      await storage.completeSampleFlow(parseInt(flowId));\n      res.json({ message: 'Sample flow completed' });\n    } catch (error) {\n      console.error(\"Flow completion error:\", error);\n      res.status(500).json({ message: \"Failed to complete flow\" });\n    }\n  });\n\n  app.get(\"/api/insurance-policies\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const policies = await storage.getInsurancePolicies();\n      res.json(policies);\n    } catch (error) {\n      console.error(\"Failed to fetch insurance policies:\", error);\n      res.status(500).json({ message: \"Failed to fetch policies\" });\n    }\n  });\n\n  app.post(\"/api/onboarding/seed-policies\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      await storage.seedInsurancePolicies();\n      res.json({ message: 'Insurance policies seeded successfully' });\n    } catch (error) {\n      console.error(\"Policy seeding error:\", error);\n      res.status(500).json({ message: \"Failed to seed policies\" });\n    }\n  });\n\n  // Dedicated claims validation endpoint\n  app.post(\"/api/claims/validate\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const {\n        fullName,\n        age,\n        sex,\n        diagnosis,\n        icdCode,\n        serviceName,\n        procedureCode,\n        planName,\n        insurerName\n      } = req.body;\n      \n      if (!fullName || !diagnosis || !serviceName) {\n        return res.status(400).json({ \n          message: \"Patient name, diagnosis, and service name are required\" \n        });\n      }\n      \n      const validation = await deepSeekService.validateInsuranceClaim({\n        fullName,\n        age: age || 30,\n        sex: sex || 'Unknown',\n        diagnosis,\n        icdCode: icdCode || 'Not specified',\n        serviceName,\n        procedureCode: procedureCode || 'Not specified',\n        planName: planName || 'Standard Plan',\n        insurerName: insurerName || 'Standard Coverage'\n      });\n      \n      // Log the validation for audit\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"claims_validation\",\n        resourceType: \"claim\",\n        resourceId: null,\n        details: { \n          patient: fullName, \n          diagnosis, \n          service: serviceName,\n          decision: validation.decision,\n          confidence: validation.confidence\n        },\n        ipAddress: req.ip || null,\n        userAgent: req.get('User-Agent') || null\n      });\n      \n      res.json({\n        ...validation,\n        timestamp: new Date().toISOString(),\n        validatedBy: 'deepseek-claims-validator'\n      });\n    } catch (error) {\n      console.error(\"Claims validation error:\", error);\n      res.status(500).json({ message: \"Failed to validate claim\" });\n    }\n  });\n\n  // Claim form submission and generation endpoint\n  app.post(\"/api/submit-claim\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const {\n        patient,\n        insurerName,       // e.g. \"AON Minet\"\n        schemeName,        // e.g. \"Safaricom Ltd\"\n        planName,          // e.g. \"Silver Cover\"\n        diagnosis,\n        icdCode,\n        requestedServices,\n        providerName,\n        providerCode,\n        dateOfService\n      } = req.body;\n\n      if (!patient?.fullName || !insurerName || !diagnosis) {\n        return res.status(400).json({ \n          message: \"Patient name, insurer name, and diagnosis are required\" \n        });\n      }\n\n      const { selectFormTemplate, fillClaimForm, validateClaimData } = await import('./claim-forms');\n      \n      const formTemplate = selectFormTemplate(insurerName);\n      const formData = {\n        fullName: patient.fullName,\n        policyNumber: patient.policyNumber || 'Not provided',\n        insurerName,\n        schemeName: schemeName || 'Standard Scheme',\n        planName: planName || 'Basic Plan',\n        diagnosis,\n        icdCode: icdCode || 'Not specified',\n        requestedServices,\n        patientAge: patient.age,\n        patientGender: patient.gender,\n        dateOfService: dateOfService || new Date().toISOString().split('T')[0],\n        providerName: providerName || 'Erlessed Healthcare Network',\n        providerCode: providerCode || 'ERL001',\n        claimAmount: requestedServices?.reduce((sum: number, service: any) => sum + service.totalCost, 0)\n      };\n\n      // Validate required fields\n      const validationErrors = validateClaimData(formTemplate, formData);\n      if (validationErrors.length > 0) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: validationErrors \n        });\n      }\n\n      const filledFormPath = await fillClaimForm(formTemplate, formData);\n      \n      // Log the claim form generation for audit\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"claim_form_generated\",\n        resourceType: \"claim_form\",\n        resourceId: path.basename(filledFormPath),\n        details: { \n          patient: patient.fullName,\n          insurer: insurerName,\n          diagnosis,\n          formTemplate: formTemplate.name,\n          claimAmount: formData.claimAmount\n        },\n        ipAddress: req.ip || null,\n        userAgent: req.get('User-Agent') || null\n      });\n\n      // Set headers for file download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"claim-form-${patient.fullName.replace(/\\s+/g, '-')}.pdf\"`);\n      \n      res.download(filledFormPath, `claim-form-${patient.fullName.replace(/\\s+/g, '-')}.pdf`, (err) => {\n        if (err) {\n          console.error('Error downloading file:', err);\n          if (!res.headersSent) {\n            res.status(500).json({ message: \"Failed to download claim form\" });\n          }\n        }\n        \n        // Clean up temp file after download\n        import('fs').then(fs => {\n          fs.unlink(filledFormPath, (unlinkErr) => {\n            if (unlinkErr) console.error('Error deleting temp file:', unlinkErr);\n          });\n        });\n      });\n      \n    } catch (error) {\n      console.error(\"Claim form generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate claim form\" });\n    }\n  });\n\n  // Feedback endpoint for decision logs\n  app.post(\"/api/feedback\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { logId, finalOutcome, appealOutcome, reviewerNotes } = req.body;\n\n      if (!logId || !finalOutcome) {\n        return res.status(400).json({ \n          error: \"Log ID and final outcome are required\" \n        });\n      }\n\n      // Check if log exists\n      const log = await storage.getDecisionLog(parseInt(logId));\n      if (!log) {\n        return res.status(404).json({ error: \"Log not found\" });\n      }\n\n      // Update the decision log with feedback\n      const updatedLog = await storage.updateDecisionLogFeedback(\n        parseInt(logId),\n        finalOutcome,\n        appealOutcome,\n        reviewerNotes\n      );\n\n      // Create audit trail for the feedback\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"decision_feedback_updated\",\n        resourceType: \"decision_log\",\n        resourceId: logId.toString(),\n        details: { \n          originalDecision: log.originalDecision,\n          finalOutcome,\n          appealOutcome,\n          confidenceScore: log.aiConfidence,\n          hasNotes: !!reviewerNotes\n        },\n        ipAddress: req.ip || null,\n        userAgent: req.get('User-Agent') || null\n      });\n\n      res.status(200).json({ \n        success: true, \n        updatedLog,\n        message: \"Decision feedback updated successfully\"\n      });\n    } catch (error) {\n      console.error(\"Feedback update error:\", error);\n      res.status(500).json({ error: \"Failed to update feedback\" });\n    }\n  });\n\n  // Get decision logs endpoint\n  app.get(\"/api/decision-logs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { type, limit = 50, offset = 0 } = req.query;\n      \n      let logs;\n      if (type) {\n        logs = await storage.getDecisionLogsByType(type as string, parseInt(limit as string));\n      } else {\n        logs = await storage.getDecisionLogs(parseInt(limit as string), parseInt(offset as string));\n      }\n\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching decision logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch decision logs\" });\n    }\n  });\n\n  // Get specific decision log endpoint\n  app.get(\"/api/decision-logs/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { id } = req.params;\n      const log = await storage.getDecisionLog(parseInt(id));\n      \n      if (!log) {\n        return res.status(404).json({ message: \"Decision log not found\" });\n      }\n\n      res.json(log);\n    } catch (error) {\n      console.error(\"Error fetching decision log:\", error);\n      res.status(500).json({ message: \"Failed to fetch decision log\" });\n    }\n  });\n\n  // Patient verification with enhanced biometric validation\n  app.post(\"/api/verify-patient/:patientId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { patientId } = req.params;\n      const { fingerprintHash, deviceFingerprint, sessionId } = req.body;\n      \n      // Get patient information\n      const patient = await storage.getPatientByPatientId(patientId);\n      if (!patient) {\n        return res.status(404).json({ verified: false, message: \"Patient not found\" });\n      }\n\n      // Enhanced biometric verification with fingerprint validation\n      let biometricVerified = false;\n      \n      if (fingerprintHash && deviceFingerprint) {\n        // In production, this would validate against securely stored biometric templates\n        // For demo, we simulate verification based on fingerprint consistency\n        biometricVerified = fingerprintHash.length > 10 && deviceFingerprint.length > 10;\n        \n        // Store biometric session data for audit\n        await storage.createAuditLog({\n          userId: req.user!.id,\n          action: \"biometric_scan_attempt\",\n          resourceType: \"patient\",\n          resourceId: patientId,\n          details: {\n            fingerprintLength: fingerprintHash.length,\n            deviceFingerprint: deviceFingerprint.substring(0, 8) + \"...\", // Partial for security\n            sessionId,\n            success: biometricVerified\n          },\n          ipAddress: req.ip || null,\n          userAgent: req.get('User-Agent') || null\n        });\n      }\n\n      if (!biometricVerified) {\n        return res.json({ \n          verified: false, \n          message: \"Biometric verification failed - invalid fingerprint data\" \n        });\n      }\n\n      // Get active insurance policies for the patient\n      const activePolicies = [\n        {\n          id: 1,\n          insurerName: \"SHA (Social Health Authority)\",\n          policyNumber: `SHA-${patient.patientId}`,\n          planType: \"Universal Health Coverage\",\n          memberName: `${patient.firstName} ${patient.lastName}`,\n          status: \"active\",\n          expiryDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // 1 year from now\n          coverageAmount: 1500000 // KES 1.5M\n        },\n        // Add additional policies if patient has multiple insurers\n        ...(Math.random() > 0.6 ? [{\n          id: 2,\n          insurerName: \"CIC Insurance\",\n          policyNumber: `CIC-${Math.random().toString().substr(2, 8)}`,\n          planType: \"Comprehensive Cover\",\n          memberName: `${patient.firstName} ${patient.lastName}`,\n          status: \"active\",\n          expiryDate: new Date(Date.now() + 200 * 24 * 60 * 60 * 1000).toISOString(), // ~7 months\n          coverageAmount: 2000000 // KES 2M\n        }] : []),\n        ...(Math.random() > 0.8 ? [{\n          id: 3,\n          insurerName: \"AAR Insurance\",\n          policyNumber: `AAR-${Math.random().toString().substr(2, 8)}`,\n          planType: \"Executive Cover\",\n          memberName: `${patient.firstName} ${patient.lastName}`,\n          status: \"active\",\n          expiryDate: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString(), // ~6 months\n          coverageAmount: 3000000 // KES 3M\n        }] : [])\n      ];\n\n      // Log verification activity\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"patient_biometric_verification\",\n        resourceType: \"patient\",\n        resourceId: patientId,\n        details: {\n          verificationMethod: \"fingerprint\",\n          activePoliciesCount: activePolicies.length,\n          patientName: `${patient.firstName} ${patient.lastName}`\n        },\n        ipAddress: req.ip || null,\n        userAgent: req.get('User-Agent') || null\n      });\n\n      res.json({\n        verified: true,\n        patient: {\n          id: patient.id,\n          patientId: patient.patientId,\n          firstName: patient.firstName,\n          lastName: patient.lastName,\n          dateOfBirth: patient.dateOfBirth,\n          gender: patient.gender\n        },\n        activePolicies,\n        biometricData: {\n          sessionId,\n          timestamp: Date.now(),\n          deviceVerified: true\n        },\n        message: `${activePolicies.length} active insurance ${activePolicies.length === 1 ? 'policy' : 'policies'} found`\n      });\n\n    } catch (error) {\n      console.error(\"Patient verification error:\", error);\n      res.status(500).json({ verified: false, message: \"Verification failed\" });\n    }\n  });\n\n  // Enhanced claims endpoint with service breakdown\n  app.get(\"/api/enhanced-claims\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const claims = await storage.getAllClaims();\n      const enhancedClaims = await Promise.all(\n        claims.map(async (claim: any) => {\n          const services: any[] = []; // await storage.getClaimServices(claim.id);\n          const patient = await storage.getPatientById(claim.patientId);\n          \n          return {\n            ...claim,\n            patientName: patient ? `${patient.firstName} ${patient.lastName}` : 'Unknown',\n            services: services.map(service => ({\n              ...service,\n              prescribedBy: 'Dr. ' + (service.prescribedBy || 'Unknown'),\n              startDate: service.startDate.toISOString(),\n              createdAt: service.createdAt.toISOString(),\n              updatedAt: service.updatedAt.toISOString()\n            }))\n          };\n        })\n      );\n      \n      res.json(enhancedClaims);\n    } catch (error) {\n      console.error(\"Error fetching enhanced claims:\", error);\n      res.status(500).json({ message: \"Failed to fetch claims\" });\n    }\n  });\n\n  // Enhanced claims by patient\n  app.get(\"/api/enhanced-claims/patient/:patientId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { patientId } = req.params;\n      const patient = await storage.getPatientByPatientId(patientId);\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      const claims: any[] = []; // await storage.getActiveClaimsByPatient(patient.id);\n      const enhancedClaims = await Promise.all(\n        claims.map(async (claim: any) => {\n          const services: any[] = []; // await storage.getClaimServices(claim.id);\n          \n          return {\n            ...claim,\n            patientName: `${patient.firstName} ${patient.lastName}`,\n            services: services.map(service => ({\n              ...service,\n              prescribedBy: 'Dr. ' + (service.prescribedBy || 'Unknown'),\n              startDate: service.startDate.toISOString(),\n              createdAt: service.createdAt.toISOString(),\n              updatedAt: service.updatedAt.toISOString()\n            }))\n          };\n        })\n      );\n      \n      res.json(enhancedClaims);\n    } catch (error) {\n      console.error(\"Error fetching patient claims:\", error);\n      res.status(500).json({ message: \"Failed to fetch patient claims\" });\n    }\n  });\n\n  // Front desk patient verification with biometric and session management\n  app.post(\"/api/front-desk/verify-patient\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { patientId, biometricData, otpCode } = req.body;\n      \n      // Find patient by ID\n      const patient = await storage.getPatientByPatientId(patientId);\n      if (!patient) {\n        return res.json({ verified: false, message: \"Patient not found\" });\n      }\n\n      // Verify biometric or OTP\n      let verified = false;\n      \n      if (biometricData) {\n        // Enhanced biometric verification\n        verified = biometricData.fingerprintHash && biometricData.fingerprintHash.length > 10;\n        \n        // Log biometric verification attempt\n        await storage.createAuditLog({\n          userId: req.user!.id,\n          action: \"front_desk_biometric_verification\",\n          resourceType: \"patient\",\n          resourceId: patientId,\n          details: {\n            fingerprintLength: biometricData.fingerprintHash?.length || 0,\n            deviceFingerprint: biometricData.deviceFingerprint?.substring(0, 8) + \"...\",\n            sessionId: biometricData.sessionId,\n            success: verified\n          },\n          ipAddress: req.ip || null,\n          userAgent: req.get('User-Agent') || null\n        });\n      } else if (otpCode) {\n        // OTP verification (for demo, accept any 6-digit code)\n        verified = otpCode.length === 6 && /^\\d{6}$/.test(otpCode);\n        \n        // Log OTP verification attempt\n        await storage.createAuditLog({\n          userId: req.user!.id,\n          action: \"front_desk_otp_verification\",\n          resourceType: \"patient\",\n          resourceId: patientId,\n          details: {\n            otpProvided: otpCode.length === 6,\n            success: verified\n          },\n          ipAddress: req.ip || null,\n          userAgent: req.get('User-Agent') || null\n        });\n      }\n\n      if (!verified) {\n        return res.json({ verified: false, message: \"Verification failed\" });\n      }\n\n      // Generate mock insurance policies for demo\n      const activePolicies = [\n        {\n          id: \"policy_sha_001\",\n          insurerName: \"SHA\",\n          schemeName: \"Universal Health Coverage\",\n          policyNumber: `SHA-${patientId}-2024`,\n          coverageAmount: 150000,\n          expiryDate: \"2024-12-31\",\n          isActive: true\n        },\n        {\n          id: \"policy_cic_001\", \n          insurerName: \"CIC Insurance\",\n          schemeName: \"Comprehensive Medical Cover\",\n          policyNumber: `CIC-${patientId}-2024`,\n          coverageAmount: 500000,\n          expiryDate: \"2024-12-31\",\n          isActive: true\n        },\n        {\n          id: \"policy_aar_001\",\n          insurerName: \"AAR Insurance\",\n          schemeName: \"Premium Health Plan\",\n          policyNumber: `AAR-${patientId}-2024`,\n          coverageAmount: 1000000,\n          expiryDate: \"2024-12-31\",\n          isActive: true\n        }\n      ];\n\n      // Check for active sessions at other facilities (mock implementation)\n      const activeSessions: any[] = []; // await storage.getActiveSessionsByPatient(patient.id);\n      const otherFacilitySessions = activeSessions.filter((session: any) => \n        session.facilityName !== \"Current Facility\" && session.isActive\n      );\n\n      // Add mock active session for demo\n      if (Math.random() > 0.7) { // 30% chance of active session\n        otherFacilitySessions.push({\n          id: 1,\n          sessionId: \"sess_\" + Date.now(),\n          patientId: patient.id,\n          facilityName: \"Nairobi Hospital\",\n          serviceName: \"Laboratory Tests\",\n          userId: req.user!.id,\n          userRole: \"Laboratory Technician\",\n          startedAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n          lastActivity: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n          isActive: true,\n          metadata: null\n        });\n      }\n\n      res.json({\n        verified: true,\n        patient: {\n          id: patient.id,\n          patientId: patient.patientId,\n          firstName: patient.firstName,\n          lastName: patient.lastName,\n          dateOfBirth: patient.dateOfBirth.toISOString(),\n          gender: patient.gender,\n          phoneNumber: patient.phoneNumber\n        },\n        activePolicies,\n        activeSessions: otherFacilitySessions,\n        message: \"Patient verified successfully\"\n      });\n\n    } catch (error) {\n      console.error(\"Front desk verification error:\", error);\n      res.status(500).json({ verified: false, message: \"Verification failed\" });\n    }\n  });\n\n  // Continue existing session from another facility\n  app.post(\"/api/front-desk/continue-session\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { sessionId, patientId } = req.body;\n      \n      // Update session activity\n      await storage.updateSessionActivity(sessionId);\n      \n      // Log session continuation\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"session_continuation\",\n        resourceType: \"session\",\n        resourceId: sessionId,\n        details: {\n          patientId,\n          continuedAt: new Date().toISOString()\n        },\n        ipAddress: req.ip || null,\n        userAgent: req.get('User-Agent') || null\n      });\n\n      res.json({ success: true, message: \"Session continued successfully\" });\n    } catch (error) {\n      console.error(\"Session continuation error:\", error);\n      res.status(500).json({ success: false, message: \"Failed to continue session\" });\n    }\n  });\n\n  // General chain of thought endpoint for any healthcare decision\n  app.post(\"/api/ai/chain-of-thought\", async (req, res) => {\n    try {\n      const { prompt, context, temperature, maxTokens } = req.body;\n      \n      if (!prompt) {\n        return res.status(400).json({ message: \"Prompt is required\" });\n      }\n      \n      const chainOfThought = await deepSeekService.generateChainOfThought({\n        prompt,\n        context,\n        temperature,\n        maxTokens\n      });\n      \n      res.json(chainOfThought);\n    } catch (error) {\n      console.error('Chain of thought error:', error);\n      res.status(500).json({ message: \"Chain of thought analysis failed\" });\n    }\n  });\n\n  // Mistral healthcare treatment endpoints\n  app.post(\"/api/ai/treatment-plan\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const treatmentRequest = req.body;\n      \n      if (!treatmentRequest.diagnosis || !treatmentRequest.patientAge) {\n        return res.status(400).json({ message: \"Diagnosis and patient age are required\" });\n      }\n      \n      const treatmentPlan = await mistralHealthcareService.generateTreatmentPlan(treatmentRequest);\n      \n      res.json({\n        ...treatmentPlan,\n        generatedBy: 'mistral-7b',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Treatment plan generation error:', error);\n      res.status(500).json({ message: \"Failed to generate treatment plan\" });\n    }\n  });\n\n  app.post(\"/api/ai/differential-diagnosis\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { symptoms, patientAge, patientGender, duration, additionalInfo } = req.body;\n      \n      if (!symptoms || !Array.isArray(symptoms) || symptoms.length === 0) {\n        return res.status(400).json({ message: \"Symptoms array is required\" });\n      }\n      \n      const diagnosis = await mistralHealthcareService.analyzeDifferentialDiagnosis(\n        symptoms,\n        patientAge,\n        patientGender,\n        duration,\n        additionalInfo\n      );\n      \n      res.json({\n        ...diagnosis,\n        generatedBy: 'mistral-7b',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Differential diagnosis error:', error);\n      res.status(500).json({ message: \"Failed to analyze differential diagnosis\" });\n    }\n  });\n\n  app.post(\"/api/ai/drug-interactions\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { medications, patientConditions, patientAge, kidneyFunction, liverFunction } = req.body;\n      \n      if (!medications || !Array.isArray(medications)) {\n        return res.status(400).json({ message: \"Medications array is required\" });\n      }\n      \n      const analysis = await mistralHealthcareService.analyzeComplexDrugInteractions(\n        medications,\n        patientConditions || [],\n        patientAge,\n        kidneyFunction,\n        liverFunction\n      );\n      \n      res.json({\n        ...analysis,\n        generatedBy: 'mistral-7b',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Drug interaction analysis error:', error);\n      res.status(500).json({ message: \"Failed to analyze drug interactions\" });\n    }\n  });\n\n  app.post(\"/api/ai/patient-education\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const { diagnosis, treatmentPlan, patientAge, educationLevel = 'basic' } = req.body;\n      \n      if (!diagnosis) {\n        return res.status(400).json({ message: \"Diagnosis is required\" });\n      }\n      \n      const education = await mistralHealthcareService.generatePatientEducation(\n        diagnosis,\n        treatmentPlan || 'Standard care',\n        patientAge,\n        educationLevel\n      );\n      \n      res.json({\n        ...education,\n        generatedBy: 'mistral-7b',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Patient education generation error:', error);\n      res.status(500).json({ message: \"Failed to generate patient education\" });\n    }\n  });\n\n// Debtors dashboard routes\napp.get('/api/debtors/claims-batches', requireAuth, async (req, res) => {\n  try {\n    const batchesData = [\n      {\n        id: \"SHA-001\",\n        insurer: \"SHA (Social Health Authority)\",\n        scheme: \"Universal Health Coverage\",\n        submissionDate: null,\n        status: \"pending\",\n        claims: [\n          {\n            id: \"CLM-001\",\n            patientName: \"John Wanjiku\",\n            services: \"Consultation, Lab Tests\",\n            date: \"2025-01-15\",\n            amount: 3500,\n            diagnosisStatus: \"missing\",\n            doctorName: \"Dr. Sarah Mwangi\",\n            status: \"pending\"\n          },\n          {\n            id: \"CLM-002\", \n            patientName: \"Mary Njeri\",\n            services: \"Surgery, Medication\",\n            date: \"2025-01-14\",\n            amount: 85000,\n            diagnosisStatus: \"complete\",\n            doctorName: \"Dr. Peter Kimani\",\n            status: \"ready\"\n          }\n        ]\n      },\n      {\n        id: \"CIC-001\",\n        insurer: \"CIC Insurance\",\n        scheme: \"Individual Medical Cover\",\n        submissionDate: null,\n        status: \"pending\",\n        claims: [\n          {\n            id: \"CLM-003\",\n            patientName: \"David Ochieng\",\n            services: \"Physiotherapy\",\n            date: \"2025-01-13\",\n            amount: 4500,\n            diagnosisStatus: \"complete\",\n            doctorName: \"Dr. Anne Mutiso\",\n            status: \"preauth_missing\"\n          }\n        ]\n      }\n    ];\n    \n    res.json(batchesData);\n  } catch (error) {\n    console.error('Error fetching claims batches:', error);\n    res.status(500).json({ error: 'Failed to fetch claims batches' });\n  }\n});\n\napp.get('/api/debtors/pending-diagnosis', requireAuth, async (req, res) => {\n  try {\n    const pendingData = [\n      {\n        doctorName: \"Dr. Sarah Mwangi\",\n        pendingCount: 3,\n        email: \"sarah.mwangi@knh.go.ke\",\n        oldestClaim: \"2025-01-10\",\n        department: \"Internal Medicine\"\n      },\n      {\n        doctorName: \"Dr. James Kiprotich\",\n        pendingCount: 1,\n        email: \"james.k@aku.edu\",\n        oldestClaim: \"2025-01-12\",\n        department: \"Cardiology\"\n      }\n    ];\n    \n    res.json(pendingData);\n  } catch (error) {\n    console.error('Error fetching pending diagnosis:', error);\n    res.status(500).json({ error: 'Failed to fetch pending diagnosis data' });\n  }\n});\n\napp.post('/api/debtors/send-reminder', requireAuth, async (req, res) => {\n  try {\n    const { doctorEmail, doctorName, pendingCount } = req.body;\n    \n    console.log(`Debtors Officer ${req.user.username} sending reminder to ${doctorName} (${doctorEmail}) for ${pendingCount} pending claims`);\n    \n    res.json({ \n      success: true, \n      message: `Reminder sent to ${doctorName}`,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error sending reminder:', error);\n    res.status(500).json({ error: 'Failed to send reminder' });\n  }\n});\n\napp.post('/api/debtors/submit-batch', requireAuth, async (req, res) => {\n  try {\n    const { batchId, verificationMethod, verificationData } = req.body;\n    \n    console.log(`Debtors Officer ${req.user.username} submitting batch ${batchId} with ${verificationMethod} verification`);\n    \n    const submissionRecord = {\n      batchId,\n      userId: req.user.id,\n      timestamp: new Date().toISOString(),\n      verificationMethod,\n      status: 'submitted'\n    };\n    \n    res.json({ \n      success: true, \n      submissionId: `SUB-${Date.now()}`,\n      message: 'Batch submitted successfully',\n      submissionRecord\n    });\n  } catch (error) {\n    console.error('Error submitting batch:', error);\n    res.status(500).json({ error: 'Failed to submit batch' });\n  }\n});\n\napp.get('/api/debtors/verification-audit', requireAuth, async (req, res) => {\n  try {\n    // Check if user has premium access\n    const userRole = req.user.role;\n    if (userRole !== 'debtors') {\n      return res.status(403).json({ error: 'Access denied. Debtors role required.' });\n    }\n\n    const { department, status, dateFrom, dateTo, search } = req.query;\n    \n    // Mock audit data with realistic Kenyan names and healthcare scenarios\n    const auditData = [\n      {\n        id: \"AUD-001\",\n        patientName: \"John Wanjiku\",\n        service: \"Consultation & Lab Tests\",\n        billedBy: \"Dr. Sarah Mwangi\",\n        billedAt: \"2025-01-22 10:30:00\",\n        verifiedBy: \"John Wanjiku\",\n        fingerprintStatus: \"verified\",\n        timestamp: \"2025-01-22 10:28:00\",\n        department: \"Outpatient\",\n        amount: 3500,\n        serviceCode: \"CONS-LAB-001\",\n        verificationHash: \"fp_hash_abc123\",\n        timeDifference: -2\n      },\n      {\n        id: \"AUD-002\",\n        patientName: \"Mary Njeri\",\n        service: \"Medication Dispensing\",\n        billedBy: \"Pharmacist Jane Kiprotich\",\n        billedAt: \"2025-01-22 11:15:00\",\n        verifiedBy: \"Mary Njeri\",\n        fingerprintStatus: \"time_mismatch\",\n        timestamp: \"2025-01-22 11:45:00\",\n        department: \"Pharmacy\",\n        amount: 1200,\n        serviceCode: \"PHARM-DISP-002\",\n        verificationHash: \"fp_hash_def456\",\n        timeDifference: 30\n      },\n      {\n        id: \"AUD-003\",\n        patientName: \"David Ochieng\",\n        service: \"Physiotherapy Session\",\n        billedBy: \"Dr. Anne Mutiso\",\n        billedAt: \"2025-01-22 09:45:00\",\n        verifiedBy: \"\",\n        fingerprintStatus: \"missing\",\n        timestamp: \"\",\n        department: \"Physiotherapy\",\n        amount: 2500,\n        serviceCode: \"PHYSIO-001\",\n        timeDifference: 0\n      },\n      {\n        id: \"AUD-004\",\n        patientName: \"Grace Waweru\",\n        service: \"Laboratory Tests\",\n        billedBy: \"Lab Tech Samuel Kiptoo\",\n        billedAt: \"2025-01-22 12:00:00\",\n        verifiedBy: \"\",\n        fingerprintStatus: \"pending\",\n        timestamp: \"\",\n        department: \"Laboratory\",\n        amount: 1800,\n        serviceCode: \"LAB-TESTS-003\",\n        timeDifference: 0\n      },\n      {\n        id: \"AUD-005\",\n        patientName: \"Peter Kamau\",\n        service: \"X-Ray Imaging\",\n        billedBy: \"Radiologist Dr. Elizabeth Mutua\",\n        billedAt: \"2025-01-22 14:20:00\",\n        verifiedBy: \"Peter Kamau\",\n        fingerprintStatus: \"verified\",\n        timestamp: \"2025-01-22 14:18:00\",\n        department: \"Radiology\",\n        amount: 4200,\n        serviceCode: \"RAD-XRAY-001\",\n        verificationHash: \"fp_hash_ghi789\",\n        timeDifference: -2\n      },\n      {\n        id: \"AUD-006\",\n        patientName: \"Agnes Wanjiru\",\n        service: \"Dental Checkup\",\n        billedBy: \"Dr. Michael Otieno\",\n        billedAt: \"2025-01-22 16:00:00\",\n        verifiedBy: \"\",\n        fingerprintStatus: \"missing\",\n        timestamp: \"\",\n        department: \"Dental\",\n        amount: 2800,\n        serviceCode: \"DENT-CHECK-001\",\n        timeDifference: 0\n      }\n    ];\n\n    // Apply filters\n    let filteredData = auditData;\n    \n    if (department && department !== 'all') {\n      filteredData = filteredData.filter(entry => entry.department === department);\n    }\n    \n    if (status && status !== 'all') {\n      filteredData = filteredData.filter(entry => entry.fingerprintStatus === status);\n    }\n    \n    if (search) {\n      const searchLower = search.toString().toLowerCase();\n      filteredData = filteredData.filter(entry => \n        entry.patientName.toLowerCase().includes(searchLower) ||\n        entry.service.toLowerCase().includes(searchLower) ||\n        entry.billedBy.toLowerCase().includes(searchLower)\n      );\n    }\n    \n    if (dateFrom) {\n      filteredData = filteredData.filter(entry => \n        new Date(entry.billedAt) >= new Date(dateFrom.toString())\n      );\n    }\n    \n    if (dateTo) {\n      filteredData = filteredData.filter(entry => \n        new Date(entry.billedAt) <= new Date(dateTo.toString())\n      );\n    }\n\n    res.json({\n      data: filteredData,\n      summary: {\n        total: auditData.length,\n        verified: auditData.filter(e => e.fingerprintStatus === 'verified').length,\n        missing: auditData.filter(e => e.fingerprintStatus === 'missing').length,\n        pending: auditData.filter(e => e.fingerprintStatus === 'pending').length,\n        timeMismatches: auditData.filter(e => e.fingerprintStatus === 'time_mismatch').length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching verification audit data:', error);\n    res.status(500).json({ error: 'Failed to fetch verification audit data' });\n  }\n});\n\napp.get('/api/debtors/user-premium-status', requireAuth, async (req, res) => {\n  try {\n    // Check user's premium status - in production this would query actual user data\n    const isPremium = req.user.role === 'debtors' && req.user.premiumAccess !== false;\n    \n    res.json({\n      isPremium,\n      role: req.user.role,\n      features: {\n        verificationAudit: isPremium,\n        voidClaimsAnalysis: isPremium,\n        advancedReporting: isPremium,\n        bulkExport: isPremium\n      }\n    });\n  } catch (error) {\n    console.error('Error checking premium status:', error);\n    res.status(500).json({ error: 'Failed to check premium status' });\n  }\n});\n\n  // Consultation endpoints\n  app.post('/api/consultations', async (req, res) => {\n    try {\n      const consultation = await storage.createConsultation(req.body);\n      res.json(consultation);\n    } catch (error) {\n      console.error('Error creating consultation:', error);\n      res.status(500).json({ message: 'Failed to create consultation' });\n    }\n  });\n\n  app.get('/api/consultations/patient/:patientId', async (req, res) => {\n    try {\n      const consultation = await storage.getConsultationByPatient(req.params.patientId);\n      res.json(consultation);\n    } catch (error) {\n      console.error('Error fetching consultation:', error);\n      res.status(500).json({ message: 'Failed to fetch consultation' });\n    }\n  });\n\n  // Services endpoints\n  app.post('/api/services', async (req, res) => {\n    try {\n      const service = await storage.createService(req.body);\n      res.json(service);\n    } catch (error) {\n      console.error('Error creating service:', error);\n      res.status(500).json({ message: 'Failed to create service' });\n    }\n  });\n\n  app.get('/api/services/patient/:patientId', async (req, res) => {\n    try {\n      const services = await storage.getServicesByPatient(req.params.patientId);\n      res.json(services);\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      res.status(500).json({ message: 'Failed to fetch services' });\n    }\n  });\n\n  app.get('/api/services/patient/:patientId/:type', async (req, res) => {\n    try {\n      const { patientId, type } = req.params;\n      const services = await storage.getActiveServicesByType(patientId, type as 'lab' | 'pharmacy');\n      res.json(services);\n    } catch (error) {\n      console.error('Error fetching services by type:', error);\n      res.status(500).json({ message: 'Failed to fetch services' });\n    }\n  });\n\n  // Lab order cancellation endpoint\n  app.post('/api/lab-orders/cancel', async (req, res) => {\n    try {\n      const { labId, doctorId, reason } = req.body;\n      \n      if (!labId || !doctorId || !reason) {\n        return res.status(400).json({ message: 'Missing required fields: labId, doctorId, and reason' });\n      }\n\n      const cancelledOrder = await storage.cancelLabOrder(labId, doctorId, reason);\n      \n      if (!cancelledOrder) {\n        return res.status(404).json({ message: 'Lab order not found or could not be cancelled' });\n      }\n\n      res.json({\n        message: 'Lab order cancelled successfully',\n        order: cancelledOrder\n      });\n    } catch (error) {\n      console.error('Error cancelling lab order:', error);\n      res.status(500).json({ message: 'Failed to cancel lab order' });\n    }\n  });\n\n  // Create review consultation\n  app.post('/api/consultations/review', async (req, res) => {\n    try {\n      const { patientId, doctorId, reason, cancelledLabId, originalService } = req.body;\n      \n      if (!patientId || !doctorId) {\n        return res.status(400).json({ message: 'Missing required fields: patientId and doctorId' });\n      }\n\n      const result = await storage.createReviewConsultation({\n        patientId,\n        doctorId,\n        reason,\n        cancelledLabId,\n        originalService\n      });\n      \n      res.json({ \n        success: true, \n        message: 'Review consultation created successfully',\n        id: result.id,\n        consultation: result\n      });\n    } catch (error) {\n      console.error('Error creating review consultation:', error);\n      res.status(500).json({ message: 'Failed to create review consultation' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":89986},"server/storage.ts":{"content":"import { \n  users, patients, claims, providers, benefits, dependents, \n  preauthorizations, prescriptions, fraudAlerts, auditLogs,\n  careProviders, insurancePolicies, onboardingAudits, sampleClaimFlows,\n  consultations, services,\n  type User, type InsertUser, type Patient, type InsertPatient,\n  type Claim, type InsertClaim, type Provider, type Benefit,\n  type Dependent, type Preauthorization, type InsertPreauthorization,\n  type Prescription, type InsertPrescription, type FraudAlert, type AuditLog,\n  type CareProvider, type InsertCareProvider\n} from \"@shared/schema\";\nimport { db, pool } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateLastLogin(userId: number): Promise<void>;\n  \n  // Patient management\n  getAllPatients(): Promise<Patient[]>;\n  getPatientById(id: number): Promise<Patient | undefined>;\n  getPatientByPatientId(patientId: string): Promise<Patient | undefined>;\n  getPatientByBiometric(biometricHash: string): Promise<Patient | undefined>;\n  getPatientBenefits(patientId: number): Promise<Benefit[]>;\n  getPatientDependents(patientId: number): Promise<Dependent[]>;\n  getPatientClaimHistory(patientId: number): Promise<Claim[]>;\n  getPatientMedications(patientId: number): Promise<Prescription[]>;\n  \n  // Claims management\n  getAllClaims(): Promise<Claim[]>;\n  getClaimById(id: number): Promise<Claim | undefined>;\n  createClaim(claim: InsertClaim): Promise<Claim>;\n  voidClaim(id: number, voidedBy: number, reason: string): Promise<Claim>;\n  updateClaimBlockchainHash(id: number, txHash: string): Promise<void>;\n  \n  // Preauthorizations\n  getAllPreauthorizations(): Promise<Preauthorization[]>;\n  createPreauthorization(preauth: InsertPreauthorization): Promise<Preauthorization>;\n  \n  // Prescriptions\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  \n  // Providers\n  getAllProviders(): Promise<Provider[]>;\n  \n  // Analytics\n  getDashboardStats(): Promise<any>;\n  getFraudAlerts(): Promise<FraudAlert[]>;\n  \n  // Audit logging\n  createAuditLog(log: Omit<AuditLog, 'id' | 'createdAt'>): Promise<AuditLog>;\n  \n  // Onboarding\n  createOnboardingApplication(data: any): Promise<any>;\n  getOnboardingApplications(): Promise<any[]>;\n  approveOnboardingApplication(id: number, approvedBy: number): Promise<void>;\n  rejectOnboardingApplication(id: number, rejectedBy: number, reason: string): Promise<void>;\n  logOnboardingAudit(audit: any): Promise<void>;\n  generateSampleClaimFlows(providerId: number): Promise<void>;\n  getSampleClaimFlows(providerId: number): Promise<any[]>;\n  completeSampleFlow(flowId: number): Promise<void>;\n  getInsurancePolicies(): Promise<any[]>;\n  seedInsurancePolicies(): Promise<void>;\n  \n  sessionStore: any;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool: pool as any,\n      tableName: 'session',\n      createTableIfMissing: true,\n      schemaName: 'public',\n      ttl: 24 * 60 * 60, // 24 hours\n      disableTouch: false\n    });\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0] as User | undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username));\n    return result[0] as User | undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0] as User | undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        role: this.detectRoleFromEmail(insertUser.email)\n      })\n      .returning();\n    return user;\n  }\n\n  async updateLastLogin(userId: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ lastLogin: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  private detectRoleFromEmail(email: string): string {\n    const domain = email.split('@')[1]?.toLowerCase();\n    if (!domain) return 'front-office';\n    \n    if (domain.includes('frontoffice') || domain.includes('front-office')) return 'front-office';\n    if (domain.includes('doctor') || domain.includes('physician') || domain.includes('md')) return 'doctor';\n    if (domain.includes('lab') || domain.includes('laboratory')) return 'lab';\n    if (domain.includes('pharmacy') || domain.includes('pharm')) return 'pharmacy';\n    if (domain.includes('debt') || domain.includes('billing')) return 'debtors';\n    if (domain.includes('care') || domain.includes('manager')) return 'care-manager';\n    \n    return 'front-office'; // Default role\n  }\n\n  async getAllPatients(): Promise<Patient[]> {\n    return await db.select().from(patients).where(eq(patients.isActive, true));\n  }\n\n  async getPatientById(id: number): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient || undefined;\n  }\n\n  async getPatientByPatientId(patientId: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.patientId, patientId));\n    return patient || undefined;\n  }\n\n  async getPatientByBiometric(biometricHash: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.biometricHash, biometricHash));\n    return patient || undefined;\n  }\n\n  async getPatientBenefits(patientId: number): Promise<Benefit[]> {\n    return await db.select().from(benefits).where(eq(benefits.patientId, patientId));\n  }\n\n  async getPatientDependents(patientId: number): Promise<Dependent[]> {\n    return await db.select().from(dependents).where(eq(dependents.patientId, patientId));\n  }\n\n  async getPatientClaimHistory(patientId: number): Promise<Claim[]> {\n    return await db\n      .select()\n      .from(claims)\n      .where(eq(claims.patientId, patientId))\n      .orderBy(desc(claims.createdAt));\n  }\n\n  async getPatientMedications(patientId: number): Promise<Prescription[]> {\n    return await db\n      .select()\n      .from(prescriptions)\n      .where(eq(prescriptions.patientId, patientId))\n      .orderBy(desc(prescriptions.createdAt));\n  }\n\n  async getAllClaims(): Promise<Claim[]> {\n    return await db\n      .select()\n      .from(claims)\n      .orderBy(desc(claims.createdAt));\n  }\n\n  async getClaimById(id: number): Promise<Claim | undefined> {\n    const [claim] = await db.select().from(claims).where(eq(claims.id, id));\n    return claim || undefined;\n  }\n\n  async createClaim(insertClaim: InsertClaim): Promise<Claim> {\n    const [claim] = await db\n      .insert(claims)\n      .values(insertClaim)\n      .returning();\n    return claim;\n  }\n\n  async voidClaim(id: number, voidedBy: number, reason: string): Promise<Claim> {\n    const [claim] = await db\n      .update(claims)\n      .set({\n        isVoid: true,\n        voidReason: reason,\n        voidedBy,\n        status: 'void',\n        updatedAt: new Date()\n      })\n      .where(eq(claims.id, id))\n      .returning();\n    return claim;\n  }\n\n  async updateClaimBlockchainHash(id: number, txHash: string): Promise<void> {\n    await db\n      .update(claims)\n      .set({ blockchainTxHash: txHash })\n      .where(eq(claims.id, id));\n  }\n\n  async getAllPreauthorizations(): Promise<Preauthorization[]> {\n    return await db\n      .select()\n      .from(preauthorizations)\n      .orderBy(desc(preauthorizations.createdAt));\n  }\n\n  async createPreauthorization(insertPreauth: InsertPreauthorization): Promise<Preauthorization> {\n    const [preauth] = await db\n      .insert(preauthorizations)\n      .values(insertPreauth)\n      .returning();\n    return preauth;\n  }\n\n  async createPrescription(insertPrescription: InsertPrescription): Promise<Prescription> {\n    const [prescription] = await db\n      .insert(prescriptions)\n      .values(insertPrescription)\n      .returning();\n    return prescription;\n  }\n\n  async getAllProviders(): Promise<Provider[]> {\n    return await db.select().from(providers).where(eq(providers.isActive, true));\n  }\n\n  async getDashboardStats(): Promise<any> {\n    const totalClaims = await db.select({ count: sql<number>`count(*)` }).from(claims);\n    const activeClaims = await db.select({ count: sql<number>`count(*)` }).from(claims).where(eq(claims.status, 'pending'));\n    const approvedClaims = await db.select({ count: sql<number>`count(*)` }).from(claims).where(eq(claims.status, 'approved'));\n    const voidClaims = await db.select({ count: sql<number>`count(*)` }).from(claims).where(eq(claims.isVoid, true));\n    \n    const aiDecisions = await db.select({ count: sql<number>`count(*)` }).from(preauthorizations);\n    const aiApprovals = await db.select({ count: sql<number>`count(*)` }).from(preauthorizations).where(eq(preauthorizations.aiDecision, 'approved'));\n    \n    return {\n      totalClaims: totalClaims[0]?.count || 0,\n      activeClaims: activeClaims[0]?.count || 0,\n      approvedClaims: approvedClaims[0]?.count || 0,\n      voidClaims: voidClaims[0]?.count || 0,\n      aiDecisions: aiDecisions[0]?.count || 0,\n      aiApprovals: aiApprovals[0]?.count || 0,\n      aiAccuracy: aiDecisions[0]?.count > 0 ? ((aiApprovals[0]?.count || 0) / aiDecisions[0].count * 100).toFixed(1) : '0.0'\n    };\n  }\n\n  async getFraudAlerts(): Promise<FraudAlert[]> {\n    return await db\n      .select()\n      .from(fraudAlerts)\n      .where(eq(fraudAlerts.status, 'open'))\n      .orderBy(desc(fraudAlerts.createdAt));\n  }\n\n  async createAuditLog(log: Omit<AuditLog, 'id' | 'createdAt'>): Promise<AuditLog> {\n    const [auditLog] = await db\n      .insert(auditLogs)\n      .values(log)\n      .returning();\n    return auditLog;\n  }\n\n  // Onboarding implementation\n  async createOnboardingApplication(data: any): Promise<any> {\n    const [provider] = await db\n      .insert(careProviders)\n      .values({\n        organizationType: data.organizationType,\n        organizationName: data.organizationName,\n        domain: data.domain,\n        contactPerson: data.contactPerson,\n        contactEmail: data.contactEmail,\n        contactPhone: data.contactPhone,\n        address: data.address,\n        licenseNumber: data.licenseNumber,\n        schemesSupported: data.schemesSupported,\n        branch: data.branch,\n        servicesOffered: data.servicesOffered,\n        specializations: data.specializations,\n        operatingHours: data.operatingHours,\n        emergencyServices: data.emergencyServices,\n        onboardingStatus: 'pending',\n        onboardingData: data\n      })\n      .returning();\n    return provider;\n  }\n\n  async getOnboardingApplications(): Promise<any[]> {\n    return await db\n      .select()\n      .from(careProviders)\n      .where(sql`${careProviders.onboardingStatus} IN ('pending', 'approved', 'rejected')`)\n      .orderBy(desc(careProviders.createdAt));\n  }\n\n  async approveOnboardingApplication(id: number, approvedBy: number): Promise<void> {\n    await db\n      .update(careProviders)\n      .set({ \n        onboardingStatus: 'approved',\n        approvedBy,\n        approvedAt: new Date()\n      })\n      .where(eq(careProviders.id, id));\n  }\n\n  async rejectOnboardingApplication(id: number, rejectedBy: number, reason: string): Promise<void> {\n    await db\n      .update(careProviders)\n      .set({ \n        onboardingStatus: 'rejected',\n        rejectedBy,\n        rejectedAt: new Date(),\n        rejectionReason: reason\n      })\n      .where(eq(careProviders.id, id));\n  }\n\n  async logOnboardingAudit(audit: any): Promise<void> {\n    await db\n      .insert(onboardingAudits)\n      .values({\n        providerId: audit.providerId,\n        action: audit.action,\n        actionBy: audit.actionBy,\n        details: audit.details,\n        ipAddress: audit.ipAddress,\n        userAgent: audit.userAgent\n      });\n  }\n\n  async generateSampleClaimFlows(providerId: number): Promise<void> {\n    const sampleFlows = [\n      {\n        providerId,\n        flowType: 'outpatient_consultation',\n        title: 'Outpatient Consultation',\n        description: 'Submit and process a routine outpatient consultation claim',\n        steps: ['Patient registration', 'Service delivery', 'Claim submission', 'Processing', 'Payment'],\n        estimatedDuration: 30,\n        completed: false\n      },\n      {\n        providerId,\n        flowType: 'emergency_visit',\n        title: 'Emergency Department Visit',\n        description: 'Handle emergency department visit with preauthorization',\n        steps: ['Emergency admission', 'Immediate preauth', 'Treatment', 'Claim processing'],\n        estimatedDuration: 45,\n        completed: false\n      },\n      {\n        providerId,\n        flowType: 'pharmacy_dispensing',\n        title: 'Pharmacy Dispensing',\n        description: 'Process prescription validation and dispensing',\n        steps: ['Prescription verification', 'Benefit checking', 'Dispensing', 'Claim submission'],\n        estimatedDuration: 20,\n        completed: false\n      }\n    ];\n\n    for (const flow of sampleFlows) {\n      await db.insert(sampleClaimFlows).values(flow);\n    }\n  }\n\n  async getSampleClaimFlows(providerId: number): Promise<any[]> {\n    return await db\n      .select()\n      .from(sampleClaimFlows)\n      .where(eq(sampleClaimFlows.providerId, providerId))\n      .orderBy(sampleClaimFlows.createdAt);\n  }\n\n  async completeSampleFlow(flowId: number): Promise<void> {\n    await db\n      .update(sampleClaimFlows)\n      .set({ \n        completedAt: new Date()\n      })\n      .where(eq(sampleClaimFlows.id, flowId));\n  }\n\n  async getInsurancePolicies(): Promise<any[]> {\n    return await db\n      .select()\n      .from(insurancePolicies)\n      .orderBy(insurancePolicies.policyName);\n  }\n\n  async seedInsurancePolicies(): Promise<void> {\n    const policies = [\n      {\n        policyName: 'SHA Universal Health Coverage',\n        provider: 'Social Health Authority',\n        coverageType: 'comprehensive',\n        benefitLimits: {\n          annual: 1000000,\n          outpatient: 50000,\n          inpatient: 500000,\n          emergency: 200000\n        },\n        copayStructure: {\n          outpatient: 200,\n          inpatient: 2000,\n          emergency: 1000\n        },\n        excludedServices: ['cosmetic surgery', 'experimental treatments'],\n        isActive: true\n      },\n      {\n        policyName: 'UNHCR Refugee Health Insurance',\n        provider: 'United Nations High Commissioner for Refugees',\n        coverageType: 'basic',\n        benefitLimits: {\n          annual: 500000,\n          outpatient: 30000,\n          inpatient: 300000,\n          emergency: 150000\n        },\n        copayStructure: {\n          outpatient: 100,\n          inpatient: 1000,\n          emergency: 500\n        },\n        excludedServices: ['dental', 'vision correction'],\n        isActive: true\n      },\n      {\n        policyName: 'CIC General Insurance',\n        provider: 'CIC Insurance Group',\n        coverageType: 'premium',\n        benefitLimits: {\n          annual: 2000000,\n          outpatient: 100000,\n          inpatient: 1000000,\n          emergency: 400000\n        },\n        copayStructure: {\n          outpatient: 500,\n          inpatient: 5000,\n          emergency: 2000\n        },\n        excludedServices: [],\n        isActive: true\n      }\n    ];\n\n    for (const policy of policies) {\n      await db.insert(insurancePolicies).values(policy);\n    }\n  }\n\n  // Consultation and Services methods\n  async createConsultation(consultation: any): Promise<any> {\n    const result = await db.insert(consultations).values({\n      patientId: consultation.patientId,\n      doctorId: consultation.doctorId || 1, // Default doctor ID\n      chiefComplaint: consultation.chiefComplaint,\n      history: consultation.history,\n      examination: consultation.examination,\n      diagnosis: consultation.diagnosis,\n      icdCode: consultation.icdCode,\n      treatmentPlan: consultation.treatmentPlan,\n      followUpDate: consultation.followUpDate ? new Date(consultation.followUpDate) : null,\n      signedOff: consultation.signedOff || false,\n      signedOffAt: consultation.signedOffAt ? new Date(consultation.signedOffAt) : null,\n      vitals: consultation.vitals,\n      status: consultation.status || 'in-progress'\n    }).returning();\n    return result[0];\n  }\n\n  async getConsultationByPatient(patientId: string): Promise<any> {\n    const result = await db.select()\n      .from(consultations)\n      .where(eq(consultations.patientId, patientId))\n      .orderBy(desc(consultations.createdAt))\n      .limit(1);\n    return result[0];\n  }\n\n  async createService(service: any): Promise<any> {\n    const expiresAt = service.expiresAt ? new Date(service.expiresAt) : null;\n    \n    const result = await db.insert(services).values({\n      patientId: service.patientId,\n      prescribedBy: service.prescribedBy || 1, // Default doctor ID\n      type: service.type,\n      serviceCode: service.serviceCode,\n      serviceName: service.serviceName,\n      dosage: service.dosage,\n      frequency: service.frequency,\n      duration: service.duration,\n      instructions: service.instructions,\n      status: service.status || 'active',\n      durationDays: service.durationDays || (service.type === 'lab' ? 180 : null),\n      expiresAt: expiresAt,\n      notes: service.notes\n    }).returning();\n    return result[0];\n  }\n\n  async getServicesByPatient(patientId: string): Promise<any[]> {\n    const result = await db.select()\n      .from(services)\n      .where(eq(services.patientId, patientId))\n      .orderBy(desc(services.createdAt));\n    return result;\n  }\n\n  async getActiveServicesByType(patientId: string, type: 'lab' | 'pharmacy'): Promise<any[]> {\n    const result = await db.select()\n      .from(services)\n      .where(and(\n        eq(services.patientId, patientId),\n        eq(services.type, type),\n        eq(services.status, 'active')\n      ))\n      .orderBy(desc(services.createdAt));\n    return result;\n  }\n\n  async cancelLabOrder(labId: number, doctorId: number, reason: string): Promise<any> {\n    const result = await db.update(services)\n      .set({\n        status: 'cancelled',\n        notes: reason,\n        dispensedBy: doctorId,\n        dispensedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(and(\n        eq(services.id, labId),\n        eq(services.type, 'lab')\n      ))\n      .returning();\n    return result[0];\n  }\n\n  async createReviewConsultation(data: any): Promise<any> {\n    const result = await db.insert(consultations)\n      .values({\n        patientId: data.patientId,\n        doctorId: data.doctorId,\n        chiefComplaint: `Review consultation for cancelled lab order: ${data.originalService}`,\n        diagnosis: 'Review consultation pending',\n        treatmentPlan: `Patient review following cancelled lab order (ID: ${data.cancelledLabId}). Reason: ${data.reason}`,\n        status: 'in-progress',\n        signedOff: false\n      })\n      .returning();\n    return result[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":19481},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const careProviders = pgTable(\"care_providers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  domain: text(\"domain\").notNull().unique(), // e.g., aku.edu\n  type: text(\"type\").notNull(), // hospital, clinic, pharmacy-chain, insurer\n  branch: text(\"branch\"), // for multi-branch facilities\n  address: text(\"address\"),\n  licenseNumber: text(\"license_number\"),\n  contactEmail: text(\"contact_email\"),\n  contactPhone: text(\"contact_phone\"),\n  contactPerson: text(\"contact_person\"),\n  schemesSupported: text(\"schemes_supported\").array(), // SHA, CIC, UNHCR, etc.\n  onboardingStatus: text(\"onboarding_status\").default(\"pending\").notNull(), // pending, in_progress, approved, rejected\n  onboardingData: jsonb(\"onboarding_data\"), // Store form data\n  verificationDocuments: text(\"verification_documents\").array(), // uploaded document paths\n  approvedBy: integer(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insurancePolicies = pgTable(\"insurance_policies\", {\n  id: serial(\"id\").primaryKey(),\n  policyName: text(\"policy_name\").notNull(),\n  insurerName: text(\"insurer_name\").notNull(), // SHA, CIC, UNHCR\n  policyType: text(\"policy_type\").notNull(), // basic, premium, specialist\n  coverageDetails: jsonb(\"coverage_details\").notNull(), // benefit limits, copays, exclusions\n  benefitCategories: jsonb(\"benefit_categories\").notNull(), // consultation, lab, pharmacy, etc.\n  preauthorizationRules: jsonb(\"preauthorization_rules\").notNull(), // automatic approval thresholds\n  exclusions: text(\"exclusions\").array(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const onboardingAudits = pgTable(\"onboarding_audits\", {\n  id: serial(\"id\").primaryKey(),\n  providerId: integer(\"provider_id\").references(() => careProviders.id).notNull(),\n  action: text(\"action\").notNull(), // form_submitted, documents_uploaded, approved, rejected\n  actionBy: integer(\"action_by\").references(() => users.id),\n  details: jsonb(\"details\"), // action-specific data\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const sampleClaimFlows = pgTable(\"sample_claim_flows\", {\n  id: serial(\"id\").primaryKey(),\n  providerId: integer(\"provider_id\").references(() => careProviders.id).notNull(),\n  flowName: text(\"flow_name\").notNull(), // \"General Consultation\", \"Emergency Care\", etc.\n  flowType: text(\"flow_type\").notNull(), // consultation, lab, pharmacy, combined\n  steps: jsonb(\"steps\").notNull(), // array of step definitions\n  testData: jsonb(\"test_data\").notNull(), // sample patient and claim data\n  isCompleted: boolean(\"is_completed\").default(false).notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: text(\"role\").notNull(), // doctor, clinician, pharmacist, admin, debtor-officer\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  careProviderId: integer(\"care_provider_id\").references(() => careProviders.id),\n  department: text(\"department\"),\n  cadre: text(\"cadre\"), // specialist, consultant, registrar, etc.\n  registrationNumber: text(\"registration_number\"), // professional license number\n  registrationBody: text(\"registration_body\"), // national medical/pharmacy board\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  licenseNumber: text(\"license_number\"),\n  licenseVerified: boolean(\"license_verified\").default(false).notNull(),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const patients = pgTable(\"patients\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: text(\"patient_id\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\").notNull(),\n  gender: text(\"gender\").notNull(),\n  phoneNumber: text(\"phone_number\"),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  insuranceProvider: text(\"insurance_provider\").notNull(),\n  insurancePlan: text(\"insurance_plan\").notNull(),\n  policyNumber: text(\"policy_number\").notNull(),\n  memberSince: timestamp(\"member_since\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  biometricHash: text(\"biometric_hash\"), // Simulated fingerprint hash\n  fingerprintId: text(\"fingerprint_id\").unique(), // Enhanced biometric tracking\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const dependents = pgTable(\"dependents\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\").notNull(),\n  gender: text(\"gender\").notNull(),\n  relationship: text(\"relationship\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\nexport const benefits = pgTable(\"benefits\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  benefitType: text(\"benefit_type\").notNull(), // consultations, lab, pharmacy, specialists\n  totalAllowed: integer(\"total_allowed\").notNull(),\n  usedCount: integer(\"used_count\").default(0).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n  usedAmount: decimal(\"used_amount\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  resetPeriod: text(\"reset_period\").notNull(), // annual, monthly\n  lastReset: timestamp(\"last_reset\").defaultNow().notNull(),\n});\n\nexport const claims = pgTable(\"claims\", {\n  id: serial(\"id\").primaryKey(),\n  claimId: text(\"claim_id\").notNull().unique(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  providerId: integer(\"provider_id\").references(() => providers.id).notNull(),\n  serviceType: text(\"service_type\").notNull(),\n  procedureCode: text(\"procedure_code\"),\n  diagnosisCode: text(\"diagnosis_code\"),\n  description: text(\"description\"),\n  serviceCost: decimal(\"service_cost\", { precision: 10, scale: 2 }).notNull(),\n  insuranceCoverage: decimal(\"insurance_coverage\", { precision: 10, scale: 2 }).notNull(),\n  patientCopay: decimal(\"patient_copay\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull(), // pending, approved, denied, void\n  submittedBy: integer(\"submitted_by\").references(() => users.id).notNull(),\n  aiDecision: jsonb(\"ai_decision\"), // AI reasoning and confidence\n  isVoid: boolean(\"is_void\").default(false).notNull(),\n  voidReason: text(\"void_reason\"),\n  voidedBy: integer(\"voided_by\").references(() => users.id),\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const providers = pgTable(\"providers\", {\n  id: serial(\"id\").primaryKey(),\n  providerId: text(\"provider_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // hospital, clinic, lab, pharmacy\n  address: text(\"address\"),\n  phoneNumber: text(\"phone_number\"),\n  licenseNumber: text(\"license_number\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\nexport const preauthorizations = pgTable(\"preauthorizations\", {\n  id: serial(\"id\").primaryKey(),\n  claimId: integer(\"claim_id\").references(() => claims.id),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  serviceType: text(\"service_type\").notNull(),\n  requestedBy: integer(\"requested_by\").references(() => users.id).notNull(),\n  clinicalJustification: text(\"clinical_justification\").notNull(),\n  estimatedCost: decimal(\"estimated_cost\", { precision: 10, scale: 2 }).notNull(),\n  urgency: text(\"urgency\").notNull(), // routine, urgent, emergency\n  aiDecision: text(\"ai_decision\").notNull(), // approved, denied, review\n  aiConfidence: decimal(\"ai_confidence\", { precision: 5, scale: 2 }).notNull(),\n  aiReasoning: jsonb(\"ai_reasoning\"), // Chain-of-thought explanation\n  humanReviewRequired: boolean(\"human_review_required\").default(false).notNull(),\n  finalDecision: text(\"final_decision\"),\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: serial(\"id\").primaryKey(),\n  claimId: integer(\"claim_id\").references(() => claims.id),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  medicationName: text(\"medication_name\").notNull(),\n  dosage: text(\"dosage\").notNull(),\n  frequency: text(\"frequency\").notNull(),\n  duration: text(\"duration\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  indication: text(\"indication\").notNull(),\n  prescribedBy: integer(\"prescribed_by\").references(() => users.id).notNull(),\n  isValidated: boolean(\"is_validated\").default(false).notNull(),\n  validationNotes: text(\"validation_notes\"),\n  weightBasedDosing: boolean(\"weight_based_dosing\").default(false).notNull(),\n  genderSensitive: boolean(\"gender_sensitive\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const fraudAlerts = pgTable(\"fraud_alerts\", {\n  id: serial(\"id\").primaryKey(),\n  providerId: integer(\"provider_id\").references(() => providers.id),\n  patientId: integer(\"patient_id\").references(() => patients.id),\n  alertType: text(\"alert_type\").notNull(), // billing_pattern, duplicate_service, unusual_frequency\n  description: text(\"description\").notNull(),\n  riskLevel: text(\"risk_level\").notNull(), // low, medium, high\n  aiConfidence: decimal(\"ai_confidence\", { precision: 5, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"open\").notNull(), // open, investigating, resolved, false_positive\n  investigatedBy: integer(\"investigated_by\").references(() => users.id),\n  resolution: text(\"resolution\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  resourceType: text(\"resource_type\").notNull(),\n  resourceId: text(\"resource_id\"),\n  details: jsonb(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Service tracking table for detailed claim services\nexport const claimServices = pgTable(\"claim_services\", {\n  id: serial(\"id\").primaryKey(),\n  claimId: integer(\"claim_id\").references(() => claims.id).notNull(),\n  serviceName: text(\"service_name\").notNull(),\n  serviceType: text(\"service_type\").notNull(), // consultation, lab, pharmacy, procedure\n  serviceCode: text(\"service_code\"), // CPT, ICD codes\n  status: text(\"status\").notNull().default(\"pending\"), // pending, fulfilled, cancelled, expired\n  prescribedBy: integer(\"prescribed_by\").references(() => users.id),\n  startDate: timestamp(\"start_date\").defaultNow().notNull(),\n  durationDays: integer(\"duration_days\"),\n  quantity: integer(\"quantity\").default(1).notNull(),\n  unitCost: decimal(\"unit_cost\", { precision: 10, scale: 2 }).notNull(),\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Decision logs for tracking AI decisions and outcomes\nexport const decisionLogs = pgTable(\"decision_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  patientId: integer(\"patient_id\").references(() => patients.id),\n  decisionType: text(\"decision_type\").notNull(), // preauth, pharmacy_validation, claims_validation, fraud_detection\n  originalDecision: text(\"original_decision\").notNull(), // approved, denied, review\n  aiConfidence: decimal(\"ai_confidence\", { precision: 5, scale: 2 }).notNull(),\n  reasoning: jsonb(\"reasoning\"), // AI reasoning chain\n  finalOutcome: text(\"final_outcome\"), // actual outcome after human review\n  appealOutcome: text(\"appeal_outcome\"), // outcome if appealed\n  careManagerNotes: text(\"care_manager_notes\"), // reviewer notes\n  metadata: jsonb(\"metadata\"), // additional context (claim amount, service type, etc.)\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Lab Orders for Doctor/Clinician Dashboard\nexport const labOrders = pgTable(\"lab_orders\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  providerId: integer(\"provider_id\").references(() => providers.id).notNull(),\n  doctorId: integer(\"doctor_id\").references(() => users.id).notNull(),\n  testType: text(\"test_type\").notNull(),\n  testCode: text(\"test_code\"),\n  urgency: text(\"urgency\").notNull().default(\"routine\"), // routine, urgent, stat\n  clinicalInfo: text(\"clinical_info\"),\n  preauthorizationStatus: text(\"preauthorization_status\").default(\"pending\"),\n  status: text(\"status\").notNull().default(\"ordered\"), // ordered, collected, processing, completed, cancelled\n  estimatedCost: integer(\"estimated_cost\"),\n  results: text(\"results\"),\n  resultDate: timestamp(\"result_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Patient Queue for triage workflow\nexport const patientQueue = pgTable(\"patient_queue\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  providerId: integer(\"provider_id\").references(() => providers.id).notNull(),\n  assignedDoctorId: integer(\"assigned_doctor_id\").references(() => users.id),\n  queueNumber: integer(\"queue_number\").notNull(),\n  priority: text(\"priority\").notNull().default(\"normal\"), // high, normal, low\n  chiefComplaint: text(\"chief_complaint\"),\n  vitals: jsonb(\"vitals\"), // BP, temp, pulse, etc.\n  triageNotes: text(\"triage_notes\"),\n  status: text(\"status\").notNull().default(\"waiting\"), // waiting, in_consultation, completed, cancelled\n  checkedInAt: timestamp(\"checked_in_at\").defaultNow().notNull(),\n  consultationStarted: timestamp(\"consultation_started\"),\n  consultationCompleted: timestamp(\"consultation_completed\"),\n});\n\n// Consultation Records\nexport const consultations = pgTable(\"consultations\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: text(\"patient_id\").notNull(),\n  doctorId: integer(\"doctor_id\").references(() => users.id).notNull(),\n  queueId: integer(\"queue_id\"),\n  chiefComplaint: text(\"chief_complaint\"),\n  history: text(\"history\"),\n  examination: text(\"examination\"),\n  diagnosis: text(\"diagnosis\").notNull(),\n  icdCode: text(\"icd_code\"),\n  treatmentPlan: text(\"treatment_plan\"),\n  followUpDate: timestamp(\"follow_up_date\"),\n  signedOff: boolean(\"signed_off\").default(false).notNull(),\n  signedOffAt: timestamp(\"signed_off_at\"),\n  vitals: jsonb(\"vitals\"),\n  status: text(\"status\").notNull().default(\"in-progress\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Services table for prescriptions and lab orders\nexport const services = pgTable(\"services\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: text(\"patient_id\").notNull(),\n  prescribedBy: integer(\"prescribed_by\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // \"lab\" | \"pharmacy\"\n  serviceCode: text(\"service_code\"),\n  serviceName: text(\"service_name\").notNull(),\n  dosage: text(\"dosage\"),\n  frequency: text(\"frequency\"),\n  duration: text(\"duration\"),\n  instructions: text(\"instructions\"),\n  status: text(\"status\").notNull().default(\"active\"),\n  durationDays: integer(\"duration_days\").default(180),\n  expiresAt: timestamp(\"expires_at\"),\n  dispensedAt: timestamp(\"dispensed_at\"),\n  dispensedBy: integer(\"dispensed_by\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Insurance Schemes\nexport const insuranceSchemes = pgTable(\"insurance_schemes\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  insurerName: text(\"insurer_name\").notNull(),\n  schemeType: text(\"scheme_type\").notNull(), // nhif, private, corporate\n  benefitCategories: text(\"benefit_categories\").array(),\n  copayPercentage: integer(\"copay_percentage\").default(0),\n  maximumBenefit: integer(\"maximum_benefit\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Benefit Usage Tracking\nexport const benefitUsage = pgTable(\"benefit_usage\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  schemeId: integer(\"scheme_id\").references(() => insuranceSchemes.id).notNull(),\n  benefitCategory: text(\"benefit_category\").notNull(),\n  usedAmount: integer(\"used_amount\").notNull().default(0),\n  remainingAmount: integer(\"remaining_amount\"),\n  lastUsed: timestamp(\"last_used\"),\n  resetDate: timestamp(\"reset_date\"),\n});\n\n// Pharmacy Dispensing Records\nexport const dispensingRecords = pgTable(\"dispensing_records\", {\n  id: serial(\"id\").primaryKey(),\n  prescriptionId: integer(\"prescription_id\").references(() => prescriptions.id).notNull(),\n  pharmacistId: integer(\"pharmacist_id\").references(() => users.id).notNull(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  medicationName: text(\"medication_name\").notNull(),\n  quantityDispensed: integer(\"quantity_dispensed\").notNull(),\n  daysSupply: integer(\"days_supply\"),\n  benefitUsed: integer(\"benefit_used\"),\n  copayAmount: integer(\"copay_amount\"),\n  preauthorizationRequired: boolean(\"preauthorization_required\").default(false),\n  preauthorizationStatus: text(\"preauthorization_status\"),\n  dispensedAt: timestamp(\"dispensed_at\").defaultNow().notNull(),\n});\n\n// Claim Appeals for Patient Dashboard\nexport const claimAppeals = pgTable(\"claim_appeals\", {\n  id: serial(\"id\").primaryKey(),\n  claimId: integer(\"claim_id\").references(() => claims.id).notNull(),\n  patientId: integer(\"patient_id\").references(() => patients.id).notNull(),\n  appealReason: text(\"appeal_reason\").notNull(),\n  supportingDocuments: text(\"supporting_documents\").array(),\n  status: text(\"status\").notNull().default(\"submitted\"), // submitted, under_review, approved, denied\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  reviewNotes: text(\"review_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\n// Relations\nexport const careProvidersRelations = relations(careProviders, ({ many }) => ({\n  users: many(users),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  careProvider: one(careProviders, {\n    fields: [users.careProviderId],\n    references: [careProviders.id],\n  }),\n  claims: many(claims),\n  preauthorizations: many(preauthorizations),\n  prescriptions: many(prescriptions),\n}));\n\nexport const patientsRelations = relations(patients, ({ many }) => ({\n  dependents: many(dependents),\n  benefits: many(benefits),\n  claims: many(claims),\n  preauthorizations: many(preauthorizations),\n  prescriptions: many(prescriptions),\n}));\n\nexport const claimsRelations = relations(claims, ({ one, many }) => ({\n  patient: one(patients, {\n    fields: [claims.patientId],\n    references: [patients.id],\n  }),\n  provider: one(providers, {\n    fields: [claims.providerId],\n    references: [providers.id],\n  }),\n  submittedByUser: one(users, {\n    fields: [claims.submittedBy],\n    references: [users.id],\n  }),\n  preauthorizations: many(preauthorizations),\n  prescriptions: many(prescriptions),\n}));\n\nexport const providersRelations = relations(providers, ({ many }) => ({\n  claims: many(claims),\n  fraudAlerts: many(fraudAlerts),\n}));\n\n// Zod schemas\nexport const insertCareProviderSchema = createInsertSchema(careProviders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  lastLogin: true,\n  verificationDate: true,\n}).extend({\n  confirmPassword: z.string().min(8),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClaimSchema = createInsertSchema(claims).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPreauthorizationSchema = createInsertSchema(preauthorizations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLabOrderSchema = createInsertSchema(labOrders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientQueueSchema = createInsertSchema(patientQueue).omit({\n  id: true,\n  checkedInAt: true,\n});\n\nexport const insertConsultationSchema = createInsertSchema(consultations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDispensingRecordSchema = createInsertSchema(dispensingRecords).omit({\n  id: true,\n  dispensedAt: true,\n});\n\nexport const insertClaimAppealSchema = createInsertSchema(claimAppeals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInsurancePolicySchema = createInsertSchema(insurancePolicies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOnboardingAuditSchema = createInsertSchema(onboardingAudits).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertSampleClaimFlowSchema = createInsertSchema(sampleClaimFlows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const onboardingFormSchema = z.object({\n  organizationType: z.enum([\"hospital\", \"clinic\", \"pharmacy-chain\", \"insurer\"]),\n  organizationName: z.string().min(2, \"Organization name is required\"),\n  domain: z.string().min(3, \"Domain is required\").regex(/^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$/, \"Invalid domain format\"),\n  contactPerson: z.string().min(2, \"Contact person is required\"),\n  contactEmail: z.string().email(\"Valid email is required\"),\n  contactPhone: z.string().min(10, \"Valid phone number is required\"),\n  address: z.string().min(10, \"Complete address is required\"),\n  licenseNumber: z.string().min(5, \"License number is required\"),\n  schemesSupported: z.array(z.string()).min(1, \"Select at least one scheme\"),\n  branch: z.string().optional(),\n  servicesOffered: z.array(z.string()).optional(),\n  specializations: z.array(z.string()).optional(),\n  operatingHours: z.string().optional(),\n  emergencyServices: z.boolean().optional(),\n});\n\nexport const userPermissionSchema = z.object({\n  providerId: z.number(),\n  users: z.array(z.object({\n    name: z.string().min(2),\n    email: z.string().email(),\n    role: z.enum([\"doctor\", \"pharmacist\", \"care-manager\", \"front-office\", \"admin\"]),\n    department: z.string().optional(),\n    cadre: z.string().optional(),\n    registrationNumber: z.string().optional(),\n    permissions: z.array(z.string()),\n  })),\n});\n\n// Types\nexport type CareProvider = typeof careProviders.$inferSelect;\nexport type InsertCareProvider = z.infer<typeof insertCareProviderSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Claim = typeof claims.$inferSelect;\nexport type InsertClaim = z.infer<typeof insertClaimSchema>;\nexport type Provider = typeof providers.$inferSelect;\nexport type Benefit = typeof benefits.$inferSelect;\nexport type Dependent = typeof dependents.$inferSelect;\nexport type Preauthorization = typeof preauthorizations.$inferSelect;\nexport type InsertPreauthorization = z.infer<typeof insertPreauthorizationSchema>;\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\nexport type FraudAlert = typeof fraudAlerts.$inferSelect;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type LabOrder = typeof labOrders.$inferSelect;\nexport type InsertLabOrder = z.infer<typeof insertLabOrderSchema>;\nexport type PatientQueue = typeof patientQueue.$inferSelect;\nexport type InsertPatientQueue = z.infer<typeof insertPatientQueueSchema>;\nexport type Consultation = typeof consultations.$inferSelect;\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type InsuranceScheme = typeof insuranceSchemes.$inferSelect;\nexport type BenefitUsage = typeof benefitUsage.$inferSelect;\nexport type DispensingRecord = typeof dispensingRecords.$inferSelect;\nexport type InsertDispensingRecord = z.infer<typeof insertDispensingRecordSchema>;\nexport type ClaimAppeal = typeof claimAppeals.$inferSelect;\nexport type InsertClaimAppeal = z.infer<typeof insertClaimAppealSchema>;\nexport type InsurancePolicy = typeof insurancePolicies.$inferSelect;\nexport type InsertInsurancePolicy = z.infer<typeof insertInsurancePolicySchema>;\nexport type OnboardingAudit = typeof onboardingAudits.$inferSelect;\nexport type InsertOnboardingAudit = z.infer<typeof insertOnboardingAuditSchema>;\nexport type SampleClaimFlow = typeof sampleClaimFlows.$inferSelect;\nexport type InsertSampleClaimFlow = z.infer<typeof insertSampleClaimFlowSchema>;\nexport type OnboardingForm = z.infer<typeof onboardingFormSchema>;\nexport type UserPermission = z.infer<typeof userPermissionSchema>;\n","size_bytes":26209},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, SessionTimeoutWarning } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Dashboard from \"@/pages/dashboard\";\nimport PatientVerification from \"@/pages/patient-verification\";\nimport ClaimsProcessing from \"@/pages/claims-processing\";\nimport AIPreauth from \"@/pages/ai-preauth\";\nimport Pharmacy from \"@/pages/pharmacy\";\nimport CareManager from \"@/pages/care-manager\";\nimport Blockchain from \"@/pages/blockchain\";\nimport Debtors from \"@/pages/debtors\";\nimport PatientQueue from \"@/pages/patient-queue\";\nimport ConsultationForm from \"@/pages/consultation-form\";\nimport EnhancedAuthPage from \"@/pages/enhanced-auth-page\";\nimport DoctorDashboard from \"@/pages/doctor-dashboard\";\nimport PharmacyDashboard from \"@/pages/pharmacy-dashboard\";\nimport CareManagerDashboard from \"@/pages/care-manager-dashboard\";\nimport InsurerDashboard from \"@/pages/insurer-dashboard\";\nimport PatientDashboard from \"@/pages/patient-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport DemoDashboard from \"@/pages/demo-dashboard\";\nimport AnalyticsPage from \"@/pages/analytics-page\";\nimport HMSIntegrationPage from \"@/pages/hms-integration\";\nimport OnboardingPage from \"@/pages/onboarding-page\";\nimport ModernAuthPage from \"@/pages/modern-auth-page\";\nimport ModernDoctorDashboard from \"@/pages/modern-doctor-dashboard-light\";\nimport ModernPharmacyDashboard from \"@/pages/modern-pharmacy-dashboard-light\";\nimport ModernCareManagerDashboard from \"@/pages/modern-care-manager\";\nimport ModernInsurerDashboard from \"@/pages/modern-insurer-dashboard\";\nimport ModernPatientDashboard from \"@/pages/modern-patient-dashboard\";\nimport ModernAdminDashboard from \"@/pages/modern-admin-dashboard-light\";\nimport ModernFrontOfficeDashboard from \"@/pages/modern-front-office-dashboard\";\nimport OnboardingManagement from \"@/pages/onboarding-management\";\nimport SupportDashboard from \"@/pages/support-dashboard\";\nimport MobileFieldWorker from \"@/pages/mobile-field-worker\";\nimport MobilePatientPortal from \"@/pages/mobile-patient-portal\";\nimport EnhancedSignup from \"@/pages/enhanced-signup\";\nimport DebtorsDashboard from \"@/pages/debtors-dashboard-light\";\nimport DirectDebtorsLogin from \"@/pages/direct-debtors-login\";\nimport SimpleDebtorsDashboard from \"@/pages/simple-debtors-dashboard\";\nimport DebtorsVerificationAudit from \"@/pages/debtors-verification-audit\";\nimport DoctorConsultation from \"@/pages/doctor-consultation\";\nimport FocusedClaims from \"@/pages/focused-claims\";\nimport BiometricDemo from \"@/pages/biometric-demo\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/verification\" component={PatientVerification} />\n      <ProtectedRoute path=\"/claims\" component={ClaimsProcessing} />\n      <ProtectedRoute path=\"/ai-preauth\" component={AIPreauth} />\n      <ProtectedRoute path=\"/pharmacy\" component={Pharmacy} />\n      <ProtectedRoute path=\"/care-manager\" component={CareManager} />\n      <ProtectedRoute path=\"/blockchain\" component={Blockchain} />\n      <ProtectedRoute path=\"/debtors\" component={Debtors} />\n      <ProtectedRoute path=\"/patient-queue\" component={PatientQueue} />\n      <ProtectedRoute path=\"/consultation\" component={ConsultationForm} />\n      \n      {/* New Role-Based Dashboards */}\n      <ProtectedRoute path=\"/doctor\" component={DoctorDashboard} />\n      <ProtectedRoute path=\"/pharmacy-dashboard\" component={PharmacyDashboard} />\n      <ProtectedRoute path=\"/care-manager-dashboard\" component={CareManagerDashboard} />\n      <ProtectedRoute path=\"/insurer\" component={InsurerDashboard} />\n      <ProtectedRoute path=\"/patient\" component={PatientDashboard} />\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <ProtectedRoute path=\"/analytics\" component={AnalyticsPage} />\n      <ProtectedRoute path=\"/hms-integration\" component={HMSIntegrationPage} />\n      <ProtectedRoute path=\"/onboarding-management\" component={OnboardingManagement} />\n      <ProtectedRoute path=\"/support-dashboard\" component={SupportDashboard} />\n      \n      {/* Mobile Applications */}\n      <ProtectedRoute path=\"/mobile-field-worker\" component={MobileFieldWorker} />\n      <ProtectedRoute path=\"/mobile-patient-portal\" component={MobilePatientPortal} />\n      \n      <Route path=\"/onboarding\" component={OnboardingPage} />\n      <Route path=\"/demo\" component={DemoDashboard} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/modern-auth\" component={ModernAuthPage} />\n      <Route path=\"/signup\" component={EnhancedSignup} />\n      <Route path=\"/secure-auth\" component={EnhancedAuthPage} />\n      <Route path=\"/direct-debtors-login\" component={DirectDebtorsLogin} />\n      \n      {/* Modern Dashboard Routes */}\n      <ProtectedRoute path=\"/modern-doctor\" component={ModernDoctorDashboard} />\n      <ProtectedRoute path=\"/modern-pharmacy\" component={ModernPharmacyDashboard} />\n      <ProtectedRoute path=\"/modern-care-manager\" component={ModernCareManagerDashboard} />\n      <ProtectedRoute path=\"/modern-insurer\" component={ModernInsurerDashboard} />\n      <ProtectedRoute path=\"/modern-patient\" component={ModernPatientDashboard} />\n      <ProtectedRoute path=\"/modern-admin\" component={ModernAdminDashboard} />\n      <ProtectedRoute path=\"/modern-front-office\" component={ModernFrontOfficeDashboard} />\n      <Route path=\"/debtors-dashboard\" component={DebtorsDashboard} />\n      <Route path=\"/simple-debtors-dashboard\" component={SimpleDebtorsDashboard} />\n      <Route path=\"/verification-audit\" component={DebtorsVerificationAudit} />\n      \n      {/* Legacy redirects */}\n      <ProtectedRoute path=\"/pharmacy-dashboard\" component={ModernPharmacyDashboard} />\n      <ProtectedRoute path=\"/doctor-consultation\" component={DoctorConsultation} />\n      \n      {/* Focused Claims Interface */}\n      <Route path=\"/focused-claims\" component={FocusedClaims} />\n      \n      {/* Biometric Demo */}\n      <ProtectedRoute path=\"/biometric-demo\" component={BiometricDemo} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <SessionTimeoutWarning />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6762},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 220 14% 4%;\n  --muted: 210 40% 98%;\n  --muted-foreground: 215 16% 47%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 224 71% 4%;\n  --card: 0 0% 100%;\n  --card-foreground: 224 71% 4%;\n  --border: 220 13% 91%;\n  --input: 220 13% 91%;\n  --primary: 180 42% 35%; /* #2D7A70 - Teal Primary */\n  --primary-foreground: 210 40% 98%;\n  --secondary: 180 33% 65%; /* #7DCDC4 - Teal Secondary */\n  --secondary-foreground: 222 84% 5%;\n  --accent: 210 40% 98%;\n  --accent-foreground: 222 84% 5%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 210 40% 98%;\n  --ring: 180 42% 35%;\n  --radius: 1rem; /* Modern rounded corners */\n  \n  /* Custom Erlessed colors - matching logo */\n  --erlessed-dark-teal: 173 44% 27%; /* #265651 - dark teal from logo */\n  --erlessed-light-teal: 172 42% 62%; /* #6BBDB4 - light teal from logo */\n  --erlessed-accent: 172 35% 75%; /* #9BCCC6 - lighter accent */\n  --surface: 180 30% 98%; /* #F8FAFA */\n  --medical-cross: 0 0% 100%; /* #FFFFFF - white cross accent */\n  --clinical-gray: 210 20% 98%; /* #F8FAFC */\n}\n\n.dark {\n  --background: 224 71% 4%;\n  --foreground: 213 31% 91%;\n  --muted: 223 47% 11%;\n  --muted-foreground: 215 14% 64%;\n  --popover: 224 71% 4%;\n  --popover-foreground: 215 21% 89%;\n  --card: 224 71% 4%;\n  --card-foreground: 213 31% 91%;\n  --border: 216 34% 17%;\n  --input: 216 34% 17%;\n  --primary: 180 42% 35%;\n  --primary-foreground: 210 40% 98%;\n  --secondary: 222 47% 11%;\n  --secondary-foreground: 213 31% 91%;\n  --accent: 216 34% 17%;\n  --accent-foreground: 210 40% 98%;\n  --destructive: 0 63% 31%;\n  --destructive-foreground: 210 40% 98%;\n  --ring: 180 42% 35%;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer components {\n  .medical-card {\n    @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200;\n  }\n  \n  .teal-button {\n    @apply bg-teal-primary text-white hover:bg-teal-dark focus:ring-2 focus:ring-teal-primary focus:ring-offset-2 transition-colors duration-200;\n  }\n  \n  .ai-indicator {\n    @apply inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700;\n  }\n  \n  .status-approved {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800;\n  }\n  \n  .status-pending {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800;\n  }\n  \n  .status-denied {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800;\n  }\n  \n  .biometric-scanner {\n    @apply relative w-24 h-24 mx-auto bg-gradient-to-br from-teal-primary to-teal-secondary rounded-full flex items-center justify-center shadow-lg;\n  }\n  \n  .fingerprint-icon {\n    @apply text-white text-3xl drop-shadow-sm;\n  }\n  \n  .blockchain-hash {\n    @apply font-mono text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded border text-gray-600 dark:text-gray-400 break-all;\n  }\n  \n  .medical-form-input {\n    @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-primary focus:border-transparent transition-all duration-200;\n  }\n  \n  .nav-item {\n    @apply flex items-center space-x-3 px-4 py-3 text-gray-600 hover:text-teal-primary hover:bg-teal-50 rounded-lg transition-colors duration-200 cursor-pointer;\n  }\n  \n  .nav-item.active {\n    @apply text-teal-primary bg-teal-50 font-medium;\n  }\n}\n\n/* Custom animations for healthcare UI */\n@keyframes pulse-slow {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n@keyframes scan-line {\n  0% {\n    transform: translateY(-100%);\n  }\n  100% {\n    transform: translateY(100%);\n  }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.animate-scan {\n  animation: scan-line 2s ease-in-out infinite;\n}\n\n/* Medical chart styles */\n.medical-chart {\n  @apply bg-white rounded-lg border border-gray-200 p-4;\n}\n\n/* Accessibility improvements */\n@media (prefers-reduced-motion: reduce) {\n  .animate-pulse-slow,\n  .animate-scan,\n  .transition-all,\n  .transition-colors,\n  .transition-shadow {\n    animation: none;\n    transition: none;\n  }\n}\n\n/* Print styles for medical documents */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .medical-card {\n    @apply shadow-none border border-gray-400;\n  }\n}\n","size_bytes":4510},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BiometricManagement.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger\n} from '@/components/ui/dialog';\nimport { \n  Fingerprint, \n  Shield, \n  RotateCcw, \n  History, \n  AlertTriangle,\n  Clock,\n  User,\n  CheckCircle,\n  XCircle\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface BiometricManagementProps {\n  patientId: string;\n  patientName?: string;\n  className?: string;\n}\n\ninterface AuditLog {\n  _id: string;\n  patientId: string;\n  action: string;\n  userId: string;\n  userRole: string;\n  deviceId?: string;\n  ipAddress: string;\n  timestamp: string;\n  details: {\n    success?: boolean;\n    errorMessage?: string;\n    verificationScore?: number;\n    reason?: string;\n  };\n}\n\nexport function BiometricManagement({ patientId, patientName, className }: BiometricManagementProps) {\n  const [resetReason, setResetReason] = useState('');\n  const [showResetDialog, setShowResetDialog] = useState(false);\n  const [showAuditLogs, setShowAuditLogs] = useState(false);\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Check if user can reset fingerprints\n  const canResetFingerprints = user?.role && ['care_manager', 'insurer', 'admin'].includes(user.role);\n\n  // Get biometric info\n  const { data: biometricInfo, isLoading } = useQuery({\n    queryKey: [`/api/biometric/info/${patientId}`],\n    enabled: !!patientId\n  });\n\n  // Get audit logs\n  const { data: auditData } = useQuery({\n    queryKey: [`/api/biometric/audit/${patientId}`],\n    enabled: showAuditLogs && !!patientId\n  });\n\n  // Reset fingerprint mutation\n  const resetMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/biometric/reset/${patientId}`, {\n        method: 'POST',\n        body: { reason: resetReason }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/biometric/info/${patientId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/biometric/audit/${patientId}`] });\n      setShowResetDialog(false);\n      setResetReason('');\n    }\n  });\n\n  // Complete reset mutation\n  const completeResetMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/biometric/reset/${patientId}/complete`, {\n        method: 'POST'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/biometric/info/${patientId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/biometric/audit/${patientId}`] });\n    }\n  });\n\n  const handleResetRequest = async () => {\n    if (!resetReason.trim()) return;\n    resetMutation.mutate();\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case 'register':\n        return <Fingerprint className=\"h-4 w-4 text-blue-500\" />;\n      case 'verify':\n        return <Shield className=\"h-4 w-4 text-green-500\" />;\n      case 'reset_request':\n      case 'reset_approved':\n        return <RotateCcw className=\"h-4 w-4 text-orange-500\" />;\n      case 'verification_failed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <History className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getActionLabel = (action: string) => {\n    switch (action) {\n      case 'register':\n        return 'Registration';\n      case 'verify':\n        return 'Verification';\n      case 'reset_request':\n        return 'Reset Requested';\n      case 'reset_approved':\n        return 'Reset Approved';\n      case 'verification_failed':\n        return 'Verification Failed';\n      default:\n        return action;\n    }\n  };\n\n  const getStatusBadge = (details: AuditLog['details']) => {\n    if (details.success === true) {\n      return <Badge variant=\"outline\" className=\"text-green-600 border-green-300\">Success</Badge>;\n    } else if (details.success === false) {\n      return <Badge variant=\"outline\" className=\"text-red-600 border-red-300\">Failed</Badge>;\n    }\n    return <Badge variant=\"outline\">Info</Badge>;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={cn(\"w-full\", className)}>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-[#265651]\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Biometric Status Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Fingerprint className=\"h-5 w-5 text-[#265651]\" />\n            Biometric Status\n            {patientName && <span className=\"text-sm font-normal text-gray-600\">- {patientName}</span>}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">Patient ID</Label>\n              <Badge variant=\"outline\">{patientId}</Badge>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">Registration Status</Label>\n              {biometricInfo?.info ? (\n                <Badge variant=\"default\" className=\"bg-green-100 text-green-800 border-green-300\">\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                  Registered\n                </Badge>\n              ) : (\n                <Badge variant=\"outline\" className=\"text-gray-600\">\n                  <XCircle className=\"w-3 h-3 mr-1\" />\n                  Not Registered\n                </Badge>\n              )}\n            </div>\n\n            {biometricInfo?.info && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Registered Date</Label>\n                  <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    {new Date(biometricInfo.info.registeredAt).toLocaleString()}\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <Badge \n                    variant={biometricInfo.info.status === 'active' ? 'default' : 'secondary'}\n                    className={cn(\n                      biometricInfo.info.status === 'active' && \"bg-green-100 text-green-800 border-green-300\"\n                    )}\n                  >\n                    {biometricInfo.info.status}\n                  </Badge>\n                </div>\n              </>\n            )}\n          </div>\n\n          {!biometricInfo?.info && (\n            <Alert className=\"border-orange-200 bg-orange-50\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                No biometric data registered for this patient. Patient needs to complete fingerprint registration.\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Management Actions */}\n      {canResetFingerprints && biometricInfo?.info && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5 text-[#265651]\" />\n              Biometric Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert className=\"border-yellow-200 bg-yellow-50\">\n              <Shield className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Administrator Controls:</strong> Use these options only when necessary for security or technical issues.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"flex gap-3\">\n              <Dialog open={showResetDialog} onOpenChange={setShowResetDialog}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"border-orange-300 text-orange-700 hover:bg-orange-50\">\n                    <RotateCcw className=\"mr-2 h-4 w-4\" />\n                    Request Reset\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Request Fingerprint Reset</DialogTitle>\n                    <DialogDescription>\n                      This will archive the current fingerprint and require the patient to register a new one. \n                      Please provide a reason for this reset.\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"reason\">Reset Reason</Label>\n                      <Textarea\n                        id=\"reason\"\n                        value={resetReason}\n                        onChange={(e) => setResetReason(e.target.value)}\n                        placeholder=\"Please explain why this fingerprint reset is necessary...\"\n                        className=\"mt-1\"\n                        rows={3}\n                      />\n                    </div>\n                    \n                    <div className=\"flex gap-2 justify-end\">\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setShowResetDialog(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleResetRequest}\n                        disabled={!resetReason.trim() || resetMutation.isPending}\n                        className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n                      >\n                        {resetMutation.isPending ? 'Requesting...' : 'Request Reset'}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              <Button\n                variant=\"outline\"\n                onClick={() => completeResetMutation.mutate()}\n                disabled={completeResetMutation.isPending}\n                className=\"border-red-300 text-red-700 hover:bg-red-50\"\n              >\n                <XCircle className=\"mr-2 h-4 w-4\" />\n                {completeResetMutation.isPending ? 'Completing...' : 'Complete Reset'}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Audit Logs */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <History className=\"h-5 w-5 text-[#265651]\" />\n              Audit Logs\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowAuditLogs(!showAuditLogs)}\n            >\n              {showAuditLogs ? 'Hide' : 'Show'} Logs\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        \n        {showAuditLogs && (\n          <CardContent>\n            {auditData?.logs?.length > 0 ? (\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {auditData.logs.map((log: AuditLog) => (\n                  <div \n                    key={log._id}\n                    className=\"flex items-start gap-3 p-3 border rounded-lg bg-gray-50\"\n                  >\n                    {getActionIcon(log.action)}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"font-medium text-sm\">\n                          {getActionLabel(log.action)}\n                        </span>\n                        {getStatusBadge(log.details)}\n                      </div>\n                      \n                      <div className=\"text-xs text-gray-600 space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-3 w-3\" />\n                          <span>By: {log.userRole}</span>\n                          <Clock className=\"h-3 w-3 ml-2\" />\n                          <span>{new Date(log.timestamp).toLocaleString()}</span>\n                        </div>\n                        \n                        {log.details.errorMessage && (\n                          <div className=\"text-red-600\">\n                            Error: {log.details.errorMessage}\n                          </div>\n                        )}\n                        \n                        {log.details.verificationScore && (\n                          <div className=\"text-green-600\">\n                            Match: {Math.round(log.details.verificationScore)}%\n                          </div>\n                        )}\n                        \n                        {log.details.reason && (\n                          <div>\n                            Reason: {log.details.reason}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-center text-gray-500 py-8\">\n                No audit logs found for this patient.\n              </p>\n            )}\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}","size_bytes":14059},"client/src/components/BiometricScanner.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Fingerprint, CheckCircle, AlertCircle, Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface BiometricScannerProps {\n  mode: 'register' | 'verify';\n  patientId: string;\n  onSuccess?: (data: any) => void;\n  onError?: (error: string) => void;\n  className?: string;\n}\n\nexport function BiometricScanner({ \n  mode, \n  patientId, \n  onSuccess, \n  onError, \n  className \n}: BiometricScannerProps) {\n  const [scanning, setScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [scanResult, setScanResult] = useState<'success' | 'failed' | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [verificationScore, setVerificationScore] = useState(0);\n\n  // Simulate fingerprint scanning with progressive updates\n  const simulateFingerprint = async (): Promise<string> => {\n    setScanning(true);\n    setScanProgress(0);\n    setScanResult(null);\n    setErrorMessage('');\n\n    // Progressive scanning simulation\n    const steps = [\n      { progress: 15, message: 'Initializing scanner...' },\n      { progress: 30, message: 'Detecting finger placement...' },\n      { progress: 50, message: 'Capturing ridge patterns...' },\n      { progress: 70, message: 'Analyzing minutiae points...' },\n      { progress: 85, message: 'Generating biometric hash...' },\n      { progress: 100, message: 'Scan complete!' }\n    ];\n\n    for (const step of steps) {\n      await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 200));\n      setScanProgress(step.progress);\n    }\n\n    // Generate mock fingerprint data (base64 encoded)\n    const timestamp = Date.now();\n    const randomData = Array.from({length: 64}, () => \n      Math.floor(Math.random() * 256).toString(16).padStart(2, '0')\n    ).join('');\n    \n    return btoa(`fingerprint_${patientId}_${timestamp}_${randomData}`);\n  };\n\n  const handleScan = async () => {\n    try {\n      const fingerprintData = await simulateFingerprint();\n      \n      const endpoint = mode === 'register' \n        ? '/api/biometric/register'\n        : '/api/biometric/verify';\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          patientId,\n          fingerprintData,\n          deviceId: `web_${Date.now()}`\n        })\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        setScanResult('success');\n        if (mode === 'verify' && result.verificationScore) {\n          setVerificationScore(result.verificationScore);\n        }\n        onSuccess?.(result);\n      } else {\n        setScanResult('failed');\n        setErrorMessage(result.error || 'Biometric operation failed');\n        onError?.(result.error || 'Biometric operation failed');\n      }\n    } catch (error) {\n      setScanResult('failed');\n      const errorMsg = error instanceof Error ? error.message : 'Network error occurred';\n      setErrorMessage(errorMsg);\n      onError?.(errorMsg);\n    } finally {\n      setScanning(false);\n    }\n  };\n\n  return (\n    <Card className={cn(\"w-full max-w-md mx-auto\", className)}>\n      <CardHeader className=\"text-center pb-4\">\n        <CardTitle className=\"flex items-center justify-center gap-2\">\n          <Fingerprint className=\"h-6 w-6 text-[#265651]\" />\n          {mode === 'register' ? 'Register Fingerprint' : 'Verify Identity'}\n        </CardTitle>\n        <Badge variant=\"outline\" className=\"mx-auto\">\n          Patient ID: {patientId}\n        </Badge>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Scanner Visualization */}\n        <div className=\"relative\">\n          <div className={cn(\n            \"w-32 h-32 mx-auto rounded-full border-4 flex items-center justify-center transition-all duration-300\",\n            scanning ? \"border-[#265651] bg-[#265651]/10 animate-pulse\" : \"border-gray-300\",\n            scanResult === 'success' && \"border-green-500 bg-green-50\",\n            scanResult === 'failed' && \"border-red-500 bg-red-50\"\n          )}>\n            {scanning ? (\n              <Loader2 className=\"h-12 w-12 text-[#265651] animate-spin\" />\n            ) : scanResult === 'success' ? (\n              <CheckCircle className=\"h-12 w-12 text-green-500\" />\n            ) : scanResult === 'failed' ? (\n              <AlertCircle className=\"h-12 w-12 text-red-500\" />\n            ) : (\n              <Fingerprint className=\"h-12 w-12 text-gray-400\" />\n            )}\n          </div>\n\n          {/* Progress Ring */}\n          {scanning && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <svg className=\"w-36 h-36 transform -rotate-90\">\n                <circle\n                  cx=\"72\"\n                  cy=\"72\"\n                  r=\"68\"\n                  stroke=\"#e5e7eb\"\n                  strokeWidth=\"4\"\n                  fill=\"transparent\"\n                />\n                <circle\n                  cx=\"72\"\n                  cy=\"72\"\n                  r=\"68\"\n                  stroke=\"#265651\"\n                  strokeWidth=\"4\"\n                  fill=\"transparent\"\n                  strokeDasharray={427}\n                  strokeDashoffset={427 - (427 * scanProgress) / 100}\n                  className=\"transition-all duration-300 ease-out\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n\n        {/* Progress Bar */}\n        {scanning && (\n          <div className=\"space-y-2\">\n            <Progress value={scanProgress} className=\"w-full\" />\n            <p className=\"text-sm text-center text-gray-600\">\n              {scanProgress < 100 ? 'Scanning...' : 'Processing...'}\n            </p>\n          </div>\n        )}\n\n        {/* Verification Score */}\n        {scanResult === 'success' && mode === 'verify' && verificationScore > 0 && (\n          <Alert className=\"border-green-200 bg-green-50\">\n            <CheckCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Verification successful! Match confidence: {Math.round(verificationScore)}%\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Error Message */}\n        {scanResult === 'failed' && errorMessage && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              {errorMessage}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3\">\n          <Button\n            onClick={handleScan}\n            disabled={scanning}\n            className=\"w-full bg-[#265651] hover:bg-[#1d453f] text-white\"\n          >\n            {scanning ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Scanning...\n              </>\n            ) : (\n              <>\n                <Fingerprint className=\"mr-2 h-4 w-4\" />\n                {mode === 'register' ? 'Register Fingerprint' : 'Verify Fingerprint'}\n              </>\n            )}\n          </Button>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"text-sm text-gray-600 text-center space-y-2\">\n          <p>\n            {mode === 'register' \n              ? 'Place your finger on the scanner to register'\n              : 'Verify your identity using the same finger used during registration'\n            }\n          </p>\n          <p className=\"text-xs text-gray-500\">\n            Ensure your finger is clean and dry for best results\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7971},"client/src/components/BiometricVerificationFlow.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { BiometricScanner } from './BiometricScanner';\nimport { \n  User, \n  Fingerprint, \n  CheckCircle, \n  AlertTriangle, \n  ArrowRight,\n  Shield,\n  Clock,\n  UserCheck\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\n\ninterface BiometricVerificationFlowProps {\n  patientId: string;\n  patientName?: string;\n  onVerificationSuccess?: (result: any) => void;\n  onRegistrationComplete?: (result: any) => void;\n  redirectTo?: string;\n  className?: string;\n}\n\ninterface BiometricInfo {\n  info: {\n    patientId: string;\n    fingerprintHash: string;\n    registeredBy: string;\n    registeredAt: string;\n    status: 'active' | 'archived' | 'pending_reset';\n  } | null;\n  message?: string;\n}\n\nexport function BiometricVerificationFlow({\n  patientId,\n  patientName,\n  onVerificationSuccess,\n  onRegistrationComplete,\n  redirectTo,\n  className\n}: BiometricVerificationFlowProps) {\n  const [step, setStep] = useState<'checking' | 'register' | 'verify' | 'success'>('checking');\n  const [showRegistration, setShowRegistration] = useState(false);\n  const [verificationResult, setVerificationResult] = useState<any>(null);\n  const [, setLocation] = useLocation();\n\n  // Check if fingerprint exists for patient\n  const { data: biometricInfo, isLoading } = useQuery<BiometricInfo>({\n    queryKey: [`/api/biometric/info/${patientId}`],\n    enabled: !!patientId\n  });\n\n  useEffect(() => {\n    if (!isLoading && biometricInfo) {\n      if (biometricInfo.info && biometricInfo.info.status === 'active') {\n        setStep('verify');\n      } else {\n        setStep('register');\n      }\n    }\n  }, [biometricInfo, isLoading]);\n\n  const handleRegistrationSuccess = (result: any) => {\n    setStep('verify');\n    setShowRegistration(false);\n    onRegistrationComplete?.(result);\n  };\n\n  const handleVerificationSuccess = (result: any) => {\n    setVerificationResult(result);\n    setStep('success');\n    onVerificationSuccess?.(result);\n  };\n\n  const handleProceed = () => {\n    if (redirectTo) {\n      setLocation(redirectTo);\n    }\n  };\n\n  const renderStepIndicator = () => {\n    const steps = [\n      { id: 'checking', label: 'Checking', icon: User },\n      { id: 'register', label: 'Register', icon: Fingerprint },\n      { id: 'verify', label: 'Verify', icon: Shield },\n      { id: 'success', label: 'Complete', icon: CheckCircle }\n    ];\n\n    return (\n      <div className=\"flex items-center justify-center mb-6\">\n        {steps.map((stepItem, index) => {\n          const Icon = stepItem.icon;\n          const isActive = step === stepItem.id;\n          const isCompleted = ['register', 'verify', 'success'].indexOf(step) > \n                           ['register', 'verify', 'success'].indexOf(stepItem.id);\n          \n          return (\n            <div key={stepItem.id} className=\"flex items-center\">\n              <div className={cn(\n                \"flex items-center justify-center w-10 h-10 rounded-full border-2 transition-colors\",\n                isActive && \"border-[#265651] bg-[#265651] text-white\",\n                isCompleted && \"border-green-500 bg-green-500 text-white\",\n                !isActive && !isCompleted && \"border-gray-300 text-gray-400\"\n              )}>\n                <Icon className=\"w-5 h-5\" />\n              </div>\n              {index < steps.length - 1 && (\n                <div className={cn(\n                  \"w-12 h-px mx-2 transition-colors\",\n                  isCompleted && \"bg-green-500\",\n                  !isCompleted && \"bg-gray-300\"\n                )} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={cn(\"w-full max-w-lg mx-auto\", className)}>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#265651]\"></div>\n          <span className=\"ml-3 text-gray-600\">Checking biometric status...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn(\"w-full max-w-2xl mx-auto space-y-6\", className)}>\n      {renderStepIndicator()}\n\n      {/* Patient Information Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <UserCheck className=\"h-5 w-5 text-[#265651]\" />\n            Patient Verification\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"font-medium\">Patient ID:</span>\n              <Badge variant=\"outline\">{patientId}</Badge>\n            </div>\n            {patientName && (\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Patient Name:</span>\n                <span>{patientName}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between items-center\">\n              <span className=\"font-medium\">Biometric Status:</span>\n              <Badge variant={biometricInfo?.info ? 'default' : 'secondary'}>\n                {biometricInfo?.info ? 'Registered' : 'Not Registered'}\n              </Badge>\n            </div>\n            {biometricInfo?.info && (\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Registered:</span>\n                <span className=\"text-sm text-gray-600 flex items-center gap-1\">\n                  <Clock className=\"h-4 w-4\" />\n                  {new Date(biometricInfo.info.registeredAt).toLocaleDateString()}\n                </span>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Flow Card */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          {step === 'register' && (\n            <div className=\"text-center space-y-6\">\n              <Alert className=\"border-orange-200 bg-orange-50\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>No biometric data found.</strong> Please register fingerprint to proceed with secure verification.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Fingerprint Registration Required</h3>\n                <p className=\"text-gray-600\">\n                  To ensure secure patient identity verification, we need to register your fingerprint. \n                  This is a one-time setup that will enable quick verification for future visits.\n                </p>\n                \n                <Button \n                  onClick={() => setShowRegistration(true)}\n                  className=\"bg-[#265651] hover:bg-[#1d453f] text-white\"\n                >\n                  <Fingerprint className=\"mr-2 h-4 w-4\" />\n                  Register Fingerprint\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {step === 'verify' && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold mb-2\">Identity Verification</h3>\n                <p className=\"text-gray-600\">\n                  Place your finger on the scanner to verify your identity and proceed.\n                </p>\n              </div>\n              \n              <BiometricScanner\n                mode=\"verify\"\n                patientId={patientId}\n                onSuccess={handleVerificationSuccess}\n                onError={(error) => console.error('Verification failed:', error)}\n              />\n            </div>\n          )}\n\n          {step === 'success' && (\n            <div className=\"text-center space-y-6\">\n              <div className=\"w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              </div>\n              \n              <div>\n                <h3 className=\"text-lg font-semibold text-green-800\">Verification Successful!</h3>\n                <p className=\"text-gray-600 mt-2\">\n                  Identity confirmed. You can now proceed to your requested service.\n                </p>\n                {verificationResult?.verificationScore && (\n                  <Badge variant=\"outline\" className=\"mt-3\">\n                    Match: {Math.round(verificationResult.verificationScore)}%\n                  </Badge>\n                )}\n              </div>\n\n              <div className=\"space-y-3\">\n                {redirectTo && (\n                  <Button \n                    onClick={handleProceed}\n                    className=\"w-full bg-[#265651] hover:bg-[#1d453f] text-white\"\n                  >\n                    <ArrowRight className=\"mr-2 h-4 w-4\" />\n                    Proceed to {redirectTo.includes('pharmacy') ? 'Pharmacy' : 'Front Desk'}\n                  </Button>\n                )}\n                \n                <div className=\"flex gap-3 justify-center\">\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setLocation('/modern-pharmacy')}\n                  >\n                    Pharmacy\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setLocation('/front-desk')}\n                  >\n                    Front Desk\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Registration Dialog */}\n      <Dialog open={showRegistration} onOpenChange={setShowRegistration}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Register Fingerprint</DialogTitle>\n            <DialogDescription>\n              This will securely register your fingerprint for future identity verification.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <BiometricScanner\n            mode=\"register\"\n            patientId={patientId}\n            onSuccess={handleRegistrationSuccess}\n            onError={(error) => console.error('Registration failed:', error)}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":10778},"client/src/components/Dashboard.tsx":{"content":"interface DashboardProps {\n  user: {\n    name: string;\n    role: string;\n    isPremium?: boolean;\n  };\n}\n\nexport default function Dashboard({ user }: DashboardProps) {\n  const notes = {\n    doctor: \"Erlessed pulls vitals, prescriptions & patient info from your hospital system. If diagnosis is missing, please enter manually to complete the claim.\",\n    pharmacy: \"Inventory & dispensing records are managed in-house. Erlessed helps you map prescriptions to insurer benefit rules only.\",\n    \"front-office\": \"Registration, walk-ins, and appointments are managed in your hospital's system. Erlessed begins from patient verification and claim initiation only.\",\n  };\n\n  return (\n    <div className=\"bg-white/5 p-6 rounded-xl space-y-6\">\n      <h2 className=\"text-2xl font-semibold mb-2\">\n        Welcome, {user.name}\n      </h2>\n      <p className=\"text-sm text-white/70 max-w-xl\">{notes[user.role as keyof typeof notes]}</p>\n\n      <div className=\"mt-4 text-white/80 text-sm bg-white/10 p-4 rounded\">\n        <strong>Reminder:</strong> Erlessed is a claims and clearinghouse platform. It does not handle:\n        <ul className=\"list-disc ml-5 mt-2 space-y-1\">\n          <li>Inventory or stock management</li>\n          <li>Triage or appointment booking</li>\n          <li>New patient registration</li>\n          <li>Detailed prescription writing</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":1394},"client/src/components/Sidebar.tsx":{"content":"const menuItems = {\n  doctor: [\n    \"Assigned Patients\",\n    \"Confirm Diagnosis\",\n    \"Clinical Claim Review\",\n    \"Submit Claim Packet\"\n  ],\n  pharmacy: [\n    \"Prescription Mapping\",\n    \"Formulary Check\",\n    \"Drug Cost Review\",\n    \"Submit Claim\"\n  ],\n  \"front-office\": [\n    \"Patient Verification\",\n    \"Initiate Claim\",\n    \"Preauthorization\",\n    \"Claim Status\"\n  ],\n};\n\nexport default function Sidebar({ role }: { role: string }) {\n  return (\n    <aside className=\"w-64 p-4 space-y-4\">\n      <div className=\"text-2xl font-bold text-[#78A8FF]\">ERLESSED</div>\n      <div className=\"text-sm text-white/60\">Focused Claims Interface</div>\n      <nav className=\"mt-6 space-y-2\">\n        {menuItems[role as keyof typeof menuItems]?.map((item) => (\n          <div\n            key={item}\n            className=\"p-2 rounded hover:bg-white/10 transition text-white cursor-pointer\"\n          >\n            {item}\n          </div>\n        ))}\n      </nav>\n    </aside>\n  );\n}","size_bytes":969},"client/src/components/active-lab-orders.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  TestTube, \n  Clock, \n  Calendar,\n  X,\n  AlertTriangle\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface LabOrder {\n  id: number;\n  serviceName: string;\n  serviceCode?: string;\n  instructions: string;\n  durationDays: number;\n  expiresAt: string;\n  createdAt: string;\n  status: string;\n}\n\ninterface ActiveLabOrdersProps {\n  patientId: string;\n  doctorId: number;\n}\n\nexport default function ActiveLabOrders({ patientId, doctorId }: ActiveLabOrdersProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [cancelDialog, setCancelDialog] = useState<{ open: boolean; labId?: number }>({ open: false });\n  const [cancelReason, setCancelReason] = useState(\"\");\n  const [reviewConsultationDialog, setReviewConsultationDialog] = useState(false);\n  const [cancelledOrderDetails, setCancelledOrderDetails] = useState<any>(null);\n\n  // Fetch active lab orders\n  const { data: labOrders = [], isLoading } = useQuery<LabOrder[]>({\n    queryKey: [`/api/services/patient/${patientId}/lab`],\n    enabled: !!patientId\n  });\n\n  // Cancel lab order mutation\n  const cancelMutation = useMutation({\n    mutationFn: async ({ labId, reason }: { labId: number; reason: string }) => {\n      return await apiRequest('/api/lab-orders/cancel', 'POST', {\n        labId,\n        doctorId,\n        reason\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Lab Order Cancelled\",\n        description: \"The lab order has been successfully cancelled.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/services/patient/${patientId}/lab`] });\n      setCancelDialog({ open: false });\n      setCancelReason(\"\");\n      \n      // Store cancelled order details and show review consultation prompt\n      setCancelledOrderDetails(data.order);\n      setReviewConsultationDialog(true);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Cancellation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Create review consultation mutation\n  const reviewConsultationMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/consultations/review', 'POST', {\n        patientId,\n        doctorId,\n        reason: \"Review consultation for cancelled lab order\",\n        cancelledLabId: cancelledOrderDetails?.id,\n        originalService: cancelledOrderDetails?.serviceName\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Review Consultation Created\",\n        description: \"A new review consultation has been initiated for this patient.\",\n      });\n      setReviewConsultationDialog(false);\n      setCancelledOrderDetails(null);\n      \n      // Navigate to the new consultation\n      window.location.href = `/doctor-consultation?patientId=${patientId}&consultationId=${data.id}`;\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Create Review Consultation\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleCancelClick = (labId: number) => {\n    setCancelDialog({ open: true, labId });\n  };\n\n  const handleConfirmCancel = () => {\n    if (!cancelDialog.labId || !cancelReason.trim()) {\n      toast({\n        title: \"Justification Required\",\n        description: \"Please provide a reason for cancelling this lab order.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    cancelMutation.mutate({\n      labId: cancelDialog.labId,\n      reason: cancelReason.trim()\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDaysRemaining = (expiresAt: string) => {\n    const expiry = new Date(expiresAt);\n    const today = new Date();\n    const diffTime = expiry.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TestTube className=\"h-5 w-5\" />\n            <span>Active Lab Orders</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"w-6 h-6 border-2 border-teal-500 border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TestTube className=\"h-5 w-5\" />\n            <span>Active Lab Orders</span>\n          </CardTitle>\n          <CardDescription>\n            Current active lab orders for this patient\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {labOrders.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-8\">No active lab orders</p>\n          ) : (\n            <div className=\"space-y-4\">\n              {labOrders.map((order) => {\n                const daysRemaining = getDaysRemaining(order.expiresAt);\n                const isExpiringSoon = daysRemaining <= 30;\n                const isExpired = daysRemaining <= 0;\n\n                return (\n                  <div key={order.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <h4 className=\"font-medium text-lg\">{order.serviceName}</h4>\n                          {order.serviceCode && (\n                            <Badge variant=\"outline\">{order.serviceCode}</Badge>\n                          )}\n                          <Badge \n                            variant={isExpired ? \"destructive\" : isExpiringSoon ? \"secondary\" : \"default\"}\n                          >\n                            {order.status}\n                          </Badge>\n                        </div>\n                        \n                        {order.instructions && (\n                          <p className=\"text-gray-600 mb-2\">\n                            <strong>Instructions:</strong> {order.instructions}\n                          </p>\n                        )}\n                        \n                        <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>Ordered: {formatDate(order.createdAt)}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-1\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span \n                              className={\n                                isExpired \n                                  ? \"text-red-600 font-medium\" \n                                  : isExpiringSoon \n                                    ? \"text-orange-600 font-medium\" \n                                    : \"\"\n                              }\n                            >\n                              {isExpired \n                                ? \"Expired\" \n                                : `${daysRemaining} days remaining`\n                              }\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <Button\n                        onClick={() => handleCancelClick(order.id)}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        disabled={cancelMutation.isPending}\n                      >\n                        <X className=\"h-4 w-4 mr-1\" />\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Cancel Confirmation Dialog */}\n      <Dialog open={cancelDialog.open} onOpenChange={(open) => setCancelDialog({ open })}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n              <span>Cancel Lab Order</span>\n            </DialogTitle>\n            <DialogDescription>\n              Please provide a justification for cancelling this lab order. This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"cancelReason\">Justification for Cancellation *</Label>\n              <Textarea\n                id=\"cancelReason\"\n                placeholder=\"Enter reason for cancelling this lab order...\"\n                value={cancelReason}\n                onChange={(e) => setCancelReason(e.target.value)}\n                className=\"min-h-[100px]\"\n              />\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setCancelDialog({ open: false })}\n              disabled={cancelMutation.isPending}\n            >\n              Keep Order\n            </Button>\n            <Button\n              onClick={handleConfirmCancel}\n              disabled={cancelMutation.isPending || !cancelReason.trim()}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              {cancelMutation.isPending ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                  Cancelling...\n                </>\n              ) : (\n                <>\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Cancel Order\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Review Consultation Prompt */}\n      <AlertDialog open={reviewConsultationDialog} onOpenChange={setReviewConsultationDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center space-x-2\">\n              <TestTube className=\"h-5 w-5 text-blue-500\" />\n              <span>Initiate Review Consultation?</span>\n            </AlertDialogTitle>\n            <AlertDialogDescription>\n              Lab order \"{cancelledOrderDetails?.serviceName}\" has been cancelled. \n              Would you like to create a new review consultation for this patient? \n              This will link to the same patient and insurer, approving prior billed consultation.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => {\n                setReviewConsultationDialog(false);\n                setCancelledOrderDetails(null);\n              }}\n              disabled={reviewConsultationMutation.isPending}\n            >\n              No, Skip Review\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => reviewConsultationMutation.mutate()}\n              disabled={reviewConsultationMutation.isPending}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {reviewConsultationMutation.isPending ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                  Creating...\n                </>\n              ) : (\n                \"Yes, Create Review Consultation\"\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":12972},"client/src/components/ai-decision-panel.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface AIDecisionPanelProps {\n  decision: {\n    aiDecision: string;\n    aiConfidence: number;\n    aiReasoning: {\n      reasoning?: {\n        step: number;\n        description: string;\n        factor: string;\n      }[];\n      riskFactors?: string[];\n      recommendations?: string[];\n    };\n    serviceType: string;\n    estimatedCost: string;\n  };\n}\n\nexport function AIDecisionPanel({ decision }: AIDecisionPanelProps) {\n  const getDecisionColor = (aiDecision: string) => {\n    switch (aiDecision) {\n      case 'approved': return 'border-green-200 bg-green-50';\n      case 'denied': return 'border-red-200 bg-red-50';\n      case 'review': return 'border-yellow-200 bg-yellow-50';\n      default: return 'border-gray-200 bg-gray-50';\n    }\n  };\n\n  const getDecisionIcon = (aiDecision: string) => {\n    switch (aiDecision) {\n      case 'approved': return 'fas fa-check-circle text-green-600';\n      case 'denied': return 'fas fa-times-circle text-red-600';\n      case 'review': return 'fas fa-exclamation-triangle text-yellow-600';\n      default: return 'fas fa-question-circle text-gray-600';\n    }\n  };\n\n  return (\n    <Card className={getDecisionColor(decision.aiDecision)}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <i className={getDecisionIcon(decision.aiDecision)}></i>\n          <span>AI Decision: {decision.aiDecision.toUpperCase()}</span>\n        </CardTitle>\n        <CardDescription>\n          {decision.serviceType} - ${parseFloat(decision.estimatedCost).toFixed(2)}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Confidence Score */}\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium\">AI Confidence</span>\n              <span className=\"text-sm font-bold\">{decision.aiConfidence}%</span>\n            </div>\n            <Progress value={decision.aiConfidence} className=\"h-2\" />\n          </div>\n\n          {/* Chain-of-Thought Reasoning */}\n          {decision.aiReasoning.reasoning && decision.aiReasoning.reasoning.length > 0 && (\n            <div>\n              <h4 className=\"font-medium text-gray-800 mb-3 flex items-center space-x-2\">\n                <i className=\"fas fa-brain text-blue-500\"></i>\n                <span>Chain-of-Thought Reasoning</span>\n              </h4>\n              \n              <div className=\"space-y-3\">\n                {decision.aiReasoning.reasoning.map((step, index) => (\n                  <div key={index} className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center text-xs font-bold text-blue-600\">\n                      {step.step}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-gray-700\">{step.description}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">Factor: {step.factor}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Risk Factors */}\n          {decision.aiReasoning.riskFactors && decision.aiReasoning.riskFactors.length > 0 && (\n            <div>\n              <h4 className=\"font-medium text-gray-800 mb-3 flex items-center space-x-2\">\n                <i className=\"fas fa-exclamation-triangle text-yellow-500\"></i>\n                <span>Risk Factors</span>\n              </h4>\n              <ul className=\"space-y-2\">\n                {decision.aiReasoning.riskFactors.map((risk, index) => (\n                  <li key={index} className=\"text-sm text-gray-700 flex items-start space-x-2\">\n                    <i className=\"fas fa-warning text-yellow-500 mt-0.5 text-xs\"></i>\n                    <span>{risk}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Recommendations */}\n          {decision.aiReasoning.recommendations && decision.aiReasoning.recommendations.length > 0 && (\n            <div>\n              <h4 className=\"font-medium text-gray-800 mb-3 flex items-center space-x-2\">\n                <i className=\"fas fa-lightbulb text-blue-500\"></i>\n                <span>AI Recommendations</span>\n              </h4>\n              <ul className=\"space-y-2\">\n                {decision.aiReasoning.recommendations.map((recommendation, index) => (\n                  <li key={index} className=\"text-sm text-gray-700 flex items-start space-x-2\">\n                    <i className=\"fas fa-arrow-right text-blue-500 mt-0.5 text-xs\"></i>\n                    <span>{recommendation}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 pt-4 border-t border-gray-200\">\n            {decision.aiDecision === 'approved' && (\n              <Button className=\"flex-1 teal-button\">\n                Accept & Process\n              </Button>\n            )}\n            {decision.aiDecision === 'review' && (\n              <Button className=\"flex-1 bg-yellow-600 hover:bg-yellow-700 text-white\">\n                Escalate to Human Review\n              </Button>\n            )}\n            {decision.aiDecision === 'denied' && (\n              <Button className=\"flex-1 bg-red-600 hover:bg-red-700 text-white\">\n                Submit Appeal\n              </Button>\n            )}\n            <Button variant=\"outline\" className=\"flex-1\">\n              Generate Report\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5876},"client/src/components/analytics-prognosis-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  LineChart, \n  Line, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  Legend\n} from \"recharts\";\nimport { \n  Brain,\n  TrendingUp,\n  TrendingDown,\n  Activity,\n  Heart,\n  AlertTriangle,\n  CheckCircle,\n  Users,\n  Calendar,\n  BarChart3,\n  Target,\n  Zap,\n  Shield\n} from \"lucide-react\";\n\ninterface PrognosisModel {\n  modelId: string;\n  modelName: string;\n  condition: string;\n  accuracy: number;\n  lastTrained: string;\n  dataPoints: number;\n  status: \"active\" | \"training\" | \"deprecated\";\n}\n\ninterface OutcomeMetrics {\n  patientId: string;\n  patientName: string;\n  condition: string;\n  initialDiagnosis: string;\n  treatmentPlan: string;\n  predictedOutcome: {\n    recoveryProbability: number;\n    timeToRecovery: number;\n    riskFactors: string[];\n    confidenceLevel: number;\n  };\n  actualOutcome?: {\n    status: \"recovered\" | \"improved\" | \"stable\" | \"deteriorated\";\n    timeToOutcome: number;\n    complications: string[];\n    followUpRequired: boolean;\n  };\n  lastUpdated: string;\n}\n\ninterface PopulationTrend {\n  timeperiod: string;\n  condition: string;\n  incidenceRate: number;\n  mortalityRate: number;\n  recoveryRate: number;\n  avgTreatmentCost: number;\n  riskScore: number;\n}\n\ninterface RiskAssessment {\n  patientId: string;\n  patientName: string;\n  age: number;\n  gender: string;\n  riskFactors: Array<{\n    factor: string;\n    severity: \"low\" | \"medium\" | \"high\";\n    impact: number;\n  }>;\n  overallRiskScore: number;\n  recommendations: string[];\n  nextReviewDate: string;\n}\n\nexport function AnalyticsPrognosisDashboard() {\n  const [selectedModel, setSelectedModel] = useState(\"diabetes-prediction\");\n  const [selectedCondition, setSelectedCondition] = useState(\"all\");\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"6months\");\n  const [analysisType, setAnalysisType] = useState(\"population\");\n\n  // Fetch prognosis models\n  const { data: prognosisModels, isLoading: modelsLoading } = useQuery({\n    queryKey: [\"/api/analytics/prognosis-models\"],\n    queryFn: async () => [\n      {\n        modelId: \"diabetes-prediction\",\n        modelName: \"Diabetes Progression Predictor\",\n        condition: \"Type 2 Diabetes\",\n        accuracy: 89.5,\n        lastTrained: \"2024-06-15\",\n        dataPoints: 15400,\n        status: \"active\"\n      },\n      {\n        modelId: \"cardiovascular-risk\",\n        modelName: \"Cardiovascular Risk Assessment\",\n        condition: \"Heart Disease\",\n        accuracy: 92.1,\n        lastTrained: \"2024-06-10\",\n        dataPoints: 22100,\n        status: \"active\"\n      },\n      {\n        modelId: \"cancer-prognosis\",\n        modelName: \"Cancer Treatment Response\",\n        condition: \"Various Cancers\",\n        accuracy: 87.3,\n        lastTrained: \"2024-06-08\",\n        dataPoints: 8750,\n        status: \"active\"\n      },\n      {\n        modelId: \"mental-health\",\n        modelName: \"Mental Health Outcome Predictor\",\n        condition: \"Depression/Anxiety\",\n        accuracy: 84.7,\n        lastTrained: \"2024-06-12\",\n        dataPoints: 12600,\n        status: \"training\"\n      }\n    ] as PrognosisModel[],\n  });\n\n  // Fetch outcome tracking data\n  const { data: outcomeMetrics, isLoading: outcomesLoading } = useQuery({\n    queryKey: [\"/api/analytics/outcome-tracking\", selectedCondition, selectedTimeframe],\n    queryFn: async () => [\n      {\n        patientId: \"P12345\",\n        patientName: \"John Kamau\",\n        condition: \"Type 2 Diabetes\",\n        initialDiagnosis: \"HbA1c: 8.5%, Fasting glucose: 180mg/dL\",\n        treatmentPlan: \"Metformin + Lifestyle modification\",\n        predictedOutcome: {\n          recoveryProbability: 78,\n          timeToRecovery: 180,\n          riskFactors: [\"Obesity\", \"Family history\", \"Sedentary lifestyle\"],\n          confidenceLevel: 89\n        },\n        actualOutcome: {\n          status: \"improved\",\n          timeToOutcome: 165,\n          complications: [],\n          followUpRequired: true\n        },\n        lastUpdated: \"2024-06-18\"\n      },\n      {\n        patientId: \"P12346\",\n        patientName: \"Mary Wanjiku\",\n        condition: \"Hypertension\",\n        initialDiagnosis: \"BP: 165/95 mmHg, Stage 2 HTN\",\n        treatmentPlan: \"ACE inhibitor + Diet modification\",\n        predictedOutcome: {\n          recoveryProbability: 85,\n          timeToRecovery: 90,\n          riskFactors: [\"Age >50\", \"Salt intake\", \"Stress\"],\n          confidenceLevel: 92\n        },\n        actualOutcome: {\n          status: \"stable\",\n          timeToOutcome: 95,\n          complications: [],\n          followUpRequired: true\n        },\n        lastUpdated: \"2024-06-17\"\n      },\n      {\n        patientId: \"P12347\",\n        patientName: \"Peter Ochieng\",\n        condition: \"Asthma\",\n        initialDiagnosis: \"Moderate persistent asthma, FEV1: 65%\",\n        treatmentPlan: \"ICS/LABA + Action plan\",\n        predictedOutcome: {\n          recoveryProbability: 92,\n          timeToRecovery: 60,\n          riskFactors: [\"Environmental triggers\", \"Compliance\"],\n          confidenceLevel: 87\n        },\n        lastUpdated: \"2024-06-16\"\n      }\n    ] as OutcomeMetrics[],\n  });\n\n  // Fetch population trends\n  const { data: populationTrends, isLoading: trendsLoading } = useQuery({\n    queryKey: [\"/api/analytics/population-trends\", selectedTimeframe],\n    queryFn: async () => [\n      { timeperiod: \"Jan 2024\", condition: \"Diabetes\", incidenceRate: 4.2, mortalityRate: 0.8, recoveryRate: 78, avgTreatmentCost: 45000, riskScore: 6.5 },\n      { timeperiod: \"Feb 2024\", condition: \"Diabetes\", incidenceRate: 4.5, mortalityRate: 0.7, recoveryRate: 79, avgTreatmentCost: 46000, riskScore: 6.3 },\n      { timeperiod: \"Mar 2024\", condition: \"Diabetes\", incidenceRate: 4.1, mortalityRate: 0.6, recoveryRate: 81, avgTreatmentCost: 44500, riskScore: 6.1 },\n      { timeperiod: \"Apr 2024\", condition: \"Diabetes\", incidenceRate: 3.9, mortalityRate: 0.5, recoveryRate: 83, avgTreatmentCost: 43000, riskScore: 5.9 },\n      { timeperiod: \"May 2024\", condition: \"Diabetes\", incidenceRate: 3.7, mortalityRate: 0.5, recoveryRate: 85, avgTreatmentCost: 42000, riskScore: 5.7 },\n      { timeperiod: \"Jun 2024\", condition: \"Diabetes\", incidenceRate: 3.5, mortalityRate: 0.4, recoveryRate: 87, avgTreatmentCost: 41000, riskScore: 5.5 }\n    ] as PopulationTrend[],\n  });\n\n  // Fetch risk assessments\n  const { data: riskAssessments, isLoading: riskLoading } = useQuery({\n    queryKey: [\"/api/analytics/risk-assessments\"],\n    queryFn: async () => [\n      {\n        patientId: \"P98765\",\n        patientName: \"Grace Muthoni\",\n        age: 45,\n        gender: \"Female\",\n        riskFactors: [\n          { factor: \"Hypertension\", severity: \"medium\", impact: 6.5 },\n          { factor: \"Family History of CVD\", severity: \"high\", impact: 8.2 },\n          { factor: \"Smoking\", severity: \"high\", impact: 9.1 },\n          { factor: \"High Cholesterol\", severity: \"medium\", impact: 6.8 }\n        ],\n        overallRiskScore: 7.6,\n        recommendations: [\n          \"Smoking cessation program\",\n          \"Cholesterol management\",\n          \"Regular BP monitoring\",\n          \"Cardiology consultation\"\n        ],\n        nextReviewDate: \"2024-09-15\"\n      },\n      {\n        patientId: \"P98766\",\n        patientName: \"Samuel Kiprop\",\n        age: 38,\n        gender: \"Male\",\n        riskFactors: [\n          { factor: \"Obesity (BMI >30)\", severity: \"medium\", impact: 5.8 },\n          { factor: \"Sedentary Lifestyle\", severity: \"medium\", impact: 4.9 },\n          { factor: \"Pre-diabetes\", severity: \"high\", impact: 7.3 }\n        ],\n        overallRiskScore: 6.0,\n        recommendations: [\n          \"Weight management program\",\n          \"Exercise prescription\",\n          \"Dietary counseling\",\n          \"Regular glucose monitoring\"\n        ],\n        nextReviewDate: \"2024-08-20\"\n      }\n    ] as RiskAssessment[],\n  });\n\n  const getModelStatusBadge = (status: string) => {\n    const statusColors = {\n      active: \"bg-green-100 text-green-800\",\n      training: \"bg-yellow-100 text-yellow-800\",\n      deprecated: \"bg-red-100 text-red-800\"\n    };\n    return statusColors[status as keyof typeof statusColors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getOutcomeStatusBadge = (status: string) => {\n    const statusColors = {\n      recovered: \"bg-green-100 text-green-800\",\n      improved: \"bg-blue-100 text-blue-800\",\n      stable: \"bg-yellow-100 text-yellow-800\",\n      deteriorated: \"bg-red-100 text-red-800\"\n    };\n    return statusColors[status as keyof typeof statusColors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getRiskSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"high\": return \"text-red-600\";\n      case \"medium\": return \"text-yellow-600\";\n      case \"low\": return \"text-green-600\";\n      default: return \"text-gray-600\";\n    }\n  };\n\n  const getRiskScoreColor = (score: number) => {\n    if (score >= 8) return \"text-red-600\";\n    if (score >= 6) return \"text-yellow-600\";\n    if (score >= 4) return \"text-blue-600\";\n    return \"text-green-600\";\n  };\n\n  const radarData = riskAssessments?.[0]?.riskFactors.map(factor => ({\n    factor: factor.factor,\n    impact: factor.impact,\n    fullMark: 10\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Advanced Analytics & Prognosis</h2>\n          <p className=\"text-gray-600\">Predictive modeling and outcome tracking for improved patient care</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge variant=\"outline\" className=\"text-purple-600 border-purple-200\">\n            <Brain className=\"w-4 h-4 mr-1\" />\n            AI-Powered Analytics\n          </Badge>\n        </div>\n      </div>\n\n      {/* Control Panel */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"model\">Prognosis Model</Label>\n              <Select value={selectedModel} onValueChange={setSelectedModel}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {prognosisModels?.map((model) => (\n                    <SelectItem key={model.modelId} value={model.modelId}>\n                      {model.modelName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"condition\">Condition</Label>\n              <Select value={selectedCondition} onValueChange={setSelectedCondition}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Conditions</SelectItem>\n                  <SelectItem value=\"diabetes\">Diabetes</SelectItem>\n                  <SelectItem value=\"hypertension\">Hypertension</SelectItem>\n                  <SelectItem value=\"cardiovascular\">Cardiovascular</SelectItem>\n                  <SelectItem value=\"respiratory\">Respiratory</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"timeframe\">Analysis Period</Label>\n              <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1month\">Last Month</SelectItem>\n                  <SelectItem value=\"3months\">Last 3 Months</SelectItem>\n                  <SelectItem value=\"6months\">Last 6 Months</SelectItem>\n                  <SelectItem value=\"1year\">Last Year</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"analysisType\">Analysis Type</Label>\n              <Select value={analysisType} onValueChange={setAnalysisType}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"population\">Population Health</SelectItem>\n                  <SelectItem value=\"individual\">Individual Prognosis</SelectItem>\n                  <SelectItem value=\"comparative\">Comparative Analysis</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Model Accuracy</p>\n                <p className=\"text-2xl font-bold text-green-600\">89.2%</p>\n              </div>\n              <Brain className=\"h-8 w-8 text-purple-600\" />\n            </div>\n            <div className=\"mt-2\">\n              <Progress value={89.2} className=\"w-full\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Prediction Confidence</p>\n                <p className=\"text-2xl font-bold text-blue-600\">92.7%</p>\n              </div>\n              <Target className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <div className=\"mt-2\">\n              <Progress value={92.7} className=\"w-full\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Outcome Accuracy</p>\n                <p className=\"text-2xl font-bold text-teal-600\">87.4%</p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-teal-600\" />\n            </div>\n            <div className=\"mt-2\">\n              <Progress value={87.4} className=\"w-full\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Patients Analyzed</p>\n                <p className=\"text-2xl font-bold text-gray-900\">1,247</p>\n              </div>\n              <Users className=\"h-8 w-8 text-gray-600\" />\n            </div>\n            <p className=\"text-sm text-gray-500 mt-2\">This period</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={analysisType} onValueChange={setAnalysisType}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"population\">Population Health Trends</TabsTrigger>\n          <TabsTrigger value=\"individual\">Individual Prognosis</TabsTrigger>\n          <TabsTrigger value=\"comparative\">Risk Assessment</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"population\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Population Trends Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Population Health Trends</CardTitle>\n                <CardDescription>Disease incidence and recovery rates over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={populationTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"timeperiod\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"incidenceRate\" stroke=\"#ef4444\" name=\"Incidence Rate\" />\n                    <Line type=\"monotone\" dataKey=\"recoveryRate\" stroke=\"#10b981\" name=\"Recovery Rate\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Risk Score Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Risk Score Evolution</CardTitle>\n                <CardDescription>Population risk trends and treatment costs</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={populationTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"timeperiod\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"riskScore\" fill=\"#8884d8\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Prognosis Models Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Prognosis Models</CardTitle>\n              <CardDescription>AI models currently deployed for predictive analytics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {prognosisModels?.map((model) => (\n                  <Card key={model.modelId} className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                          <Brain className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{model.modelName}</h3>\n                          <p className=\"text-sm text-gray-600\">{model.condition}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right space-y-1\">\n                        <Badge className={getModelStatusBadge(model.status)}>\n                          {model.status.charAt(0).toUpperCase() + model.status.slice(1)}\n                        </Badge>\n                        <p className=\"text-sm text-gray-500\">\n                          Accuracy: {model.accuracy}%\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4 mt-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Data Points</p>\n                        <p className=\"text-lg font-semibold\">{model.dataPoints.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Last Trained</p>\n                        <p className=\"text-lg font-semibold\">{new Date(model.lastTrained).toLocaleDateString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Model Accuracy</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Progress value={model.accuracy} className=\"flex-1\" />\n                          <span className=\"text-sm font-medium\">{model.accuracy}%</span>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"individual\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Individual Patient Outcomes</CardTitle>\n              <CardDescription>Tracking predicted vs actual outcomes for patient care optimization</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {outcomeMetrics?.map((outcome) => (\n                  <Card key={outcome.patientId} className=\"p-6 border-l-4 border-l-blue-500\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <h3 className=\"font-semibold text-xl\">{outcome.patientName}</h3>\n                        <p className=\"text-gray-600\">Patient ID: {outcome.patientId}</p>\n                        <p className=\"text-sm text-gray-500\">{outcome.condition}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        {outcome.actualOutcome && (\n                          <Badge className={getOutcomeStatusBadge(outcome.actualOutcome.status)}>\n                            {outcome.actualOutcome.status.charAt(0).toUpperCase() + outcome.actualOutcome.status.slice(1)}\n                          </Badge>\n                        )}\n                        <p className=\"text-sm text-gray-500 mt-1\">\n                          Updated: {new Date(outcome.lastUpdated).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      {/* Predicted Outcome */}\n                      <div>\n                        <h4 className=\"font-semibold mb-3 flex items-center\">\n                          <Brain className=\"w-4 h-4 mr-2 text-purple-600\" />\n                          Predicted Outcome\n                        </h4>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm\">Recovery Probability</span>\n                            <div className=\"flex items-center space-x-2\">\n                              <Progress value={outcome.predictedOutcome.recoveryProbability} className=\"w-20\" />\n                              <span className=\"text-sm font-medium\">{outcome.predictedOutcome.recoveryProbability}%</span>\n                            </div>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Estimated Recovery Time</span>\n                            <span className=\"text-sm font-medium\">{outcome.predictedOutcome.timeToRecovery} days</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Confidence Level</span>\n                            <span className=\"text-sm font-medium\">{outcome.predictedOutcome.confidenceLevel}%</span>\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium mb-1\">Risk Factors:</p>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {outcome.predictedOutcome.riskFactors.map((factor, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  {factor}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Actual Outcome */}\n                      <div>\n                        <h4 className=\"font-semibold mb-3 flex items-center\">\n                          <Activity className=\"w-4 h-4 mr-2 text-teal-600\" />\n                          Actual Outcome\n                        </h4>\n                        {outcome.actualOutcome ? (\n                          <div className=\"space-y-3\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-sm\">Current Status</span>\n                              <Badge className={getOutcomeStatusBadge(outcome.actualOutcome.status)}>\n                                {outcome.actualOutcome.status}\n                              </Badge>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-sm\">Time to Outcome</span>\n                              <span className=\"text-sm font-medium\">{outcome.actualOutcome.timeToOutcome} days</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-sm\">Follow-up Required</span>\n                              <span className=\"text-sm font-medium\">\n                                {outcome.actualOutcome.followUpRequired ? \"Yes\" : \"No\"}\n                              </span>\n                            </div>\n                            {outcome.actualOutcome.complications.length > 0 && (\n                              <div>\n                                <p className=\"text-sm font-medium mb-1\">Complications:</p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {outcome.actualOutcome.complications.map((comp, index) => (\n                                    <Badge key={index} variant=\"outline\" className=\"text-xs bg-red-50\">\n                                      {comp}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        ) : (\n                          <div className=\"text-center py-4 text-gray-500\">\n                            <Calendar className=\"w-8 h-8 mx-auto mb-2\" />\n                            <p className=\"text-sm\">Outcome tracking in progress</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Clinical Details */}\n                    <div className=\"mt-6 pt-4 border-t\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <h5 className=\"font-medium text-sm text-gray-700 mb-1\">Initial Diagnosis</h5>\n                          <p className=\"text-sm\">{outcome.initialDiagnosis}</p>\n                        </div>\n                        <div>\n                          <h5 className=\"font-medium text-sm text-gray-700 mb-1\">Treatment Plan</h5>\n                          <p className=\"text-sm\">{outcome.treatmentPlan}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"comparative\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Risk Assessment Radar Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Risk Factor Analysis</CardTitle>\n                <CardDescription>Multi-dimensional risk assessment visualization</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RadarChart data={radarData}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"factor\" />\n                    <PolarRadiusAxis domain={[0, 10]} />\n                    <Radar name=\"Risk Impact\" dataKey=\"impact\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n                  </RadarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Risk Score Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Risk Score Trends</CardTitle>\n                <CardDescription>Population risk distribution over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ScatterChart data={populationTrends}>\n                    <CartesianGrid />\n                    <XAxis dataKey=\"avgTreatmentCost\" name=\"Treatment Cost\" />\n                    <YAxis dataKey=\"riskScore\" name=\"Risk Score\" />\n                    <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                    <Scatter name=\"Risk vs Cost\" data={populationTrends} fill=\"#8884d8\" />\n                  </ScatterChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Individual Risk Assessments */}\n          <Card>\n            <CardHeader>\n              <CardTitle>High-Risk Patient Assessments</CardTitle>\n              <CardDescription>Comprehensive risk profiling for proactive care management</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {riskAssessments?.map((assessment) => (\n                  <Card key={assessment.patientId} className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <h3 className=\"font-semibold text-xl\">{assessment.patientName}</h3>\n                        <p className=\"text-gray-600\">{assessment.age} years old • {assessment.gender}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`text-2xl font-bold ${getRiskScoreColor(assessment.overallRiskScore)}`}>\n                          {assessment.overallRiskScore}/10\n                        </div>\n                        <p className=\"text-sm text-gray-500\">Overall Risk Score</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <h4 className=\"font-semibold mb-3 flex items-center\">\n                          <AlertTriangle className=\"w-4 h-4 mr-2 text-yellow-600\" />\n                          Risk Factors\n                        </h4>\n                        <div className=\"space-y-3\">\n                          {assessment.riskFactors.map((factor, index) => (\n                            <div key={index} className=\"flex items-center justify-between\">\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm font-medium\">{factor.factor}</p>\n                                <div className=\"flex items-center space-x-2 mt-1\">\n                                  <Progress value={factor.impact * 10} className=\"flex-1\" />\n                                  <span className={`text-xs font-medium ${getRiskSeverityColor(factor.severity)}`}>\n                                    {factor.severity}\n                                  </span>\n                                </div>\n                              </div>\n                              <span className=\"text-sm font-semibold ml-3\">{factor.impact}/10</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold mb-3 flex items-center\">\n                          <Shield className=\"w-4 h-4 mr-2 text-green-600\" />\n                          Recommendations\n                        </h4>\n                        <div className=\"space-y-2\">\n                          {assessment.recommendations.map((rec, index) => (\n                            <div key={index} className=\"flex items-start space-x-2\">\n                              <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                              <p className=\"text-sm\">{rec}</p>\n                            </div>\n                          ))}\n                        </div>\n                        <div className=\"mt-4 pt-3 border-t\">\n                          <p className=\"text-sm text-gray-600\">\n                            <Calendar className=\"w-4 h-4 inline mr-1\" />\n                            Next Review: {new Date(assessment.nextReviewDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":33411},"client/src/components/auth-checker.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\ninterface AuthCheckerProps {\n  children: React.ReactNode;\n  requiredRole?: string;\n  redirectTo?: string;\n}\n\nexport function AuthChecker({ children, requiredRole, redirectTo = \"/direct-debtors-login\" }: AuthCheckerProps) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(redirectTo);\n    } else if (!isLoading && user && requiredRole && user.role !== requiredRole) {\n      // Redirect to appropriate dashboard based on role\n      const roleDashboards: Record<string, string> = {\n        doctor: \"/modern-doctor\",\n        pharmacy: \"/modern-pharmacy\", \n        pharmacist: \"/modern-pharmacy\",\n        \"care-manager\": \"/modern-care-manager\",\n        insurer: \"/modern-insurer\",\n        patient: \"/modern-patient\",\n        admin: \"/modern-admin\",\n        debtors: \"/debtors-dashboard\"\n      };\n      \n      const targetDashboard = roleDashboards[user.role] || \"/\";\n      setLocation(targetDashboard);\n    }\n  }, [user, isLoading, requiredRole, redirectTo, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-teal-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Verifying authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Redirect is handled in useEffect\n  }\n\n  if (requiredRole && user.role !== requiredRole) {\n    return null; // Redirect is handled in useEffect\n  }\n\n  return <>{children}</>;\n}","size_bytes":1773},"client/src/components/biometric-claim-flow.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BiometricVerification } from \"./biometric-verification\";\nimport { ClaimFormGenerator } from \"./claim-form-generator\";\nimport { CheckCircle, FileText, Shield, ArrowRight } from \"lucide-react\";\n\ninterface InsurancePolicy {\n  id: number;\n  insurerName: string;\n  policyNumber: string;\n  planType: string;\n  memberName: string;\n  status: string;\n  expiryDate: string;\n  coverageAmount: number;\n}\n\ninterface BiometricClaimFlowProps {\n  patientId: string;\n  serviceType?: string;\n  estimatedCost?: number;\n}\n\nexport function BiometricClaimFlow({ patientId, serviceType, estimatedCost }: BiometricClaimFlowProps) {\n  const [currentStep, setCurrentStep] = useState<'verification' | 'claim-form'>('verification');\n  const [selectedInsurer, setSelectedInsurer] = useState<InsurancePolicy | null>(null);\n  const [verifiedPatient, setVerifiedPatient] = useState<any>(null);\n\n  const handleVerificationSuccess = (insurer?: InsurancePolicy) => {\n    if (insurer) {\n      setSelectedInsurer(insurer);\n      // Store in session for claim form pre-population\n      sessionStorage.setItem('selectedInsurer', JSON.stringify(insurer));\n    }\n    setCurrentStep('claim-form');\n  };\n\n  const handleVerificationFailed = () => {\n    // Handle verification failure - could show error or redirect\n    console.log('Verification failed');\n  };\n\n  const resetFlow = () => {\n    setCurrentStep('verification');\n    setSelectedInsurer(null);\n    setVerifiedPatient(null);\n    sessionStorage.removeItem('selectedInsurer');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Progress Indicator */}\n      <div className=\"flex items-center justify-center space-x-4 mb-6\">\n        <div className={`flex items-center space-x-2 ${\n          currentStep === 'verification' ? 'text-blue-600' : 'text-green-600'\n        }`}>\n          <div className={`w-8 h-8 rounded-full flex items-center justify-center border-2 ${\n            currentStep === 'verification' \n              ? 'border-blue-600 bg-blue-50' \n              : 'border-green-600 bg-green-50'\n          }`}>\n            {currentStep === 'claim-form' ? (\n              <CheckCircle className=\"w-4 h-4\" />\n            ) : (\n              <Shield className=\"w-4 h-4\" />\n            )}\n          </div>\n          <span className=\"font-medium\">Patient Verification</span>\n        </div>\n        \n        <ArrowRight className=\"w-4 h-4 text-gray-400\" />\n        \n        <div className={`flex items-center space-x-2 ${\n          currentStep === 'claim-form' ? 'text-blue-600' : 'text-gray-400'\n        }`}>\n          <div className={`w-8 h-8 rounded-full flex items-center justify-center border-2 ${\n            currentStep === 'claim-form' \n              ? 'border-blue-600 bg-blue-50' \n              : 'border-gray-300'\n          }`}>\n            <FileText className=\"w-4 h-4\" />\n          </div>\n          <span className=\"font-medium\">Claim Submission</span>\n        </div>\n      </div>\n\n      {/* Step Content */}\n      {currentStep === 'verification' && (\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Secure Patient Verification</CardTitle>\n              <CardDescription>\n                Biometric verification required before claim submission\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <BiometricVerification\n                patientId={patientId}\n                onVerificationSuccess={handleVerificationSuccess}\n                onVerificationFailed={handleVerificationFailed}\n              />\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {currentStep === 'claim-form' && (\n        <div className=\"space-y-4\">\n          {/* Selected Insurer Info */}\n          {selectedInsurer && (\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardContent className=\"pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <div>\n                      <h3 className=\"font-semibold text-green-800\">\n                        Verification Complete\n                      </h3>\n                      <p className=\"text-sm text-green-700\">\n                        Policy: {selectedInsurer.insurerName} - {selectedInsurer.policyNumber}\n                      </p>\n                    </div>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    {selectedInsurer.planType}\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Claim Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-blue-600\" />\n                Generate Claim Form\n              </CardTitle>\n              <CardDescription>\n                Complete the claim form with pre-populated patient and insurance information\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ClaimFormGenerator \n                preSelectedInsurer={selectedInsurer?.insurerName}\n                patientId={patientId}\n                serviceType={serviceType}\n                estimatedCost={estimatedCost}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Reset Option */}\n          <div className=\"flex justify-center\">\n            <Button variant=\"outline\" onClick={resetFlow}>\n              Start New Verification\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5966},"client/src/components/biometric-claim-verification.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Fingerprint, Smartphone, CheckCircle, AlertTriangle, Send } from \"lucide-react\";\n\ninterface BiometricClaimVerificationProps {\n  batchId: string;\n  totalAmount: number;\n  claimCount: number;\n  onVerificationComplete: (verified: boolean) => void;\n}\n\nexport function BiometricClaimVerification({ \n  batchId, \n  totalAmount, \n  claimCount, \n  onVerificationComplete \n}: BiometricClaimVerificationProps) {\n  const [verificationStep, setVerificationStep] = useState<'select' | 'fingerprint' | 'otp' | 'complete'>('select');\n  const [otpCode, setOtpCode] = useState(\"\");\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [verificationMethod, setVerificationMethod] = useState<'fingerprint' | 'otp' | null>(null);\n\n  const handleFingerprintVerification = async () => {\n    setIsVerifying(true);\n    setVerificationStep('fingerprint');\n    \n    // Simulate fingerprint scanning\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    setIsVerifying(false);\n    setVerificationStep('complete');\n    setTimeout(() => {\n      onVerificationComplete(true);\n    }, 1000);\n  };\n\n  const handleOTPVerification = async () => {\n    if (otpCode.length !== 6) return;\n    \n    setIsVerifying(true);\n    \n    // Simulate OTP verification\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    setIsVerifying(false);\n    setVerificationStep('complete');\n    setTimeout(() => {\n      onVerificationComplete(true);\n    }, 1000);\n  };\n\n  const renderVerificationContent = () => {\n    switch (verificationStep) {\n      case 'select':\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Confirm claim batch submission with biometric verification\n            </p>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button\n                variant=\"outline\"\n                className=\"h-24 flex-col space-y-2\"\n                onClick={() => {\n                  setVerificationMethod('fingerprint');\n                  handleFingerprintVerification();\n                }}\n              >\n                <Fingerprint className=\"h-8 w-8 text-teal-600\" />\n                <span>Fingerprint</span>\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"h-24 flex-col space-y-2\"\n                onClick={() => {\n                  setVerificationMethod('otp');\n                  setVerificationStep('otp');\n                }}\n              >\n                <Smartphone className=\"h-8 w-8 text-blue-600\" />\n                <span>SMS OTP</span>\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 'fingerprint':\n        return (\n          <div className=\"space-y-4 text-center\">\n            <div className=\"flex justify-center\">\n              <div className={`p-6 rounded-full ${isVerifying ? 'bg-teal-100 animate-pulse' : 'bg-gray-100'}`}>\n                <Fingerprint className={`h-12 w-12 ${isVerifying ? 'text-teal-600' : 'text-gray-400'}`} />\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-medium\">\n                {isVerifying ? 'Scanning Fingerprint...' : 'Place your finger on the scanner'}\n              </h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Verifying identity for claim submission authorization\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'otp':\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <Smartphone className=\"h-8 w-8 mx-auto text-blue-600 mb-2\" />\n              <h4 className=\"font-medium\">Enter SMS Verification Code</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Code sent to your registered mobile number\n              </p>\n            </div>\n            <div className=\"space-y-3\">\n              <Label htmlFor=\"otp\">6-digit verification code</Label>\n              <Input\n                id=\"otp\"\n                type=\"text\"\n                placeholder=\"123456\"\n                value={otpCode}\n                onChange={(e) => setOtpCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                className=\"text-center text-lg tracking-widest\"\n                maxLength={6}\n              />\n              <Button \n                className=\"w-full\" \n                onClick={handleOTPVerification}\n                disabled={otpCode.length !== 6 || isVerifying}\n              >\n                {isVerifying ? 'Verifying...' : 'Verify & Submit'}\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 'complete':\n        return (\n          <div className=\"space-y-4 text-center\">\n            <div className=\"flex justify-center\">\n              <div className=\"p-6 rounded-full bg-green-100\">\n                <CheckCircle className=\"h-12 w-12 text-green-600\" />\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-green-800\">Verification Successful</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Claim batch has been verified and submitted to insurer\n              </p>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button className=\"w-full\">\n          <Send className=\"mr-2 h-4 w-4\" />\n          Submit Batch (Verification Required)\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Send className=\"h-5 w-5\" />\n            <span>Confirm Batch Submission</span>\n          </DialogTitle>\n          <DialogDescription>\n            Batch {batchId} • {claimCount} claims • KES {totalAmount.toLocaleString()}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n            <span className=\"text-sm font-medium\">Batch Summary</span>\n            <div className=\"text-right\">\n              <p className=\"text-sm font-medium\">KES {totalAmount.toLocaleString()}</p>\n              <p className=\"text-xs text-muted-foreground\">{claimCount} claims</p>\n            </div>\n          </div>\n          {renderVerificationContent()}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6949},"client/src/components/biometric-scanner.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BiometricScannerProps {\n  onScanComplete: (biometricHash: string) => void;\n  isLoading?: boolean;\n  className?: string;\n}\n\nexport function BiometricScanner({ onScanComplete, isLoading = false, className }: BiometricScannerProps) {\n  const [isScanning, setIsScanning] = useState(false);\n\n  const handleScan = async () => {\n    setIsScanning(true);\n    \n    // Simulate fingerprint scanning delay\n    setTimeout(() => {\n      // Generate a simulated biometric hash\n      const biometricHash = `bio_${Math.random().toString(36).substr(2, 16)}`;\n      onScanComplete(biometricHash);\n      setIsScanning(false);\n    }, 3000);\n  };\n\n  return (\n    <div className={cn(\"text-center\", className)}>\n      <div className={cn(\n        \"biometric-scanner relative mx-auto mb-4 transition-all duration-300\",\n        (isScanning || isLoading) && \"animate-pulse\"\n      )}>\n        <i className={cn(\n          \"fingerprint-icon fas fa-fingerprint transition-all duration-300\",\n          (isScanning || isLoading) && \"animate-pulse\"\n        )}></i>\n        \n        {/* Scanning animation overlay */}\n        {(isScanning || isLoading) && (\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-white to-transparent opacity-50 animate-scan\"></div>\n        )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Button\n          onClick={handleScan}\n          disabled={isScanning || isLoading}\n          className=\"teal-button\"\n        >\n          {isScanning ? (\n            <>\n              <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n              Scanning...\n            </>\n          ) : isLoading ? (\n            <>\n              <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n              Processing...\n            </>\n          ) : (\n            <>\n              <i className=\"fas fa-fingerprint mr-2\"></i>\n              Start Scan\n            </>\n          )}\n        </Button>\n        \n        <p className=\"text-sm text-gray-600\">\n          {isScanning ? \"Please hold finger steady...\" : \"Click to simulate fingerprint scan\"}\n        </p>\n      </div>\n      \n      {/* Status indicators */}\n      <div className=\"mt-4 flex justify-center space-x-2\">\n        <div className={cn(\n          \"w-2 h-2 rounded-full transition-colors duration-300\",\n          (isScanning || isLoading) ? \"bg-yellow-500 animate-pulse\" : \"bg-gray-300\"\n        )}></div>\n        <div className={cn(\n          \"w-2 h-2 rounded-full transition-colors duration-300\",\n          isLoading ? \"bg-green-500\" : \"bg-gray-300\"\n        )}></div>\n        <div className=\"w-2 h-2 rounded-full bg-gray-300\"></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2780},"client/src/components/biometric-verification-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Fingerprint, Smartphone, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface BiometricVerificationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onVerificationComplete: (patientData: PatientSession) => void;\n  patientId?: string;\n}\n\ninterface PatientSession {\n  id: string;\n  firstName: string;\n  lastName: string;\n  memberId: string;\n  insurerId: string;\n  insurerName: string;\n  dateOfBirth: string;\n  gender: string;\n  phoneNumber: string;\n  emergencyContact: string;\n  currentEncounter?: {\n    id: string;\n    diagnosis: string;\n    services: Array<{\n      code: string;\n      description: string;\n      cost: number;\n    }>;\n    providerId: string;\n    providerName: string;\n    doctorName: string;\n    date: string;\n  };\n}\n\nexport function BiometricVerificationModal({ \n  isOpen, \n  onClose, \n  onVerificationComplete, \n  patientId \n}: BiometricVerificationModalProps) {\n  const [verificationMethod, setVerificationMethod] = useState<\"fingerprint\" | \"otp\">(\"fingerprint\");\n  const [fingerprintProgress, setFingerprintProgress] = useState(0);\n  const [isScanning, setIsScanning] = useState(false);\n  const [otpCode, setOtpCode] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState<\"idle\" | \"success\" | \"failed\">(\"idle\");\n  const { toast } = useToast();\n\n  // Mock patient data - in production, this would come from the database\n  const mockPatientData: PatientSession = {\n    id: patientId || \"PT-2024-001\",\n    firstName: \"Sarah\",\n    lastName: \"Johnson\",\n    memberId: \"SHA-001234567\",\n    insurerId: \"SHA\",\n    insurerName: \"Social Health Authority\",\n    dateOfBirth: \"1985-06-15\",\n    gender: \"Female\",\n    phoneNumber: \"+254712345678\",\n    emergencyContact: \"+254723456789\",\n    currentEncounter: {\n      id: \"ENC-2024-001\",\n      diagnosis: \"Hypertension Follow-up\",\n      services: [\n        { code: \"99213\", description: \"Office Visit - Established Patient\", cost: 5000 },\n        { code: \"80061\", description: \"Lipid Panel\", cost: 2500 }\n      ],\n      providerId: \"PROV-001\",\n      providerName: \"Aga Khan Hospital\",\n      doctorName: \"Dr. James Mwangi\",\n      date: new Date().toISOString()\n    }\n  };\n\n  const simulateFingerprintScan = async () => {\n    setIsScanning(true);\n    setFingerprintProgress(0);\n    \n    // Simulate fingerprint scanning progress\n    const interval = setInterval(() => {\n      setFingerprintProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setIsScanning(false);\n          handleVerificationSuccess();\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 200);\n  };\n\n  const sendOTP = async () => {\n    if (!phoneNumber) {\n      toast({\n        title: \"Phone Number Required\",\n        description: \"Please enter your phone number to receive OTP\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Simulate OTP sending\n    toast({\n      title: \"OTP Sent\",\n      description: `Verification code sent to ${phoneNumber}`,\n    });\n  };\n\n  const verifyOTP = async () => {\n    if (!otpCode || otpCode.length !== 6) {\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please enter the 6-digit verification code\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsVerifying(true);\n    \n    // Simulate OTP verification (accept any 6-digit code for demo)\n    setTimeout(() => {\n      setIsVerifying(false);\n      if (otpCode === \"123456\" || otpCode.length === 6) {\n        handleVerificationSuccess();\n      } else {\n        setVerificationStatus(\"failed\");\n        toast({\n          title: \"Verification Failed\",\n          description: \"Invalid OTP code. Please try again.\",\n          variant: \"destructive\"\n        });\n      }\n    }, 1500);\n  };\n\n  const handleVerificationSuccess = () => {\n    setVerificationStatus(\"success\");\n    \n    setTimeout(() => {\n      onVerificationComplete(mockPatientData);\n      onClose();\n      // Reset state for next use\n      setVerificationStatus(\"idle\");\n      setFingerprintProgress(0);\n      setOtpCode(\"\");\n      setPhoneNumber(\"\");\n    }, 1500);\n  };\n\n  const resetVerification = () => {\n    setVerificationStatus(\"idle\");\n    setFingerprintProgress(0);\n    setOtpCode(\"\");\n    setIsScanning(false);\n    setIsVerifying(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Patient Identity Verification</DialogTitle>\n          <DialogDescription>\n            Verify patient identity to access insurance information and generate claims\n          </DialogDescription>\n        </DialogHeader>\n\n        {verificationStatus === \"success\" ? (\n          <div className=\"flex flex-col items-center space-y-4 py-8\">\n            <CheckCircle className=\"h-16 w-16 text-green-500\" />\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-medium text-green-800\">Verification Successful</h3>\n              <p className=\"text-sm text-green-600\">Patient identity confirmed. Loading session...</p>\n            </div>\n          </div>\n        ) : verificationStatus === \"failed\" ? (\n          <div className=\"flex flex-col items-center space-y-4 py-8\">\n            <AlertCircle className=\"h-16 w-16 text-red-500\" />\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-medium text-red-800\">Verification Failed</h3>\n              <p className=\"text-sm text-red-600\">Unable to verify patient identity. Please try again.</p>\n            </div>\n            <Button onClick={resetVerification} variant=\"outline\">\n              Try Again\n            </Button>\n          </div>\n        ) : (\n          <Tabs value={verificationMethod} onValueChange={(value: any) => setVerificationMethod(value)}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"fingerprint\">Fingerprint</TabsTrigger>\n              <TabsTrigger value=\"otp\">SMS OTP</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"fingerprint\" className=\"space-y-4\">\n              <Card>\n                <CardHeader className=\"text-center\">\n                  <Fingerprint className=\"h-12 w-12 mx-auto text-primary\" />\n                  <CardTitle>Fingerprint Verification</CardTitle>\n                  <CardDescription>\n                    Place your finger on the scanner to verify identity\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {isScanning && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Scanning...</span>\n                        <span>{fingerprintProgress}%</span>\n                      </div>\n                      <Progress value={fingerprintProgress} className=\"h-2\" />\n                    </div>\n                  )}\n                  \n                  <Button \n                    onClick={simulateFingerprintScan} \n                    disabled={isScanning}\n                    className=\"w-full\"\n                  >\n                    {isScanning ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Scanning Fingerprint...\n                      </>\n                    ) : (\n                      <>\n                        <Fingerprint className=\"h-4 w-4 mr-2\" />\n                        Start Fingerprint Scan\n                      </>\n                    )}\n                  </Button>\n\n                  <div className=\"text-xs text-muted-foreground text-center\">\n                    <p>For demo purposes, the scan will automatically succeed</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"otp\" className=\"space-y-4\">\n              <Card>\n                <CardHeader className=\"text-center\">\n                  <Smartphone className=\"h-12 w-12 mx-auto text-primary\" />\n                  <CardTitle>SMS Verification</CardTitle>\n                  <CardDescription>\n                    Enter your phone number to receive a verification code\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"+254712345678\"\n                      value={phoneNumber}\n                      onChange={(e) => setPhoneNumber(e.target.value)}\n                    />\n                  </div>\n\n                  <Button onClick={sendOTP} variant=\"outline\" className=\"w-full\">\n                    <Smartphone className=\"h-4 w-4 mr-2\" />\n                    Send OTP Code\n                  </Button>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"otp\">Verification Code</Label>\n                    <Input\n                      id=\"otp\"\n                      type=\"text\"\n                      placeholder=\"Enter 6-digit code\"\n                      maxLength={6}\n                      value={otpCode}\n                      onChange={(e) => setOtpCode(e.target.value.replace(/\\D/g, ''))}\n                    />\n                  </div>\n\n                  <Button \n                    onClick={verifyOTP} \n                    disabled={isVerifying || otpCode.length !== 6}\n                    className=\"w-full\"\n                  >\n                    {isVerifying ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Verifying...\n                      </>\n                    ) : (\n                      \"Verify Code\"\n                    )}\n                  </Button>\n\n                  <div className=\"text-xs text-muted-foreground text-center\">\n                    <p>For demo purposes, use code \"123456\" or any 6-digit number</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11039},"client/src/components/biometric-verification.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Fingerprint, Shield, CheckCircle, AlertTriangle, Loader2, Building2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\n// Temporary mock biometric service until fingerprint.ts is created\nconst mockBiometricService = {\n  async simulateFingerprintScan(patientId: string) {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    return {\n      fingerprintHash: `fp_${patientId}_${Date.now()}`,\n      deviceFingerprint: `device_${Date.now()}`,\n      timestamp: Date.now(),\n      sessionId: `session_${Date.now()}`\n    };\n  },\n  async storeBiometricData(patientId: string, data: any) {\n    localStorage.setItem(`biometric_${patientId}`, JSON.stringify(data));\n  }\n};\n\ninterface InsurancePolicy {\n  id: number;\n  insurerName: string;\n  policyNumber: string;\n  planType: string;\n  memberName: string;\n  status: string;\n  expiryDate: string;\n  coverageAmount: number;\n}\n\ninterface BiometricVerificationProps {\n  patientId: string;\n  onVerificationSuccess: (selectedInsurer?: InsurancePolicy) => void;\n  onVerificationFailed: () => void;\n}\n\ninterface InsurerSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  policies: InsurancePolicy[];\n  onSelect: (insurer: InsurancePolicy) => void;\n}\n\nfunction InsurerSelectionModal({ isOpen, onClose, policies, onSelect }: InsurerSelectionModalProps) {\n  const [selectedPolicy, setSelectedPolicy] = useState<InsurancePolicy | null>(null);\n\n  const handleSelect = () => {\n    if (selectedPolicy) {\n      onSelect(selectedPolicy);\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Building2 className=\"w-5 h-5 text-blue-600\" />\n            Select Active Insurance Policy\n          </DialogTitle>\n          <DialogDescription>\n            Multiple active insurance policies found. Please select which policy to use for this claim.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {policies.map((policy) => (\n            <div\n              key={policy.id}\n              className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                selectedPolicy?.id === policy.id \n                  ? 'border-teal-500 bg-teal-50' \n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => setSelectedPolicy(policy)}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-4 h-4 text-blue-600\" />\n                  <span className=\"font-semibold text-lg\">{policy.insurerName}</span>\n                  <Badge \n                    variant={policy.status === 'active' ? 'default' : 'secondary'}\n                    className={policy.status === 'active' ? 'bg-green-100 text-green-800' : ''}\n                  >\n                    {policy.status}\n                  </Badge>\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Expires: {new Date(policy.expiryDate).toLocaleDateString()}\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-600\">Policy Number:</span>\n                  <div className=\"font-medium\">{policy.policyNumber}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Plan Type:</span>\n                  <div className=\"font-medium\">{policy.planType}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Member Name:</span>\n                  <div className=\"font-medium\">{policy.memberName}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Coverage:</span>\n                  <div className=\"font-medium\">KES {policy.coverageAmount.toLocaleString()}</div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSelect} \n            disabled={!selectedPolicy}\n            className=\"bg-teal-600 hover:bg-teal-700\"\n          >\n            <CheckCircle className=\"w-4 h-4 mr-2\" />\n            Select Policy\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport function BiometricVerification({ patientId, onVerificationSuccess, onVerificationFailed }: BiometricVerificationProps) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [verificationStatus, setVerificationStatus] = useState<'idle' | 'scanning' | 'success' | 'failed'>('idle');\n  const [showInsurerModal, setShowInsurerModal] = useState(false);\n  const [activePolicies, setActivePolicies] = useState<InsurancePolicy[]>([]);\n  const [verifiedPatient, setVerifiedPatient] = useState<any>(null);\n\n  // Enhanced fingerprint scanning with real biometric simulation\n  const simulateFingerprint = async () => {\n    setIsScanning(true);\n    setVerificationStatus('scanning');\n    setScanProgress(0);\n\n    try {\n      // Generate realistic biometric scan\n      const biometricData = await mockBiometricService.simulateFingerprintScan(patientId);\n      \n      // Simulate progressive scanning with realistic steps\n      const progressInterval = setInterval(() => {\n        setScanProgress(prev => {\n          if (prev >= 100) {\n            clearInterval(progressInterval);\n            return 100;\n          }\n          return prev + Math.random() * 12 + 3; // More controlled progress\n        });\n      }, 180);\n\n      // Wait for biometric scanning to complete\n      await new Promise(resolve => {\n        const checkProgress = () => {\n          if (scanProgress >= 100) {\n            clearInterval(progressInterval);\n            resolve(true);\n          } else {\n            setTimeout(checkProgress, 100);\n          }\n        };\n        checkProgress();\n      });\n\n      // Store biometric data for this session\n      await mockBiometricService.storeBiometricData(patientId, biometricData);\n      \n      // Verify patient and get active policies\n      const response = await fetch(`/api/verify-patient/${patientId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          fingerprintHash: biometricData.fingerprintHash,\n          deviceFingerprint: biometricData.deviceFingerprint,\n          sessionId: biometricData.sessionId\n        })\n      });\n      \n      const data = await response.json();\n\n      if (data.verified && data.activePolicies) {\n        setVerifiedPatient(data.patient);\n        setActivePolicies(data.activePolicies);\n        setVerificationStatus('success');\n        \n        // If multiple policies, show selection modal\n        if (data.activePolicies.length > 1) {\n          setShowInsurerModal(true);\n        } else if (data.activePolicies.length === 1) {\n          // Single policy - proceed directly\n          onVerificationSuccess(data.activePolicies[0]);\n        } else {\n          // No active policies\n          setVerificationStatus('failed');\n          onVerificationFailed();\n        }\n      } else {\n        setVerificationStatus('failed');\n        onVerificationFailed();\n      }\n    } catch (error) {\n      console.error('Verification error:', error);\n      setVerificationStatus('failed');\n      onVerificationFailed();\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  const handleInsurerSelection = (selectedInsurer: InsurancePolicy) => {\n    // Store selected insurer in session/local storage for claim processing\n    sessionStorage.setItem('selectedInsurer', JSON.stringify(selectedInsurer));\n    onVerificationSuccess(selectedInsurer);\n  };\n\n  const resetVerification = () => {\n    setVerificationStatus('idle');\n    setScanProgress(0);\n    setActivePolicies([]);\n    setVerifiedPatient(null);\n  };\n\n  return (\n    <>\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-2\">\n            <Shield className=\"w-5 h-5 text-blue-600\" />\n            Patient Verification\n          </CardTitle>\n          <CardDescription>\n            Secure biometric identity verification required\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {/* Fingerprint Scanner Interface */}\n          <div className=\"relative\">\n            <div className={`\n              w-32 h-32 mx-auto rounded-full border-4 flex items-center justify-center transition-all duration-300\n              ${verificationStatus === 'scanning' ? 'border-blue-500 bg-blue-50' : ''}\n              ${verificationStatus === 'success' ? 'border-green-500 bg-green-50' : ''}\n              ${verificationStatus === 'failed' ? 'border-red-500 bg-red-50' : 'border-gray-300'}\n            `}>\n              {verificationStatus === 'scanning' ? (\n                <Loader2 className=\"w-12 h-12 text-blue-600 animate-spin\" />\n              ) : verificationStatus === 'success' ? (\n                <CheckCircle className=\"w-12 h-12 text-green-600\" />\n              ) : verificationStatus === 'failed' ? (\n                <AlertTriangle className=\"w-12 h-12 text-red-600\" />\n              ) : (\n                <Fingerprint className=\"w-12 h-12 text-gray-400\" />\n              )}\n            </div>\n            \n            {/* Progress Ring */}\n            {verificationStatus === 'scanning' && (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <svg className=\"w-36 h-36 transform -rotate-90\">\n                  <circle\n                    cx=\"72\"\n                    cy=\"72\"\n                    r=\"68\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                    fill=\"none\"\n                    className=\"text-blue-200\"\n                  />\n                  <circle\n                    cx=\"72\"\n                    cy=\"72\"\n                    r=\"68\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                    fill=\"none\"\n                    strokeDasharray={`${2 * Math.PI * 68}`}\n                    strokeDashoffset={`${2 * Math.PI * 68 * (1 - scanProgress / 100)}`}\n                    className=\"text-blue-600 transition-all duration-200\"\n                  />\n                </svg>\n              </div>\n            )}\n          </div>\n\n          {/* Status Messages */}\n          {verificationStatus === 'idle' && (\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-sm text-gray-600\">\n                Place finger on scanner to verify patient identity\n              </p>\n            </div>\n          )}\n\n          {verificationStatus === 'scanning' && (\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-sm font-medium text-blue-600\">\n                Scanning fingerprint... {Math.round(scanProgress)}%\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Keep finger steady on the scanner\n              </p>\n            </div>\n          )}\n\n          {verificationStatus === 'success' && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                <strong>Verification Successful!</strong>\n                {verifiedPatient && (\n                  <div className=\"mt-1\">\n                    Patient: {verifiedPatient.firstName} {verifiedPatient.lastName}\n                    <br />\n                    ID: {verifiedPatient.patientId}\n                  </div>\n                )}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {verificationStatus === 'failed' && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              <AlertDescription className=\"text-red-800\">\n                <strong>Verification Failed</strong>\n                <br />\n                Fingerprint not recognized or no active insurance policies found.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"space-y-2\">\n            {verificationStatus === 'idle' && (\n              <Button \n                onClick={simulateFingerprint}\n                disabled={isScanning}\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              >\n                <Fingerprint className=\"w-4 h-4 mr-2\" />\n                Start Fingerprint Scan\n              </Button>\n            )}\n\n            {verificationStatus === 'scanning' && (\n              <Button disabled className=\"w-full\">\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Scanning in Progress...\n              </Button>\n            )}\n\n            {(verificationStatus === 'failed') && (\n              <Button \n                onClick={resetVerification}\n                variant=\"outline\" \n                className=\"w-full\"\n              >\n                Try Again\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Insurer Selection Modal */}\n      <InsurerSelectionModal\n        isOpen={showInsurerModal}\n        onClose={() => setShowInsurerModal(false)}\n        policies={activePolicies}\n        onSelect={handleInsurerSelection}\n      />\n    </>\n  );\n}","size_bytes":14442},"client/src/components/blockchain-status.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface BlockchainStatusProps {\n  status?: {\n    network: string;\n    gasPrice: number;\n    lastBlock: number;\n    contractAddress: string;\n    isOnline: boolean;\n  };\n}\n\nexport function BlockchainStatus({ status }: BlockchainStatusProps) {\n  if (!status) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-link text-purple-600\"></i>\n            <span>Blockchain Status</span>\n          </CardTitle>\n          <CardDescription>Loading blockchain network status...</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-3\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-link text-purple-600\"></i>\n            <span>Blockchain Status</span>\n          </div>\n          <Badge variant={status.isOnline ? \"default\" : \"destructive\"}>\n            {status.isOnline ? \"Online\" : \"Offline\"}\n          </Badge>\n        </CardTitle>\n        <CardDescription>\n          Smart contract deployment and network status\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Network Information */}\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Network:</span>\n              <span className=\"font-medium\">{status.network}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Gas Price:</span>\n              <span className=\"font-medium\">{status.gasPrice} gwei</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Last Block:</span>\n              <span className=\"font-medium\">#{status.lastBlock.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Status:</span>\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-2 h-2 rounded-full ${status.isOnline ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`}></div>\n                <span className=\"font-medium\">{status.isOnline ? 'Connected' : 'Disconnected'}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Contract Address */}\n          <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <i className=\"fas fa-file-contract text-purple-600\"></i>\n              <span className=\"text-sm font-medium text-purple-800\">Smart Contract</span>\n            </div>\n            <div className=\"blockchain-hash\">{status.contractAddress}</div>\n          </div>\n\n          {/* Network Stats */}\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-gray-900\">21,000</div>\n              <div className=\"text-xs text-gray-600\">Avg Gas Used</div>\n            </div>\n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-gray-900\">2.3s</div>\n              <div className=\"text-xs text-gray-600\">Block Time</div>\n            </div>\n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-gray-900\">99.9%</div>\n              <div className=\"text-xs text-gray-600\">Uptime</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4181},"client/src/components/chain-of-thought-display.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { \n  ChevronDown, \n  ChevronRight, \n  Brain, \n  CheckCircle, \n  XCircle, \n  AlertTriangle,\n  Lightbulb,\n  Target,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface ChainOfThoughtProps {\n  reasoning: string[];\n  conclusion: string;\n  confidence: number;\n  decision?: 'approved' | 'denied' | 'requires_review';\n  supportingEvidence?: string[];\n  conditions?: string[];\n  chainOfThought?: boolean;\n  title?: string;\n}\n\nexport function ChainOfThoughtDisplay({ \n  reasoning, \n  conclusion, \n  confidence, \n  decision,\n  supportingEvidence = [],\n  conditions = [],\n  chainOfThought = false,\n  title = \"Decision Analysis\"\n}: ChainOfThoughtProps) {\n  const [isReasoningOpen, setIsReasoningOpen] = useState(false);\n  const [isEvidenceOpen, setIsEvidenceOpen] = useState(false);\n\n  const getDecisionIcon = () => {\n    switch (decision) {\n      case 'approved':\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case 'denied':\n        return <XCircle className=\"h-5 w-5 text-red-600\" />;\n      case 'requires_review':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      default:\n        return <Brain className=\"h-5 w-5 text-teal-600\" />;\n    }\n  };\n\n  const getDecisionColor = () => {\n    switch (decision) {\n      case 'approved':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'denied':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'requires_review':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      default:\n        return 'bg-teal-100 text-teal-800 border-teal-200';\n    }\n  };\n\n  const getConfidenceColor = () => {\n    if (confidence >= 80) return 'text-green-600';\n    if (confidence >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <Card className=\"border-2 border-teal-100\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Brain className=\"h-6 w-6 text-teal-600\" />\n            <CardTitle className=\"text-lg\">{title}</CardTitle>\n            {chainOfThought && (\n              <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                Chain of Thought\n              </Badge>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <TrendingUp className={`h-4 w-4 ${getConfidenceColor()}`} />\n            <span className={`text-sm font-medium ${getConfidenceColor()}`}>\n              {confidence}% confidence\n            </span>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Decision Summary */}\n        {decision && (\n          <div className={`p-4 rounded-xl border-2 ${getDecisionColor()}`}>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              {getDecisionIcon()}\n              <span className=\"font-semibold capitalize\">\n                {decision.replace('_', ' ')}\n              </span>\n            </div>\n            <p className=\"text-sm\">{conclusion}</p>\n          </div>\n        )}\n\n        {/* Reasoning Chain */}\n        <Collapsible open={isReasoningOpen} onOpenChange={setIsReasoningOpen}>\n          <CollapsibleTrigger asChild>\n            <Button variant=\"ghost\" className=\"w-full justify-between p-0 h-auto\">\n              <div className=\"flex items-center space-x-2\">\n                <Lightbulb className=\"h-4 w-4 text-amber-500\" />\n                <span className=\"font-medium\">Reasoning Process ({reasoning.length} steps)</span>\n              </div>\n              {isReasoningOpen ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRight className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </CollapsibleTrigger>\n          <CollapsibleContent className=\"mt-3\">\n            <div className=\"space-y-3\">\n              {reasoning.map((step, index) => (\n                <div key={index} className=\"flex space-x-3\">\n                  <div className=\"flex-shrink-0 w-6 h-6 bg-teal-100 text-teal-700 rounded-full flex items-center justify-center text-xs font-medium\">\n                    {index + 1}\n                  </div>\n                  <div className=\"flex-1 text-sm text-gray-700 bg-gray-50 p-3 rounded-lg\">\n                    {step}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CollapsibleContent>\n        </Collapsible>\n\n        {/* Supporting Evidence */}\n        {supportingEvidence.length > 0 && (\n          <Collapsible open={isEvidenceOpen} onOpenChange={setIsEvidenceOpen}>\n            <CollapsibleTrigger asChild>\n              <Button variant=\"ghost\" className=\"w-full justify-between p-0 h-auto\">\n                <div className=\"flex items-center space-x-2\">\n                  <Target className=\"h-4 w-4 text-blue-500\" />\n                  <span className=\"font-medium\">Supporting Evidence ({supportingEvidence.length} items)</span>\n                </div>\n                {isEvidenceOpen ? (\n                  <ChevronDown className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronRight className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </CollapsibleTrigger>\n            <CollapsibleContent className=\"mt-3\">\n              <div className=\"space-y-2\">\n                {supportingEvidence.map((evidence, index) => (\n                  <div key={index} className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\n                    <span className=\"text-sm text-gray-700\">{evidence}</span>\n                  </div>\n                ))}\n              </div>\n            </CollapsibleContent>\n          </Collapsible>\n        )}\n\n        {/* Conditions */}\n        {conditions.length > 0 && (\n          <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-xl\">\n            <h4 className=\"font-medium text-blue-800 mb-2 flex items-center space-x-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span>Conditions & Requirements</span>\n            </h4>\n            <ul className=\"space-y-1\">\n              {conditions.map((condition, index) => (\n                <li key={index} className=\"text-sm text-blue-700\">\n                  • {condition}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {/* Chain of Thought Badge */}\n        {chainOfThought && (\n          <div className=\"text-center\">\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-purple-50 to-blue-50 text-purple-700 border-purple-200\">\n              Powered by DeepSeek Chain of Thought Reasoning\n            </Badge>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Simplified version for inline display\nexport function InlineChainOfThought({ \n  reasoning, \n  confidence, \n  decision \n}: { \n  reasoning: string[]; \n  confidence: number; \n  decision?: string;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"border border-purple-200 bg-purple-50 rounded-lg p-3\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Brain className=\"h-4 w-4 text-purple-600\" />\n          <span className=\"text-sm font-medium text-purple-800\">\n            Reasoning Available ({confidence}% confidence)\n          </span>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"h-6 px-2 text-purple-600 hover:bg-purple-100\"\n        >\n          {isOpen ? <ChevronDown className=\"h-3 w-3\" /> : <ChevronRight className=\"h-3 w-3\" />}\n        </Button>\n      </div>\n      \n      {isOpen && (\n        <div className=\"mt-3 space-y-2\">\n          {reasoning.slice(0, 3).map((step, index) => (\n            <div key={index} className=\"text-xs text-purple-700 bg-white p-2 rounded\">\n              {index + 1}. {step}\n            </div>\n          ))}\n          {reasoning.length > 3 && (\n            <p className=\"text-xs text-purple-600 italic\">\n              +{reasoning.length - 3} more reasoning steps...\n            </p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8635},"client/src/components/claim-form-generator.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, FileText, Download, Plus, Trash2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Service {\n  serviceName: string;\n  serviceCode: string;\n  quantity: number;\n  unitCost: number;\n  totalCost: number;\n}\n\ninterface Patient {\n  fullName: string;\n  policyNumber: string;\n  age?: number;\n  gender?: string;\n}\n\ninterface ClaimFormGeneratorProps {\n  preSelectedInsurer?: string;\n  patientId?: string;\n  serviceType?: string;\n  estimatedCost?: number;\n}\n\nexport function ClaimFormGenerator({ \n  preSelectedInsurer, \n  patientId: propPatientId, \n  serviceType: propServiceType, \n  estimatedCost: propEstimatedCost \n}: ClaimFormGeneratorProps = {}) {\n  const [patient, setPatient] = useState<Patient>({\n    fullName: 'Mary Wanjiku Kamau',\n    policyNumber: 'SHA-2024-789456',\n    age: 42,\n    gender: 'Female'\n  });\n  \n  const [claimData, setClaimData] = useState({\n    insurerName: 'SHA - Social Health Authority',\n    schemeName: 'Safaricom Ltd',\n    planName: 'Comprehensive Health Plan',\n    diagnosis: 'Hypertension with complications',\n    icdCode: 'I10.9',\n    providerName: 'Aga Khan University Hospital',\n    providerCode: 'AKU001',\n    dateOfService: new Date().toISOString().split('T')[0]\n  });\n  \n  const [services, setServices] = useState<Service[]>([\n    {\n      serviceName: 'Consultation - Internal Medicine',\n      serviceCode: '99213',\n      quantity: 1,\n      unitCost: 3500,\n      totalCost: 3500\n    },\n    {\n      serviceName: 'ECG - 12 Lead',\n      serviceCode: '93000',\n      quantity: 1,\n      unitCost: 2000,\n      totalCost: 2000\n    }\n  ]);\n  \n  const [isGenerating, setIsGenerating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const updatePatient = (field: keyof Patient, value: string | number) => {\n    setPatient(prev => ({ ...prev, [field]: value }));\n  };\n\n  const updateClaimData = (field: string, value: string) => {\n    setClaimData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const addService = () => {\n    setServices(prev => [...prev, {\n      serviceName: '',\n      serviceCode: '',\n      quantity: 1,\n      unitCost: 0,\n      totalCost: 0\n    }]);\n  };\n\n  const updateService = (index: number, field: keyof Service, value: string | number) => {\n    setServices(prev => prev.map((service, i) => {\n      if (i === index) {\n        const updated = { ...service, [field]: value };\n        if (field === 'quantity' || field === 'unitCost') {\n          updated.totalCost = updated.quantity * updated.unitCost;\n        }\n        return updated;\n      }\n      return service;\n    }));\n  };\n\n  const removeService = (index: number) => {\n    setServices(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const totalClaimAmount = services.reduce((sum, service) => sum + service.totalCost, 0);\n\n  const handleSubmitClaim = async () => {\n    setIsGenerating(true);\n    setError(null);\n\n    try {\n      const requestBody = {\n        patient,\n        insurerName: claimData.insurerName,\n        schemeName: claimData.schemeName,\n        planName: claimData.planName,\n        diagnosis: claimData.diagnosis,\n        icdCode: claimData.icdCode,\n        requestedServices: services.filter(s => s.serviceName.trim() !== ''),\n        providerName: claimData.providerName,\n        providerCode: claimData.providerCode,\n        dateOfService: claimData.dateOfService\n      };\n\n      const response = await fetch('/api/submit-claim', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to generate claim form');\n      }\n\n      // Handle file download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `claim-form-${patient.fullName.replace(/\\s+/g, '-')}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to generate claim form');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Patient Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5 text-blue-600\" />\n              Patient Information\n            </CardTitle>\n            <CardDescription>\n              Enter patient demographics and policy details\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"fullName\">Full Name</Label>\n              <Input\n                id=\"fullName\"\n                value={patient.fullName}\n                onChange={(e) => updatePatient('fullName', e.target.value)}\n                placeholder=\"Enter patient full name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"policyNumber\">Policy Number</Label>\n              <Input\n                id=\"policyNumber\"\n                value={patient.policyNumber}\n                onChange={(e) => updatePatient('policyNumber', e.target.value)}\n                placeholder=\"Enter policy number\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"age\">Age</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  value={patient.age || ''}\n                  onChange={(e) => updatePatient('age', parseInt(e.target.value) || 0)}\n                  placeholder=\"Age\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"gender\">Gender</Label>\n                <Select value={patient.gender} onValueChange={(value) => updatePatient('gender', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Male\">Male</SelectItem>\n                    <SelectItem value=\"Female\">Female</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Insurance & Medical Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5 text-green-600\" />\n              Insurance & Medical Details\n            </CardTitle>\n            <CardDescription>\n              Insurance scheme and diagnosis information\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"insurerName\">Insurance Provider</Label>\n              <Select value={claimData.insurerName} onValueChange={(value) => updateClaimData('insurerName', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select insurer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"SHA - Social Health Authority\">SHA - Social Health Authority</SelectItem>\n                  <SelectItem value=\"CIC Insurance\">CIC Insurance</SelectItem>\n                  <SelectItem value=\"AAR Insurance\">AAR Insurance</SelectItem>\n                  <SelectItem value=\"Jubilee Insurance\">Jubilee Insurance</SelectItem>\n                  <SelectItem value=\"AON Minet\">AON Minet</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"schemeName\">Scheme Name</Label>\n                <Input\n                  id=\"schemeName\"\n                  value={claimData.schemeName}\n                  onChange={(e) => updateClaimData('schemeName', e.target.value)}\n                  placeholder=\"e.g. Safaricom Ltd\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"planName\">Plan Name</Label>\n                <Input\n                  id=\"planName\"\n                  value={claimData.planName}\n                  onChange={(e) => updateClaimData('planName', e.target.value)}\n                  placeholder=\"e.g. Silver Cover\"\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"diagnosis\">Diagnosis</Label>\n                <Input\n                  id=\"diagnosis\"\n                  value={claimData.diagnosis}\n                  onChange={(e) => updateClaimData('diagnosis', e.target.value)}\n                  placeholder=\"Primary diagnosis\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"icdCode\">ICD-10 Code</Label>\n                <Input\n                  id=\"icdCode\"\n                  value={claimData.icdCode}\n                  onChange={(e) => updateClaimData('icdCode', e.target.value)}\n                  placeholder=\"ICD-10 code\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"dateOfService\">Date of Service</Label>\n              <Input\n                id=\"dateOfService\"\n                type=\"date\"\n                value={claimData.dateOfService}\n                onChange={(e) => updateClaimData('dateOfService', e.target.value)}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Services */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5 text-purple-600\" />\n              Services Provided\n            </div>\n            <Button onClick={addService} size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700\">\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Add Service\n            </Button>\n          </CardTitle>\n          <CardDescription>\n            List all services and procedures provided to the patient\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {services.map((service, index) => (\n              <div key={index} className=\"grid grid-cols-12 gap-2 items-end p-3 bg-gray-50 rounded-lg\">\n                <div className=\"col-span-4\">\n                  <Label className=\"text-xs\">Service Name</Label>\n                  <Input\n                    value={service.serviceName}\n                    onChange={(e) => updateService(index, 'serviceName', e.target.value)}\n                    placeholder=\"Service name\"\n                    className=\"text-sm\"\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label className=\"text-xs\">Code</Label>\n                  <Input\n                    value={service.serviceCode}\n                    onChange={(e) => updateService(index, 'serviceCode', e.target.value)}\n                    placeholder=\"CPT/Code\"\n                    className=\"text-sm\"\n                  />\n                </div>\n                <div className=\"col-span-1\">\n                  <Label className=\"text-xs\">Qty</Label>\n                  <Input\n                    type=\"number\"\n                    value={service.quantity}\n                    onChange={(e) => updateService(index, 'quantity', parseInt(e.target.value) || 1)}\n                    className=\"text-sm\"\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label className=\"text-xs\">Unit Cost</Label>\n                  <Input\n                    type=\"number\"\n                    value={service.unitCost}\n                    onChange={(e) => updateService(index, 'unitCost', parseInt(e.target.value) || 0)}\n                    placeholder=\"KES\"\n                    className=\"text-sm\"\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label className=\"text-xs\">Total</Label>\n                  <div className=\"text-sm font-medium p-2 bg-white rounded border\">\n                    KES {service.totalCost.toLocaleString()}\n                  </div>\n                </div>\n                <div className=\"col-span-1\">\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => removeService(index)}\n                    disabled={services.length === 1}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n            \n            <div className=\"flex justify-end pt-4 border-t\">\n              <div className=\"text-right\">\n                <div className=\"text-sm text-gray-600\">Total Claim Amount</div>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  KES {totalClaimAmount.toLocaleString()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Provider Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5 text-orange-600\" />\n            Provider Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"providerName\">Provider Name</Label>\n              <Input\n                id=\"providerName\"\n                value={claimData.providerName}\n                onChange={(e) => updateClaimData('providerName', e.target.value)}\n                placeholder=\"Healthcare facility name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"providerCode\">Provider Code</Label>\n              <Input\n                id=\"providerCode\"\n                value={claimData.providerCode}\n                onChange={(e) => updateClaimData('providerCode', e.target.value)}\n                placeholder=\"Provider registration code\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"text-red-700 font-medium\">Error generating claim form</div>\n          <div className=\"text-red-600 text-sm mt-1\">{error}</div>\n        </div>\n      )}\n\n      {/* Submit Button */}\n      <div className=\"flex justify-center\">\n        <Button \n          onClick={handleSubmitClaim}\n          disabled={isGenerating || !patient.fullName || !claimData.diagnosis}\n          className=\"px-8 py-3 bg-teal-600 hover:bg-teal-700 text-white font-medium\"\n          size=\"lg\"\n        >\n          {isGenerating ? (\n            <>\n              <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n              Generating Form...\n            </>\n          ) : (\n            <>\n              <Download className=\"w-5 h-5 mr-2\" />\n              Generate & Download Claim Form\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":16171},"client/src/components/claim-preview-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FileText, Download, Printer, Eye, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ClaimPreviewModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  claimData: {\n    claimNumber: string;\n    patientData: any;\n    totalCost: number;\n    insurerTemplate: any;\n  };\n}\n\nexport function ClaimPreviewModal({ isOpen, onClose, claimData }: ClaimPreviewModalProps) {\n  const { toast } = useToast();\n  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);\n\n  const generateHTMLPreview = () => {\n    const { claimNumber, patientData, totalCost, insurerTemplate } = claimData;\n    \n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Medical Claim Form - ${claimNumber}</title>\n        <style>\n          body { \n            font-family: 'Arial', sans-serif; \n            margin: 40px; \n            line-height: 1.4;\n            color: #333;\n          }\n          .header {\n            text-align: center;\n            border-bottom: 2px solid ${insurerTemplate.colors.primary};\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n          }\n          .company-name {\n            font-size: 24px;\n            font-weight: bold;\n            color: ${insurerTemplate.colors.primary};\n            margin-bottom: 5px;\n          }\n          .form-title {\n            font-size: 18px;\n            font-weight: bold;\n            margin-bottom: 5px;\n          }\n          .claim-number {\n            position: absolute;\n            top: 40px;\n            right: 40px;\n            font-weight: bold;\n            color: ${insurerTemplate.colors.primary};\n          }\n          .section {\n            margin-bottom: 25px;\n          }\n          .section-title {\n            font-size: 14px;\n            font-weight: bold;\n            color: ${insurerTemplate.colors.primary};\n            border-bottom: 1px solid #ddd;\n            padding-bottom: 5px;\n            margin-bottom: 15px;\n          }\n          .info-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 15px;\n          }\n          .info-table td {\n            padding: 8px;\n            border: 1px solid #ddd;\n            vertical-align: top;\n          }\n          .info-table .label {\n            font-weight: bold;\n            background-color: ${insurerTemplate.colors.secondary};\n            width: 25%;\n          }\n          .services-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 15px;\n          }\n          .services-table th {\n            background-color: ${insurerTemplate.colors.secondary};\n            padding: 10px;\n            border: 1px solid #ddd;\n            font-weight: bold;\n            text-align: left;\n          }\n          .services-table td {\n            padding: 10px;\n            border: 1px solid #ddd;\n          }\n          .total-row {\n            font-weight: bold;\n            background-color: #f9f9f9;\n          }\n          .signatures {\n            display: flex;\n            justify-content: space-between;\n            margin-top: 40px;\n          }\n          .signature-box {\n            width: 30%;\n            text-align: center;\n          }\n          .signature-line {\n            border-top: 1px solid #333;\n            margin-top: 40px;\n            padding-top: 5px;\n          }\n          .footer {\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #ddd;\n            font-size: 12px;\n            color: #666;\n          }\n          @media print {\n            body { margin: 0; }\n            .no-print { display: none; }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"claim-number\">\n          CLAIM NO.<br>\n          <strong>${claimNumber}</strong>\n        </div>\n        \n        <div class=\"header\">\n          <div class=\"company-name\">${insurerTemplate.name.toUpperCase()}</div>\n          <div class=\"form-title\">MEDICAL CLAIM FORM</div>\n          <div>OUTPATIENT SERVICES</div>\n        </div>\n\n        <div class=\"section\">\n          <div class=\"section-title\">PATIENT INFORMATION</div>\n          <table class=\"info-table\">\n            <tr>\n              <td class=\"label\">Member ID:</td>\n              <td>${patientData.memberId}</td>\n              <td class=\"label\">Date of Birth:</td>\n              <td>${new Date(patientData.dateOfBirth).toLocaleDateString()}</td>\n            </tr>\n            <tr>\n              <td class=\"label\">Patient Name:</td>\n              <td>${patientData.firstName} ${patientData.lastName}</td>\n              <td class=\"label\">Gender:</td>\n              <td>${patientData.gender}</td>\n            </tr>\n            <tr>\n              <td class=\"label\">Phone Number:</td>\n              <td>${patientData.phoneNumber}</td>\n              <td class=\"label\">Emergency Contact:</td>\n              <td>${patientData.emergencyContact}</td>\n            </tr>\n          </table>\n        </div>\n\n        <div class=\"section\">\n          <div class=\"section-title\">PROVIDER INFORMATION</div>\n          <table class=\"info-table\">\n            <tr>\n              <td class=\"label\">Provider Name:</td>\n              <td>${patientData.currentEncounter?.providerName || 'N/A'}</td>\n              <td class=\"label\">Provider ID:</td>\n              <td>${patientData.currentEncounter?.providerId || 'N/A'}</td>\n            </tr>\n            <tr>\n              <td class=\"label\">Attending Doctor:</td>\n              <td>${patientData.currentEncounter?.doctorName || 'N/A'}</td>\n              <td class=\"label\">Date of Service:</td>\n              <td>${patientData.currentEncounter?.date ? new Date(patientData.currentEncounter.date).toLocaleDateString() : 'N/A'}</td>\n            </tr>\n          </table>\n        </div>\n\n        <div class=\"section\">\n          <div class=\"section-title\">CLINICAL INFORMATION</div>\n          <table class=\"info-table\">\n            <tr>\n              <td class=\"label\">Primary Diagnosis:</td>\n              <td colspan=\"3\">${patientData.currentEncounter?.diagnosis || 'N/A'}</td>\n            </tr>\n          </table>\n        </div>\n\n        <div class=\"section\">\n          <div class=\"section-title\">SERVICES PROVIDED</div>\n          <table class=\"services-table\">\n            <thead>\n              <tr>\n                <th>Code</th>\n                <th>Service Description</th>\n                <th>Units</th>\n                <th>Amount (KES)</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${patientData.currentEncounter?.services.map(service => `\n                <tr>\n                  <td>${service.code}</td>\n                  <td>${service.description}</td>\n                  <td>1</td>\n                  <td>${service.cost.toLocaleString()}</td>\n                </tr>\n              `).join('') || ''}\n              <tr class=\"total-row\">\n                <td colspan=\"3\" style=\"text-align: right;\"><strong>TOTAL AMOUNT:</strong></td>\n                <td><strong>KES ${totalCost.toLocaleString()}</strong></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <div class=\"signatures\">\n          <div class=\"signature-box\">\n            <div>PATIENT SIGNATURE</div>\n            <div class=\"signature-line\">\n              Date: ________________\n            </div>\n          </div>\n          <div class=\"signature-box\">\n            <div>DOCTOR SIGNATURE</div>\n            <div class=\"signature-line\">\n              Date: ________________\n            </div>\n          </div>\n          <div class=\"signature-box\">\n            <div>PROVIDER STAMP</div>\n            <div class=\"signature-line\">\n              Date: ________________\n            </div>\n          </div>\n        </div>\n\n        <div class=\"footer\">\n          <strong>For office use only:</strong><br>\n          Claim processed by: ________________ &nbsp; Date: ________________ &nbsp; Reference: ________________\n        </div>\n      </body>\n      </html>\n    `;\n  };\n\n  const previewInNewTab = () => {\n    const htmlContent = generateHTMLPreview();\n    const newWindow = window.open('', '_blank');\n    if (newWindow) {\n      newWindow.document.write(htmlContent);\n      newWindow.document.close();\n    }\n  };\n\n  const downloadHTML = () => {\n    const htmlContent = generateHTMLPreview();\n    const blob = new Blob([htmlContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `claim-${claimData.claimNumber}.html`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Download Started\",\n      description: \"Claim form HTML file is being downloaded\",\n    });\n  };\n\n  const printClaim = () => {\n    const htmlContent = generateHTMLPreview();\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(htmlContent);\n      printWindow.document.close();\n      printWindow.focus();\n      setTimeout(() => {\n        printWindow.print();\n      }, 250);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle>Claim Form Preview</DialogTitle>\n          <DialogDescription>\n            Generated {claimData.insurerTemplate.name} claim form - Reference: {claimData.claimNumber}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Preview Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Form Preview</span>\n                <Badge style={{ backgroundColor: claimData.insurerTemplate.colors.primary, color: 'white' }}>\n                  {claimData.insurerTemplate.name}\n                </Badge>\n              </CardTitle>\n              <CardDescription>\n                Review the generated claim form before downloading or printing\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"border rounded-xl p-6 bg-white max-h-96 overflow-y-auto\">\n                <div className=\"text-center border-b pb-4 mb-6\">\n                  <h2 className=\"text-xl font-bold text-primary\">{claimData.insurerTemplate.name.toUpperCase()}</h2>\n                  <h3 className=\"text-lg font-semibold\">MEDICAL CLAIM FORM</h3>\n                  <p className=\"text-sm\">OUTPATIENT SERVICES</p>\n                  <div className=\"absolute top-2 right-2 text-sm font-bold text-primary\">\n                    CLAIM NO.<br />\n                    {claimData.claimNumber}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4 text-sm\">\n                  <div>\n                    <h4 className=\"font-semibold text-primary border-b mb-2\">PATIENT INFORMATION</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div><strong>Member ID:</strong> {claimData.patientData.memberId}</div>\n                      <div><strong>Date of Birth:</strong> {new Date(claimData.patientData.dateOfBirth).toLocaleDateString()}</div>\n                      <div><strong>Patient Name:</strong> {claimData.patientData.firstName} {claimData.patientData.lastName}</div>\n                      <div><strong>Gender:</strong> {claimData.patientData.gender}</div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-primary border-b mb-2\">PROVIDER INFORMATION</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div><strong>Provider Name:</strong> {claimData.patientData.currentEncounter?.providerName}</div>\n                      <div><strong>Attending Doctor:</strong> {claimData.patientData.currentEncounter?.doctorName}</div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-primary border-b mb-2\">SERVICES PROVIDED</h4>\n                    <div className=\"space-y-2\">\n                      {claimData.patientData.currentEncounter?.services.map((service: any, index: number) => (\n                        <div key={index} className=\"flex justify-between\">\n                          <span>{service.description}</span>\n                          <span>KES {service.cost.toLocaleString()}</span>\n                        </div>\n                      ))}\n                      <Separator />\n                      <div className=\"flex justify-between font-bold\">\n                        <span>TOTAL AMOUNT:</span>\n                        <span>KES {claimData.totalCost.toLocaleString()}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <Button onClick={previewInNewTab} variant=\"outline\" className=\"flex-1\">\n              <Eye className=\"h-4 w-4 mr-2\" />\n              Full Preview\n            </Button>\n            <Button onClick={downloadHTML} variant=\"outline\" className=\"flex-1\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download HTML\n            </Button>\n            <Button onClick={printClaim} variant=\"outline\" className=\"flex-1\">\n              <Printer className=\"h-4 w-4 mr-2\" />\n              Print\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-2 text-sm text-green-600 bg-green-50 p-3 rounded-xl\">\n            <CheckCircle className=\"h-4 w-4\" />\n            <span>Claim form ready for submission to {claimData.insurerTemplate.name}</span>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14287},"client/src/components/claims-validator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, CheckCircle, XCircle, Brain, FileText } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ClaimsValidationResult {\n  decision: 'Approved' | 'Denied';\n  confidence: number;\n  reason: string;\n  reasoning: string[];\n  timestamp: string;\n  validatedBy: string;\n}\n\nexport function ClaimsValidator() {\n  const [formData, setFormData] = useState({\n    fullName: 'Jane Mwangi',\n    age: 34,\n    sex: 'Female',\n    diagnosis: 'Type 2 Diabetes Mellitus',\n    icdCode: 'E11.9',\n    serviceName: 'HbA1c Test and Consultation',\n    procedureCode: '83036',\n    planName: 'Comprehensive Health Plan',\n    insurerName: 'SHA - Social Health Authority'\n  });\n  \n  const [result, setResult] = useState<ClaimsValidationResult | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(null);\n    setResult(null);\n\n    try {\n      const response = await apiRequest('/api/claims/validate', {\n        method: 'POST',\n        body: JSON.stringify(formData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Validation failed');\n      }\n\n      const data = await response.json();\n      setResult(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Validation failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateField = (field: string, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Input Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5 text-teal-600\" />\n            Claims Validation Test\n          </CardTitle>\n          <CardDescription>\n            Test the medical insurance claims validator with patient and service details\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"fullName\">Patient Name</Label>\n                <Input\n                  id=\"fullName\"\n                  value={formData.fullName}\n                  onChange={(e) => updateField('fullName', e.target.value)}\n                  placeholder=\"Enter patient name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"age\">Age</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  value={formData.age}\n                  onChange={(e) => updateField('age', parseInt(e.target.value) || 0)}\n                  placeholder=\"Enter age\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"sex\">Sex</Label>\n              <Select value={formData.sex} onValueChange={(value) => updateField('sex', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select sex\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Male\">Male</SelectItem>\n                  <SelectItem value=\"Female\">Female</SelectItem>\n                  <SelectItem value=\"Other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"diagnosis\">Diagnosis</Label>\n                <Input\n                  id=\"diagnosis\"\n                  value={formData.diagnosis}\n                  onChange={(e) => updateField('diagnosis', e.target.value)}\n                  placeholder=\"Enter diagnosis\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"icdCode\">ICD-10 Code</Label>\n                <Input\n                  id=\"icdCode\"\n                  value={formData.icdCode}\n                  onChange={(e) => updateField('icdCode', e.target.value)}\n                  placeholder=\"Enter ICD-10 code\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"serviceName\">Requested Service</Label>\n                <Input\n                  id=\"serviceName\"\n                  value={formData.serviceName}\n                  onChange={(e) => updateField('serviceName', e.target.value)}\n                  placeholder=\"Enter service name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"procedureCode\">CPT Code</Label>\n                <Input\n                  id=\"procedureCode\"\n                  value={formData.procedureCode}\n                  onChange={(e) => updateField('procedureCode', e.target.value)}\n                  placeholder=\"Enter CPT code\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"planName\">Policy Plan</Label>\n              <Select value={formData.planName} onValueChange={(value) => updateField('planName', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select plan\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Basic Health Plan\">Basic Health Plan</SelectItem>\n                  <SelectItem value=\"Comprehensive Health Plan\">Comprehensive Health Plan</SelectItem>\n                  <SelectItem value=\"Premium Health Plan\">Premium Health Plan</SelectItem>\n                  <SelectItem value=\"Family Health Plan\">Family Health Plan</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"insurerName\">Insurance Scheme</Label>\n              <Select value={formData.insurerName} onValueChange={(value) => updateField('insurerName', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select insurer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"SHA - Social Health Authority\">SHA - Social Health Authority</SelectItem>\n                  <SelectItem value=\"CIC Insurance\">CIC Insurance</SelectItem>\n                  <SelectItem value=\"AAR Insurance\">AAR Insurance</SelectItem>\n                  <SelectItem value=\"Jubilee Insurance\">Jubilee Insurance</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-teal-600 hover:bg-teal-700\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Validating Claim...\n                </>\n              ) : (\n                <>\n                  <Brain className=\"w-4 h-4 mr-2\" />\n                  Validate Claim\n                </>\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Results Panel */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-purple-600\" />\n            Validation Results\n          </CardTitle>\n          <CardDescription>\n            System decision and reasoning analysis\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"flex items-center gap-2 text-red-700\">\n                <XCircle className=\"w-4 h-4\" />\n                <span className=\"font-medium\">Validation Error</span>\n              </div>\n              <p className=\"text-red-600 text-sm mt-1\">{error}</p>\n            </div>\n          )}\n\n          {result && (\n            <div className=\"space-y-4\">\n              {/* Decision */}\n              <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  {result.decision === 'Approved' ? (\n                    <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                  ) : (\n                    <XCircle className=\"w-6 h-6 text-red-600\" />\n                  )}\n                  <div>\n                    <div className=\"font-semibold text-lg\">\n                      {result.decision}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      Confidence: {result.confidence}%\n                    </div>\n                  </div>\n                </div>\n                <Badge \n                  variant={result.decision === 'Approved' ? 'default' : 'destructive'}\n                  className={result.decision === 'Approved' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}\n                >\n                  {result.confidence}% confident\n                </Badge>\n              </div>\n\n              {/* Reason */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">Primary Reason</Label>\n                <p className=\"mt-1 p-3 bg-blue-50 border border-blue-200 rounded text-sm\">\n                  {result.reason}\n                </p>\n              </div>\n\n              {/* Reasoning Steps */}\n              {result.reasoning && result.reasoning.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">Reasoning Chain</Label>\n                  <div className=\"mt-1 space-y-2\">\n                    {result.reasoning.map((step, index) => (\n                      <div key={index} className=\"flex items-start gap-2 p-2 bg-gray-50 rounded text-sm\">\n                        <span className=\"flex-shrink-0 w-5 h-5 bg-teal-100 text-teal-700 rounded-full flex items-center justify-center text-xs font-medium\">\n                          {index + 1}\n                        </span>\n                        <span>{step}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Metadata */}\n              <div className=\"pt-3 border-t\">\n                <div className=\"text-xs text-gray-500 space-y-1\">\n                  <div>Validated by: {result.validatedBy}</div>\n                  <div>Timestamp: {new Date(result.timestamp).toLocaleString()}</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {!result && !error && !isLoading && (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Brain className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n              <p>Fill out the form and click \"Validate Claim\" to see the system analysis</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11670},"client/src/components/cost-comparison-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  LineChart, \n  Line, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Building2, \n  Users, \n  AlertTriangle,\n  Filter,\n  Download,\n  RefreshCw,\n  BarChart3,\n  Target\n} from \"lucide-react\";\n\ninterface CostMetrics {\n  totalCosts: number;\n  avgCostPerClaim: number;\n  costTrend: number;\n  topCostDrivers: Array<{\n    category: string;\n    amount: number;\n    percentage: number;\n  }>;\n}\n\ninterface ProviderComparison {\n  providerId: string;\n  providerName: string;\n  providerType: string;\n  totalClaims: number;\n  totalCosts: number;\n  avgCostPerClaim: number;\n  costEfficiencyRank: number;\n  specialtyFocus: string;\n  qualityScore: number;\n  patientSatisfaction: number;\n}\n\ninterface ServiceComparison {\n  serviceCode: string;\n  serviceName: string;\n  category: string;\n  minCost: number;\n  maxCost: number;\n  avgCost: number;\n  medianCost: number;\n  standardDeviation: number;\n  providerCount: number;\n  claimVolume: number;\n}\n\ninterface RegionalData {\n  region: string;\n  avgCost: number;\n  claimVolume: number;\n  providerCount: number;\n  costTrend: number;\n}\n\nexport function CostComparisonDashboard() {\n  const [selectedTimeRange, setSelectedTimeRange] = useState(\"last_30_days\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedRegion, setSelectedRegion] = useState(\"all\");\n  const [comparisonView, setComparisonView] = useState(\"providers\");\n\n  // Fetch cost metrics\n  const { data: costMetrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/analytics/cost-metrics\", selectedTimeRange, selectedCategory, selectedRegion],\n    queryFn: async () => ({\n      totalCosts: 2847500,\n      avgCostPerClaim: 3250,\n      costTrend: -8.5,\n      topCostDrivers: [\n        { category: \"Inpatient Care\", amount: 1420000, percentage: 49.9 },\n        { category: \"Specialist Consultations\", amount: 568000, percentage: 19.9 },\n        { category: \"Diagnostic Imaging\", amount: 341000, percentage: 12.0 },\n        { category: \"Laboratory Tests\", amount: 284000, percentage: 10.0 },\n        { category: \"Emergency Services\", amount: 234500, percentage: 8.2 }\n      ]\n    } as CostMetrics),\n  });\n\n  // Fetch provider comparison data\n  const { data: providerComparisons, isLoading: providersLoading } = useQuery({\n    queryKey: [\"/api/analytics/provider-comparison\", selectedTimeRange, selectedCategory],\n    queryFn: async () => [\n      {\n        providerId: \"P001\",\n        providerName: \"Kenyatta National Hospital\",\n        providerType: \"Public Hospital\",\n        totalClaims: 1250,\n        totalCosts: 4875000,\n        avgCostPerClaim: 3900,\n        costEfficiencyRank: 3,\n        specialtyFocus: \"General Medicine\",\n        qualityScore: 87,\n        patientSatisfaction: 78\n      },\n      {\n        providerId: \"P002\",\n        providerName: \"Aga Khan University Hospital\",\n        providerType: \"Private Hospital\",\n        totalClaims: 890,\n        totalCosts: 3560000,\n        avgCostPerClaim: 4000,\n        costEfficiencyRank: 4,\n        specialtyFocus: \"Specialist Care\",\n        qualityScore: 94,\n        patientSatisfaction: 92\n      },\n      {\n        providerId: \"P003\",\n        providerName: \"Nairobi Hospital\",\n        providerType: \"Private Hospital\",\n        totalClaims: 756,\n        totalCosts: 2268000,\n        avgCostPerClaim: 3000,\n        costEfficiencyRank: 1,\n        specialtyFocus: \"Cardiology\",\n        qualityScore: 91,\n        patientSatisfaction: 89\n      },\n      {\n        providerId: \"P004\",\n        providerName: \"MP Shah Hospital\",\n        providerType: \"Private Hospital\",\n        totalClaims: 623,\n        totalCosts: 2180500,\n        avgCostPerClaim: 3500,\n        costEfficiencyRank: 2,\n        specialtyFocus: \"Maternity Care\",\n        qualityScore: 88,\n        patientSatisfaction: 85\n      },\n      {\n        providerId: \"P005\",\n        providerName: \"Mater Hospital\",\n        providerType: \"Private Hospital\",\n        totalClaims: 445,\n        totalCosts: 1780000,\n        avgCostPerClaim: 4000,\n        costEfficiencyRank: 5,\n        specialtyFocus: \"Pediatrics\",\n        qualityScore: 90,\n        patientSatisfaction: 87\n      }\n    ] as ProviderComparison[],\n  });\n\n  // Fetch service comparison data\n  const { data: serviceComparisons, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/analytics/service-comparison\", selectedTimeRange],\n    queryFn: async () => [\n      {\n        serviceCode: \"99213\",\n        serviceName: \"Office Visit - Established Patient\",\n        category: \"Primary Care\",\n        minCost: 1500,\n        maxCost: 4500,\n        avgCost: 2750,\n        medianCost: 2600,\n        standardDeviation: 650,\n        providerCount: 45,\n        claimVolume: 2340\n      },\n      {\n        serviceCode: \"99285\",\n        serviceName: \"Emergency Department Visit - High Complexity\",\n        category: \"Emergency Care\",\n        minCost: 8000,\n        maxCost: 25000,\n        avgCost: 15500,\n        medianCost: 14000,\n        standardDeviation: 4200,\n        providerCount: 12,\n        claimVolume: 567\n      },\n      {\n        serviceCode: \"73030\",\n        serviceName: \"X-Ray Shoulder\",\n        category: \"Diagnostic Imaging\",\n        minCost: 2500,\n        maxCost: 8000,\n        avgCost: 4250,\n        medianCost: 4000,\n        standardDeviation: 1100,\n        providerCount: 28,\n        claimVolume: 890\n      },\n      {\n        serviceCode: \"80053\",\n        serviceName: \"Comprehensive Metabolic Panel\",\n        category: \"Laboratory\",\n        minCost: 800,\n        maxCost: 2500,\n        avgCost: 1400,\n        medianCost: 1300,\n        standardDeviation: 380,\n        providerCount: 35,\n        claimVolume: 1560\n      }\n    ] as ServiceComparison[],\n  });\n\n  // Fetch regional data\n  const { data: regionalData, isLoading: regionalLoading } = useQuery({\n    queryKey: [\"/api/analytics/regional-costs\", selectedTimeRange],\n    queryFn: async () => [\n      { region: \"Nairobi\", avgCost: 3800, claimVolume: 4567, providerCount: 45, costTrend: -5.2 },\n      { region: \"Mombasa\", avgCost: 3200, claimVolume: 2890, providerCount: 28, costTrend: 2.1 },\n      { region: \"Kisumu\", avgCost: 2850, claimVolume: 1780, providerCount: 18, costTrend: -1.8 },\n      { region: \"Nakuru\", avgCost: 2950, claimVolume: 1456, providerCount: 15, costTrend: 1.5 },\n      { region: \"Eldoret\", avgCost: 2700, claimVolume: 1234, providerCount: 12, costTrend: -3.1 }\n    ] as RegionalData[],\n  });\n\n  const getCostTrendIcon = (trend: number) => {\n    if (trend > 0) {\n      return <TrendingUp className=\"w-4 h-4 text-red-500\" />;\n    } else if (trend < 0) {\n      return <TrendingDown className=\"w-4 h-4 text-green-500\" />;\n    }\n    return <div className=\"w-4 h-4\" />;\n  };\n\n  const getCostTrendColor = (trend: number) => {\n    if (trend > 5) return \"text-red-600\";\n    if (trend > 0) return \"text-yellow-600\";\n    if (trend < -5) return \"text-green-600\";\n    return \"text-green-500\";\n  };\n\n  const getEfficiencyBadge = (rank: number) => {\n    if (rank === 1) return <Badge className=\"bg-green-100 text-green-800\">Most Efficient</Badge>;\n    if (rank <= 3) return <Badge className=\"bg-blue-100 text-blue-800\">Efficient</Badge>;\n    return <Badge className=\"bg-yellow-100 text-yellow-800\">Average</Badge>;\n  };\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n  const costTrendData = [\n    { month: 'Jan', cost: 3200, claims: 850 },\n    { month: 'Feb', cost: 3400, claims: 920 },\n    { month: 'Mar', cost: 3100, claims: 780 },\n    { month: 'Apr', cost: 3350, claims: 890 },\n    { month: 'May', cost: 3250, claims: 850 },\n    { month: 'Jun', cost: 3180, claims: 800 }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header and Filters */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Cost Comparison Analytics</h2>\n          <p className=\"text-gray-600\">Real-time cost analysis and provider benchmarking</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Report\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"timeRange\">Time Range</Label>\n              <Select value={selectedTimeRange} onValueChange={setSelectedTimeRange}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"last_7_days\">Last 7 Days</SelectItem>\n                  <SelectItem value=\"last_30_days\">Last 30 Days</SelectItem>\n                  <SelectItem value=\"last_90_days\">Last 90 Days</SelectItem>\n                  <SelectItem value=\"last_year\">Last Year</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"category\">Service Category</Label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"primary_care\">Primary Care</SelectItem>\n                  <SelectItem value=\"specialist_care\">Specialist Care</SelectItem>\n                  <SelectItem value=\"emergency\">Emergency Care</SelectItem>\n                  <SelectItem value=\"diagnostic\">Diagnostic Services</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"region\">Region</Label>\n              <Select value={selectedRegion} onValueChange={setSelectedRegion}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Regions</SelectItem>\n                  <SelectItem value=\"nairobi\">Nairobi</SelectItem>\n                  <SelectItem value=\"mombasa\">Mombasa</SelectItem>\n                  <SelectItem value=\"kisumu\">Kisumu</SelectItem>\n                  <SelectItem value=\"nakuru\">Nakuru</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"comparison\">Comparison View</Label>\n              <Select value={comparisonView} onValueChange={setComparisonView}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"providers\">Provider Comparison</SelectItem>\n                  <SelectItem value=\"services\">Service Comparison</SelectItem>\n                  <SelectItem value=\"regional\">Regional Analysis</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Costs</p>\n                <p className=\"text-2xl font-bold\">\n                  KES {costMetrics?.totalCosts?.toLocaleString()}\n                </p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <div className=\"flex items-center mt-2\">\n              {getCostTrendIcon(costMetrics?.costTrend || 0)}\n              <span className={`text-sm ml-1 ${getCostTrendColor(costMetrics?.costTrend || 0)}`}>\n                {Math.abs(costMetrics?.costTrend || 0)}% vs last period\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Avg Cost/Claim</p>\n                <p className=\"text-2xl font-bold\">\n                  KES {costMetrics?.avgCostPerClaim?.toLocaleString()}\n                </p>\n              </div>\n              <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <p className=\"text-sm text-gray-500 mt-2\">Across all providers</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Cost Efficiency</p>\n                <p className=\"text-2xl font-bold text-green-600\">Good</p>\n              </div>\n              <Target className=\"h-8 w-8 text-purple-600\" />\n            </div>\n            <p className=\"text-sm text-gray-500 mt-2\">8.5% below benchmark</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Potential Savings</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  KES 285K\n                </p>\n              </div>\n              <TrendingDown className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <p className=\"text-sm text-gray-500 mt-2\">Through optimization</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={comparisonView} onValueChange={setComparisonView}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"providers\">Provider Comparison</TabsTrigger>\n          <TabsTrigger value=\"services\">Service Analysis</TabsTrigger>\n          <TabsTrigger value=\"regional\">Regional Breakdown</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"providers\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Cost Trends Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Cost Trends Analysis</CardTitle>\n                <CardDescription>Average cost per claim over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={costTrendData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"cost\" stroke=\"#0ea5e9\" strokeWidth={3} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Cost Drivers Pie Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Top Cost Drivers</CardTitle>\n                <CardDescription>Distribution of costs by category</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={costMetrics?.topCostDrivers}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ category, percentage }) => `${category}: ${percentage}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"amount\"\n                    >\n                      {costMetrics?.topCostDrivers?.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Provider Comparison Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Provider Performance Comparison</CardTitle>\n              <CardDescription>Detailed cost efficiency and quality metrics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {providerComparisons?.map((provider) => (\n                  <Card key={provider.providerId} className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <Building2 className=\"w-6 h-6 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{provider.providerName}</h3>\n                          <p className=\"text-sm text-gray-600\">{provider.providerType} • {provider.specialtyFocus}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        {getEfficiencyBadge(provider.costEfficiencyRank)}\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mt-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Total Claims</p>\n                        <p className=\"text-lg font-semibold\">{provider.totalClaims.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Total Costs</p>\n                        <p className=\"text-lg font-semibold\">KES {provider.totalCosts.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Avg Cost/Claim</p>\n                        <p className=\"text-lg font-semibold\">KES {provider.avgCostPerClaim.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Quality Score</p>\n                        <p className=\"text-lg font-semibold text-green-600\">{provider.qualityScore}/100</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Patient Satisfaction</p>\n                        <p className=\"text-lg font-semibold text-blue-600\">{provider.patientSatisfaction}%</p>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"services\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Service Cost Analysis</CardTitle>\n              <CardDescription>Cost variation analysis across common procedures</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {serviceComparisons?.map((service) => (\n                  <Card key={service.serviceCode} className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">{service.serviceName}</h3>\n                        <p className=\"text-sm text-gray-600\">Code: {service.serviceCode} • {service.category}</p>\n                      </div>\n                      <Badge variant=\"outline\">{service.providerCount} providers</Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Min Cost</p>\n                        <p className=\"text-lg font-semibold text-green-600\">KES {service.minCost.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Max Cost</p>\n                        <p className=\"text-lg font-semibold text-red-600\">KES {service.maxCost.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Average</p>\n                        <p className=\"text-lg font-semibold\">KES {service.avgCost.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Median</p>\n                        <p className=\"text-lg font-semibold\">KES {service.medianCost.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Std Dev</p>\n                        <p className=\"text-lg font-semibold\">±{service.standardDeviation}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Volume</p>\n                        <p className=\"text-lg font-semibold\">{service.claimVolume} claims</p>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-green-500 via-yellow-500 to-red-500 h-2 rounded-full\"\n                          style={{ \n                            background: `linear-gradient(to right, \n                              #10b981 ${((service.avgCost - service.minCost) / (service.maxCost - service.minCost)) * 100}%, \n                              #f59e0b ${((service.avgCost - service.minCost) / (service.maxCost - service.minCost)) * 100}%)`\n                          }}\n                        />\n                      </div>\n                      <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                        <span>Most Affordable</span>\n                        <span>Market Average</span>\n                        <span>Premium</span>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"regional\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Regional Cost Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Regional Cost Comparison</CardTitle>\n                <CardDescription>Average cost per claim by region</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={regionalData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"region\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"avgCost\" fill=\"#0ea5e9\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Regional Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Regional Summary</CardTitle>\n                <CardDescription>Key metrics by region</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {regionalData?.map((region) => (\n                  <div key={region.region} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <h3 className=\"font-semibold\">{region.region}</h3>\n                      <p className=\"text-sm text-gray-600\">{region.providerCount} providers</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\">KES {region.avgCost.toLocaleString()}</p>\n                      <div className=\"flex items-center\">\n                        {getCostTrendIcon(region.costTrend)}\n                        <span className={`text-sm ml-1 ${getCostTrendColor(region.costTrend)}`}>\n                          {Math.abs(region.costTrend)}%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":25721},"client/src/components/dashboard-toggle.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuLabel, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { \n  ChevronDown, \n  Stethoscope, \n  Pill, \n  Users, \n  Shield, \n  User, \n  Settings,\n  Clock,\n  ArrowLeft,\n  Grid3X3,\n  Calendar,\n  MapPin,\n  Smartphone,\n  FileText\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface DashboardOption {\n  path: string;\n  label: string;\n  icon: React.ComponentType<any>;\n  description: string;\n  role: string;\n  color: string;\n}\n\nconst dashboardOptions: DashboardOption[] = [\n  {\n    path: \"/modern-doctor\",\n    label: \"Doctor Dashboard\",\n    icon: Stethoscope,\n    description: \"Patient queue, consultations, diagnosis support\",\n    role: \"Clinical\",\n    color: \"bg-blue-100 text-blue-700 border-blue-200\"\n  },\n  {\n    path: \"/modern-pharmacy\",\n    label: \"Pharmacy Dashboard\", \n    icon: Pill,\n    description: \"Prescription validation, dispensing, safety checks\",\n    role: \"Pharmacy\",\n    color: \"bg-green-100 text-green-700 border-green-200\"\n  },\n  {\n    path: \"/modern-care-manager\",\n    label: \"Care Manager Dashboard\",\n    icon: Users,\n    description: \"Claims oversight, fraud detection, analytics\",\n    role: \"Management\",\n    color: \"bg-purple-100 text-purple-700 border-purple-200\"\n  },\n  {\n    path: \"/modern-insurer\",\n    label: \"Insurer Dashboard\",\n    icon: Shield,\n    description: \"Preauthorizations, claims review, risk assessment\",\n    role: \"Insurance\",\n    color: \"bg-orange-100 text-orange-700 border-orange-200\"\n  },\n  {\n    path: \"/modern-patient\",\n    label: \"Patient Portal\",\n    icon: User,\n    description: \"Claims history, benefits, appointments\",\n    role: \"Patient\",\n    color: \"bg-teal-100 text-teal-700 border-teal-200\"\n  },\n  {\n    path: \"/modern-admin\",\n    label: \"Admin Dashboard\",\n    icon: Settings,\n    description: \"System management, user control, configuration\",\n    role: \"System\",\n    color: \"bg-red-100 text-red-700 border-red-200\"\n  },\n  {\n    path: \"/modern-front-office\",\n    label: \"Front Office\",\n    icon: Calendar,\n    description: \"Patient registration, appointments, walk-ins\",\n    role: \"Reception\",\n    color: \"bg-indigo-100 text-indigo-700 border-indigo-200\"\n  },\n  {\n    path: \"/patient-queue\",\n    label: \"Patient Queue\",\n    icon: Clock,\n    description: \"Triage queue, wait times, priority management\",\n    role: \"Operations\",\n    color: \"bg-yellow-100 text-yellow-700 border-yellow-200\"\n  },\n  {\n    path: \"/mobile-field-worker\",\n    label: \"Field Worker\",\n    icon: MapPin,\n    description: \"Mobile visits, GPS navigation, field support\",\n    role: \"Mobile\",\n    color: \"bg-cyan-100 text-cyan-700 border-cyan-200\"\n  },\n  {\n    path: \"/mobile-patient-portal\",\n    label: \"Mobile Patient\",\n    icon: Smartphone,\n    description: \"Mobile self-service, health tracking\",\n    role: \"Mobile\",\n    color: \"bg-pink-100 text-pink-700 border-pink-200\"\n  },\n  {\n    path: \"/debtors-dashboard\",\n    label: \"Debtors Dashboard\",\n    icon: FileText,\n    description: \"Claims management, batch tracking, submissions\",\n    role: \"Finance\",\n    color: \"bg-amber-100 text-amber-700 border-amber-200\"\n  }\n];\n\ninterface DashboardHistory {\n  path: string;\n  timestamp: number;\n  visitCount: number;\n}\n\ninterface DashboardToggleProps {\n  currentPath?: string;\n  showRecentDashboards?: boolean;\n}\n\nexport function DashboardToggle({ currentPath, showRecentDashboards = true }: DashboardToggleProps) {\n  const [location, navigate] = useLocation();\n  const [dashboardHistory, setDashboardHistory] = useState<DashboardHistory[]>(() => {\n    const saved = localStorage.getItem('erlessed-dashboard-history');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  const currentDashboard = dashboardOptions.find(d => d.path === (currentPath || location));\n  \n  const addToHistory = (path: string) => {\n    const now = Date.now();\n    const existing = dashboardHistory.find(h => h.path === path);\n    \n    let updated: DashboardHistory[];\n    if (existing) {\n      updated = dashboardHistory.map(h => \n        h.path === path \n          ? { ...h, timestamp: now, visitCount: h.visitCount + 1 }\n          : h\n      );\n    } else {\n      updated = [...dashboardHistory, { path, timestamp: now, visitCount: 1 }];\n    }\n    \n    // Keep only last 5 unique dashboards, sorted by most recent\n    updated = updated\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, 5);\n    \n    setDashboardHistory(updated);\n    localStorage.setItem('erlessed-dashboard-history', JSON.stringify(updated));\n  };\n\n  const handleDashboardSwitch = (path: string) => {\n    addToHistory(path);\n    navigate(path);\n  };\n\n  const getRecentDashboards = () => {\n    return dashboardHistory\n      .filter(h => h.path !== (currentPath || location))\n      .map(h => dashboardOptions.find(d => d.path === h.path))\n      .filter(Boolean)\n      .slice(0, 3);\n  };\n\n  const getMostVisited = () => {\n    return dashboardHistory\n      .filter(h => h.path !== (currentPath || location))\n      .sort((a, b) => b.visitCount - a.visitCount)\n      .slice(0, 2)\n      .map(h => dashboardOptions.find(d => d.path === h.path))\n      .filter(Boolean);\n  };\n\n  const formatLastVisit = (timestamp: number) => {\n    const now = Date.now();\n    const diff = now - timestamp;\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    \n    if (minutes < 1) return 'Just now';\n    if (minutes < 60) return `${minutes}m ago`;\n    if (hours < 24) return `${hours}h ago`;\n    return `${days}d ago`;\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      {/* Quick Back Button */}\n      {getRecentDashboards().length > 0 && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => {\n            const lastDashboard = getRecentDashboards()[0];\n            if (lastDashboard && lastDashboard.path !== (currentPath || location)) {\n              handleDashboardSwitch(lastDashboard.path);\n            }\n          }}\n          className=\"h-8 px-2\"\n          title={`Go back to ${getRecentDashboards()[0]?.label || 'previous dashboard'}`}\n        >\n          <ArrowLeft className=\"h-3 w-3\" />\n        </Button>\n      )}\n\n      {/* Dashboard Selector */}\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"h-8 gap-2 min-w-[180px] sm:min-w-[200px] justify-between\">\n            <div className=\"flex items-center space-x-2 min-w-0\">\n              {currentDashboard ? (\n                <>\n                  <currentDashboard.icon className=\"h-4 w-4 flex-shrink-0\" />\n                  <span className=\"font-medium truncate\">{currentDashboard.label}</span>\n                </>\n              ) : (\n                <>\n                  <Grid3X3 className=\"h-4 w-4 flex-shrink-0\" />\n                  <span className=\"truncate\">Switch Dashboard</span>\n                </>\n              )}\n            </div>\n            <ChevronDown className=\"h-3 w-3 flex-shrink-0\" />\n          </Button>\n        </DropdownMenuTrigger>\n\n        <DropdownMenuContent className=\"w-80 sm:w-96\" align=\"start\">\n          <DropdownMenuLabel className=\"flex items-center justify-between px-3 py-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Grid3X3 className=\"h-4 w-4\" />\n              <span>Erlessed Dashboards</span>\n            </div>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {dashboardHistory.length} visited\n            </Badge>\n          </DropdownMenuLabel>\n          \n          {/* Recent Dashboards */}\n          {showRecentDashboards && getRecentDashboards().length > 0 && (\n            <>\n              <DropdownMenuSeparator />\n              <DropdownMenuLabel className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                <Clock className=\"h-3 w-3\" />\n                <span>Recent</span>\n              </DropdownMenuLabel>\n              {getRecentDashboards().map((dashboard) => {\n                const historyItem = dashboardHistory.find(h => h.path === dashboard.path);\n                return (\n                  <DropdownMenuItem\n                    key={dashboard.path}\n                    onClick={() => handleDashboardSwitch(dashboard.path)}\n                    className=\"cursor-pointer py-3\"\n                  >\n                    <div className=\"flex items-center space-x-3 w-full\">\n                      <dashboard.icon className=\"h-4 w-4 text-muted-foreground\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"font-medium truncate\">{dashboard.label}</div>\n                        <div className=\"text-xs text-muted-foreground flex items-center space-x-2\">\n                          <span className=\"truncate\">{dashboard.description}</span>\n                          {historyItem && (\n                            <span className=\"text-xs bg-blue-50 text-blue-600 px-1.5 py-0.5 rounded\">\n                              {formatLastVisit(historyItem.timestamp)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col items-end space-y-1\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {dashboard.role}\n                        </Badge>\n                        {historyItem && historyItem.visitCount > 1 && (\n                          <span className=\"text-xs text-muted-foreground\">\n                            {historyItem.visitCount} visits\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </DropdownMenuItem>\n                );\n              })}\n            </>\n          )}\n\n          {/* Most Visited Dashboards */}\n          {getMostVisited().length > 0 && (\n            <>\n              <DropdownMenuSeparator />\n              <DropdownMenuLabel className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                <User className=\"h-3 w-3\" />\n                <span>Most Visited</span>\n              </DropdownMenuLabel>\n              {getMostVisited().map((dashboard) => {\n                const historyItem = dashboardHistory.find(h => h.path === dashboard.path);\n                return (\n                  <DropdownMenuItem\n                    key={`most-visited-${dashboard.path}`}\n                    onClick={() => handleDashboardSwitch(dashboard.path)}\n                    className=\"cursor-pointer py-2\"\n                  >\n                    <div className=\"flex items-center space-x-3 w-full\">\n                      <dashboard.icon className=\"h-4 w-4 text-green-600\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"font-medium truncate\">{dashboard.label}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {historyItem && `${historyItem.visitCount} visits`}\n                        </div>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"text-xs bg-green-50 text-green-700\">\n                        Popular\n                      </Badge>\n                    </div>\n                  </DropdownMenuItem>\n                );\n              })}\n            </>\n          )}\n\n          <DropdownMenuSeparator />\n          <DropdownMenuLabel className=\"text-xs text-muted-foreground\">All Dashboards</DropdownMenuLabel>\n          \n          {/* All Dashboards */}\n          {dashboardOptions.map((dashboard) => {\n            const isActive = dashboard.path === (currentPath || location);\n            return (\n              <DropdownMenuItem\n                key={dashboard.path}\n                onClick={() => !isActive && handleDashboardSwitch(dashboard.path)}\n                className={`cursor-pointer ${isActive ? 'bg-muted' : ''}`}\n                disabled={isActive}\n              >\n                <div className=\"flex items-center space-x-3 w-full\">\n                  <dashboard.icon className={`h-4 w-4 ${isActive ? 'text-primary' : 'text-muted-foreground'}`} />\n                  <div className=\"flex-1\">\n                    <div className={`font-medium ${isActive ? 'text-primary' : ''}`}>\n                      {dashboard.label}\n                      {isActive && <span className=\"ml-2 text-xs\">(Current)</span>}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">{dashboard.description}</div>\n                  </div>\n                  <Badge \n                    variant=\"outline\" \n                    className={`text-xs ${isActive ? dashboard.color : ''}`}\n                  >\n                    {dashboard.role}\n                  </Badge>\n                </div>\n              </DropdownMenuItem>\n            );\n          })}\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Current Dashboard Info */}\n      {currentDashboard && (\n        <Card className=\"hidden lg:block\">\n          <CardContent className=\"p-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className={`text-xs ${currentDashboard.color}`}>\n                {currentDashboard.role}\n              </Badge>\n              <span className=\"text-xs text-muted-foreground\">\n                {currentDashboard.description}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n// Compact version for mobile/smaller screens\nexport function CompactDashboardToggle({ currentPath }: { currentPath?: string }) {\n  const [location, navigate] = useLocation();\n  const currentDashboard = dashboardOptions.find(d => d.path === (currentPath || location));\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 gap-1\">\n          {currentDashboard ? (\n            <currentDashboard.icon className=\"h-3 w-3\" />\n          ) : (\n            <Grid3X3 className=\"h-3 w-3\" />\n          )}\n          <ChevronDown className=\"h-3 w-3\" />\n        </Button>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent className=\"w-64\" align=\"end\">\n        <DropdownMenuLabel>Switch Dashboard</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        \n        {dashboardOptions.map((dashboard) => {\n          const isActive = dashboard.path === (currentPath || location);\n          return (\n            <DropdownMenuItem\n              key={dashboard.path}\n              onClick={() => !isActive && navigate(dashboard.path)}\n              className={`cursor-pointer ${isActive ? 'bg-muted' : ''}`}\n              disabled={isActive}\n            >\n              <dashboard.icon className=\"h-4 w-4 mr-2\" />\n              <span className={isActive ? 'font-medium' : ''}>{dashboard.label}</span>\n              {isActive && <Badge variant=\"outline\" className=\"ml-auto text-xs\">Current</Badge>}\n            </DropdownMenuItem>\n          );\n        })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":15366},"client/src/components/decision-feedback.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, MessageSquare, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface DecisionLog {\n  id: number;\n  userId: number;\n  patientId: number | null;\n  decisionType: string;\n  originalDecision: string;\n  aiConfidence: string;\n  reasoning: any;\n  finalOutcome: string | null;\n  appealOutcome: string | null;\n  careManagerNotes: string | null;\n  metadata: any;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface FeedbackFormProps {\n  log: DecisionLog;\n  onSuccess: () => void;\n}\n\nfunction FeedbackForm({ log, onSuccess }: FeedbackFormProps) {\n  const [finalOutcome, setFinalOutcome] = useState(log.finalOutcome || '');\n  const [appealOutcome, setAppealOutcome] = useState(log.appealOutcome || '');\n  const [reviewerNotes, setReviewerNotes] = useState(log.careManagerNotes || '');\n  \n  const queryClient = useQueryClient();\n\n  const updateFeedback = useMutation({\n    mutationFn: async (data: { logId: number; finalOutcome: string; appealOutcome?: string; reviewerNotes?: string }) => {\n      const response = await fetch('/api/feedback', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to update feedback');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/decision-logs'] });\n      onSuccess();\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!finalOutcome) return;\n\n    updateFeedback.mutate({\n      logId: log.id,\n      finalOutcome,\n      appealOutcome: appealOutcome || undefined,\n      reviewerNotes: reviewerNotes || undefined\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"finalOutcome\">Final Outcome *</Label>\n        <Select value={finalOutcome} onValueChange={setFinalOutcome}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select final outcome\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"approved\">Approved</SelectItem>\n            <SelectItem value=\"denied\">Denied</SelectItem>\n            <SelectItem value=\"approved_with_conditions\">Approved with Conditions</SelectItem>\n            <SelectItem value=\"pending_review\">Pending Review</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"appealOutcome\">Appeal Outcome (if applicable)</Label>\n        <Select value={appealOutcome} onValueChange={setAppealOutcome}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select appeal outcome\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"\">No Appeal</SelectItem>\n            <SelectItem value=\"appeal_approved\">Appeal Approved</SelectItem>\n            <SelectItem value=\"appeal_denied\">Appeal Denied</SelectItem>\n            <SelectItem value=\"appeal_pending\">Appeal Pending</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"reviewerNotes\">Reviewer Notes</Label>\n        <Textarea\n          id=\"reviewerNotes\"\n          value={reviewerNotes}\n          onChange={(e) => setReviewerNotes(e.target.value)}\n          placeholder=\"Add any notes about the decision or review process...\"\n          rows={3}\n        />\n      </div>\n\n      <Button \n        type=\"submit\" \n        disabled={!finalOutcome || updateFeedback.isPending}\n        className=\"w-full bg-teal-600 hover:bg-teal-700\"\n      >\n        {updateFeedback.isPending ? (\n          <>\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            Updating...\n          </>\n        ) : (\n          <>\n            <CheckCircle className=\"w-4 h-4 mr-2\" />\n            Update Feedback\n          </>\n        )}\n      </Button>\n    </form>\n  );\n}\n\nexport function DecisionFeedbackPanel() {\n  const [selectedLog, setSelectedLog] = useState<DecisionLog | null>(null);\n  const [filterType, setFilterType] = useState<string>('');\n\n  const { data: decisionLogs = [], isLoading } = useQuery({\n    queryKey: ['/api/decision-logs', filterType],\n    queryFn: async () => {\n      const url = filterType ? `/api/decision-logs?type=${filterType}` : '/api/decision-logs';\n      const response = await fetch(url, { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch decision logs');\n      return response.json() as Promise<DecisionLog[]>;\n    }\n  });\n\n  const getDecisionIcon = (decision: string) => {\n    switch (decision.toLowerCase()) {\n      case 'approved':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'denied':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />;\n    }\n  };\n\n  const getOutcomeColor = (outcome: string | null) => {\n    if (!outcome) return 'bg-gray-100 text-gray-800';\n    switch (outcome.toLowerCase()) {\n      case 'approved':\n      case 'appeal_approved':\n        return 'bg-green-100 text-green-800';\n      case 'denied':\n      case 'appeal_denied':\n        return 'bg-red-100 text-red-800';\n      case 'approved_with_conditions':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-yellow-100 text-yellow-800';\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* Decision Logs List */}\n      <div className=\"lg:col-span-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"w-5 h-5 text-blue-600\" />\n              Decision Logs\n            </CardTitle>\n            <CardDescription>\n              Track and provide feedback on AI decisions\n            </CardDescription>\n            <div className=\"flex gap-2\">\n              <Select value={filterType} onValueChange={setFilterType}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Types</SelectItem>\n                  <SelectItem value=\"preauth\">Preauthorization</SelectItem>\n                  <SelectItem value=\"pharmacy_validation\">Pharmacy Validation</SelectItem>\n                  <SelectItem value=\"claims_validation\">Claims Validation</SelectItem>\n                  <SelectItem value=\"fraud_detection\">Fraud Detection</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-6 h-6 animate-spin text-teal-600\" />\n                <span className=\"ml-2\">Loading decision logs...</span>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {decisionLogs.map((log) => (\n                  <div\n                    key={log.id}\n                    className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                      selectedLog?.id === log.id \n                        ? 'border-teal-500 bg-teal-50' \n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    onClick={() => setSelectedLog(log)}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {getDecisionIcon(log.originalDecision)}\n                        <span className=\"font-medium\">\n                          {log.decisionType.replace('_', ' ').toUpperCase()}\n                        </span>\n                        <Badge variant=\"outline\">\n                          {log.aiConfidence}% confidence\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {new Date(log.createdAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Original:</span>\n                        <Badge className={`ml-1 ${getOutcomeColor(log.originalDecision)}`}>\n                          {log.originalDecision}\n                        </Badge>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Final:</span>\n                        {log.finalOutcome ? (\n                          <Badge className={`ml-1 ${getOutcomeColor(log.finalOutcome)}`}>\n                            {log.finalOutcome}\n                          </Badge>\n                        ) : (\n                          <span className=\"ml-1 text-gray-400\">Pending</span>\n                        )}\n                      </div>\n                    </div>\n\n                    {log.metadata && (\n                      <div className=\"mt-2 text-xs text-gray-600\">\n                        {log.metadata.serviceType && (\n                          <span>Service: {log.metadata.serviceType} • </span>\n                        )}\n                        {log.metadata.estimatedCost && (\n                          <span>Cost: KES {log.metadata.estimatedCost}</span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ))}\n                \n                {decisionLogs.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No decision logs found for the selected criteria\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Feedback Form */}\n      <div>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              Provide Feedback\n            </CardTitle>\n            <CardDescription>\n              Update outcome and add reviewer notes\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {selectedLog ? (\n              <div className=\"space-y-4\">\n                {/* Log Details */}\n                <div className=\"p-3 bg-gray-50 rounded-lg space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    {getDecisionIcon(selectedLog.originalDecision)}\n                    <span className=\"font-medium\">\n                      {selectedLog.decisionType.replace('_', ' ').toUpperCase()}\n                    </span>\n                  </div>\n                  \n                  <div className=\"text-sm space-y-1\">\n                    <div>\n                      <span className=\"text-gray-600\">Original Decision:</span>\n                      <Badge className={`ml-1 ${getOutcomeColor(selectedLog.originalDecision)}`}>\n                        {selectedLog.originalDecision}\n                      </Badge>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Confidence:</span>\n                      <span className=\"ml-1 font-medium\">{selectedLog.aiConfidence}%</span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Date:</span>\n                      <span className=\"ml-1\">{new Date(selectedLog.createdAt).toLocaleString()}</span>\n                    </div>\n                  </div>\n\n                  {selectedLog.reasoning && Array.isArray(selectedLog.reasoning) && (\n                    <div className=\"mt-2\">\n                      <span className=\"text-xs text-gray-600 font-medium\">AI Reasoning:</span>\n                      <div className=\"text-xs mt-1 space-y-1\">\n                        {selectedLog.reasoning.slice(0, 3).map((reason: string, index: number) => (\n                          <div key={index} className=\"text-gray-700\">\n                            • {reason}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Feedback Form */}\n                <FeedbackForm \n                  log={selectedLog} \n                  onSuccess={() => setSelectedLog(null)} \n                />\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <MessageSquare className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n                <p>Select a decision log to provide feedback</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13555},"client/src/components/enhanced-claim-tracker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  FileText, \n  Clock, \n  CheckCircle, \n  XCircle, \n  AlertTriangle,\n  Pill,\n  TestTube,\n  Stethoscope,\n  Calendar,\n  DollarSign,\n  User,\n  Building2\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface ClaimService {\n  id: string;\n  serviceName: string;\n  serviceType: 'consultation' | 'lab' | 'pharmacy' | 'procedure';\n  status: 'pending' | 'fulfilled' | 'cancelled' | 'expired';\n  prescribedBy: string;\n  startDate: string;\n  durationDays?: number;\n  quantity: number;\n  unitCost: number;\n  totalCost: number;\n  notes?: string;\n}\n\ninterface EnhancedClaim {\n  id: string;\n  patientId: string;\n  patientName: string;\n  insurerName: string;\n  schemeName: string;\n  claimNumber: string;\n  totalAmount: number;\n  status: 'pending' | 'processing' | 'approved' | 'denied' | 'voided';\n  isActive: boolean;\n  submittedAt: string;\n  services: ClaimService[];\n}\n\ninterface ClaimTrackerProps {\n  patientId?: string;\n  showAllClaims?: boolean;\n}\n\nexport function EnhancedClaimTracker({ patientId, showAllClaims = false }: ClaimTrackerProps) {\n  const [selectedClaim, setSelectedClaim] = useState<EnhancedClaim | null>(null);\n\n  const { data: claims = [], isLoading } = useQuery({\n    queryKey: ['/api/enhanced-claims', patientId],\n    queryFn: async () => {\n      const url = patientId \n        ? `/api/enhanced-claims/patient/${patientId}` \n        : '/api/enhanced-claims';\n      const response = await fetch(url, { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch claims');\n      return response.json() as Promise<EnhancedClaim[]>;\n    }\n  });\n\n  const getServiceIcon = (serviceType: string) => {\n    switch (serviceType) {\n      case 'consultation':\n        return <Stethoscope className=\"w-4 h-4\" />;\n      case 'pharmacy':\n        return <Pill className=\"w-4 h-4\" />;\n      case 'lab':\n        return <TestTube className=\"w-4 h-4\" />;\n      case 'procedure':\n        return <FileText className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'fulfilled':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'cancelled':\n      case 'expired':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      case 'pending':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      default:\n        return <AlertTriangle className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'fulfilled':\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n      case 'denied':\n      case 'expired':\n        return 'bg-red-100 text-red-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const calculateClaimProgress = (claim: EnhancedClaim) => {\n    const totalServices = claim.services.length;\n    const completedServices = claim.services.filter(s => s.status === 'fulfilled').length;\n    return totalServices > 0 ? (completedServices / totalServices) * 100 : 0;\n  };\n\n  const getActiveClaims = () => claims.filter(claim => claim.isActive);\n  const getCompletedClaims = () => claims.filter(claim => !claim.isActive);\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-teal-600\"></div>\n            <span className=\"ml-2\">Loading claims...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Claims Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"w-5 h-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Claims</p>\n                <p className=\"text-2xl font-bold\">{getActiveClaims().length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Value</p>\n                <p className=\"text-2xl font-bold\">\n                  KES {claims.reduce((sum, claim) => sum + claim.totalAmount, 0).toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <CheckCircle className=\"w-5 h-5 text-teal-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Completed</p>\n                <p className=\"text-2xl font-bold\">{getCompletedClaims().length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Claims Tabs */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5 text-blue-600\" />\n            Claims Management\n          </CardTitle>\n          <CardDescription>\n            Track and manage patient claims with detailed service breakdown\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"active\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"active\">Active Claims ({getActiveClaims().length})</TabsTrigger>\n              <TabsTrigger value=\"completed\">Completed ({getCompletedClaims().length})</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"active\" className=\"mt-4\">\n              <div className=\"space-y-4\">\n                {getActiveClaims().map((claim) => (\n                  <ClaimCard \n                    key={claim.id} \n                    claim={claim} \n                    onSelect={setSelectedClaim}\n                    calculateProgress={calculateClaimProgress}\n                    getStatusColor={getStatusColor}\n                  />\n                ))}\n                {getActiveClaims().length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <FileText className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n                    <p>No active claims found</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"completed\" className=\"mt-4\">\n              <div className=\"space-y-4\">\n                {getCompletedClaims().map((claim) => (\n                  <ClaimCard \n                    key={claim.id} \n                    claim={claim} \n                    onSelect={setSelectedClaim}\n                    calculateProgress={calculateClaimProgress}\n                    getStatusColor={getStatusColor}\n                  />\n                ))}\n                {getCompletedClaims().length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <CheckCircle className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n                    <p>No completed claims found</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Claim View */}\n      {selectedClaim && (\n        <ClaimDetailsModal \n          claim={selectedClaim} \n          onClose={() => setSelectedClaim(null)}\n          getServiceIcon={getServiceIcon}\n          getStatusIcon={getStatusIcon}\n          getStatusColor={getStatusColor}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction ClaimCard({ \n  claim, \n  onSelect, \n  calculateProgress, \n  getStatusColor \n}: {\n  claim: EnhancedClaim;\n  onSelect: (claim: EnhancedClaim) => void;\n  calculateProgress: (claim: EnhancedClaim) => number;\n  getStatusColor: (status: string) => string;\n}) {\n  const progress = calculateProgress(claim);\n  \n  return (\n    <Card \n      className=\"cursor-pointer hover:shadow-md transition-shadow border-l-4 border-l-teal-500\"\n      onClick={() => onSelect(claim)}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center gap-3\">\n            <div>\n              <h3 className=\"font-semibold\">{claim.claimNumber}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {claim.patientName} • {claim.insurerName}\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <Badge className={getStatusColor(claim.status)}>\n              {claim.status.toUpperCase()}\n            </Badge>\n            <p className=\"text-sm font-medium mt-1\">\n              KES {claim.totalAmount.toLocaleString()}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span>{claim.services.length} services</span>\n            <span>{Math.round(progress)}% complete</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n        \n        <div className=\"flex items-center justify-between mt-3 text-xs text-gray-500\">\n          <span>Submitted: {new Date(claim.submittedAt).toLocaleDateString()}</span>\n          <span>Scheme: {claim.schemeName}</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction ClaimDetailsModal({ \n  claim, \n  onClose, \n  getServiceIcon, \n  getStatusIcon, \n  getStatusColor \n}: {\n  claim: EnhancedClaim;\n  onClose: () => void;\n  getServiceIcon: (type: string) => React.ReactNode;\n  getStatusIcon: (status: string) => React.ReactNode;\n  getStatusColor: (status: string) => string;\n}) {\n  return (\n    <Card>\n      <CardHeader className=\"border-b\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>{claim.claimNumber}</CardTitle>\n            <CardDescription>\n              Detailed claim information and service breakdown\n            </CardDescription>\n          </div>\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {/* Claim Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div className=\"flex items-center gap-2\">\n            <User className=\"w-4 h-4 text-gray-600\" />\n            <div>\n              <p className=\"text-sm text-gray-600\">Patient</p>\n              <p className=\"font-medium\">{claim.patientName}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Building2 className=\"w-4 h-4 text-gray-600\" />\n            <div>\n              <p className=\"text-sm text-gray-600\">Insurer</p>\n              <p className=\"font-medium\">{claim.insurerName}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"w-4 h-4 text-gray-600\" />\n            <div>\n              <p className=\"text-sm text-gray-600\">Submitted</p>\n              <p className=\"font-medium\">{new Date(claim.submittedAt).toLocaleDateString()}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Services Breakdown */}\n        <div>\n          <h4 className=\"font-semibold mb-4\">Services ({claim.services.length})</h4>\n          <div className=\"space-y-3\">\n            {claim.services.map((service) => (\n              <div \n                key={service.id} \n                className=\"flex items-center justify-between p-3 border rounded-lg\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  {getServiceIcon(service.serviceType)}\n                  <div>\n                    <p className=\"font-medium\">{service.serviceName}</p>\n                    <p className=\"text-sm text-gray-600\">\n                      Qty: {service.quantity} • Prescribed by: {service.prescribedBy}\n                    </p>\n                    {service.durationDays && (\n                      <p className=\"text-xs text-gray-500\">\n                        Duration: {service.durationDays} days\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    {getStatusIcon(service.status)}\n                    <Badge className={getStatusColor(service.status)}>\n                      {service.status.toUpperCase()}\n                    </Badge>\n                  </div>\n                  <p className=\"font-medium\">\n                    KES {service.totalCost.toLocaleString()}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    @{service.unitCost} each\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13870},"client/src/components/erlessed-logo.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface ErllessedLogoProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function ErllessedLogo({ className, size = \"md\" }: ErllessedLogoProps) {\n  const sizeClasses = {\n    sm: \"w-6 h-6\",\n    md: \"w-10 h-10\",\n    lg: \"w-16 h-16\"\n  };\n\n  const textSizeClasses = {\n    sm: \"text-lg\",\n    md: \"text-xl\",\n    lg: \"text-3xl\"\n  };\n\n  return (\n    <div className={cn(\"flex items-center space-x-3\", className)}>\n      {/* Medical Cross Logo */}\n      <div className=\"relative\">\n        <div className={cn(\n          \"bg-teal-primary rounded-lg flex items-center justify-center\",\n          sizeClasses[size]\n        )}>\n          <div className={cn(\n            \"relative\",\n            size === \"sm\" ? \"w-4 h-4\" : \n            size === \"md\" ? \"w-6 h-6\" : \"w-8 h-8\"\n          )}>\n            {/* Horizontal bar */}\n            <div className={cn(\n              \"absolute bg-teal-secondary rounded-sm\",\n              size === \"sm\" ? \"inset-x-1 inset-y-2 h-1\" :\n              size === \"md\" ? \"inset-x-1.5 inset-y-2.5 h-1\" : \"inset-x-2 inset-y-3 h-2\"\n            )}></div>\n            {/* Vertical bar */}\n            <div className={cn(\n              \"absolute bg-teal-secondary rounded-sm\",\n              size === \"sm\" ? \"inset-y-1 inset-x-2 w-1\" :\n              size === \"md\" ? \"inset-y-1.5 inset-x-2.5 w-1\" : \"inset-y-2 inset-x-3 w-2\"\n            )}></div>\n            {/* Center circle */}\n            <div className={cn(\n              \"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-full\",\n              size === \"sm\" ? \"w-1.5 h-1.5\" :\n              size === \"md\" ? \"w-2 h-2\" : \"w-3 h-3\"\n            )}></div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Text */}\n      <div>\n        <h1 className={cn(\"font-bold text-teal-primary\", textSizeClasses[size])}>\n          Erlessed\n        </h1>\n        <p className={cn(\n          \"text-gray-500\",\n          size === \"sm\" ? \"text-xs\" : \"text-xs\"\n        )}>\n          powered by <span className=\"font-semibold text-black\">Aboolean</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2133},"client/src/components/layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, DropdownMenuContent, DropdownMenuItem, \n  DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Sidebar, SidebarContent, SidebarFooter, SidebarGroup, \n  SidebarGroupContent, SidebarMenu, SidebarMenuButton, \n  SidebarMenuItem, SidebarProvider, SidebarTrigger \n} from \"@/components/ui/sidebar\";\nimport { \n  Home, Users, FileText, Brain, Pill, BarChart3, \n  Link2, DollarSign, Settings, Bell, LogOut \n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Logo } from \"@/components/logo\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst navigationItems = [\n  { title: \"Dashboard\", url: \"/\", icon: Home, roles: [\"all\"] },\n  { title: \"Patient Verification\", url: \"/verification\", icon: Users, roles: [\"front-office\", \"doctor\", \"care-manager\"] },\n  { title: \"Claims Processing\", url: \"/claims\", icon: FileText, roles: [\"front-office\", \"doctor\", \"care-manager\"] },\n  { title: \"AI Preauthorization\", url: \"/preauth\", icon: Brain, roles: [\"doctor\", \"care-manager\"] },\n  { title: \"Pharmacy\", url: \"/pharmacy\", icon: Pill, roles: [\"pharmacy\", \"care-manager\"] },\n  { title: \"Analytics\", url: \"/analytics\", icon: BarChart3, roles: [\"care-manager\", \"debtors\"] },\n  { title: \"Blockchain\", url: \"/blockchain\", icon: Link2, roles: [\"care-manager\"] },\n  { title: \"Debtors\", url: \"/debtors\", icon: DollarSign, roles: [\"debtors\", \"care-manager\"] },\n];\n\nexport function Layout({ children }: LayoutProps) {\n  const { user, logoutMutation } = useAuth();\n  const [location] = useLocation();\n\n  const getFilteredNavigation = () => {\n    if (!user) return [];\n    return navigationItems.filter(item => \n      item.roles.includes(\"all\") || item.roles.includes(user.role)\n    );\n  };\n\n  const getRoleDisplayName = (role: string) => {\n    const roleNames = {\n      'front-office': 'Front Office',\n      'doctor': 'Physician',\n      'lab': 'Laboratory',\n      'pharmacy': 'Pharmacy',\n      'debtors': 'Debtors',\n      'care-manager': 'Care Manager'\n    };\n    return roleNames[role as keyof typeof roleNames] || role;\n  };\n\n  const getUserInitials = (username: string) => {\n    return username.slice(0, 2).toUpperCase();\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <SidebarProvider>\n      <div className=\"min-h-screen flex w-full\">\n        <Sidebar className=\"border-r border-gray-200\">\n          <SidebarContent>\n            {/* Logo Section */}\n            <div className=\"p-6 border-b border-gray-200\">\n              <Link href=\"/\">\n                <div className=\"flex items-center space-x-3\">\n                  <Logo />\n                  <div>\n                    <h1 className=\"text-xl font-bold text-teal-600\">Erlessed</h1>\n                    <p className=\"text-xs text-gray-500\">powered by <span className=\"font-semibold text-black\">Aboolean</span></p>\n                  </div>\n                </div>\n              </Link>\n            </div>\n\n            {/* Navigation */}\n            <SidebarGroup>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {getFilteredNavigation().map((item) => (\n                    <SidebarMenuItem key={item.title}>\n                      <SidebarMenuButton \n                        asChild \n                        isActive={location === item.url}\n                        className={location === item.url ? \"bg-teal-50 text-teal-700\" : \"\"}\n                      >\n                        <Link href={item.url}>\n                          <item.icon className=\"w-4 h-4\" />\n                          <span>{item.title}</span>\n                        </Link>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n\n          {/* User Profile Footer */}\n          <SidebarFooter className=\"border-t border-gray-200 p-4\">\n            {user && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"w-full justify-start space-x-3 h-auto p-3\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarFallback className=\"bg-teal-100 text-teal-700\">\n                        {getUserInitials(user.username)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 text-left\">\n                      <p className=\"text-sm font-medium\">{user.username}</p>\n                      <p className=\"text-xs text-gray-500\">{getRoleDisplayName(user.role)}</p>\n                    </div>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    <span>Settings</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout}>\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Log out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n          </SidebarFooter>\n        </Sidebar>\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Top Navigation Bar */}\n          <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <SidebarTrigger />\n                {user && (\n                  <Badge variant=\"outline\" className=\"text-teal-700 border-teal-200\">\n                    {getRoleDisplayName(user.role)}\n                  </Badge>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                {/* AI Status Indicator */}\n                <div className=\"flex items-center space-x-2 bg-teal-50 px-3 py-1 rounded-full\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm text-teal-700 font-medium\">AI Active</span>\n                </div>\n\n                {/* Notifications */}\n                <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                  <Bell className=\"h-4 w-4\" />\n                  <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n                    3\n                  </span>\n                </Button>\n              </div>\n            </div>\n          </header>\n\n          {/* Page Content */}\n          <main className=\"flex-1 bg-gray-50\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":7324},"client/src/components/logo.tsx":{"content":"interface LogoProps {\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function Logo({ className = \"\", size = 'md' }: LogoProps) {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8',\n    lg: 'w-12 h-12'\n  };\n\n  return (\n    <div className={`${sizeClasses[size]} ${className}`}>\n      <div className=\"relative w-full h-full bg-teal-600 rounded-lg flex items-center justify-center\">\n        {/* Medical Cross Design */}\n        <div className=\"relative w-6 h-6\">\n          {/* Horizontal bar */}\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-5 h-1.5 bg-teal-200 rounded-sm\"></div>\n          {/* Vertical bar */}\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1.5 h-5 bg-teal-200 rounded-sm\"></div>\n          {/* Center circle */}\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-2 h-2 bg-white rounded-full\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1033},"client/src/components/mobile-nav.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Menu, X, User, MapPin, Heart, FileText, \n  Calendar, Pill, CreditCard, Phone, Settings,\n  LogOut, Home, Shield\n} from \"lucide-react\";\n\ninterface MobileNavProps {\n  userRole?: string;\n}\n\ninterface NavLink {\n  path: string;\n  icon: React.ComponentType<any>;\n  label: string;\n  badge?: string;\n}\n\nexport function MobileNav({ userRole }: MobileNavProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  const fieldWorkerLinks: NavLink[] = [\n    { path: \"/mobile-field-worker\", icon: MapPin, label: \"Field Visits\", badge: \"3\" },\n    { path: \"/patient-verification\", icon: Shield, label: \"Verify Patient\" },\n    { path: \"/emergency-contacts\", icon: Phone, label: \"Emergency\" },\n  ];\n\n  const patientPortalLinks: NavLink[] = [\n    { path: \"/mobile-patient-portal\", icon: Home, label: \"Dashboard\" },\n    { path: \"/appointments\", icon: Calendar, label: \"Appointments\" },\n    { path: \"/prescriptions\", icon: Pill, label: \"Medications\" },\n    { path: \"/claims\", icon: CreditCard, label: \"Claims\" },\n    { path: \"/health-records\", icon: Heart, label: \"Health Data\" },\n  ];\n\n  const getNavLinks = () => {\n    switch (userRole) {\n      case \"field-worker\":\n        return fieldWorkerLinks;\n      case \"patient\":\n        return patientPortalLinks;\n      default:\n        return [...fieldWorkerLinks, ...patientPortalLinks];\n    }\n  };\n\n  const isActive = (path: string) => {\n    return location === path || location.startsWith(path);\n  };\n\n  return (\n    <>\n      {/* Mobile Header */}\n      <div className=\"lg:hidden bg-gradient-to-r from-teal-600 to-blue-600 text-white p-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsOpen(!isOpen)}\n              className=\"text-white hover:bg-white/20\"\n            >\n              {isOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n            <div>\n              <h1 className=\"text-lg font-bold\">Erlessed Mobile</h1>\n              <p className=\"text-sm opacity-90\">{userRole || \"Healthcare\"}</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n              <User className=\"w-4 h-4\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Side Menu */}\n      {isOpen && (\n        <div className=\"lg:hidden fixed inset-0 z-50 bg-black/50\" onClick={() => setIsOpen(false)}>\n          <div className=\"w-80 h-full bg-white shadow-xl\" onClick={e => e.stopPropagation()}>\n            {/* Menu Header */}\n            <div className=\"bg-gradient-to-r from-teal-600 to-blue-600 text-white p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center\">\n                    <User className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">{user?.username}</p>\n                    <p className=\"text-sm opacity-90 capitalize\">{userRole?.replace('-', ' ')}</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Navigation Links */}\n            <div className=\"p-4 space-y-2\">\n              {getNavLinks().map((link) => (\n                <Link key={link.path} href={link.path}>\n                  <div\n                    className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n                      isActive(link.path)\n                        ? \"bg-teal-50 text-teal-700 border border-teal-200\"\n                        : \"hover:bg-gray-50\"\n                    }`}\n                    onClick={() => setIsOpen(false)}\n                  >\n                    <link.icon className=\"w-5 h-5\" />\n                    <span className=\"flex-1 font-medium\">{link.label}</span>\n                    {link.badge && (\n                      <Badge variant=\"secondary\" className=\"bg-teal-100 text-teal-700\">\n                        {link.badge}\n                      </Badge>\n                    )}\n                  </div>\n                </Link>\n              ))}\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"p-4 border-t\">\n              <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Quick Actions</h3>\n              <div className=\"space-y-2\">\n                <Button className=\"w-full justify-start bg-red-600 hover:bg-red-700\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  Emergency Call\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Settings\n                </Button>\n              </div>\n            </div>\n\n            {/* Logout */}\n            <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t bg-gray-50\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full justify-start text-red-600 border-red-200 hover:bg-red-50\"\n                onClick={() => {\n                  logout();\n                  setIsOpen(false);\n                }}\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Sign Out\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n// Mobile Quick Access Widget\nexport function MobileQuickAccess() {\n  return (\n    <div className=\"lg:hidden fixed bottom-4 right-4 z-40\">\n      <Card className=\"shadow-lg\">\n        <CardContent className=\"p-3\">\n          <div className=\"flex space-x-2\">\n            <Button size=\"sm\" className=\"bg-red-600 hover:bg-red-700\">\n              <Phone className=\"w-4 h-4\" />\n            </Button>\n            <Button size=\"sm\" variant=\"outline\">\n              <FileText className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6840},"client/src/components/registration-validator.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Shield, \n  CheckCircle, \n  XCircle, \n  AlertTriangle, \n  Search, \n  Users, \n  Building2,\n  Calendar,\n  FileText\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface VerificationResult {\n  isValid: boolean;\n  practitioner?: {\n    fullName: string;\n    status: string;\n    cadre: string;\n    specialization: string;\n    facility: string;\n    board: string;\n    licenseExpiryDate: string;\n    practiceLicense: string;\n  };\n  error?: string;\n}\n\ninterface RegistrationStats {\n  totalPractitioners: number;\n  activePractitioners: number;\n  suspendedPractitioners: number;\n  expiredLicenses: number;\n  boardBreakdown: Record<string, number>;\n}\n\nexport function RegistrationValidator() {\n  const { toast } = useToast();\n  const [registrationNumber, setRegistrationNumber] = useState(\"\");\n  const [selectedCadre, setSelectedCadre] = useState(\"\");\n  const [verificationResult, setVerificationResult] = useState<VerificationResult | null>(null);\n  const [searchQuery, setSearchQuery] = useState({\n    name: \"\",\n    facility: \"\",\n    cadre: \"\",\n    board: \"\"\n  });\n\n  // Fetch registration boards\n  const { data: boards = [] } = useQuery({\n    queryKey: [\"/api/registration/boards\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/registration/boards\");\n      const data = await response.json();\n      return data.boards || [];\n    },\n  });\n\n  // Fetch registration statistics\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/registration/statistics\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/registration/statistics\");\n      const data = await response.json();\n      return data as RegistrationStats;\n    },\n  });\n\n  // Verification mutation\n  const verifyMutation = useMutation({\n    mutationFn: async (data: { registrationNumber: string; cadre?: string }) => {\n      const response = await fetch(\"/api/verify-registration\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      \n      const result = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(result.error || \"Verification failed\");\n      }\n      \n      return result as VerificationResult;\n    },\n    onSuccess: (result) => {\n      setVerificationResult(result);\n      toast({\n        title: \"Verification Complete\",\n        description: result.isValid ? \"Registration verified successfully\" : \"Registration verification failed\",\n        variant: result.isValid ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error: Error) => {\n      setVerificationResult({\n        isValid: false,\n        error: error.message\n      });\n      toast({\n        title: \"Verification Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Search mutation\n  const searchMutation = useMutation({\n    mutationFn: async (query: typeof searchQuery) => {\n      const params = new URLSearchParams();\n      Object.entries(query).forEach(([key, value]) => {\n        if (value) params.append(key, value);\n      });\n      \n      const response = await fetch(`/api/registration/search?${params}`, {\n        credentials: 'include'\n      });\n      const data = await response.json();\n      return data.practitioners || [];\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Search Complete\",\n        description: \"Practitioner search completed successfully\",\n      });\n    },\n  });\n\n  const handleVerify = () => {\n    if (!registrationNumber.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a registration number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    verifyMutation.mutate({\n      registrationNumber: registrationNumber.trim(),\n      cadre: selectedCadre || undefined\n    });\n  };\n\n  const handleSearch = () => {\n    searchMutation.mutate(searchQuery);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Active</Badge>;\n      case \"suspended\":\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"w-3 h-3 mr-1\" />Suspended</Badge>;\n      case \"inactive\":\n        return <Badge className=\"bg-gray-100 text-gray-800\"><AlertTriangle className=\"w-3 h-3 mr-1\" />Inactive</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const sampleRegistrations = [\n    { number: \"KMPDC/001/2018\", cadre: \"Medical Doctor\", description: \"Active doctor registration\" },\n    { number: \"PPB/001/2018\", cadre: \"Pharmacist\", description: \"Active pharmacist registration\" },\n    { number: \"COC/001/2019\", cadre: \"Clinical Officer\", description: \"Active clinical officer\" },\n    { number: \"KMPDC/004/2017\", cadre: \"Medical Doctor\", description: \"Suspended registration\" },\n    { number: \"COC/003/2020\", cadre: \"Clinical Officer\", description: \"Expired license\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Shield className=\"w-5 h-5 mr-2 text-teal-600\" />\n            Kenya Clinical Registration Validator\n          </CardTitle>\n          <CardDescription>\n            Verify professional licenses with Kenya's clinical registration boards (KMPDC, COC, PPB)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"verify\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"verify\">Verify Registration</TabsTrigger>\n              <TabsTrigger value=\"search\">Search Practitioners</TabsTrigger>\n              <TabsTrigger value=\"stats\">Statistics</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"verify\" className=\"space-y-6\">\n              {/* Sample Registrations */}\n              <div>\n                <h3 className=\"font-semibold mb-3\">Sample Registrations for Testing</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {sampleRegistrations.map((sample, index) => (\n                    <Card key={index} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                          onClick={() => {\n                            setRegistrationNumber(sample.number);\n                            setSelectedCadre(sample.cadre);\n                          }}>\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <p className=\"font-mono text-sm font-medium\">{sample.number}</p>\n                            <p className=\"text-xs text-gray-600\">{sample.cadre}</p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {sample.description}\n                          </Badge>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Verification Form */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"regNumber\">Registration Number</Label>\n                  <Input\n                    id=\"regNumber\"\n                    value={registrationNumber}\n                    onChange={(e) => setRegistrationNumber(e.target.value)}\n                    placeholder=\"e.g., KMPDC/001/2018\"\n                    className=\"font-mono\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"cadre\">Expected Cadre (Optional)</Label>\n                  <Select value={selectedCadre} onValueChange={setSelectedCadre}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select cadre\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">Any Cadre</SelectItem>\n                      <SelectItem value=\"Medical Doctor\">Medical Doctor</SelectItem>\n                      <SelectItem value=\"Pharmacist\">Pharmacist</SelectItem>\n                      <SelectItem value=\"Clinical Officer\">Clinical Officer</SelectItem>\n                      <SelectItem value=\"Nurse\">Nurse</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleVerify}\n                disabled={verifyMutation.isPending}\n                className=\"w-full bg-teal-600 hover:bg-teal-700\"\n              >\n                {verifyMutation.isPending ? \"Verifying...\" : \"Verify Registration\"}\n                <Shield className=\"w-4 h-4 ml-2\" />\n              </Button>\n\n              {/* Verification Results */}\n              {verificationResult && (\n                <Alert className={verificationResult.isValid ? \"border-green-200 bg-green-50\" : \"border-red-200 bg-red-50\"}>\n                  <div className=\"flex items-start\">\n                    {verificationResult.isValid ? (\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mr-3 mt-0.5\" />\n                    ) : (\n                      <XCircle className=\"w-5 h-5 text-red-600 mr-3 mt-0.5\" />\n                    )}\n                    <div className=\"flex-1\">\n                      <AlertDescription>\n                        {verificationResult.isValid ? (\n                          <div className=\"space-y-3\">\n                            <p className=\"font-semibold text-green-800\">Registration Verified Successfully</p>\n                            <div className=\"bg-white rounded-lg p-4 space-y-2\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">Full Name</p>\n                                  <p className=\"text-sm\">{verificationResult.practitioner?.fullName}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">Status</p>\n                                  {getStatusBadge(verificationResult.practitioner?.status || \"\")}\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">Cadre</p>\n                                  <p className=\"text-sm\">{verificationResult.practitioner?.cadre}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">Specialization</p>\n                                  <p className=\"text-sm\">{verificationResult.practitioner?.specialization}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">Facility</p>\n                                  <p className=\"text-sm\">{verificationResult.practitioner?.facility}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">Board</p>\n                                  <p className=\"text-sm\">{verificationResult.practitioner?.board}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">License Expiry</p>\n                                  <p className=\"text-sm flex items-center\">\n                                    <Calendar className=\"w-3 h-3 mr-1\" />\n                                    {new Date(verificationResult.practitioner?.licenseExpiryDate || \"\").toLocaleDateString()}\n                                  </p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-700\">Practice License</p>\n                                  <p className=\"text-sm font-mono\">{verificationResult.practitioner?.practiceLicense}</p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        ) : (\n                          <div>\n                            <p className=\"font-semibold text-red-800\">Verification Failed</p>\n                            <p className=\"text-red-700 mt-1\">{verificationResult.error}</p>\n                          </div>\n                        )}\n                      </AlertDescription>\n                    </div>\n                  </div>\n                </Alert>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"search\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"searchName\">Practitioner Name</Label>\n                  <Input\n                    id=\"searchName\"\n                    value={searchQuery.name}\n                    onChange={(e) => setSearchQuery({...searchQuery, name: e.target.value})}\n                    placeholder=\"Enter name to search\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"searchFacility\">Facility</Label>\n                  <Input\n                    id=\"searchFacility\"\n                    value={searchQuery.facility}\n                    onChange={(e) => setSearchQuery({...searchQuery, facility: e.target.value})}\n                    placeholder=\"Enter facility name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"searchCadre\">Cadre</Label>\n                  <Select value={searchQuery.cadre} onValueChange={(value) => setSearchQuery({...searchQuery, cadre: value})}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select cadre\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All Cadres</SelectItem>\n                      <SelectItem value=\"Medical Doctor\">Medical Doctor</SelectItem>\n                      <SelectItem value=\"Pharmacist\">Pharmacist</SelectItem>\n                      <SelectItem value=\"Clinical Officer\">Clinical Officer</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"searchBoard\">Board</Label>\n                  <Select value={searchQuery.board} onValueChange={(value) => setSearchQuery({...searchQuery, board: value})}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select board\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All Boards</SelectItem>\n                      {boards.map((board: string) => (\n                        <SelectItem key={board} value={board}>{board}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleSearch}\n                disabled={searchMutation.isPending}\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              >\n                {searchMutation.isPending ? \"Searching...\" : \"Search Practitioners\"}\n                <Search className=\"w-4 h-4 ml-2\" />\n              </Button>\n\n              {searchMutation.data && (\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-semibold\">Search Results ({searchMutation.data.length})</h3>\n                  {searchMutation.data.map((practitioner: any, index: number) => (\n                    <Card key={index}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-semibold\">{practitioner.fullName}</h4>\n                            <p className=\"text-sm text-gray-600\">{practitioner.cadre} - {practitioner.specialization}</p>\n                            <p className=\"text-sm text-gray-500\">{practitioner.facility}</p>\n                          </div>\n                          <div className=\"text-right space-y-1\">\n                            {getStatusBadge(practitioner.status)}\n                            <p className=\"text-xs text-gray-500\">{practitioner.board}</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"stats\" className=\"space-y-6\">\n              {stats && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center\">\n                        <Users className=\"h-8 w-8 text-blue-600\" />\n                        <div className=\"ml-4\">\n                          <p className=\"text-sm font-medium text-gray-600\">Total Practitioners</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">{stats.totalPractitioners}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                        <div className=\"ml-4\">\n                          <p className=\"text-sm font-medium text-gray-600\">Active Licenses</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">{stats.activePractitioners}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center\">\n                        <XCircle className=\"h-8 w-8 text-red-600\" />\n                        <div className=\"ml-4\">\n                          <p className=\"text-sm font-medium text-gray-600\">Suspended</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">{stats.suspendedPractitioners}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center\">\n                        <AlertTriangle className=\"h-8 w-8 text-yellow-600\" />\n                        <div className=\"ml-4\">\n                          <p className=\"text-sm font-medium text-gray-600\">Expired Licenses</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">{stats.expiredLicenses}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {stats && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Building2 className=\"w-5 h-5 mr-2\" />\n                      Board Breakdown\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {Object.entries(stats.boardBreakdown).map(([board, count]) => (\n                        <div key={board} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium\">{board}</span>\n                          <Badge variant=\"outline\">{count} practitioners</Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":21229},"client/src/components/treatment-plan-display.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Pill, \n  Clock, \n  AlertTriangle, \n  Heart, \n  Activity, \n  FileText,\n  User,\n  Calendar,\n  Shield,\n  Brain\n} from \"lucide-react\";\n\ninterface TreatmentPlan {\n  primaryTreatment: {\n    medication: string;\n    dosage: string;\n    frequency: string;\n    duration: string;\n    instructions: string;\n  };\n  alternativeTreatments: Array<{\n    medication: string;\n    dosage: string;\n    reason: string;\n  }>;\n  nonPharmacological: string[];\n  followUpCare: string[];\n  warningSignsToWatch: string[];\n  dietaryRecommendations: string[];\n  lifestyleModifications: string[];\n  expectedOutcome: string;\n  timeToImprovement: string;\n  confidence: number;\n  reasoning: string[];\n  generatedBy?: string;\n  timestamp?: string;\n}\n\ninterface TreatmentPlanDisplayProps {\n  treatmentPlan: TreatmentPlan;\n  patientName?: string;\n  diagnosis: string;\n}\n\nexport function TreatmentPlanDisplay({ \n  treatmentPlan, \n  patientName = \"Patient\",\n  diagnosis \n}: TreatmentPlanDisplayProps) {\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 85) return \"text-green-600 bg-green-50 border-green-200\";\n    if (confidence >= 70) return \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n    return \"text-red-600 bg-red-50 border-red-200\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card className=\"border-2 border-teal-100\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <FileText className=\"h-6 w-6 text-teal-600\" />\n              <div>\n                <CardTitle className=\"text-xl\">Treatment Plan</CardTitle>\n                <p className=\"text-sm text-gray-600\">\n                  {patientName} • {diagnosis}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {treatmentPlan.generatedBy === 'mistral-7b' && (\n                <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                  <Brain className=\"h-3 w-3 mr-1\" />\n                  Mistral 7B\n                </Badge>\n              )}\n              <div className={`px-3 py-1 rounded-full border ${getConfidenceColor(treatmentPlan.confidence)}`}>\n                <span className=\"text-sm font-medium\">\n                  {treatmentPlan.confidence}% confidence\n                </span>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Expected Outcome */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Heart className=\"h-4 w-4 text-green-600\" />\n                <span className=\"font-medium text-green-800\">Expected Outcome</span>\n              </div>\n              <p className=\"text-sm text-gray-700 bg-green-50 p-3 rounded-lg\">\n                {treatmentPlan.expectedOutcome}\n              </p>\n            </div>\n\n            {/* Time to Improvement */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-blue-600\" />\n                <span className=\"font-medium text-blue-800\">Time to Improvement</span>\n              </div>\n              <p className=\"text-sm text-gray-700 bg-blue-50 p-3 rounded-lg\">\n                {treatmentPlan.timeToImprovement}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Primary Treatment */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Pill className=\"h-5 w-5 text-teal-600\" />\n            <span>Primary Treatment</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"space-y-1\">\n                <label className=\"text-sm font-medium text-gray-600\">Medication</label>\n                <p className=\"text-sm font-semibold text-teal-700 bg-teal-50 p-2 rounded\">\n                  {treatmentPlan.primaryTreatment.medication}\n                </p>\n              </div>\n              <div className=\"space-y-1\">\n                <label className=\"text-sm font-medium text-gray-600\">Dosage</label>\n                <p className=\"text-sm text-gray-800 bg-gray-50 p-2 rounded\">\n                  {treatmentPlan.primaryTreatment.dosage}\n                </p>\n              </div>\n              <div className=\"space-y-1\">\n                <label className=\"text-sm font-medium text-gray-600\">Frequency</label>\n                <p className=\"text-sm text-gray-800 bg-gray-50 p-2 rounded\">\n                  {treatmentPlan.primaryTreatment.frequency}\n                </p>\n              </div>\n              <div className=\"space-y-1\">\n                <label className=\"text-sm font-medium text-gray-600\">Duration</label>\n                <p className=\"text-sm text-gray-800 bg-gray-50 p-2 rounded\">\n                  {treatmentPlan.primaryTreatment.duration}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <h4 className=\"font-medium text-blue-800 mb-2\">Instructions</h4>\n              <p className=\"text-sm text-blue-700\">\n                {treatmentPlan.primaryTreatment.instructions}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Alternative Treatments */}\n      {treatmentPlan.alternativeTreatments.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Activity className=\"h-5 w-5 text-orange-600\" />\n              <span>Alternative Treatments</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {treatmentPlan.alternativeTreatments.map((alt, index) => (\n                <div key={index} className=\"p-3 border border-orange-200 bg-orange-50 rounded-lg\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <span className=\"font-medium text-orange-800\">{alt.medication}</span>\n                    <span className=\"text-sm text-orange-600\">{alt.dosage}</span>\n                  </div>\n                  <p className=\"text-sm text-orange-700\">{alt.reason}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Non-Pharmacological Interventions */}\n        {treatmentPlan.nonPharmacological.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <User className=\"h-5 w-5 text-green-600\" />\n                <span>Non-Drug Interventions</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                {treatmentPlan.nonPharmacological.map((intervention, index) => (\n                  <li key={index} className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                    <span className=\"text-sm text-gray-700\">{intervention}</span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Follow-up Care */}\n        {treatmentPlan.followUpCare.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-5 w-5 text-blue-600\" />\n                <span>Follow-up Care</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                {treatmentPlan.followUpCare.map((followUp, index) => (\n                  <li key={index} className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\n                    <span className=\"text-sm text-gray-700\">{followUp}</span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Warning Signs */}\n      {treatmentPlan.warningSignsToWatch.length > 0 && (\n        <Card className=\"border-2 border-red-200 bg-red-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-red-800\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              <span>Warning Signs to Watch</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {treatmentPlan.warningSignsToWatch.map((warning, index) => (\n                <div key={index} className=\"flex items-start space-x-2 p-2 bg-white border border-red-200 rounded\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-600 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm text-red-700\">{warning}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Dietary Recommendations */}\n        {treatmentPlan.dietaryRecommendations.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Dietary Recommendations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                {treatmentPlan.dietaryRecommendations.map((diet, index) => (\n                  <li key={index} className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\" />\n                    <span className=\"text-sm text-gray-700\">{diet}</span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Lifestyle Modifications */}\n        {treatmentPlan.lifestyleModifications.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Lifestyle Modifications</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                {treatmentPlan.lifestyleModifications.map((lifestyle, index) => (\n                  <li key={index} className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-indigo-500 rounded-full mt-2 flex-shrink-0\" />\n                    <span className=\"text-sm text-gray-700\">{lifestyle}</span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Reasoning */}\n      {treatmentPlan.reasoning.length > 0 && (\n        <Card className=\"border-2 border-purple-100\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Brain className=\"h-5 w-5 text-purple-600\" />\n              <span>Clinical Reasoning</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {treatmentPlan.reasoning.map((reason, index) => (\n                <div key={index} className=\"flex space-x-3\">\n                  <div className=\"flex-shrink-0 w-6 h-6 bg-purple-100 text-purple-700 rounded-full flex items-center justify-center text-xs font-medium\">\n                    {index + 1}\n                  </div>\n                  <div className=\"flex-1 text-sm text-gray-700 bg-purple-50 p-3 rounded-lg\">\n                    {reason}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Footer */}\n      {treatmentPlan.timestamp && (\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-500\">\n            Generated on {new Date(treatmentPlan.timestamp).toLocaleDateString()} at{' '}\n            {new Date(treatmentPlan.timestamp).toLocaleTimeString()}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12717},"client/src/components/verification-audit-log.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Shield, \n  Download, \n  Filter, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  X,\n  FileText,\n  Search,\n  Calendar,\n  Lock\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface VerificationAuditEntry {\n  id: string;\n  patientName: string;\n  service: string;\n  billedBy: string;\n  billedAt: string;\n  verifiedBy: string;\n  fingerprintStatus: 'verified' | 'missing' | 'pending' | 'time_mismatch';\n  timestamp: string;\n  department: string;\n  amount: number;\n  serviceCode: string;\n  verificationHash?: string;\n  timeDifference?: number; // minutes between billing and verification\n}\n\ninterface VerificationAuditLogProps {\n  isPremiumUser: boolean;\n}\n\nexport function VerificationAuditLog({ isPremiumUser }: VerificationAuditLogProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [selectedEntry, setSelectedEntry] = useState<VerificationAuditEntry | null>(null);\n\n  // Fetch audit data from API\n  const { data: auditResponse, isLoading } = useQuery({\n    queryKey: ['/api/debtors/verification-audit', { \n      department: selectedDepartment !== 'all' ? selectedDepartment : undefined,\n      status: selectedStatus !== 'all' ? selectedStatus : undefined,\n      dateFrom: dateFrom || undefined,\n      dateTo: dateTo || undefined,\n      search: searchTerm || undefined\n    }],\n    queryFn: ({ queryKey }) => {\n      const params = new URLSearchParams();\n      const filters = queryKey[1] as Record<string, string>;\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value) params.append(key, value);\n      });\n      return apiRequest(`/api/debtors/verification-audit?${params.toString()}`);\n    },\n    enabled: isPremiumUser\n  });\n\n  const auditData = auditResponse?.data || [];\n  const auditSummary = auditResponse?.summary || {\n    total: 0,\n    verified: 0,\n    missing: 0,\n    pending: 0,\n    timeMismatches: 0\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'verified':\n        return (\n          <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Verified\n          </Badge>\n        );\n      case 'missing':\n        return (\n          <Badge variant=\"destructive\">\n            <X className=\"h-3 w-3 mr-1\" />\n            Missing\n          </Badge>\n        );\n      case 'pending':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case 'time_mismatch':\n        return (\n          <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Time Mismatch\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const getFilteredData = () => {\n    return auditData;\n  };\n\n  const exportToPDF = () => {\n    console.log(\"Exporting verification audit to PDF...\");\n    // Implementation for PDF export\n  };\n\n  const exportToCSV = () => {\n    const csvContent = [\n      \"Patient Name,Service,Billed By,Billed At,Verified By,Fingerprint Status,Timestamp,Department,Amount,Service Code\",\n      ...getFilteredData().map(entry => \n        `${entry.patientName},${entry.service},${entry.billedBy},${entry.billedAt},${entry.verifiedBy},${entry.fingerprintStatus},${entry.timestamp},${entry.department},${entry.amount},${entry.serviceCode}`\n      )\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `verification-audit-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  if (!isPremiumUser) {\n    return (\n      <Card className=\"relative\">\n        <div className=\"absolute inset-0 bg-gray-50/80 backdrop-blur-sm z-10 flex items-center justify-center rounded-lg\">\n          <div className=\"text-center p-6\">\n            <Lock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">Premium Feature</h3>\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Upgrade to Premium to unlock Verification Audit Tools\n            </p>\n            <Button variant=\"outline\" className=\"text-teal-600 border-teal-600 hover:bg-teal-50\">\n              Upgrade Now\n            </Button>\n          </div>\n        </div>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Shield className=\"h-5 w-5 text-teal-600\" />\n            <span>Verification Audit Log</span>\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n          <CardDescription>\n            Comprehensive audit trail of biometric verifications and billing activities\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"blur-sm\">\n          <div className=\"h-64 bg-gray-100 rounded-lg\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5 text-teal-600\" />\n              <span>Verification Audit Log</span>\n              <Badge className=\"bg-teal-100 text-teal-800\">Premium</Badge>\n            </CardTitle>\n            <CardDescription>\n              Comprehensive audit trail of biometric verifications and billing activities\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={exportToCSV}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export CSV\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={exportToPDF}>\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Export PDF\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"audit\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"audit\">Audit Table</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"audit\" className=\"space-y-4\">\n            {/* Filters */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-4 p-4 bg-gray-50 rounded-lg\">\n              <div>\n                <Label htmlFor=\"search\">Search</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Patient, service, or provider...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"department\">Department</Label>\n                <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    <SelectItem value=\"Outpatient\">Outpatient</SelectItem>\n                    <SelectItem value=\"Pharmacy\">Pharmacy</SelectItem>\n                    <SelectItem value=\"Laboratory\">Laboratory</SelectItem>\n                    <SelectItem value=\"Physiotherapy\">Physiotherapy</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"status\">Verification Status</Label>\n                <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"verified\">Verified</SelectItem>\n                    <SelectItem value=\"missing\">Missing</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"time_mismatch\">Time Mismatch</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"date-from\">Date From</Label>\n                <Input\n                  id=\"date-from\"\n                  type=\"date\"\n                  value={dateFrom}\n                  onChange={(e) => setDateFrom(e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"date-to\">Date To</Label>\n                <Input\n                  id=\"date-to\"\n                  type=\"date\"\n                  value={dateTo}\n                  onChange={(e) => setDateTo(e.target.value)}\n                />\n              </div>\n            </div>\n\n            {/* Audit Table */}\n            <div className=\"border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient Name</TableHead>\n                    <TableHead>Service</TableHead>\n                    <TableHead>Billed By</TableHead>\n                    <TableHead>Billed At</TableHead>\n                    <TableHead>Verified By</TableHead>\n                    <TableHead>Fingerprint Status</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {isLoading ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8\">\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-teal-600\"></div>\n                          <span>Loading audit data...</span>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : getFilteredData().length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8 text-gray-500\">\n                        No audit records found matching your criteria\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    getFilteredData().map((entry) => (\n                    <TableRow key={entry.id} className=\"hover:bg-gray-50\">\n                      <TableCell className=\"font-medium\">{entry.patientName}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{entry.service}</div>\n                          <div className=\"text-xs text-gray-500\">{entry.serviceCode}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{entry.billedBy}</div>\n                          <div className=\"text-xs text-gray-500\">{entry.department}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-sm\">\n                        {new Date(entry.billedAt).toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                        {entry.verifiedBy || <span className=\"text-gray-400\">Not verified</span>}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(entry.fingerprintStatus)}\n                        {entry.fingerprintStatus === 'time_mismatch' && entry.timeDifference && (\n                          <div className=\"text-xs text-orange-600 mt-1\">\n                            {entry.timeDifference > 0 ? '+' : ''}{entry.timeDifference}min\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        KES {entry.amount.toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedEntry(entry)}>\n                              View Details\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"sm:max-w-2xl\">\n                            <DialogHeader>\n                              <DialogTitle>Verification Audit Details</DialogTitle>\n                              <DialogDescription>\n                                Complete audit trail for {entry.patientName}\n                              </DialogDescription>\n                            </DialogHeader>\n                            {selectedEntry && (\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div className=\"space-y-2\">\n                                    <h4 className=\"font-medium\">Service Information</h4>\n                                    <div className=\"space-y-1 text-sm\">\n                                      <p><strong>Patient:</strong> {selectedEntry.patientName}</p>\n                                      <p><strong>Service:</strong> {selectedEntry.service}</p>\n                                      <p><strong>Service Code:</strong> {selectedEntry.serviceCode}</p>\n                                      <p><strong>Amount:</strong> KES {selectedEntry.amount.toLocaleString()}</p>\n                                      <p><strong>Department:</strong> {selectedEntry.department}</p>\n                                    </div>\n                                  </div>\n                                  <div className=\"space-y-2\">\n                                    <h4 className=\"font-medium\">Verification Details</h4>\n                                    <div className=\"space-y-1 text-sm\">\n                                      <p><strong>Billed By:</strong> {selectedEntry.billedBy}</p>\n                                      <p><strong>Billed At:</strong> {new Date(selectedEntry.billedAt).toLocaleString()}</p>\n                                      <p><strong>Verified By:</strong> {selectedEntry.verifiedBy || 'Not verified'}</p>\n                                      <p><strong>Verified At:</strong> {selectedEntry.timestamp ? new Date(selectedEntry.timestamp).toLocaleString() : 'N/A'}</p>\n                                      <p><strong>Status:</strong> {getStatusBadge(selectedEntry.fingerprintStatus)}</p>\n                                    </div>\n                                  </div>\n                                </div>\n                                {selectedEntry.verificationHash && (\n                                  <div className=\"p-3 bg-gray-50 rounded-lg\">\n                                    <h4 className=\"font-medium mb-2\">Blockchain Hash</h4>\n                                    <code className=\"text-xs bg-white p-2 rounded border block\">\n                                      {selectedEntry.verificationHash}\n                                    </code>\n                                  </div>\n                                )}\n                                {selectedEntry.fingerprintStatus === 'time_mismatch' && (\n                                  <div className=\"p-3 bg-orange-50 rounded-lg border border-orange-200\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                                      <span className=\"font-medium text-orange-800\">Time Mismatch Alert</span>\n                                    </div>\n                                    <p className=\"text-sm text-orange-700 mt-1\">\n                                      Verification occurred {Math.abs(selectedEntry.timeDifference || 0)} minutes \n                                      {(selectedEntry.timeDifference || 0) > 0 ? ' after' : ' before'} billing. \n                                      This may indicate irregular billing practices.\n                                    </p>\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </DialogContent>\n                        </Dialog>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Verification Rate</p>\n                      <p className=\"text-2xl font-bold text-green-600\">\n                        {auditSummary.total > 0 ? Math.round((auditSummary.verified / auditSummary.total) * 100) : 0}%\n                      </p>\n                    </div>\n                    <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Missing Verifications</p>\n                      <p className=\"text-2xl font-bold text-red-600\">\n                        {auditSummary.missing}\n                      </p>\n                    </div>\n                    <X className=\"h-8 w-8 text-red-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Time Mismatches</p>\n                      <p className=\"text-2xl font-bold text-orange-600\">\n                        {auditSummary.timeMismatches}\n                      </p>\n                    </div>\n                    <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":20370},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  name: string;\n  role: string;\n  department: string | null;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n  lastActivity: number;\n  updateActivity: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes\nconst ACTIVITY_CHECK_INTERVAL = 60 * 1000; // 1 minute\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [lastActivity, setLastActivity] = useState(Date.now());\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current user\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username, password }),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Login failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: async (userData) => {\n      // Set the user data immediately\n      queryClient.setQueryData([\"/api/user\"], userData);\n      updateActivity();\n      \n      // Wait a moment then refetch to ensure session is established\n      setTimeout(async () => {\n        await queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n        await queryClient.refetchQueries({ queryKey: [\"/api/user\"] });\n      }, 100);\n      \n      // Small delay to ensure session is properly established\n      setTimeout(() => {\n        // Redirect based on user role\n        const roleDashboards: Record<string, string> = {\n          doctor: \"/modern-doctor\",\n          pharmacy: \"/modern-pharmacy\", \n          pharmacist: \"/modern-pharmacy\",\n          \"care-manager\": \"/modern-care-manager\",\n          insurer: \"/modern-insurer\",\n          patient: \"/modern-patient\",\n          admin: \"/modern-admin\",\n          debtors: \"/debtors-dashboard\"\n        };\n        \n        const targetDashboard = roleDashboards[userData.role] || \"/\";\n        \n        // Force page reload for debtors to ensure proper authentication state\n        if (userData.role === 'debtors') {\n          window.location.href = targetDashboard;\n        } else {\n          setLocation(targetDashboard);\n        }\n        \n        toast({\n          title: \"Login Successful\",\n          description: `Welcome to your ${userData.role} dashboard!`,\n        });\n      }, 100);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      setLocation(\"/auth\");\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out\",\n      });\n    },\n    onError: () => {\n      // Even if logout fails on server, clear client state\n      queryClient.clear();\n      setLocation(\"/auth\");\n      toast({\n        title: \"Logged Out\",\n        description: \"Session ended\",\n      });\n    },\n  });\n\n  const updateActivity = () => {\n    setLastActivity(Date.now());\n  };\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  const login = async (username: string, password: string) => {\n    await loginMutation.mutateAsync({ username, password });\n  };\n\n  // Activity tracking\n  useEffect(() => {\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    const handleActivity = () => {\n      updateActivity();\n    };\n\n    events.forEach(event => {\n      document.addEventListener(event, handleActivity, true);\n    });\n\n    return () => {\n      events.forEach(event => {\n        document.removeEventListener(event, handleActivity, true);\n      });\n    };\n  }, []);\n\n  // Auto-logout on inactivity\n  useEffect(() => {\n    if (!user) return;\n\n    const checkInactivity = () => {\n      const timeSinceLastActivity = Date.now() - lastActivity;\n      \n      if (timeSinceLastActivity >= INACTIVITY_TIMEOUT) {\n        toast({\n          title: \"Session Expired\",\n          description: \"You have been logged out due to inactivity\",\n          variant: \"destructive\",\n        });\n        logout();\n      }\n    };\n\n    const interval = setInterval(checkInactivity, ACTIVITY_CHECK_INTERVAL);\n\n    return () => clearInterval(interval);\n  }, [user, lastActivity]);\n\n  // Redirect to auth if not authenticated and not already on auth page\n  useEffect(() => {\n    if (error && !isLoading) {\n      const currentPath = window.location.pathname;\n      if (currentPath !== \"/auth\" && currentPath !== \"/onboarding\") {\n        setLocation(\"/auth\");\n      }\n    }\n  }, [error, isLoading, setLocation]);\n\n  const value: AuthContextType = {\n    user: user || null,\n    login,\n    logout,\n    isLoading,\n    lastActivity,\n    updateActivity,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\n// Session timeout warning component\nexport function SessionTimeoutWarning() {\n  const { user, lastActivity, logout } = useAuth();\n  const [showWarning, setShowWarning] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!user) return;\n\n    const checkWarning = () => {\n      const timeSinceLastActivity = Date.now() - lastActivity;\n      const timeUntilLogout = INACTIVITY_TIMEOUT - timeSinceLastActivity;\n      const warningThreshold = 2 * 60 * 1000; // 2 minutes before logout\n\n      if (timeUntilLogout <= warningThreshold && timeUntilLogout > 0 && !showWarning) {\n        setShowWarning(true);\n        toast({\n          title: \"Session Expiring Soon\",\n          description: `Your session will expire in ${Math.ceil(timeUntilLogout / 60000)} minutes due to inactivity`,\n          variant: \"destructive\",\n        });\n      } else if (timeUntilLogout > warningThreshold) {\n        setShowWarning(false);\n      }\n    };\n\n    const interval = setInterval(checkWarning, 30000); // Check every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [user, lastActivity, showWarning, toast]);\n\n  return null;\n}","size_bytes":7269},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface PatientVerificationRequest {\n  patientId?: string;\n  biometricData?: string;\n  otp?: string;\n}\n\nexport interface ClaimRequest {\n  patientId: number;\n  providerId: number;\n  serviceType: string;\n  procedureCode?: string;\n  diagnosisCode?: string;\n  description?: string;\n  serviceCost: string;\n  insuranceCoverage?: string;\n  patientResponsibility?: string;\n}\n\nexport interface PreauthRequest {\n  patientId: number;\n  providerId: number;\n  treatmentService: string;\n  clinicalJustification?: string;\n  estimatedCost?: string;\n  urgency: string;\n}\n\nexport interface MedicationRequest {\n  patientId: number;\n  providerId: number;\n  medicationName: string;\n  dosage: string;\n  frequency: string;\n  duration?: string;\n  quantity: number;\n  indication?: string;\n  benefitCategory?: string;\n}\n\nexport const api = {\n  // Patient verification\n  verifyPatient: async (data: PatientVerificationRequest) => {\n    const response = await apiRequest(\"POST\", \"/api/patients/verify\", data);\n    return response.json();\n  },\n\n  searchPatients: async (query: string) => {\n    const response = await apiRequest(\"GET\", `/api/patients/search?q=${encodeURIComponent(query)}`);\n    return response.json();\n  },\n\n  // Claims\n  createClaim: async (data: ClaimRequest) => {\n    const response = await apiRequest(\"POST\", \"/api/claims\", data);\n    return response.json();\n  },\n\n  getClaims: async (params?: { status?: string; patientId?: string; limit?: number }) => {\n    const searchParams = new URLSearchParams();\n    if (params?.status) searchParams.set(\"status\", params.status);\n    if (params?.patientId) searchParams.set(\"patientId\", params.patientId);\n    if (params?.limit) searchParams.set(\"limit\", params.limit.toString());\n    \n    const response = await apiRequest(\"GET\", `/api/claims?${searchParams}`);\n    return response.json();\n  },\n\n  voidClaim: async (id: number, reason: string, fingerprintApproval: boolean) => {\n    const response = await apiRequest(\"PUT\", `/api/claims/${id}/void`, {\n      reason,\n      fingerprintApproval\n    });\n    return response.json();\n  },\n\n  // Preauthorizations\n  createPreauth: async (data: PreauthRequest) => {\n    const response = await apiRequest(\"POST\", \"/api/preauthorizations\", data);\n    return response.json();\n  },\n\n  getPreauths: async (limit?: number) => {\n    const params = limit ? `?limit=${limit}` : '';\n    const response = await apiRequest(\"GET\", `/api/preauthorizations${params}`);\n    return response.json();\n  },\n\n  // Medications\n  createMedication: async (data: MedicationRequest) => {\n    const response = await apiRequest(\"POST\", \"/api/medications\", data);\n    return response.json();\n  },\n\n  // AI suggestions\n  getAISuggestions: async (query: string, type: string) => {\n    const response = await apiRequest(\"POST\", \"/api/ai/suggestions\", { query, type });\n    return response.json();\n  },\n\n  // Blockchain\n  anchorToBlockchain: async (claimId: string, claimHash: string) => {\n    const response = await apiRequest(\"POST\", \"/api/blockchain/anchor\", {\n      claimId,\n      claimHash\n    });\n    return response.json();\n  },\n\n  verifyBlockchainTx: async (txHash: string) => {\n    const response = await apiRequest(\"GET\", `/api/blockchain/verify/${txHash}`);\n    return response.json();\n  },\n\n  // Analytics\n  getAnalyticsStats: async () => {\n    const response = await apiRequest(\"GET\", \"/api/analytics/stats\");\n    return response.json();\n  },\n\n  getProviderPerformance: async () => {\n    const response = await apiRequest(\"GET\", \"/api/analytics/providers\");\n    return response.json();\n  },\n\n  getFraudAlerts: async () => {\n    const response = await apiRequest(\"GET\", \"/api/analytics/fraud\");\n    return response.json();\n  },\n\n  getAIDecisions: async (limit?: number) => {\n    const params = limit ? `?limit=${limit}` : '';\n    const response = await apiRequest(\"GET\", `/api/ai/decisions${params}`);\n    return response.json();\n  }\n};\n","size_bytes":3946},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return (\n    <Route path={path}>\n      <Component />\n    </Route>\n  );\n}\n","size_bytes":725},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Settings, Users, Building2, BarChart3, Bot, Shield, Plus, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { RegistrationValidator } from \"@/components/registration-validator\";\nimport { LogoutButton } from \"@/components/ui/logout-button\";\n\ninterface SystemUser {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n  cadre?: string;\n  careProvider?: {\n    name: string;\n    type: string;\n  };\n  isVerified: boolean;\n  lastLogin?: string;\n  createdAt: string;\n}\n\ninterface CareProvider {\n  id: number;\n  name: string;\n  domain: string;\n  type: string;\n  branch?: string;\n  address: string;\n  licenseNumber: string;\n  isActive: boolean;\n  userCount: number;\n  claimsCount: number;\n  createdAt: string;\n}\n\ninterface PlatformStats {\n  totalUsers: number;\n  activeUsers: number;\n  totalProviders: number;\n  totalClaims: number;\n  aiDecisions: number;\n  fraudDetections: number;\n  systemUptime: number;\n  avgResponseTime: number;\n}\n\ninterface AISettings {\n  preAuthEnabled: boolean;\n  fraudDetectionEnabled: boolean;\n  prescriptionValidationEnabled: boolean;\n  confidenceThreshold: number;\n  autoApprovalThreshold: number;\n  reviewThreshold: number;\n}\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedUser, setSelectedUser] = useState<SystemUser | null>(null);\n  const [selectedProvider, setSelectedProvider] = useState<CareProvider | null>(null);\n  const [showAddUser, setShowAddUser] = useState(false);\n  const [showAddProvider, setShowAddProvider] = useState(false);\n  const [newUser, setNewUser] = useState({\n    username: \"\",\n    email: \"\",\n    role: \"\",\n    careProviderId: \"\"\n  });\n  const [newProvider, setNewProvider] = useState({\n    name: \"\",\n    domain: \"\",\n    type: \"\",\n    address: \"\",\n    licenseNumber: \"\"\n  });\n\n  // Fetch platform statistics\n  const { data: platformStats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    queryFn: async () => ({\n      totalUsers: 1247,\n      activeUsers: 892,\n      totalProviders: 45,\n      totalClaims: 15678,\n      aiDecisions: 12543,\n      fraudDetections: 89,\n      systemUptime: 99.7,\n      avgResponseTime: 120\n    } as PlatformStats),\n  });\n\n  // Fetch system users\n  const { data: systemUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => [\n      {\n        id: 1,\n        username: \"dr.wilson\",\n        email: \"sarah.wilson@aku.edu\",\n        role: \"doctor\",\n        cadre: \"General Practitioner\",\n        careProvider: {\n          name: \"Aga Khan University Hospital\",\n          type: \"Hospital\"\n        },\n        isVerified: true,\n        lastLogin: \"2024-06-18T08:30:00Z\",\n        createdAt: \"2024-01-15T10:00:00Z\"\n      },\n      {\n        id: 2,\n        username: \"pharm.john\",\n        email: \"john.doe@pharmacy.co.ke\",\n        role: \"pharmacist\",\n        cadre: \"Clinical Pharmacist\",\n        careProvider: {\n          name: \"Pharmacy Corporation\",\n          type: \"Pharmacy Chain\"\n        },\n        isVerified: true,\n        lastLogin: \"2024-06-18T09:15:00Z\",\n        createdAt: \"2024-02-01T14:30:00Z\"\n      },\n      {\n        id: 3,\n        username: \"manager.jane\",\n        email: \"jane.smith@carepoint.health\",\n        role: \"care-manager\",\n        careProvider: {\n          name: \"Carepoint Medical Centers\",\n          type: \"Clinic Network\"\n        },\n        isVerified: true,\n        lastLogin: \"2024-06-17T16:45:00Z\",\n        createdAt: \"2024-03-10T11:20:00Z\"\n      }\n    ] as SystemUser[],\n  });\n\n  // Fetch care providers\n  const { data: careProviders = [] } = useQuery({\n    queryKey: [\"/api/admin/providers\"],\n    queryFn: async () => [\n      {\n        id: 1,\n        name: \"Aga Khan University Hospital\",\n        domain: \"aku.edu\",\n        type: \"Hospital\",\n        branch: \"Nairobi\",\n        address: \"3rd Parklands Avenue, Nairobi\",\n        licenseNumber: \"KMP-H-001\",\n        isActive: true,\n        userCount: 145,\n        claimsCount: 2340,\n        createdAt: \"2024-01-01T00:00:00Z\"\n      },\n      {\n        id: 2,\n        name: \"Kenyatta National Hospital\",\n        domain: \"knh.or.ke\",\n        type: \"Hospital\",\n        branch: \"Nairobi\",\n        address: \"Hospital Road, Nairobi\",\n        licenseNumber: \"KMP-H-002\",\n        isActive: true,\n        userCount: 234,\n        claimsCount: 3456,\n        createdAt: \"2024-01-01T00:00:00Z\"\n      },\n      {\n        id: 3,\n        name: \"Carepoint Medical Centers\",\n        domain: \"carepoint.health\",\n        type: \"Clinic Network\",\n        address: \"Multiple Locations\",\n        licenseNumber: \"KMP-C-001\",\n        isActive: true,\n        userCount: 89,\n        claimsCount: 1234,\n        createdAt: \"2024-01-15T00:00:00Z\"\n      }\n    ] as CareProvider[],\n  });\n\n  // Fetch AI settings\n  const { data: aiSettings, refetch: refetchAISettings } = useQuery({\n    queryKey: [\"/api/admin/ai-settings\"],\n    queryFn: async () => ({\n      preAuthEnabled: true,\n      fraudDetectionEnabled: true,\n      prescriptionValidationEnabled: true,\n      confidenceThreshold: 75,\n      autoApprovalThreshold: 90,\n      reviewThreshold: 50\n    } as AISettings),\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: typeof newUser) => {\n      return apiRequest(\"/api/admin/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(userData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Created\",\n        description: \"New user has been created successfully\",\n      });\n      setNewUser({ username: \"\", email: \"\", role: \"\", careProviderId: \"\" });\n      setShowAddUser(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n  });\n\n  const createProviderMutation = useMutation({\n    mutationFn: async (providerData: typeof newProvider) => {\n      return apiRequest(\"/api/admin/providers\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(providerData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Provider Added\",\n        description: \"New care provider has been added successfully\",\n      });\n      setNewProvider({ name: \"\", domain: \"\", type: \"\", address: \"\", licenseNumber: \"\" });\n      setShowAddProvider(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/providers\"] });\n    },\n  });\n\n  const updateAISettingsMutation = useMutation({\n    mutationFn: async (settings: AISettings) => {\n      return apiRequest(\"/api/admin/ai-settings\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(settings),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"AI configuration has been updated successfully\",\n      });\n      refetchAISettings();\n    },\n  });\n\n  const toggleUserStatus = async (userId: number, isActive: boolean) => {\n    try {\n      await apiRequest(`/api/admin/users/${userId}/status`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ isActive }),\n      });\n      \n      toast({\n        title: \"User Status Updated\",\n        description: `User has been ${isActive ? 'activated' : 'deactivated'}`,\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getRoleBadge = (role: string) => {\n    const roleColors = {\n      doctor: \"bg-blue-100 text-blue-800\",\n      pharmacist: \"bg-green-100 text-green-800\",\n      \"care-manager\": \"bg-purple-100 text-purple-800\",\n      \"front-office\": \"bg-yellow-100 text-yellow-800\",\n      insurer: \"bg-red-100 text-red-800\",\n      admin: \"bg-gray-100 text-gray-800\"\n    };\n    return roleColors[role as keyof typeof roleColors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getProviderTypeBadge = (type: string) => {\n    const typeColors = {\n      Hospital: \"bg-blue-100 text-blue-800\",\n      \"Clinic Network\": \"bg-green-100 text-green-800\",\n      \"Pharmacy Chain\": \"bg-purple-100 text-purple-800\",\n      Laboratory: \"bg-yellow-100 text-yellow-800\"\n    };\n    return typeColors[type as keyof typeof typeColors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n          <p className=\"text-gray-600\">Manage platform users, providers, and system configuration</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"outline\" className=\"text-teal-600 border-teal-200\">\n            <Shield className=\"w-4 h-4 mr-1\" />\n            Super Admin\n          </Badge>\n          <LogoutButton variant=\"dropdown\" />\n        </div>\n      </div>\n\n      {/* Platform Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Users</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {platformStats?.totalUsers?.toLocaleString()}\n                </p>\n                <p className=\"text-xs text-green-600\">\n                  {platformStats?.activeUsers} active\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Building2 className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Care Providers</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {platformStats?.totalProviders}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <BarChart3 className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Claims</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {platformStats?.totalClaims?.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Bot className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">AI Decisions</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {platformStats?.aiDecisions?.toLocaleString()}\n                </p>\n                <p className=\"text-xs text-orange-600\">\n                  {platformStats?.fraudDetections} fraud alerts\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">System Overview</TabsTrigger>\n          <TabsTrigger value=\"users\">User Management</TabsTrigger>\n          <TabsTrigger value=\"providers\">Care Providers</TabsTrigger>\n          <TabsTrigger value=\"registration\">License Validation</TabsTrigger>\n          <TabsTrigger value=\"ai-config\">AI Configuration</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"w-5 h-5 mr-2\" />\n                  System Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">System Uptime</span>\n                  <span className=\"font-semibold text-green-600\">\n                    {platformStats?.systemUptime}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Avg Response Time</span>\n                  <span className=\"font-semibold\">\n                    {platformStats?.avgResponseTime}ms\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Active Sessions</span>\n                  <span className=\"font-semibold\">\n                    {platformStats?.activeUsers}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"w-5 h-5 mr-2\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Export User Report\n                </Button>\n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Generate Analytics\n                </Button>\n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Security Audit\n                </Button>\n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <Bot className=\"w-4 h-4 mr-2\" />\n                  Test AI Models\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  System Users ({systemUsers.length})\n                </div>\n                <Button onClick={() => setShowAddUser(true)} size=\"sm\">\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Add User\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {systemUsers.map((user) => (\n                  <Card key={user.id} className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <Users className=\"w-5 h-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{user.username}</h3>\n                            <p className=\"text-gray-600\">{user.email}</p>\n                            <p className=\"text-sm text-gray-500\">\n                              {user.careProvider?.name} • {user.cadre}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right space-y-2\">\n                          <Badge className={getRoleBadge(user.role)}>\n                            {user.role.replace('-', ' ')}\n                          </Badge>\n                          <div className=\"flex items-center space-x-2\">\n                            {user.isVerified ? (\n                              <Badge className=\"bg-green-100 text-green-800\">Verified</Badge>\n                            ) : (\n                              <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <span className=\"font-medium\">Created:</span>\n                          <div>{new Date(user.createdAt).toLocaleDateString()}</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Last Login:</span>\n                          <div>\n                            {user.lastLogin \n                              ? new Date(user.lastLogin).toLocaleDateString()\n                              : \"Never\"\n                            }\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            Edit\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Add User Form */}\n          {showAddUser && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Add New User</CardTitle>\n                <CardDescription>Create a new system user account</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      value={newUser.username}\n                      onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={newUser.email}\n                      onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"role\">Role</Label>\n                    <Select\n                      value={newUser.role}\n                      onValueChange={(value) => setNewUser({ ...newUser, role: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"doctor\">Doctor/Clinician</SelectItem>\n                        <SelectItem value=\"pharmacist\">Pharmacist</SelectItem>\n                        <SelectItem value=\"care-manager\">Care Manager</SelectItem>\n                        <SelectItem value=\"front-office\">Front Office</SelectItem>\n                        <SelectItem value=\"insurer\">Insurer</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"careProvider\">Care Provider</Label>\n                    <Select\n                      value={newUser.careProviderId}\n                      onValueChange={(value) => setNewUser({ ...newUser, careProviderId: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select provider\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {careProviders.map((provider) => (\n                          <SelectItem key={provider.id} value={provider.id.toString()}>\n                            {provider.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setShowAddUser(false)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() => createUserMutation.mutate(newUser)}\n                    disabled={createUserMutation.isPending}\n                    className=\"bg-teal-600 hover:bg-teal-700\"\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"providers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Building2 className=\"w-5 h-5 mr-2\" />\n                  Care Providers ({careProviders.length})\n                </div>\n                <Button onClick={() => setShowAddProvider(true)} size=\"sm\">\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Add Provider\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {careProviders.map((provider) => (\n                  <Card key={provider.id} className=\"border-l-4 border-l-green-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                            <Building2 className=\"w-5 h-5 text-green-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{provider.name}</h3>\n                            <p className=\"text-gray-600\">@{provider.domain}</p>\n                            <p className=\"text-sm text-gray-500\">{provider.address}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right space-y-2\">\n                          <Badge className={getProviderTypeBadge(provider.type)}>\n                            {provider.type}\n                          </Badge>\n                          <div className=\"text-sm text-gray-600\">\n                            License: {provider.licenseNumber}\n                          </div>\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"font-medium\">Users:</span>\n                          <div className=\"text-lg font-semibold\">{provider.userCount}</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Claims:</span>\n                          <div className=\"text-lg font-semibold\">{provider.claimsCount}</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Status:</span>\n                          <div>\n                            {provider.isActive ? (\n                              <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                            ) : (\n                              <Badge className=\"bg-red-100 text-red-800\">Inactive</Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            Edit\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Add Provider Form */}\n          {showAddProvider && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Add New Care Provider</CardTitle>\n                <CardDescription>Register a new healthcare provider</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"providerName\">Provider Name</Label>\n                    <Input\n                      id=\"providerName\"\n                      value={newProvider.name}\n                      onChange={(e) => setNewProvider({ ...newProvider, name: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"domain\">Email Domain</Label>\n                    <Input\n                      id=\"domain\"\n                      value={newProvider.domain}\n                      onChange={(e) => setNewProvider({ ...newProvider, domain: e.target.value })}\n                      placeholder=\"example.com\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"providerType\">Provider Type</Label>\n                    <Select\n                      value={newProvider.type}\n                      onValueChange={(value) => setNewProvider({ ...newProvider, type: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Hospital\">Hospital</SelectItem>\n                        <SelectItem value=\"Clinic Network\">Clinic Network</SelectItem>\n                        <SelectItem value=\"Pharmacy Chain\">Pharmacy Chain</SelectItem>\n                        <SelectItem value=\"Laboratory\">Laboratory</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"licenseNumber\">License Number</Label>\n                    <Input\n                      id=\"licenseNumber\"\n                      value={newProvider.licenseNumber}\n                      onChange={(e) => setNewProvider({ ...newProvider, licenseNumber: e.target.value })}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    value={newProvider.address}\n                    onChange={(e) => setNewProvider({ ...newProvider, address: e.target.value })}\n                    rows={2}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setShowAddProvider(false)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() => createProviderMutation.mutate(newProvider)}\n                    disabled={createProviderMutation.isPending}\n                    className=\"bg-teal-600 hover:bg-teal-700\"\n                  >\n                    {createProviderMutation.isPending ? \"Adding...\" : \"Add Provider\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"registration\" className=\"space-y-4\">\n          <RegistrationValidator />\n        </TabsContent>\n\n        <TabsContent value=\"ai-config\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bot className=\"w-5 h-5 mr-2\" />\n                AI Features Configuration\n              </CardTitle>\n              <CardDescription>\n                Configure AI-powered features and decision thresholds\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {aiSettings && (\n                <>\n                  {/* Feature Toggles */}\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4\">Feature Control</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"preauth\">Preauthorization AI</Label>\n                          <p className=\"text-sm text-gray-600\">\n                            Enable AI-assisted preauthorization decisions\n                          </p>\n                        </div>\n                        <Switch\n                          id=\"preauth\"\n                          checked={aiSettings.preAuthEnabled}\n                          onCheckedChange={(checked) => {\n                            updateAISettingsMutation.mutate({\n                              ...aiSettings,\n                              preAuthEnabled: checked\n                            });\n                          }}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"fraud\">Fraud Detection</Label>\n                          <p className=\"text-sm text-gray-600\">\n                            Enable AI-powered fraud pattern detection\n                          </p>\n                        </div>\n                        <Switch\n                          id=\"fraud\"\n                          checked={aiSettings.fraudDetectionEnabled}\n                          onCheckedChange={(checked) => {\n                            updateAISettingsMutation.mutate({\n                              ...aiSettings,\n                              fraudDetectionEnabled: checked\n                            });\n                          }}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"prescription\">Prescription Validation</Label>\n                          <p className=\"text-sm text-gray-600\">\n                            Enable AI prescription safety checks\n                          </p>\n                        </div>\n                        <Switch\n                          id=\"prescription\"\n                          checked={aiSettings.prescriptionValidationEnabled}\n                          onCheckedChange={(checked) => {\n                            updateAISettingsMutation.mutate({\n                              ...aiSettings,\n                              prescriptionValidationEnabled: checked\n                            });\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Threshold Settings */}\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4\">Decision Thresholds</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"confidence\">Minimum Confidence (%)</Label>\n                        <Input\n                          id=\"confidence\"\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          value={aiSettings.confidenceThreshold}\n                          onChange={(e) => {\n                            updateAISettingsMutation.mutate({\n                              ...aiSettings,\n                              confidenceThreshold: parseInt(e.target.value) || 75\n                            });\n                          }}\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Minimum confidence for AI decisions\n                        </p>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"autoApproval\">Auto-Approval Threshold (%)</Label>\n                        <Input\n                          id=\"autoApproval\"\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          value={aiSettings.autoApprovalThreshold}\n                          onChange={(e) => {\n                            updateAISettingsMutation.mutate({\n                              ...aiSettings,\n                              autoApprovalThreshold: parseInt(e.target.value) || 90\n                            });\n                          }}\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Auto-approve above this confidence\n                        </p>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"review\">Human Review Threshold (%)</Label>\n                        <Input\n                          id=\"review\"\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          value={aiSettings.reviewThreshold}\n                          onChange={(e) => {\n                            updateAISettingsMutation.mutate({\n                              ...aiSettings,\n                              reviewThreshold: parseInt(e.target.value) || 50\n                            });\n                          }}\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Require human review below this\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Test AI Features */}\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4\">AI Model Testing</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <Button variant=\"outline\" className=\"justify-start\">\n                        <Bot className=\"w-4 h-4 mr-2\" />\n                        Test Preauthorization Model\n                      </Button>\n                      <Button variant=\"outline\" className=\"justify-start\">\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Test Fraud Detection\n                      </Button>\n                    </div>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean\n      </div>\n    </div>\n  );\n}","size_bytes":37110},"client/src/pages/ai-preauth.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { AIDecisionPanel } from \"@/components/ai-decision-panel\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function AIPreauth() {\n  const [formData, setFormData] = useState({\n    patientId: \"\",\n    serviceType: \"\",\n    clinicalJustification: \"\",\n    estimatedCost: \"\",\n    urgency: \"\"\n  });\n  const [aiDecision, setAIDecision] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: patients } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: preauths } = useQuery({\n    queryKey: [\"/api/preauth\"],\n  });\n\n  const submitPreauthMutation = useMutation({\n    mutationFn: async (preauthData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/preauth\", preauthData);\n      return await res.json();\n    },\n    onSuccess: (result) => {\n      setAIDecision(result);\n      toast({\n        title: \"Preauthorization Processed\",\n        description: `AI decision: ${result.aiDecision.toUpperCase()} (${result.aiConfidence}% confidence)`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/preauth\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process preauthorization. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    submitPreauthMutation.mutate({\n      patientId: parseInt(formData.patientId),\n      serviceType: formData.serviceType,\n      clinicalJustification: formData.clinicalJustification,\n      estimatedCost: formData.estimatedCost,\n      urgency: formData.urgency,\n    });\n  };\n\n  const getStatusColor = (decision: string) => {\n    switch (decision) {\n      case 'approved': return 'text-green-600 bg-green-100';\n      case 'denied': return 'text-red-600 bg-red-100';\n      case 'review': return 'text-yellow-600 bg-yellow-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">AI Preauthorization</h1>\n            <p className=\"text-gray-600\">Intelligent preauthorization </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Preauth Request Form */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-file-medical-alt text-blue-500\"></i>\n                    <span>Preauthorization Request</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Submit a new preauthorization request for AI analysis\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"patient\">Patient</Label>\n                      <Select \n                        value={formData.patientId}\n                        onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select patient\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {patients?.map((patient: any) => (\n                            <SelectItem key={patient.id} value={patient.id.toString()}>\n                              {patient.firstName} {patient.lastName} - {patient.patientId}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"serviceType\">Treatment/Service</Label>\n                      <Input\n                        id=\"serviceType\"\n                        placeholder=\"e.g., MRI Brain with contrast\"\n                        value={formData.serviceType}\n                        onChange={(e) => setFormData(prev => ({ ...prev, serviceType: e.target.value }))}\n                        className=\"medical-form-input\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"justification\">Clinical Justification</Label>\n                      <Textarea\n                        id=\"justification\"\n                        placeholder=\"Provide clinical reasoning for the requested service...\"\n                        rows={4}\n                        value={formData.clinicalJustification}\n                        onChange={(e) => setFormData(prev => ({ ...prev, clinicalJustification: e.target.value }))}\n                        className=\"medical-form-input\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"cost\">Estimated Cost ($)</Label>\n                        <Input\n                          id=\"cost\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"0.00\"\n                          value={formData.estimatedCost}\n                          onChange={(e) => setFormData(prev => ({ ...prev, estimatedCost: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"urgency\">Urgency</Label>\n                        <Select \n                          value={formData.urgency}\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, urgency: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select urgency\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"routine\">Routine</SelectItem>\n                            <SelectItem value=\"urgent\">Urgent</SelectItem>\n                            <SelectItem value=\"emergency\">Emergency</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full teal-button\"\n                      disabled={submitPreauthMutation.isPending}\n                    >\n                      {submitPreauthMutation.isPending ? (\n                        <>\n                          <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                          AI Analyzing...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-robot mr-2\"></i>\n                          Request AI Analysis\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* AI Decision Results */}\n            <div className=\"space-y-6\">\n              {aiDecision ? (\n                <AIDecisionPanel decision={aiDecision} />\n              ) : (\n                <Card className=\"border-dashed border-2 border-gray-300\">\n                  <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                    <i className=\"fas fa-brain text-4xl text-gray-300 mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-gray-500 mb-2\">\n                      No AI Analysis Yet\n                    </h3>\n                    <p className=\"text-sm text-gray-400 text-center\">\n                      Submit a preauthorization request to see AI analysis with \n                      Chain-of-Thought reasoning and confidence scoring.\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n\n          {/* Recent AI Decisions */}\n          <div className=\"mt-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent AI Decisions</CardTitle>\n                <CardDescription>Latest preauthorization decisions with AI analysis</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {preauths && preauths.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"text-left border-b border-gray-200\">\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Service</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Decision</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Confidence</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Time</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"space-y-2\">\n                        {preauths.slice(0, 10).map((preauth: any) => (\n                          <tr key={preauth.id} className=\"border-b border-gray-50\">\n                            <td className=\"py-3 text-sm\">{preauth.serviceType}</td>\n                            <td className=\"py-3\">\n                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(preauth.aiDecision)}`}>\n                                {preauth.aiDecision.toUpperCase()}\n                              </span>\n                            </td>\n                            <td className=\"py-3 text-sm\">{preauth.aiConfidence}%</td>\n                            <td className=\"py-3 text-sm text-gray-500\">\n                              {new Date(preauth.createdAt).toLocaleDateString()}\n                            </td>\n                            <td className=\"py-3\">\n                              <Button variant=\"ghost\" size=\"sm\">\n                                View Reasoning\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <i className=\"fas fa-robot text-3xl mb-4 text-gray-300\"></i>\n                    <p>No AI decisions yet</p>\n                    <p className=\"text-sm mt-2\">Submit your first preauthorization request to see AI analysis</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11830},"client/src/pages/analytics-page.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AnalyticsPrognosisDashboard } from \"@/components/analytics-prognosis-dashboard\";\nimport { CostComparisonDashboard } from \"@/components/cost-comparison-dashboard\";\nimport { Brain, BarChart3, TrendingUp, Users, Activity, Shield } from \"lucide-react\";\n\nexport default function AnalyticsPage() {\n  const [activeTab, setActiveTab] = useState(\"prognosis\");\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Advanced Healthcare Analytics</h1>\n          <p className=\"text-gray-600\">Comprehensive analytics, prognosis modeling, and outcome tracking</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"outline\" className=\"text-purple-600 border-purple-200\">\n            <Brain className=\"w-4 h-4 mr-1\" />\n            AI-Powered Insights\n          </Badge>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Brain className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">AI Models Active</p>\n                <p className=\"text-2xl font-bold text-gray-900\">4</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Predictions Made</p>\n                <p className=\"text-2xl font-bold text-gray-900\">2,847</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Accuracy Rate</p>\n                <p className=\"text-2xl font-bold text-gray-900\">89.2%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-teal-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Patients Analyzed</p>\n                <p className=\"text-2xl font-bold text-gray-900\">1,247</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"prognosis\">Prognosis & Outcome Analytics</TabsTrigger>\n          <TabsTrigger value=\"cost-analysis\">Cost Comparison Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"prognosis\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Brain className=\"w-5 h-5 mr-2 text-purple-600\" />\n                Advanced Prognosis Modeling & Outcome Tracking\n              </CardTitle>\n              <CardDescription>\n                AI-powered predictive analytics with comprehensive patient outcome monitoring and population health trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <AnalyticsPrognosisDashboard />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"cost-analysis\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"w-5 h-5 mr-2 text-green-600\" />\n                Real-Time Cost Comparison & Provider Analytics\n              </CardTitle>\n              <CardDescription>\n                Comprehensive cost benchmarking, provider performance analysis, and optimization insights\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <CostComparisonDashboard />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean\n      </div>\n    </div>\n  );\n}","size_bytes":4889},"client/src/pages/auth-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ErllessedLogo } from \"@/components/erlessed-logo\";\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { user, login } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginError, setLoginError] = useState(\"\");\n\n  // Redirect if already logged in (using useEffect to avoid setState during render)\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setLoginError(\"\");\n    \n    const formData = new FormData(e.currentTarget);\n    const emailOrUsername = formData.get(\"emailOrUsername\") as string;\n    const password = formData.get(\"password\") as string;\n    \n    try {\n      await login(emailOrUsername, password);\n      // Redirect is handled by auth hook based on user role\n    } catch (error) {\n      const errorMessage = \"Invalid email/username or password. Please try again.\";\n      setLoginError(errorMessage);\n      toast({\n        title: \"Login failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    const formData = new FormData(e.currentTarget);\n    const username = formData.get(\"username\") as string;\n    const password = formData.get(\"password\") as string;\n    const email = formData.get(\"email\") as string;\n    const name = formData.get(\"name\") as string;\n    \n    try {\n      // Registration functionality - redirect to enhanced signup flow\n      setLocation(\"/signup\");\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"Please check your information and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 flex\">\n      {/* Left Panel - Authentication Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <ErllessedLogo className=\"mx-auto h-20 w-auto mb-4\" />\n            <h2 className=\"text-3xl font-bold text-gray-900\">Welcome to Erlessed</h2>\n            <p className=\"mt-2 text-sm text-gray-600\">Outdoing an Undoable</p>\n          </div>\n\n          <Card className=\"w-full border-0 shadow-xl bg-white/80 backdrop-blur-sm\">\n            <CardHeader className=\"text-center pb-4\">\n              <CardTitle className=\"text-2xl font-semibold text-gray-800\">\n                Access Your Dashboard\n              </CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                Sign in to manage healthcare claims and patient data\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"login\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                  <TabsTrigger value=\"login\" className=\"text-sm font-medium\">\n                    Sign In\n                  </TabsTrigger>\n                  <TabsTrigger value=\"register\" className=\"text-sm font-medium\">\n                    Register\n                  </TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"login\" className=\"space-y-4\">\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    {loginError && (\n                      <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n                        <p className=\"text-sm text-red-700 flex items-center\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                            <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                          </svg>\n                          {loginError}\n                        </p>\n                      </div>\n                    )}\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"emailOrUsername\" className=\"text-sm font-medium text-gray-700\">\n                        Email or Username\n                      </Label>\n                      <Input\n                        id=\"emailOrUsername\"\n                        name=\"emailOrUsername\"\n                        type=\"text\"\n                        autoComplete=\"username\"\n                        required\n                        placeholder=\"Enter your email or username\"\n                        className=\"medical-form-input\"\n                      />\n                      <p className=\"text-xs text-gray-500\">\n                        You can login with either your email address or username\n                      </p>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                        Password\n                      </Label>\n                      <Input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        autoComplete=\"current-password\"\n                        required\n                        placeholder=\"Enter your password\"\n                        className=\"medical-form-input\"\n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full teal-button\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </TabsContent>\n\n                <TabsContent value=\"register\" className=\"space-y-4\">\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"p-6 bg-teal-50 border border-teal-200 rounded-lg\">\n                      <h3 className=\"text-lg font-semibold text-teal-800 mb-2\">\n                        Professional Registration\n                      </h3>\n                      <p className=\"text-sm text-teal-700 mb-4\">\n                        Join Erlessed with our comprehensive onboarding process designed for healthcare professionals\n                      </p>\n                      <Button \n                        onClick={() => setLocation(\"/signup\")}\n                        className=\"w-full teal-button\"\n                      >\n                        Start Professional Registration\n                      </Button>\n                    </div>\n                    \n                    <div className=\"space-y-2 text-xs text-gray-600\">\n                      <p>✓ Automatic care provider detection</p>\n                      <p>✓ Professional license verification</p>\n                      <p>✓ Role-based dashboard access</p>\n                      <p>✓ Kenya regulatory compliance</p>\n                    </div>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">\n              Secure healthcare data management platform\n            </p>\n            <p className=\"text-xs text-gray-400 mt-1\">Powered by Aboolean.</p>\n          </div>\n        </div>\n      </div>\n      {/* Right Panel - Features Overview */}\n      <div className=\"hidden lg:flex lg:flex-1 bg-gradient-to-br from-teal-600 to-blue-700 text-white p-12 items-center justify-center\">\n        <div className=\"max-w-lg\">\n          <h3 className=\"text-3xl font-bold mb-8\">\n            Comprehensive Healthcare Management\n          </h3>\n          \n          <div className=\"space-y-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-bold\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg\">AI-Powered Claims Processing</h4>\n                <p className=\"text-teal-100 text-sm\">\n                  Intelligent preauthorization with real-time decision making\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-bold\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg\">Multi-Role Dashboards</h4>\n                <p className=\"text-teal-100 text-sm\">\n                  Specialized interfaces for doctors, pharmacists, and administrators\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-bold\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg\">Regulatory Compliance</h4>\n                <p className=\"text-teal-100 text-sm\">\n                  Full compliance with Kenyan healthcare regulations and data protection\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10369},"client/src/pages/biometric-demo.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { BiometricVerificationFlow } from '@/components/BiometricVerificationFlow';\nimport { MultiFingerprintRegistration } from '@/components/MultiFingerprintRegistration';\nimport { BiometricManagement } from '@/components/BiometricManagement';\nimport { BiometricScanner } from '@/components/BiometricScanner';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Fingerprint, Shield, Settings, TestTube } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function BiometricDemo() {\n  const [selectedPatientId, setSelectedPatientId] = useState('P12345');\n  const [selectedPatientName, setSelectedPatientName] = useState('John Doe');\n  const [demoMode, setDemoMode] = useState('verification-flow');\n  const { user } = useAuth();\n\n  // Sample patients for demo\n  const samplePatients = [\n    { id: 'P12345', name: 'John Doe', registered: false },\n    { id: 'P67890', name: 'Jane Smith', registered: true },\n    { id: 'P24680', name: 'Mary Johnson', registered: true },\n    { id: 'P13579', name: 'Robert Wilson', registered: false },\n    { id: 'P11111', name: 'Grace Muthoni', registered: true },\n  ];\n\n  const handleVerificationSuccess = (result: any) => {\n    console.log('Verification successful:', result);\n  };\n\n  const handleRegistrationComplete = (result: any) => {\n    console.log('Registration complete:', result);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-[#e8f5f0] via-[#f0faf7] to-[#d1e7e0]\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-gray-600\">\n              Please log in to access the biometric demo system.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#e8f5f0] via-[#f0faf7] to-[#d1e7e0] p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3 text-2xl\">\n              <Fingerprint className=\"h-8 w-8 text-[#265651]\" />\n              Erlessed Biometric System Demo\n              <TestTube className=\"h-6 w-6 text-orange-500\" />\n            </CardTitle>\n            <p className=\"text-gray-600 mt-2\">\n              Full-stack biometric verification system with MongoDB storage, \n              JWT authentication, and comprehensive audit logging.\n            </p>\n          </CardHeader>\n        </Card>\n\n        {/* Controls */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5 text-[#265651]\" />\n              Demo Controls\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Select Patient</Label>\n                <Select \n                  value={selectedPatientId} \n                  onValueChange={(value) => {\n                    setSelectedPatientId(value);\n                    const patient = samplePatients.find(p => p.id === value);\n                    setSelectedPatientName(patient?.name || '');\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {samplePatients.map(patient => (\n                      <SelectItem key={patient.id} value={patient.id}>\n                        {patient.name} ({patient.id}) - {patient.registered ? '✓ Registered' : '◯ Not Registered'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Patient Name</Label>\n                <Input \n                  value={selectedPatientName}\n                  onChange={(e) => setSelectedPatientName(e.target.value)}\n                  placeholder=\"Enter patient name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Demo Mode</Label>\n                <Select value={demoMode} onValueChange={setDemoMode}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"verification-flow\">Full Verification Flow</SelectItem>\n                    <SelectItem value=\"multi-register\">Multi-Fingerprint Registration</SelectItem>\n                    <SelectItem value=\"scanner-only\">Scanner Component Only</SelectItem>\n                    <SelectItem value=\"management\">Biometric Management</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"text-sm text-gray-600 bg-blue-50 p-3 rounded-lg\">\n              <strong>Current User:</strong> {user.username} ({user.role}) \n              {['care_manager', 'insurer', 'admin'].includes(user.role) && (\n                <span className=\"ml-2 text-blue-600\">• Admin Controls Available</span>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Demo Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Left Column - Main Demo */}\n          <div className=\"space-y-6\">\n            {demoMode === 'verification-flow' && (\n              <BiometricVerificationFlow\n                patientId={selectedPatientId}\n                patientName={selectedPatientName}\n                onVerificationSuccess={handleVerificationSuccess}\n                onRegistrationComplete={handleRegistrationComplete}\n                redirectTo=\"/modern-pharmacy\"\n              />\n            )}\n\n            {demoMode === 'multi-register' && (\n              <MultiFingerprintRegistration\n                patientId={selectedPatientId}\n                patientName={selectedPatientName}\n                onComplete={(results) => {\n                  console.log('Multi-fingerprint registration complete:', results);\n                  alert(`Successfully registered ${results.length} fingerprints!`);\n                }}\n                onError={(error) => {\n                  console.error('Multi-registration error:', error);\n                  alert(`Registration error: ${error}`);\n                }}\n              />\n            )}\n\n            {demoMode === 'scanner-only' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Biometric Scanner Component</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Tabs defaultValue=\"register\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                      <TabsTrigger value=\"register\">Register Mode</TabsTrigger>\n                      <TabsTrigger value=\"verify\">Verify Mode</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"register\" className=\"space-y-4\">\n                      <BiometricScanner\n                        mode=\"register\"\n                        patientId={selectedPatientId}\n                        onSuccess={(result) => console.log('Registration:', result)}\n                        onError={(error) => console.error('Registration error:', error)}\n                      />\n                    </TabsContent>\n                    \n                    <TabsContent value=\"verify\" className=\"space-y-4\">\n                      <BiometricScanner\n                        mode=\"verify\"\n                        patientId={selectedPatientId}\n                        onSuccess={(result) => console.log('Verification:', result)}\n                        onError={(error) => console.error('Verification error:', error)}\n                      />\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            )}\n\n            {demoMode === 'management' && (\n              <BiometricManagement\n                patientId={selectedPatientId}\n                patientName={selectedPatientName}\n              />\n            )}\n          </div>\n\n          {/* Right Column - System Information */}\n          <div className=\"space-y-6\">\n            {/* API Endpoints */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5 text-[#265651]\" />\n                  Available API Endpoints\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-sm font-mono space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-600\">GET</span>\n                    <span>/api/biometric/exists/:patientId</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-green-600\">POST</span>\n                    <span>/api/biometric/register</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-green-600\">POST</span>\n                    <span>/api/biometric/register-finger</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-green-600\">POST</span>\n                    <span>/api/biometric/verify</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-green-600\">POST</span>\n                    <span>/api/biometric/verify-multi</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-600\">GET</span>\n                    <span>/api/biometric/enhanced-info/:id</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-600\">GET</span>\n                    <span>/api/biometric/count/:id</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-orange-600\">POST</span>\n                    <span>/api/biometric/reset/:patientId</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-600\">GET</span>\n                    <span>/api/biometric/audit/:patientId</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-600\">GET</span>\n                    <span>/api/biometric/info/:patientId</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle>System Features</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    MongoDB fingerprint storage with encryption\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    JWT-based role authentication system\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    Comprehensive audit logging for all actions\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    Fingerprint simulation with file upload support\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    Role-based reset permissions (care managers/insurers)\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    Duplicate fingerprint prevention across patients\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    Progressive scanning simulation with visual feedback\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    Complete verification workflow integration\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Technical Stack */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Technical Implementation</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div>\n                    <strong>Backend:</strong>\n                    <ul className=\"ml-4 mt-1 space-y-1\">\n                      <li>• Node.js + Express.js REST API</li>\n                      <li>• MongoDB with native driver</li>\n                      <li>• JWT token-based authentication</li>\n                      <li>• SHA-256 fingerprint hashing</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <strong>Frontend:</strong>\n                    <ul className=\"ml-4 mt-1 space-y-1\">\n                      <li>• React + TypeScript components</li>\n                      <li>• TanStack Query for API management</li>\n                      <li>• Tailwind CSS + shadcn/ui styling</li>\n                      <li>• Progressive scanning animations</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14845},"client/src/pages/blockchain-page.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Link, Database, CheckCircle, Clock, ExternalLink, \n  Shield, Zap, Copy, Search, Code \n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface BlockchainTransaction {\n  id: number;\n  claimId: number;\n  transactionHash: string;\n  blockNumber: number;\n  contractAddress: string;\n  gasUsed: number;\n  gasPrice: string;\n  network: string;\n  status: string;\n  createdAt: string;\n}\n\ninterface AnchorRequest {\n  claimId: number;\n  claimHash: string;\n}\n\nexport default function BlockchainPage() {\n  const [anchorRequest, setAnchorRequest] = useState<Partial<AnchorRequest>>({});\n  const [searchTxHash, setSearchTxHash] = useState('');\n  const [verificationResult, setVerificationResult] = useState<any>(null);\n\n  const { data: recentTransactions, isLoading } = useQuery<BlockchainTransaction[]>({\n    queryKey: [\"/api/blockchain/transactions\"],\n  });\n\n  const anchorClaimMutation = useMutation({\n    mutationFn: async (data: AnchorRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/blockchain/anchor\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Claim anchored:', data);\n      setAnchorRequest({});\n    },\n  });\n\n  const handleAnchorClaim = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!anchorRequest.claimId || !anchorRequest.claimHash) {\n      return;\n    }\n    anchorClaimMutation.mutate(anchorRequest as AnchorRequest);\n  };\n\n  const handleVerifyTransaction = async () => {\n    if (!searchTxHash) return;\n    \n    // Mock verification result\n    setVerificationResult({\n      txHash: searchTxHash,\n      blockNumber: 4892547,\n      timestamp: new Date().toISOString(),\n      gasUsed: 21000,\n      status: 'confirmed',\n      claimId: 'CLM-2024-001847'\n    });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  const formatGasPrice = (gasPrice: string) => {\n    const gwei = parseInt(gasPrice) / 1000000000;\n    return `${gwei.toFixed(0)} gwei`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const smartContractCode = `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract ErlassedClaims {\n    struct Claim {\n        string claimId;\n        bytes32 claimHash;\n        uint256 amount;\n        string providerId;\n        uint256 timestamp;\n        address submitter;\n        bool isValid;\n    }\n    \n    mapping(string => Claim) public claims;\n    mapping(address => bool) public authorizedSubmitters;\n    \n    event ClaimAnchored(\n        string indexed claimId,\n        bytes32 claimHash,\n        address indexed submitter,\n        uint256 timestamp\n    );\n    \n    modifier onlyAuthorized() {\n        require(authorizedSubmitters[msg.sender], \"Not authorized\");\n        _;\n    }\n    \n    function anchorClaim(\n        string memory _claimId,\n        bytes32 _claimHash,\n        uint256 _amount,\n        string memory _providerId\n    ) public onlyAuthorized {\n        require(!claims[_claimId].isValid, \"Claim already exists\");\n        \n        claims[_claimId] = Claim({\n            claimId: _claimId,\n            claimHash: _claimHash,\n            amount: _amount,\n            providerId: _providerId,\n            timestamp: block.timestamp,\n            submitter: msg.sender,\n            isValid: true\n        });\n        \n        emit ClaimAnchored(_claimId, _claimHash, msg.sender, block.timestamp);\n    }\n    \n    function verifyClaim(string memory _claimId) \n        public view returns (Claim memory) {\n        require(claims[_claimId].isValid, \"Claim not found\");\n        return claims[_claimId];\n    }\n}`;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Blockchain Claim Anchoring</h1>\n          <p className=\"text-gray-600\">Immutable claim verification on Sepolia testnet</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n          <span className=\"text-sm text-gray-600\">Sepolia Connected</span>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"anchor\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"anchor\">Anchor Claims</TabsTrigger>\n          <TabsTrigger value=\"verify\">Verify Transaction</TabsTrigger>\n          <TabsTrigger value=\"contract\">Smart Contract</TabsTrigger>\n          <TabsTrigger value=\"transactions\">Recent Transactions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"anchor\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Anchor Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Link className=\"w-5 h-5 text-blue-600\" />\n                  <span>Anchor New Claim</span>\n                </CardTitle>\n                <CardDescription>\n                  Submit a claim to the blockchain for immutable verification\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleAnchorClaim} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"claim-id\">Claim ID</Label>\n                    <Input\n                      id=\"claim-id\"\n                      type=\"number\"\n                      placeholder=\"12345\"\n                      value={anchorRequest.claimId || ''}\n                      onChange={(e) => setAnchorRequest(prev => ({ ...prev, claimId: parseInt(e.target.value) }))}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"claim-hash\">Claim Hash</Label>\n                    <Textarea\n                      id=\"claim-hash\"\n                      rows={3}\n                      placeholder=\"SHA256 hash of claim data\"\n                      value={anchorRequest.claimHash || ''}\n                      onChange={(e) => setAnchorRequest(prev => ({ ...prev, claimHash: e.target.value }))}\n                      className=\"font-mono text-sm\"\n                      required\n                    />\n                    <p className=\"text-xs text-gray-500\">\n                      Cryptographic hash representing the claim's immutable state\n                    </p>\n                  </div>\n\n                  <Alert>\n                    <Shield className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Once anchored to the blockchain, this claim cannot be modified or deleted. \n                      The transaction will be permanently recorded on Sepolia testnet.\n                    </AlertDescription>\n                  </Alert>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    disabled={anchorClaimMutation.isPending}\n                  >\n                    {anchorClaimMutation.isPending ? (\n                      <>\n                        <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Anchoring to Blockchain...\n                      </>\n                    ) : (\n                      <>\n                        <Link className=\"w-4 h-4 mr-2\" />\n                        Anchor to Blockchain\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Network Status */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Database className=\"w-5 h-5 text-green-600\" />\n                  <span>Network Status</span>\n                </CardTitle>\n                <CardDescription>\n                  Sepolia testnet connection and gas information\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"font-medium text-green-900\">Network</span>\n                    </div>\n                    <p className=\"text-sm text-green-700\">Sepolia Testnet</p>\n                  </div>\n\n                  <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <Zap className=\"w-4 h-4 text-blue-600\" />\n                      <span className=\"font-medium text-blue-900\">Gas Price</span>\n                    </div>\n                    <p className=\"text-sm text-blue-700\">15 gwei</p>\n                  </div>\n\n                  <div className=\"p-3 bg-purple-50 rounded-lg border border-purple-200\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <Database className=\"w-4 h-4 text-purple-600\" />\n                      <span className=\"font-medium text-purple-900\">Last Block</span>\n                    </div>\n                    <p className=\"text-sm text-purple-700\">#4,892,547</p>\n                  </div>\n\n                  <div className=\"p-3 bg-orange-50 rounded-lg border border-orange-200\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <Shield className=\"w-4 h-4 text-orange-600\" />\n                      <span className=\"font-medium text-orange-900\">Contract</span>\n                    </div>\n                    <p className=\"text-xs text-orange-700 font-mono\">0x742d...9B2e</p>\n                  </div>\n                </div>\n\n                <Alert className=\"border-purple-200 bg-purple-50\">\n                  <Database className=\"h-4 w-4 text-purple-600\" />\n                  <AlertDescription className=\"text-purple-800\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <strong>Smart Contract Active</strong>\n                        <p className=\"text-sm mt-1\">ErlassedClaims v1.0 deployed and verified</p>\n                      </div>\n                      <Badge className=\"bg-purple-100 text-purple-800\">Live</Badge>\n                    </div>\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h5 className=\"font-medium text-gray-900 mb-2\">Contract Address</h5>\n                  <div className=\"flex items-center space-x-2\">\n                    <code className=\"flex-1 text-xs bg-white p-2 rounded border font-mono\">\n                      0x742d35Cc6634C0532925a3b8D42d4738A12F9B2e\n                    </code>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => copyToClipboard('0x742d35Cc6634C0532925a3b8D42d4738A12F9B2e')}\n                    >\n                      <Copy className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"verify\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Search className=\"w-5 h-5 text-green-600\" />\n                <span>Transaction Verification</span>\n              </CardTitle>\n              <CardDescription>\n                Verify claim anchoring by transaction hash\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"tx-hash\">Transaction Hash</Label>\n                  <Input\n                    id=\"tx-hash\"\n                    placeholder=\"0x...\"\n                    value={searchTxHash}\n                    onChange={(e) => setSearchTxHash(e.target.value)}\n                    className=\"font-mono\"\n                  />\n                </div>\n                <Button \n                  onClick={handleVerifyTransaction}\n                  disabled={!searchTxHash}\n                  className=\"mt-6\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Verify\n                </Button>\n              </div>\n\n              {verificationResult && (\n                <div className=\"border border-green-200 bg-green-50 rounded-lg p-6\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <h4 className=\"font-medium text-green-900\">Transaction Verified</h4>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-green-700\">Block Number:</span>\n                      <span className=\"ml-2 font-medium\">{verificationResult.blockNumber}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-green-700\">Claim ID:</span>\n                      <span className=\"ml-2 font-medium\">{verificationResult.claimId}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-green-700\">Gas Used:</span>\n                      <span className=\"ml-2 font-medium\">{verificationResult.gasUsed.toLocaleString()}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-green-700\">Status:</span>\n                      <Badge className=\"ml-2 bg-green-100 text-green-800\">\n                        {verificationResult.status.toUpperCase()}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4 flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\">\n                      <ExternalLink className=\"w-3 h-3 mr-1\" />\n                      View on Etherscan\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\">\n                      Download Certificate\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"contract\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Code className=\"w-5 h-5 text-orange-600\" />\n                <span>Smart Contract Code</span>\n              </CardTitle>\n              <CardDescription>\n                Solidity contract deployed on Sepolia testnet for claim anchoring\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-gray-900 rounded-lg p-4 overflow-x-auto\">\n                <pre className=\"text-green-400 text-sm font-mono whitespace-pre-wrap\">\n                  {smartContractCode}\n                </pre>\n              </div>\n              \n              <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                  <h5 className=\"font-medium text-blue-900 mb-1\">Compiler Version</h5>\n                  <p className=\"text-sm text-blue-700\">Solidity 0.8.19</p>\n                </div>\n                <div className=\"p-3 bg-green-50 rounded-lg\">\n                  <h5 className=\"font-medium text-green-900 mb-1\">Verification</h5>\n                  <p className=\"text-sm text-green-700\">✓ Verified on Etherscan</p>\n                </div>\n                <div className=\"p-3 bg-purple-50 rounded-lg\">\n                  <h5 className=\"font-medium text-purple-900 mb-1\">License</h5>\n                  <p className=\"text-sm text-purple-700\">MIT</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transactions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Blockchain Transactions</CardTitle>\n              <CardDescription>\n                Latest claim anchoring transactions on Sepolia testnet\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-16 bg-gray-200 rounded-lg\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : !recentTransactions || recentTransactions.length === 0 ? (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <Database className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No transactions found</p>\n                  <p className=\"text-sm\">Blockchain transactions will appear here after claims are anchored</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {recentTransactions.slice(0, 10).map((tx) => (\n                    <div key={tx.id} className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge className={getStatusColor(tx.status)}>\n                            {tx.status.toUpperCase()}\n                          </Badge>\n                          <span className=\"font-medium\">Claim #{tx.claimId}</span>\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {new Date(tx.createdAt).toLocaleString()}\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-gray-500\">Tx Hash:</span>\n                          <div className=\"font-mono text-xs truncate\">\n                            {tx.transactionHash}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-500\">Block:</span>\n                          <span className=\"ml-2 font-medium\">#{tx.blockNumber}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-500\">Gas Used:</span>\n                          <span className=\"ml-2 font-medium\">{tx.gasUsed?.toLocaleString()}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-500\">Gas Price:</span>\n                          <span className=\"ml-2 font-medium\">{formatGasPrice(tx.gasPrice)}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-3 flex space-x-2\">\n                        <Button size=\"sm\" variant=\"outline\">\n                          <ExternalLink className=\"w-3 h-3 mr-1\" />\n                          Etherscan\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => copyToClipboard(tx.transactionHash)}\n                        >\n                          <Copy className=\"w-3 h-3 mr-1\" />\n                          Copy Hash\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":21131},"client/src/pages/blockchain.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { BlockchainStatus } from \"@/components/blockchain-status\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function Blockchain() {\n  const [anchorData, setAnchorData] = useState({\n    claimId: \"\",\n    claimHash: \"\",\n    amount: \"\",\n    providerId: \"\"\n  });\n  const [verificationHash, setVerificationHash] = useState(\"\");\n  const [verificationResult, setVerificationResult] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: blockchainStatus } = useQuery({\n    queryKey: [\"/api/blockchain/status\"],\n  });\n\n  const { data: claims } = useQuery({\n    queryKey: [\"/api/claims\"],\n  });\n\n  const anchorClaimMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/blockchain/anchor\", data);\n      return await res.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Blockchain Anchoring Complete\",\n        description: `Transaction hash: ${result.txHash}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/claims\"] });\n      // Reset form\n      setAnchorData({\n        claimId: \"\",\n        claimHash: \"\",\n        amount: \"\",\n        providerId: \"\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Anchoring Failed\",\n        description: \"Failed to anchor claim to blockchain. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnchorSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    anchorClaimMutation.mutate({\n      claimId: anchorData.claimId,\n      claimHash: anchorData.claimHash || generateClaimHash(),\n      amount: anchorData.amount,\n      providerId: anchorData.providerId\n    });\n  };\n\n  const generateClaimHash = () => {\n    // Generate a mock SHA256-like hash\n    return \"0x\" + Array.from({length: 64}, () => Math.floor(Math.random() * 16).toString(16)).join('');\n  };\n\n  const handleVerification = () => {\n    if (!verificationHash.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a transaction hash to verify\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Simulate verification result\n    const mockResult = {\n      isValid: true,\n      block: Math.floor(Math.random() * 1000000) + 4000000,\n      timestamp: new Date().toISOString(),\n      gasUsed: 21000,\n      confirmations: Math.floor(Math.random() * 100) + 12\n    };\n\n    setVerificationResult(mockResult);\n    toast({\n      title: \"Verification Complete\",\n      description: `Transaction found in block ${mockResult.block}`,\n    });\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Blockchain Claim Anchoring</h1>\n            <p className=\"text-gray-600\">Secure claim anchoring to Sepolia testnet</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Blockchain Status */}\n            <div className=\"space-y-6\">\n              <BlockchainStatus status={blockchainStatus} />\n\n              {/* Anchor New Claim */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-anchor text-blue-500\"></i>\n                    <span>Anchor New Claim</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Submit a claim to the blockchain for immutable record keeping\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleAnchorSubmit} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"claimId\">Claim ID</Label>\n                      <Input\n                        id=\"claimId\"\n                        placeholder=\"CLM-2024-001234\"\n                        value={anchorData.claimId}\n                        onChange={(e) => setAnchorData(prev => ({ ...prev, claimId: e.target.value }))}\n                        className=\"medical-form-input\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"claimHash\">Claim Hash (Optional)</Label>\n                      <Textarea\n                        id=\"claimHash\"\n                        placeholder=\"SHA256 hash of claim data (auto-generated if empty)\"\n                        rows={3}\n                        value={anchorData.claimHash}\n                        onChange={(e) => setAnchorData(prev => ({ ...prev, claimHash: e.target.value }))}\n                        className=\"medical-form-input font-mono text-sm\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"amount\">Amount ($)</Label>\n                        <Input\n                          id=\"amount\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"0.00\"\n                          value={anchorData.amount}\n                          onChange={(e) => setAnchorData(prev => ({ ...prev, amount: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"providerId\">Provider ID</Label>\n                        <Input\n                          id=\"providerId\"\n                          placeholder=\"PRV-001\"\n                          value={anchorData.providerId}\n                          onChange={(e) => setAnchorData(prev => ({ ...prev, providerId: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                      disabled={anchorClaimMutation.isPending}\n                    >\n                      {anchorClaimMutation.isPending ? (\n                        <>\n                          <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                          Anchoring to Blockchain...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-link mr-2\"></i>\n                          Anchor to Blockchain\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Verification and Recent Transactions */}\n            <div className=\"space-y-6\">\n              {/* Claim Verification */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-search text-green-500\"></i>\n                    <span>Claim Verification</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Verify claim integrity using transaction hash\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"txHash\">Transaction Hash</Label>\n                      <div className=\"flex space-x-2\">\n                        <Input\n                          id=\"txHash\"\n                          placeholder=\"0x...\"\n                          value={verificationHash}\n                          onChange={(e) => setVerificationHash(e.target.value)}\n                          className=\"medical-form-input font-mono text-sm\"\n                        />\n                        <Button \n                          onClick={handleVerification}\n                          className=\"bg-green-600 hover:bg-green-700 text-white\"\n                        >\n                          <i className=\"fas fa-search\"></i>\n                        </Button>\n                      </div>\n                    </div>\n\n                    {verificationResult && (\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <i className=\"fas fa-check-circle text-green-500\"></i>\n                          <span className=\"font-medium text-green-800\">Transaction Verified</span>\n                        </div>\n                        <div className=\"space-y-2 text-sm text-green-700\">\n                          <div className=\"flex justify-between\">\n                            <span>Block:</span>\n                            <span className=\"font-mono\">#{verificationResult.block}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Timestamp:</span>\n                            <span>{new Date(verificationResult.timestamp).toLocaleString()}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Gas Used:</span>\n                            <span>{verificationResult.gasUsed.toLocaleString()}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Confirmations:</span>\n                            <span>{verificationResult.confirmations}</span>\n                          </div>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"mt-3 w-full\">\n                          <i className=\"fas fa-external-link-alt mr-2\"></i>\n                          View on Etherscan\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Anchored Claims */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-history text-purple-500\"></i>\n                    <span>Recent Anchored Claims</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {claims && claims.filter((claim: any) => claim.blockchainTxHash).length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {claims\n                        .filter((claim: any) => claim.blockchainTxHash)\n                        .slice(0, 5)\n                        .map((claim: any) => (\n                          <div key={claim.id} className=\"p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <div className=\"font-mono text-sm text-gray-700\">{claim.blockchainTxHash}</div>\n                              <span className=\"text-xs text-green-600\">Confirmed</span>\n                            </div>\n                            <div className=\"text-sm text-gray-600\">Claim ID: {claim.claimId}</div>\n                            <div className=\"text-xs text-gray-500\">{new Date(claim.createdAt).toLocaleString()}</div>\n                          </div>\n                        ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-gray-500 py-8\">\n                      <i className=\"fas fa-link text-3xl mb-4 text-gray-300\"></i>\n                      <p>No anchored claims yet</p>\n                      <p className=\"text-sm mt-2\">Claims will appear here once anchored to blockchain</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Smart Contract Code Display */}\n          <div className=\"mt-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-code text-orange-500\"></i>\n                  <span>Smart Contract (Solidity)</span>\n                </CardTitle>\n                <CardDescription>\n                  Erlessed Claims smart contract deployed on Sepolia testnet\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gray-900 text-green-400 p-6 rounded-lg font-mono text-sm overflow-x-auto\">\n                  <pre>{`// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract ErlassedClaims {\n    struct Claim {\n        string claimId;\n        bytes32 claimHash;\n        uint256 amount;\n        string providerId;\n        uint256 timestamp;\n        address submitter;\n        bool isAnchored;\n    }\n    \n    mapping(string => Claim) public claims;\n    mapping(address => bool) public authorizedSubmitters;\n    \n    event ClaimAnchored(\n        string indexed claimId,\n        bytes32 claimHash,\n        uint256 amount,\n        address submitter\n    );\n    \n    modifier onlyAuthorized() {\n        require(authorizedSubmitters[msg.sender], \"Not authorized\");\n        _;\n    }\n    \n    function anchorClaim(\n        string memory _claimId,\n        bytes32 _claimHash,\n        uint256 _amount,\n        string memory _providerId\n    ) public onlyAuthorized {\n        require(!claims[_claimId].isAnchored, \"Claim already anchored\");\n        \n        claims[_claimId] = Claim({\n            claimId: _claimId,\n            claimHash: _claimHash,\n            amount: _amount,\n            providerId: _providerId,\n            timestamp: block.timestamp,\n            submitter: msg.sender,\n            isAnchored: true\n        });\n        \n        emit ClaimAnchored(_claimId, _claimHash, _amount, msg.sender);\n    }\n    \n    function verifyClaim(string memory _claimId) \n        public view returns (Claim memory) {\n        require(claims[_claimId].isAnchored, \"Claim not found\");\n        return claims[_claimId];\n    }\n}`}</pre>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14945},"client/src/pages/care-manager-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertTriangle, TrendingUp, Users, DollarSign, Activity, Shield, Building2 } from \"lucide-react\";\nimport { CostComparisonDashboard } from \"@/components/cost-comparison-dashboard\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { LogoutButton } from \"@/components/ui/logout-button\";\n\ninterface ClaimOverview {\n  id: number;\n  patientName: string;\n  patientId: string;\n  provider: string;\n  serviceType: string;\n  claimAmount: number;\n  status: \"pending\" | \"approved\" | \"denied\" | \"flagged\" | \"void\";\n  submittedAt: string;\n  flaggedReasons?: string[];\n  riskScore?: number;\n}\n\ninterface FraudAlert {\n  id: number;\n  alertType: string;\n  description: string;\n  riskLevel: \"low\" | \"medium\" | \"high\";\n  providerId: number;\n  providerName: string;\n  patientCount: number;\n  flaggedAmount: number;\n  detectedAt: string;\n  status: \"open\" | \"investigating\" | \"resolved\" | \"false_positive\";\n}\n\ninterface ProviderAnalytics {\n  providerId: number;\n  providerName: string;\n  providerType: string;\n  totalClaims: number;\n  totalAmount: number;\n  approvalRate: number;\n  averageClaimValue: number;\n  flaggedClaims: number;\n  topServices: string[];\n  riskScore: number;\n}\n\nexport default function CareManagerDashboard() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"30d\");\n  const [selectedRiskLevel, setSelectedRiskLevel] = useState(\"all\");\n\n  // Dashboard statistics\n  const { data: dashboardStats } = useQuery({\n    queryKey: [\"/api/care-manager/stats\", selectedTimeframe],\n    queryFn: async () => ({\n      totalClaims: 1247,\n      pendingClaims: 89,\n      flaggedClaims: 23,\n      totalClaimValue: 15678900,\n      approvalRate: 87.5,\n      fraudDetectionRate: 2.3,\n      averageProcessingTime: 4.2,\n      costPerClaim: 12567\n    }),\n  });\n\n  // Claims overview\n  const { data: claimsOverview = [] } = useQuery({\n    queryKey: [\"/api/care-manager/claims\", selectedTimeframe],\n    queryFn: async () => [\n      {\n        id: 1,\n        patientName: \"John Doe\",\n        patientId: \"P001234\",\n        provider: \"Aga Khan University Hospital\",\n        serviceType: \"Cardiology Consultation\",\n        claimAmount: 15000,\n        status: \"flagged\" as const,\n        submittedAt: \"2024-06-18T10:30:00Z\",\n        flaggedReasons: [\"Unusual frequency\", \"High cost variance\"],\n        riskScore: 8.5\n      },\n      {\n        id: 2,\n        patientName: \"Mary Smith\",\n        patientId: \"P001235\",\n        provider: \"Kenyatta National Hospital\",\n        serviceType: \"Laboratory Tests\",\n        claimAmount: 3500,\n        status: \"approved\" as const,\n        submittedAt: \"2024-06-18T09:15:00Z\"\n      },\n      {\n        id: 3,\n        patientName: \"David Wilson\",\n        patientId: \"P001236\",\n        provider: \"Carepoint Medical Center\",\n        serviceType: \"Emergency Care\",\n        claimAmount: 25000,\n        status: \"pending\" as const,\n        submittedAt: \"2024-06-18T08:45:00Z\"\n      }\n    ] as ClaimOverview[],\n  });\n\n  // Fraud alerts\n  const { data: fraudAlerts = [] } = useQuery({\n    queryKey: [\"/api/care-manager/fraud-alerts\", selectedRiskLevel],\n    queryFn: async () => [\n      {\n        id: 1,\n        alertType: \"billing_pattern\",\n        description: \"Unusual billing frequency for outpatient procedures\",\n        riskLevel: \"high\" as const,\n        providerId: 1,\n        providerName: \"QuickCare Clinic\",\n        patientCount: 45,\n        flaggedAmount: 127000,\n        detectedAt: \"2024-06-18T06:00:00Z\",\n        status: \"open\" as const\n      },\n      {\n        id: 2,\n        alertType: \"duplicate_service\",\n        description: \"Potential duplicate billing for same service\",\n        riskLevel: \"medium\" as const,\n        providerId: 2,\n        providerName: \"City Medical Center\",\n        patientCount: 12,\n        flaggedAmount: 34000,\n        detectedAt: \"2024-06-17T14:30:00Z\",\n        status: \"investigating\" as const\n      }\n    ] as FraudAlert[],\n  });\n\n  // Provider analytics\n  const { data: providerAnalytics = [] } = useQuery({\n    queryKey: [\"/api/care-manager/provider-analytics\", selectedTimeframe],\n    queryFn: async () => [\n      {\n        providerId: 1,\n        providerName: \"Aga Khan University Hospital\",\n        providerType: \"Hospital\",\n        totalClaims: 234,\n        totalAmount: 3450000,\n        approvalRate: 92.3,\n        averageClaimValue: 14744,\n        flaggedClaims: 8,\n        topServices: [\"Cardiology\", \"Surgery\", \"Emergency Care\"],\n        riskScore: 2.1\n      },\n      {\n        providerId: 2,\n        providerName: \"Kenyatta National Hospital\",\n        providerType: \"Hospital\",\n        totalClaims: 189,\n        totalAmount: 2890000,\n        approvalRate: 89.4,\n        averageClaimValue: 15291,\n        flaggedClaims: 12,\n        topServices: [\"General Medicine\", \"Pediatrics\", \"Oncology\"],\n        riskScore: 3.2\n      },\n      {\n        providerId: 3,\n        providerName: \"Carepoint Medical Centers\",\n        providerType: \"Clinic Network\",\n        totalClaims: 456,\n        totalAmount: 1890000,\n        approvalRate: 94.1,\n        averageClaimValue: 4144,\n        flaggedClaims: 3,\n        topServices: [\"Primary Care\", \"Laboratory\", \"Pharmacy\"],\n        riskScore: 1.8\n      }\n    ] as ProviderAnalytics[],\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: \"bg-yellow-100 text-yellow-800\",\n      approved: \"bg-green-100 text-green-800\",\n      denied: \"bg-red-100 text-red-800\",\n      flagged: \"bg-orange-100 text-orange-800\",\n      void: \"bg-gray-100 text-gray-800\"\n    };\n    return variants[status as keyof typeof variants] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getRiskLevelBadge = (level: string) => {\n    const variants = {\n      low: \"bg-green-100 text-green-800\",\n      medium: \"bg-yellow-100 text-yellow-800\",\n      high: \"bg-red-100 text-red-800\"\n    };\n    return variants[level as keyof typeof variants] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getRiskScoreColor = (score: number) => {\n    if (score >= 7) return \"text-red-600\";\n    if (score >= 4) return \"text-yellow-600\";\n    return \"text-green-600\";\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Care Manager Dashboard</h1>\n          <p className=\"text-gray-600\">Monitor claims activity, fraud detection, and provider analytics</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n              <SelectItem value=\"1y\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Badge variant=\"outline\" className=\"text-teal-600 border-teal-200\">\n            <Shield className=\"w-4 h-4 mr-1\" />\n            Care Manager\n          </Badge>\n          <LogoutButton variant=\"dropdown\" />\n        </div>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Activity className=\"h-8 w-8 text-teal-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Claims</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {dashboardStats?.totalClaims?.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Value</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  KES {(dashboardStats?.totalClaimValue || 0).toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Flagged Claims</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {dashboardStats?.flaggedClaims}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Approval Rate</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {dashboardStats?.approvalRate}%\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Claims Overview</TabsTrigger>\n          <TabsTrigger value=\"fraud\">Fraud Alerts</TabsTrigger>\n          <TabsTrigger value=\"providers\">Provider Analytics</TabsTrigger>\n          <TabsTrigger value=\"benchmarks\">Cost Benchmarks</TabsTrigger>\n          <TabsTrigger value=\"cost-comparison\">Cost Comparison</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Activity className=\"w-5 h-5 mr-2\" />\n                Claims Activity ({claimsOverview.length})\n              </CardTitle>\n              <CardDescription>\n                Real-time view of all claims across the healthcare network\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {claimsOverview.map((claim) => (\n                  <Card key={claim.id} className=\"border-l-4 border-l-teal-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-teal-100 rounded-full flex items-center justify-center text-teal-800 font-bold\">\n                            {claim.id}\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{claim.patientName}</h3>\n                            <p className=\"text-gray-600\">ID: {claim.patientId}</p>\n                            <p className=\"text-sm text-gray-500\">{claim.provider}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right space-y-2\">\n                          <Badge className={getStatusBadge(claim.status)}>\n                            {claim.status.charAt(0).toUpperCase() + claim.status.slice(1)}\n                          </Badge>\n                          <div className=\"text-lg font-semibold\">\n                            KES {claim.claimAmount.toLocaleString()}\n                          </div>\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-1\">Service Type</h4>\n                          <p className=\"text-gray-700\">{claim.serviceType}</p>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-1\">Submitted</h4>\n                          <p className=\"text-gray-700\">\n                            {new Date(claim.submittedAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        {claim.riskScore && (\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-1\">Risk Score</h4>\n                            <p className={`font-semibold ${getRiskScoreColor(claim.riskScore)}`}>\n                              {claim.riskScore}/10\n                            </p>\n                          </div>\n                        )}\n                      </div>\n\n                      {claim.flaggedReasons && claim.flaggedReasons.length > 0 && (\n                        <div className=\"mt-3\">\n                          <h4 className=\"font-medium text-gray-900 mb-2 flex items-center\">\n                            <AlertTriangle className=\"w-4 h-4 text-orange-500 mr-1\" />\n                            Flagged Reasons\n                          </h4>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {claim.flaggedReasons.map((reason, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-orange-700 border-orange-300\">\n                                {reason}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"fraud\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">Fraud Detection Alerts</h2>\n              <p className=\"text-gray-600\">AI-powered fraud pattern detection and risk assessment</p>\n            </div>\n            <Select value={selectedRiskLevel} onValueChange={setSelectedRiskLevel}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Risk Levels</SelectItem>\n                <SelectItem value=\"high\">High Risk</SelectItem>\n                <SelectItem value=\"medium\">Medium Risk</SelectItem>\n                <SelectItem value=\"low\">Low Risk</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                {fraudAlerts.map((alert) => (\n                  <Card key={alert.id} className=\"border-l-4 border-l-red-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                            <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{alert.providerName}</h3>\n                            <p className=\"text-gray-600 capitalize\">{alert.alertType.replace('_', ' ')}</p>\n                            <p className=\"text-sm text-gray-500\">{alert.description}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right space-y-2\">\n                          <Badge className={getRiskLevelBadge(alert.riskLevel)}>\n                            {alert.riskLevel.charAt(0).toUpperCase() + alert.riskLevel.slice(1)} Risk\n                          </Badge>\n                          <div className=\"text-sm text-gray-600\">\n                            {alert.patientCount} patients affected\n                          </div>\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"font-medium text-gray-900\">Flagged Amount:</span>\n                          <div className=\"text-red-600 font-semibold\">\n                            KES {alert.flaggedAmount.toLocaleString()}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-900\">Detected:</span>\n                          <div className=\"text-gray-700\">\n                            {new Date(alert.detectedAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-900\">Status:</span>\n                          <div className=\"text-gray-700 capitalize\">\n                            {alert.status.replace('_', ' ')}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            Investigate\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"providers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Building2 className=\"w-5 h-5 mr-2\" />\n                Provider Performance Analytics\n              </CardTitle>\n              <CardDescription>\n                Compare performance metrics across healthcare providers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {providerAnalytics.map((provider) => (\n                  <Card key={provider.providerId} className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{provider.providerName}</h3>\n                          <p className=\"text-gray-600\">{provider.providerType}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold text-blue-600\">\n                            {provider.approvalRate}%\n                          </div>\n                          <p className=\"text-sm text-gray-600\">Approval Rate</p>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-4 gap-4 mb-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold text-gray-900\">\n                            {provider.totalClaims}\n                          </div>\n                          <p className=\"text-sm text-gray-600\">Total Claims</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold text-gray-900\">\n                            KES {provider.averageClaimValue.toLocaleString()}\n                          </div>\n                          <p className=\"text-sm text-gray-600\">Avg. Claim Value</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold text-gray-900\">\n                            {provider.flaggedClaims}\n                          </div>\n                          <p className=\"text-sm text-gray-600\">Flagged Claims</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className={`text-lg font-semibold ${getRiskScoreColor(provider.riskScore)}`}>\n                            {provider.riskScore}\n                          </div>\n                          <p className=\"text-sm text-gray-600\">Risk Score</p>\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Top Service Categories</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {provider.topServices.map((service, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {service}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"benchmarks\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <TrendingUp className=\"w-5 h-5 mr-2\" />\n                Cost Benchmarking & Referral Analytics\n              </CardTitle>\n              <CardDescription>\n                Compare costs across providers and track referral patterns\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Cost Benchmarking */}\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-4\">Service Cost Benchmarks</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Card className=\"p-4\">\n                      <h4 className=\"font-medium mb-2\">Cardiology Consultation</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Hospital Average:</span>\n                          <span className=\"font-medium\">KES 15,000</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Clinic Average:</span>\n                          <span className=\"font-medium\">KES 8,000</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Network Average:</span>\n                          <span className=\"font-medium text-teal-600\">KES 12,500</span>\n                        </div>\n                      </div>\n                    </Card>\n\n                    <Card className=\"p-4\">\n                      <h4 className=\"font-medium mb-2\">Laboratory Panel (Basic)</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Hospital Average:</span>\n                          <span className=\"font-medium\">KES 3,500</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Clinic Average:</span>\n                          <span className=\"font-medium\">KES 2,800</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Network Average:</span>\n                          <span className=\"font-medium text-teal-600\">KES 3,150</span>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n\n                {/* Referral Analytics */}\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-4\">Referral Success Rates</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Card className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">94%</div>\n                      <p className=\"text-sm text-gray-600\">Cardiology Referrals</p>\n                      <p className=\"text-xs text-gray-500\">AKU Hospital</p>\n                    </Card>\n\n                    <Card className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">89%</div>\n                      <p className=\"text-sm text-gray-600\">Oncology Referrals</p>\n                      <p className=\"text-xs text-gray-500\">KNH</p>\n                    </Card>\n\n                    <Card className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">92%</div>\n                      <p className=\"text-sm text-gray-600\">Pediatric Referrals</p>\n                      <p className=\"text-xs text-gray-500\">Gertrude's Hospital</p>\n                    </Card>\n                  </div>\n                </div>\n\n                {/* Co-pay Configuration */}\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-4\">Active Co-pay Policies</h3>\n                  <div className=\"space-y-3\">\n                    <Card className=\"p-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <h4 className=\"font-medium\">NHIF Scheme</h4>\n                          <p className=\"text-sm text-gray-600\">National Hospital Insurance Fund</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-semibold\">10%</div>\n                          <p className=\"text-sm text-gray-600\">Co-pay Rate</p>\n                        </div>\n                      </div>\n                    </Card>\n\n                    <Card className=\"p-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <h4 className=\"font-medium\">Corporate Health Plans</h4>\n                          <p className=\"text-sm text-gray-600\">Private insurance schemes</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-semibold\">15%</div>\n                          <p className=\"text-sm text-gray-600\">Co-pay Rate</p>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"cost-comparison\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <DollarSign className=\"w-5 h-5 mr-2 text-green-600\" />\n                Premium Cost Comparison Analytics\n              </CardTitle>\n              <CardDescription>\n                Real-time cost analysis and provider benchmarking for premium care managers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <CostComparisonDashboard />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean\n      </div>\n    </div>\n  );\n}","size_bytes":28531},"client/src/pages/care-manager.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport default function CareManager() {\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/analytics/dashboard\"],\n  });\n\n  const { data: fraudAlerts } = useQuery({\n    queryKey: [\"/api/analytics/fraud\"],\n  });\n\n  const { data: claims } = useQuery({\n    queryKey: [\"/api/claims\"],\n  });\n\n  const { data: providers } = useQuery({\n    queryKey: [\"/api/providers\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'denied': return 'bg-red-100 text-red-800';\n      case 'void': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRiskColor = (level: string) => {\n    switch (level) {\n      case 'high': return 'bg-red-50 border-red-200 text-red-800';\n      case 'medium': return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      case 'low': return 'bg-green-50 border-green-200 text-green-800';\n      default: return 'bg-gray-50 border-gray-200 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Care Manager Dashboard</h1>\n                <p className=\"text-gray-600\">Monitor claims, AI decisions, and provider performance</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Select defaultValue=\"30days\">\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                    <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                    <SelectItem value=\"3months\">Last 3 months</SelectItem>\n                    <SelectItem value=\"6months\">Last 6 months</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button className=\"teal-button\">\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Claims</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {stats?.totalClaims?.toLocaleString() || \"0\"}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-file-medical text-blue-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className=\"text-green-600 text-sm font-medium\">+12.5%</span>\n                  <span className=\"text-gray-500 text-sm ml-2\">vs last month</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">AI Accuracy</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats?.aiAccuracy || \"0\"}%</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-teal-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-brain text-teal-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className=\"text-green-600 text-sm font-medium\">+2.1%</span>\n                  <span className=\"text-gray-500 text-sm ml-2\">improvement</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Processing Time</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">1.3s</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-green-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className=\"text-green-600 text-sm font-medium\">-0.2s</span>\n                  <span className=\"text-gray-500 text-sm ml-2\">faster than target</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Fraud Alerts</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{fraudAlerts?.length || \"0\"}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-shield-alt text-red-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className=\"text-red-600 text-sm font-medium\">0.08%</span>\n                  <span className=\"text-gray-500 text-sm ml-2\">detection rate</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Provider Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-hospital text-blue-500\"></i>\n                  <span>Provider Performance</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {providers && providers.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {providers.slice(0, 5).map((provider: any) => (\n                      <div key={provider.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                        <div>\n                          <div className=\"font-medium text-gray-800\">{provider.name}</div>\n                          <div className=\"text-sm text-gray-600\">Type: {provider.type}</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-sm font-medium text-green-600\">Active</div>\n                          <div className=\"text-xs text-gray-500\">{provider.licenseNumber}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <i className=\"fas fa-hospital text-3xl mb-4 text-gray-300\"></i>\n                    <p>No provider data available</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Fraud Detection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-shield-alt text-red-500\"></i>\n                  <span>Fraud Pattern Detection</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {fraudAlerts && fraudAlerts.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {fraudAlerts.slice(0, 5).map((alert: any) => (\n                      <div key={alert.id} className={`p-4 rounded-lg border ${getRiskColor(alert.riskLevel)}`}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium\">{alert.alertType.replace('_', ' ').toUpperCase()}</span>\n                          <span className=\"text-xs\">Risk: {alert.riskLevel.toUpperCase()}</span>\n                        </div>\n                        <div className=\"text-sm\">\n                          {alert.description}\n                        </div>\n                        <div className=\"mt-2 flex items-center justify-between\">\n                          <span className=\"text-xs\">Confidence: {alert.aiConfidence}%</span>\n                          <Button size=\"sm\" variant=\"outline\">\n                            Investigate\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <i className=\"fas fa-shield-check text-3xl mb-4 text-green-300\"></i>\n                    <p>No fraud alerts</p>\n                    <p className=\"text-sm mt-2\">All systems operating normally</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* AI Decision Insights */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-brain text-purple-500\"></i>\n                  <span>AI Decision Insights</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Auto-approved claims</span>\n                    <span className=\"font-medium\">{stats?.approvedClaims || 0} (91%)</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Flagged for review</span>\n                    <span className=\"font-medium\">{Math.floor((stats?.totalClaims || 0) * 0.075)} (7.5%)</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Auto-denied</span>\n                    <span className=\"font-medium\">{Math.floor((stats?.totalClaims || 0) * 0.015)} (1.5%)</span>\n                  </div>\n                  \n                  <div className=\"pt-4 border-t border-gray-200\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-600\">Avg. processing time</span>\n                      <span className=\"font-medium text-green-600\">1.3 seconds</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Human override rate</span>\n                    <span className=\"font-medium text-blue-600\">5.8%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Patient Outcomes */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-heartbeat text-red-500\"></i>\n                  <span>Patient Outcomes Tracking</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-medium text-green-800\">Treatment Success Rate</span>\n                      <span className=\"text-green-600\">94.2%</span>\n                    </div>\n                    <Progress value={94.2} className=\"mt-2\" />\n                  </div>\n                  \n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-medium text-blue-800\">Patient Satisfaction</span>\n                      <span className=\"text-blue-600\">4.7/5.0</span>\n                    </div>\n                    <Progress value={94} className=\"mt-2\" />\n                  </div>\n                  \n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-medium text-purple-800\">Cost Efficiency</span>\n                      <span className=\"text-purple-600\">87.3%</span>\n                    </div>\n                    <Progress value={87.3} className=\"mt-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Claims */}\n          <div className=\"mt-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Claims Activity</CardTitle>\n                <CardDescription>Latest claims processed in the system</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {claims && claims.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"text-left border-b border-gray-200\">\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Claim ID</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Service</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Provider</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Amount</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Status</th>\n                          <th className=\"pb-3 text-sm font-medium text-gray-600\">Date</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {claims.slice(0, 10).map((claim: any) => (\n                          <tr key={claim.id} className=\"border-b border-gray-50\">\n                            <td className=\"py-3 text-sm font-mono\">{claim.claimId}</td>\n                            <td className=\"py-3 text-sm\">{claim.serviceType}</td>\n                            <td className=\"py-3 text-sm\">{claim.provider?.name || 'N/A'}</td>\n                            <td className=\"py-3 text-sm\">${parseFloat(claim.serviceCost).toFixed(2)}</td>\n                            <td className=\"py-3\">\n                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(claim.status)}`}>\n                                {claim.status.toUpperCase()}\n                              </span>\n                            </td>\n                            <td className=\"py-3 text-sm text-gray-500\">\n                              {new Date(claim.createdAt).toLocaleDateString()}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <i className=\"fas fa-file-medical text-3xl mb-4 text-gray-300\"></i>\n                    <p>No claims data available</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16698},"client/src/pages/claims-page.tsx":{"content":"import { ClaimForm } from \"@/components/claim-form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { FileText, Clock, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\n\ninterface Claim {\n  id: number;\n  claimId: string;\n  patientId: number;\n  serviceType: string;\n  status: string;\n  serviceCost: string;\n  aiDecision: string;\n  aiConfidence: string;\n  createdAt: string;\n}\n\nexport default function ClaimsPage() {\n  const { data: recentClaims, isLoading } = useQuery<Claim[]>({\n    queryKey: [\"/api/claims/recent\"],\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'denied':\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'pending':\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case 'review':\n        return <AlertTriangle className=\"w-4 h-4 text-orange-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'denied':\n        return 'bg-red-100 text-red-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'review':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Claims Processing</h1>\n          <p className=\"text-gray-600\">Submit and manage healthcare claims with AI-powered validation</p>\n        </div>\n        <Badge className=\"bg-blue-100 text-blue-800\">\n          AI Assisted\n        </Badge>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Claim Form */}\n        <div className=\"lg:col-span-2\">\n          <ClaimForm />\n        </div>\n\n        {/* Recent Claims */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5 text-blue-600\" />\n                <span>Recent Claims</span>\n              </CardTitle>\n              <CardDescription>\n                Latest submitted claims and their status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-16 bg-gray-200 rounded-lg\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : !recentClaims || recentClaims.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No claims found</p>\n                  <p className=\"text-sm\">Submit your first claim to get started</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {recentClaims.slice(0, 10).map((claim) => (\n                    <div key={claim.id} className=\"border border-gray-200 rounded-lg p-3 hover:bg-gray-50 transition-colors\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"font-medium text-sm\">{claim.claimId}</span>\n                        <div className=\"flex items-center space-x-1\">\n                          {getStatusIcon(claim.status)}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm text-gray-600\">{claim.serviceType}</span>\n                        <Badge className={getStatusColor(claim.status)} variant=\"secondary\">\n                          {claim.status.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"font-medium\">${claim.serviceCost}</span>\n                        {claim.aiConfidence && (\n                          <span className=\"text-gray-500\">\n                            AI: {parseFloat(claim.aiConfidence).toFixed(1)}%\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {new Date(claim.createdAt).toLocaleString()}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5110},"client/src/pages/claims-processing.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function ClaimsProcessing() {\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    serviceType: \"\",\n    procedureCode: \"\",\n    diagnosisCode: \"\",\n    description: \"\",\n    serviceCost: \"\",\n    providerId: \"\"\n  });\n  const { toast } = useToast();\n\n  const { data: patients } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: providers } = useQuery({\n    queryKey: [\"/api/providers\"],\n  });\n\n  const createClaimMutation = useMutation({\n    mutationFn: async (claimData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/claims\", claimData);\n      return await res.json();\n    },\n    onSuccess: (claim) => {\n      toast({\n        title: \"Claim Created\",\n        description: `Claim ${claim.claimId} has been successfully created`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/claims\"] });\n      // Reset form\n      setFormData({\n        serviceType: \"\",\n        procedureCode: \"\",\n        diagnosisCode: \"\",\n        description: \"\",\n        serviceCost: \"\",\n        providerId: \"\"\n      });\n      setSelectedPatient(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create claim. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const codeSuggestionMutation = useMutation({\n    mutationFn: async (data: { serviceDescription: string; diagnosis?: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/ai/suggest-codes\", data);\n      return await res.json();\n    },\n    onSuccess: (suggestions) => {\n      if (suggestions.codes.length > 0) {\n        setFormData(prev => ({ ...prev, procedureCode: suggestions.codes[0] }));\n        toast({\n          title: \"AI Code Suggestion\",\n          description: `Suggested code: ${suggestions.codes[0]} (${suggestions.confidence}% confidence)`,\n        });\n      }\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedPatient) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a patient first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const serviceCost = parseFloat(formData.serviceCost);\n    const insuranceCoverage = serviceCost * 0.8; // 80% coverage\n    const patientCopay = serviceCost - insuranceCoverage;\n\n    createClaimMutation.mutate({\n      patientId: selectedPatient.id,\n      providerId: parseInt(formData.providerId),\n      serviceType: formData.serviceType,\n      procedureCode: formData.procedureCode,\n      diagnosisCode: formData.diagnosisCode,\n      description: formData.description,\n      serviceCost: serviceCost.toString(),\n      insuranceCoverage: insuranceCoverage.toString(),\n      patientCopay: patientCopay.toString(),\n    });\n  };\n\n  const suggestCodes = () => {\n    if (formData.description) {\n      codeSuggestionMutation.mutate({\n        serviceDescription: formData.description,\n        diagnosis: formData.diagnosisCode\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Claims Processing</h1>\n            <p className=\"text-gray-600\">Create and manage healthcare claims with AI assistance</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Patient Selection */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Patient Selection</CardTitle>\n                  <CardDescription>Choose the patient for this claim</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"patient-select\">Select Patient</Label>\n                    <Select onValueChange={(value) => {\n                      const patient = patients?.find((p: any) => p.id.toString() === value);\n                      setSelectedPatient(patient);\n                    }}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Choose a patient\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {patients?.map((patient: any) => (\n                          <SelectItem key={patient.id} value={patient.id.toString()}>\n                            {patient.firstName} {patient.lastName} - {patient.patientId}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {selectedPatient && (\n                    <div className=\"bg-teal-50 rounded-lg p-4 space-y-2\">\n                      <h4 className=\"font-medium text-teal-900\">Patient Information</h4>\n                      <div className=\"text-sm space-y-1\">\n                        <div>\n                          <span className=\"text-teal-700\">Name:</span>\n                          <span className=\"ml-2\">{selectedPatient.firstName} {selectedPatient.lastName}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-teal-700\">ID:</span>\n                          <span className=\"ml-2\">{selectedPatient.patientId}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-teal-700\">Insurance:</span>\n                          <span className=\"ml-2\">{selectedPatient.insuranceProvider}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-teal-700\">Plan:</span>\n                          <span className=\"ml-2\">{selectedPatient.insurancePlan}</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Claim Form */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-file-medical text-blue-600\"></i>\n                    <span>New Claim</span>\n                    <div className=\"ai-indicator\">\n                      <i className=\"fas fa-robot mr-1\"></i>\n                      AI Assisted\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <Label htmlFor=\"serviceType\">Service Type</Label>\n                        <Select \n                          value={formData.serviceType}\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, serviceType: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select service type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"consultation\">General Consultation</SelectItem>\n                            <SelectItem value=\"specialist\">Specialist Consultation</SelectItem>\n                            <SelectItem value=\"laboratory\">Laboratory Test</SelectItem>\n                            <SelectItem value=\"pharmacy\">Pharmacy</SelectItem>\n                            <SelectItem value=\"emergency\">Emergency Care</SelectItem>\n                            <SelectItem value=\"imaging\">Diagnostic Imaging</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"provider\">Provider</Label>\n                        <Select \n                          value={formData.providerId}\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, providerId: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select provider\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {providers?.map((provider: any) => (\n                              <SelectItem key={provider.id} value={provider.id.toString()}>\n                                {provider.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"description\">Service Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        placeholder=\"Describe the service provided...\"\n                        value={formData.description}\n                        onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                        className=\"medical-form-input\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"procedureCode\">Procedure Code (CPT)</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            id=\"procedureCode\"\n                            placeholder=\"99213\"\n                            value={formData.procedureCode}\n                            onChange={(e) => setFormData(prev => ({ ...prev, procedureCode: e.target.value }))}\n                            className=\"medical-form-input\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={suggestCodes}\n                            disabled={!formData.description || codeSuggestionMutation.isPending}\n                          >\n                            <i className=\"fas fa-robot\"></i>\n                          </Button>\n                        </div>\n                        {codeSuggestionMutation.isPending && (\n                          <p className=\"text-xs text-blue-600 mt-1\">AI suggesting codes...</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"diagnosisCode\">Diagnosis Code (ICD-10)</Label>\n                        <Input\n                          id=\"diagnosisCode\"\n                          placeholder=\"Z00.00\"\n                          value={formData.diagnosisCode}\n                          onChange={(e) => setFormData(prev => ({ ...prev, diagnosisCode: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"serviceCost\">Service Cost ($)</Label>\n                        <Input\n                          id=\"serviceCost\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"0.00\"\n                          value={formData.serviceCost}\n                          onChange={(e) => setFormData(prev => ({ ...prev, serviceCost: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n                    </div>\n\n                    {/* Real-time Billing Calculation */}\n                    {formData.serviceCost && parseFloat(formData.serviceCost) > 0 && (\n                      <Card className=\"bg-green-50 border-green-200\">\n                        <CardHeader>\n                          <CardTitle className=\"text-green-800 text-lg\">\n                            <i className=\"fas fa-calculator mr-2\"></i>\n                            Real-time Billing Calculation\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between\">\n                              <span>Service Cost:</span>\n                              <span className=\"font-medium\">${parseFloat(formData.serviceCost).toFixed(2)}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>Insurance Coverage (80%):</span>\n                              <span className=\"font-medium text-green-600\">\n                                -${(parseFloat(formData.serviceCost) * 0.8).toFixed(2)}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between border-t border-green-200 pt-2 font-semibold\">\n                              <span>Patient Copay:</span>\n                              <span>${(parseFloat(formData.serviceCost) * 0.2).toFixed(2)}</span>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    <div className=\"flex space-x-4\">\n                      <Button \n                        type=\"submit\" \n                        className=\"flex-1 teal-button\"\n                        disabled={createClaimMutation.isPending || !selectedPatient}\n                      >\n                        {createClaimMutation.isPending ? \"Processing...\" : \"Submit Claim\"}\n                      </Button>\n                      <Button type=\"button\" variant=\"outline\" className=\"flex-1\">\n                        Save Draft\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15031},"client/src/pages/consultation-form.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  User, \n  Stethoscope, \n  Brain, \n  FileText, \n  Search, \n  Plus, \n  X, \n  Clock,\n  AlertCircle,\n  CheckCircle,\n  Save\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ConsultationData {\n  patientId: string;\n  patientName: string;\n  age: number;\n  gender: string;\n  chiefComplaint: string;\n  historyPresentIllness: string;\n  physicalExam: {\n    general: string;\n    vitals: {\n      bloodPressure: string;\n      heartRate: string;\n      temperature: string;\n      respiratoryRate: string;\n      oxygenSaturation: string;\n    };\n    systems: {\n      cardiovascular: string;\n      respiratory: string;\n      gastrointestinal: string;\n      neurological: string;\n      musculoskeletal: string;\n    };\n  };\n  primaryDiagnosis: string;\n  secondaryDiagnoses: string[];\n  differentialDiagnoses: string[];\n  icd10Codes: Array<{\n    code: string;\n    description: string;\n    confidence: number;\n  }>;\n  treatment: string;\n  medications: Array<{\n    name: string;\n    dosage: string;\n    frequency: string;\n    duration: string;\n  }>;\n  followUp: string;\n  notes: string;\n}\n\ninterface ICD10Suggestion {\n  code: string;\n  description: string;\n  confidence: number;\n  category: string;\n}\n\nexport default function ConsultationForm() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [icd10Suggestions, setIcd10Suggestions] = useState<ICD10Suggestion[]>([]);\n  const [searchingICD, setSearchingICD] = useState(false);\n\n  const [consultation, setConsultation] = useState<ConsultationData>({\n    patientId: \"PT-2024-001\",\n    patientName: \"Sarah Johnson\",\n    age: 34,\n    gender: \"Female\",\n    chiefComplaint: \"\",\n    historyPresentIllness: \"\",\n    physicalExam: {\n      general: \"\",\n      vitals: {\n        bloodPressure: \"150/95\",\n        heartRate: \"98\",\n        temperature: \"37.2\",\n        respiratoryRate: \"16\",\n        oxygenSaturation: \"97\"\n      },\n      systems: {\n        cardiovascular: \"\",\n        respiratory: \"\",\n        gastrointestinal: \"\",\n        neurological: \"\",\n        musculoskeletal: \"\"\n      }\n    },\n    primaryDiagnosis: \"\",\n    secondaryDiagnoses: [],\n    differentialDiagnoses: [],\n    icd10Codes: [],\n    treatment: \"\",\n    medications: [],\n    followUp: \"\",\n    notes: \"\"\n  });\n\n  // Mock ICD-10 suggestions based on clinical input\n  const generateICD10Suggestions = async (clinicalText: string) => {\n    if (!clinicalText.trim()) return;\n    \n    setSearchingICD(true);\n    \n    // Simulate AI-powered ICD-10 code suggestions\n    setTimeout(() => {\n      const suggestions: ICD10Suggestion[] = [];\n      \n      // Chest pain related codes\n      if (clinicalText.toLowerCase().includes('chest pain')) {\n        suggestions.push(\n          { code: \"R06.02\", description: \"Shortness of breath\", confidence: 85, category: \"Symptoms\" },\n          { code: \"I25.9\", description: \"Chronic ischemic heart disease, unspecified\", confidence: 75, category: \"Cardiovascular\" },\n          { code: \"R06.00\", description: \"Dyspnea, unspecified\", confidence: 70, category: \"Symptoms\" }\n        );\n      }\n      \n      // Hypertension related\n      if (clinicalText.toLowerCase().includes('hypertension') || clinicalText.includes('150/95')) {\n        suggestions.push(\n          { code: \"I10\", description: \"Essential (primary) hypertension\", confidence: 90, category: \"Cardiovascular\" },\n          { code: \"I12.9\", description: \"Hypertensive chronic kidney disease\", confidence: 60, category: \"Cardiovascular\" }\n        );\n      }\n      \n      // Fever related\n      if (clinicalText.toLowerCase().includes('fever') || consultation.physicalExam.vitals.temperature > \"37.0\") {\n        suggestions.push(\n          { code: \"R50.9\", description: \"Fever, unspecified\", confidence: 80, category: \"Symptoms\" },\n          { code: \"J06.9\", description: \"Acute upper respiratory infection, unspecified\", confidence: 65, category: \"Respiratory\" }\n        );\n      }\n      \n      // General symptoms\n      suggestions.push(\n        { code: \"Z00.00\", description: \"Encounter for general adult medical examination\", confidence: 50, category: \"Factors\" },\n        { code: \"R53\", description: \"Malaise and fatigue\", confidence: 45, category: \"Symptoms\" }\n      );\n      \n      setIcd10Suggestions(suggestions.sort((a, b) => b.confidence - a.confidence));\n      setSearchingICD(false);\n    }, 1500);\n  };\n\n  const addICD10Code = (suggestion: ICD10Suggestion) => {\n    const exists = consultation.icd10Codes.find(code => code.code === suggestion.code);\n    if (!exists) {\n      setConsultation(prev => ({\n        ...prev,\n        icd10Codes: [...prev.icd10Codes, {\n          code: suggestion.code,\n          description: suggestion.description,\n          confidence: suggestion.confidence\n        }]\n      }));\n    }\n  };\n\n  const removeICD10Code = (code: string) => {\n    setConsultation(prev => ({\n      ...prev,\n      icd10Codes: prev.icd10Codes.filter(icd => icd.code !== code)\n    }));\n  };\n\n  const addMedication = () => {\n    setConsultation(prev => ({\n      ...prev,\n      medications: [...prev.medications, {\n        name: \"\",\n        dosage: \"\",\n        frequency: \"\",\n        duration: \"\"\n      }]\n    }));\n  };\n\n  const removeMedication = (index: number) => {\n    setConsultation(prev => ({\n      ...prev,\n      medications: prev.medications.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateMedication = (index: number, field: string, value: string) => {\n    setConsultation(prev => ({\n      ...prev,\n      medications: prev.medications.map((med, i) => \n        i === index ? { ...med, [field]: value } : med\n      )\n    }));\n  };\n\n  const saveConsultation = async () => {\n    setIsLoading(true);\n    try {\n      // Save consultation logic here\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      toast({\n        title: \"Consultation Saved\",\n        description: \"Patient consultation has been documented successfully.\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save consultation. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Consultation Form</h1>\n          <p className=\"text-gray-600 mt-1\">Complete clinical documentation diagnosis support</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge variant=\"outline\" className=\"text-sm\">\n            <Clock className=\"w-4 h-4 mr-1\" />\n            In Progress\n          </Badge>\n          <Button onClick={saveConsultation} disabled={isLoading} className=\"teal-button\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            {isLoading ? \"Saving...\" : \"Save Consultation\"}\n          </Button>\n        </div>\n      </div>\n      {/* Patient Header */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <User className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <h3 className=\"text-lg font-semibold text-blue-900\">{consultation.patientName}</h3>\n              <p className=\"text-blue-700\">ID: {consultation.patientId} | {consultation.age}Y {consultation.gender}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      <Tabs defaultValue=\"history\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"history\">History & Complaint</TabsTrigger>\n          <TabsTrigger value=\"examination\">Physical Exam</TabsTrigger>\n          <TabsTrigger value=\"diagnosis\">Diagnosis & ICD-10</TabsTrigger>\n          <TabsTrigger value=\"treatment\">Treatment & Follow-up</TabsTrigger>\n        </TabsList>\n\n        {/* History & Chief Complaint */}\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5 text-blue-600\" />\n                <span>Chief Complaint & History</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"chief-complaint\">Chief Complaint</Label>\n                <Textarea\n                  id=\"chief-complaint\"\n                  placeholder=\"Patient's primary reason for visit...\"\n                  value={consultation.chiefComplaint}\n                  onChange={(e) => setConsultation(prev => ({ ...prev, chiefComplaint: e.target.value }))}\n                  className=\"medical-form-input\"\n                  rows={3}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"hpi\">History of Present Illness (HPI)</Label>\n                <Textarea\n                  id=\"hpi\"\n                  placeholder=\"Detailed history of current symptoms, onset, duration, severity, associated symptoms...\"\n                  value={consultation.historyPresentIllness}\n                  onChange={(e) => setConsultation(prev => ({ ...prev, historyPresentIllness: e.target.value }))}\n                  className=\"medical-form-input\"\n                  rows={6}\n                />\n              </div>\n\n              <div className=\"mt-4\">\n                <Button \n                  onClick={() => generateICD10Suggestions(consultation.chiefComplaint + \" \" + consultation.historyPresentIllness)}\n                  variant=\"outline\"\n                  disabled={searchingICD}\n                >\n                  <Brain className=\"w-4 h-4 mr-2\" />\n                  {searchingICD ? \"Analyzing...\" : \"Get AI Diagnosis Suggestions\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Physical Examination */}\n        <TabsContent value=\"examination\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Stethoscope className=\"w-5 h-5 text-green-600\" />\n                <span>Physical Examination</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Vitals */}\n              <div>\n                <h4 className=\"font-medium mb-3\">Vital Signs</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                  <div>\n                    <Label htmlFor=\"bp\">Blood Pressure</Label>\n                    <Input\n                      id=\"bp\"\n                      value={consultation.physicalExam.vitals.bloodPressure}\n                      onChange={(e) => setConsultation(prev => ({\n                        ...prev,\n                        physicalExam: {\n                          ...prev.physicalExam,\n                          vitals: { ...prev.physicalExam.vitals, bloodPressure: e.target.value }\n                        }\n                      }))}\n                      placeholder=\"120/80\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"hr\">Heart Rate</Label>\n                    <Input\n                      id=\"hr\"\n                      value={consultation.physicalExam.vitals.heartRate}\n                      onChange={(e) => setConsultation(prev => ({\n                        ...prev,\n                        physicalExam: {\n                          ...prev.physicalExam,\n                          vitals: { ...prev.physicalExam.vitals, heartRate: e.target.value }\n                        }\n                      }))}\n                      placeholder=\"72\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"temp\">Temperature</Label>\n                    <Input\n                      id=\"temp\"\n                      value={consultation.physicalExam.vitals.temperature}\n                      onChange={(e) => setConsultation(prev => ({\n                        ...prev,\n                        physicalExam: {\n                          ...prev.physicalExam,\n                          vitals: { ...prev.physicalExam.vitals, temperature: e.target.value }\n                        }\n                      }))}\n                      placeholder=\"36.5\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"rr\">Respiratory Rate</Label>\n                    <Input\n                      id=\"rr\"\n                      value={consultation.physicalExam.vitals.respiratoryRate}\n                      onChange={(e) => setConsultation(prev => ({\n                        ...prev,\n                        physicalExam: {\n                          ...prev.physicalExam,\n                          vitals: { ...prev.physicalExam.vitals, respiratoryRate: e.target.value }\n                        }\n                      }))}\n                      placeholder=\"16\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"o2sat\">O2 Saturation</Label>\n                    <Input\n                      id=\"o2sat\"\n                      value={consultation.physicalExam.vitals.oxygenSaturation}\n                      onChange={(e) => setConsultation(prev => ({\n                        ...prev,\n                        physicalExam: {\n                          ...prev.physicalExam,\n                          vitals: { ...prev.physicalExam.vitals, oxygenSaturation: e.target.value }\n                        }\n                      }))}\n                      placeholder=\"98\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* System Examination */}\n              <div>\n                <h4 className=\"font-medium mb-3\">System Examination</h4>\n                <div className=\"space-y-4\">\n                  {Object.entries(consultation.physicalExam.systems).map(([system, findings]) => (\n                    <div key={system}>\n                      <Label htmlFor={system} className=\"capitalize\">{system.replace(/([A-Z])/g, ' $1')}</Label>\n                      <Textarea\n                        id={system}\n                        value={findings}\n                        onChange={(e) => setConsultation(prev => ({\n                          ...prev,\n                          physicalExam: {\n                            ...prev.physicalExam,\n                            systems: { ...prev.physicalExam.systems, [system]: e.target.value }\n                          }\n                        }))}\n                        placeholder={`${system} examination findings...`}\n                        rows={2}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Diagnosis & ICD-10 */}\n        <TabsContent value=\"diagnosis\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Diagnosis Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Brain className=\"w-5 h-5 text-purple-600\" />\n                  <span>Clinical Diagnosis</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"primary-diagnosis\">Primary Diagnosis</Label>\n                  <Textarea\n                    id=\"primary-diagnosis\"\n                    value={consultation.primaryDiagnosis}\n                    onChange={(e) => setConsultation(prev => ({ ...prev, primaryDiagnosis: e.target.value }))}\n                    placeholder=\"Primary clinical diagnosis...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div>\n                  <Label>Differential Diagnoses</Label>\n                  <Textarea\n                    value={consultation.differentialDiagnoses.join('\\n')}\n                    onChange={(e) => setConsultation(prev => ({ \n                      ...prev, \n                      differentialDiagnoses: e.target.value.split('\\n').filter(d => d.trim()) \n                    }))}\n                    placeholder=\"Alternative diagnoses to consider (one per line)...\"\n                    rows={4}\n                  />\n                </div>\n\n                {/* Current ICD-10 Codes */}\n                <div>\n                  <Label>Assigned ICD-10 Codes</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    {consultation.icd10Codes.map((icd, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg border\">\n                        <div>\n                          <span className=\"font-medium text-green-800\">{icd.code}</span>\n                          <p className=\"text-sm text-green-600\">{icd.description}</p>\n                          <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                            {icd.confidence}% confidence\n                          </Badge>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeICD10Code(icd.code)}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Suggestions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Search className=\"w-5 h-5 text-blue-600\" />\n                  <span>AI ICD-10 Suggestions</span>\n                </CardTitle>\n                <CardDescription>\n                  AI-powered diagnosis code suggestions based on clinical data\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {searchingICD ? (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <div className=\"text-center\">\n                      <Brain className=\"w-8 h-8 mx-auto animate-pulse text-blue-600 mb-2\" />\n                      <p className=\"text-sm text-gray-600\">Analyzing clinical data...</p>\n                    </div>\n                  </div>\n                ) : icd10Suggestions.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {icd10Suggestions.map((suggestion, index) => (\n                      <div key={index} className=\"p-3 border rounded-lg hover:bg-gray-50\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <span className=\"font-medium text-blue-600\">{suggestion.code}</span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {suggestion.category}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-700 mb-2\">{suggestion.description}</p>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                className={`text-xs ${\n                                  suggestion.confidence >= 80 ? 'bg-green-100 text-green-800' :\n                                  suggestion.confidence >= 60 ? 'bg-yellow-100 text-yellow-800' :\n                                  'bg-red-100 text-red-800'\n                                }`}\n                              >\n                                {suggestion.confidence}% match\n                              </Badge>\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => addICD10Code(suggestion)}\n                            className=\"ml-2\"\n                          >\n                            <Plus className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Brain className=\"w-8 h-8 mx-auto mb-2 text-gray-400\" />\n                    <p>Enter clinical data and click \"Get AI Diagnosis Suggestions\" to see ICD-10 recommendations</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Treatment & Follow-up */}\n        <TabsContent value=\"treatment\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Treatment Plan */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Treatment Plan</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"treatment\">Treatment & Management</Label>\n                  <Textarea\n                    id=\"treatment\"\n                    value={consultation.treatment}\n                    onChange={(e) => setConsultation(prev => ({ ...prev, treatment: e.target.value }))}\n                    placeholder=\"Treatment plan, procedures, recommendations...\"\n                    rows={6}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"follow-up\">Follow-up Instructions</Label>\n                  <Textarea\n                    id=\"follow-up\"\n                    value={consultation.followUp}\n                    onChange={(e) => setConsultation(prev => ({ ...prev, followUp: e.target.value }))}\n                    placeholder=\"Follow-up schedule, return visit instructions...\"\n                    rows={4}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Medications */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Medications</span>\n                  <Button size=\"sm\" onClick={addMedication} variant=\"outline\">\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {consultation.medications.map((med, index) => (\n                    <div key={index} className=\"p-3 border rounded-lg space-y-3\">\n                      <div className=\"flex justify-between items-start\">\n                        <h5 className=\"font-medium\">Medication {index + 1}</h5>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeMedication(index)}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                          <Label>Medication Name</Label>\n                          <Input\n                            value={med.name}\n                            onChange={(e) => updateMedication(index, 'name', e.target.value)}\n                            placeholder=\"e.g., Amoxicillin\"\n                          />\n                        </div>\n                        <div>\n                          <Label>Dosage</Label>\n                          <Input\n                            value={med.dosage}\n                            onChange={(e) => updateMedication(index, 'dosage', e.target.value)}\n                            placeholder=\"e.g., 500mg\"\n                          />\n                        </div>\n                        <div>\n                          <Label>Frequency</Label>\n                          <Input\n                            value={med.frequency}\n                            onChange={(e) => updateMedication(index, 'frequency', e.target.value)}\n                            placeholder=\"e.g., Twice daily\"\n                          />\n                        </div>\n                        <div>\n                          <Label>Duration</Label>\n                          <Input\n                            value={med.duration}\n                            onChange={(e) => updateMedication(index, 'duration', e.target.value)}\n                            placeholder=\"e.g., 7 days\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {consultation.medications.length === 0 && (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <p>No medications prescribed</p>\n                      <Button size=\"sm\" onClick={addMedication} variant=\"outline\" className=\"mt-2\">\n                        <Plus className=\"w-4 h-4 mr-1\" />\n                        Add First Medication\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Notes */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Additional Clinical Notes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Textarea\n                value={consultation.notes}\n                onChange={(e) => setConsultation(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"Additional observations, patient education provided, special considerations...\"\n                rows={4}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":27084},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  \n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/analytics/dashboard\"],\n  });\n\n  const { data: recentClaims } = useQuery({\n    queryKey: [\"/api/claims\"],\n  });\n\n  const { data: blockchainStatus } = useQuery({\n    queryKey: [\"/api/blockchain/status\"],\n  });\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          {/* Welcome Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Welcome back, {user?.name}\n                </h1>\n                <p className=\"text-gray-600\">\n                  {user?.role === 'care-manager' ? 'Monitor claims and AI decisions' :\n                   user?.role === 'doctor' ? 'Patient queue and clinical consultations' :\n                   user?.role === 'pharmacy' ? 'Validate prescriptions and medications' :\n                   'Manage healthcare claims and patient verification'}\n                </p>\n              </div>\n              <div className=\"flex space-x-3\">\n                {user?.role === 'doctor' ? (\n                  <>\n                    <Link href=\"/patient-queue\">\n                      <Button className=\"teal-button\">\n                        <i className=\"fas fa-users mr-2\"></i>\n                        Patient Queue\n                      </Button>\n                    </Link>\n                    <Link href=\"/consultation\">\n                      <Button variant=\"outline\">\n                        <i className=\"fas fa-stethoscope mr-2\"></i>\n                        New Consultation\n                      </Button>\n                    </Link>\n                  </>\n                ) : (\n                  <>\n                    <Link href=\"/verification\">\n                      <Button className=\"teal-button\">\n                        <i className=\"fas fa-fingerprint mr-2\"></i>\n                        Verify Patient\n                      </Button>\n                    </Link>\n                    <Link href=\"/claims\">\n                      <Button variant=\"outline\">\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        New Claim\n                      </Button>\n                    </Link>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Active Claims</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {isLoading ? \"...\" : stats?.activeClaims?.toLocaleString() || \"0\"}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-file-medical text-blue-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-green-600 font-medium\">+12.5%</span>\n                  <span className=\"text-gray-500 ml-1\">vs last month</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">AI Accuracy</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {isLoading ? \"...\" : `${stats?.aiAccuracy || \"0\"}%`}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-teal-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-brain text-teal-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-green-600 font-medium\">+2.1%</span>\n                  <span className=\"text-gray-500 ml-1\">improvement</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Processing Time</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">1.3s</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-green-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-green-600 font-medium\">-0.2s</span>\n                  <span className=\"text-gray-500 ml-1\">faster</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Blockchain</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {blockchainStatus?.isOnline ? \"Online\" : \"Offline\"}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-link text-purple-600\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-purple-600 font-medium\">Sepolia</span>\n                  <span className=\"text-gray-500 ml-1\">testnet</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Recent Claims */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Claims</CardTitle>\n                  <CardDescription>Latest claims processed in the system</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {recentClaims?.slice(0, 5).map((claim: any) => (\n                      <div key={claim.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{claim.claimId}</p>\n                          <p className=\"text-sm text-gray-600\">{claim.serviceType}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className={`status-${claim.status}`}>\n                            {claim.status.charAt(0).toUpperCase() + claim.status.slice(1)}\n                          </span>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            ${parseFloat(claim.serviceCost).toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    )) || (\n                      <div className=\"text-center text-gray-500 py-8\">\n                        <i className=\"fas fa-file-medical text-3xl mb-4 text-gray-300\"></i>\n                        <p>No claims found</p>\n                        <Link href=\"/claims\">\n                          <Button className=\"mt-4 teal-button\">Create Your First Claim</Button>\n                        </Link>\n                      </div>\n                    )}\n                  </div>\n                  {recentClaims?.length > 0 && (\n                    <div className=\"mt-6\">\n                      <Link href=\"/claims\">\n                        <Button variant=\"outline\" className=\"w-full\">\n                          View All Claims\n                        </Button>\n                      </Link>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Link href=\"/verification\" className=\"block\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <i className=\"fas fa-fingerprint mr-3 text-teal-600\"></i>\n                      Patient Verification\n                    </Button>\n                  </Link>\n                  <Link href=\"/ai-preauth\" className=\"block\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <i className=\"fas fa-brain mr-3 text-blue-600\"></i>\n                      AI Preauthorization\n                    </Button>\n                  </Link>\n                  <Link href=\"/pharmacy\" className=\"block\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <i className=\"fas fa-pills mr-3 text-green-600\"></i>\n                      Pharmacy Validation\n                    </Button>\n                  </Link>\n                  <Link href=\"/blockchain\" className=\"block\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <i className=\"fas fa-link mr-3 text-purple-600\"></i>\n                      Blockchain Anchor\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              {/* System Status */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>System Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">AI Engine</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-sm font-medium text-green-600\">Active</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Database</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-sm font-medium text-green-600\">Healthy</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Blockchain</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-sm font-medium text-green-600\">Connected</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12315},"client/src/pages/debtors-dashboard-light.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  FileText,\n  DollarSign,\n  AlertCircle,\n  CheckCircle,\n  TrendingUp,\n  Download,\n  Upload,\n  Search,\n  Filter,\n  Building,\n  Calendar,\n  Home,\n  FileSpreadsheet,\n  Clock,\n  AlertTriangle,\n  Settings,\n  LogOut,\n  Bell,\n  ChevronRight,\n  Eye,\n  Send\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n// Sidebar Component with light theme\nfunction Sidebar({ user }: { user: any }) {\n  const [activeItem, setActiveItem] = useState(\"dashboard\");\n  const { logout } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const menuItems = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: Home, href: \"/debtors-dashboard\" },\n    { id: \"claims\", label: \"Claim Batches\", icon: FileSpreadsheet, href: \"/debtors-dashboard/claims\" },\n    { id: \"pending\", label: \"Pending Diagnosis\", icon: AlertCircle, href: \"/debtors-dashboard/pending\" },\n    { id: \"reconciliation\", label: \"Reconciliation\", icon: FileText, href: \"/debtors-dashboard/reconciliation\" },\n    { id: \"audit\", label: \"Verification Audit\", icon: Eye, href: \"/verification-audit\", premium: true },\n    { id: \"reports\", label: \"Reports\", icon: TrendingUp, href: \"/debtors-dashboard/reports\" },\n    { id: \"settings\", label: \"Settings\", icon: Settings, href: \"/debtors-dashboard/settings\" }\n  ];\n\n  return (\n    <div className=\"w-64 bg-white border-r border-gray-200 shadow-sm\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <h1 className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#265651] to-[#6BBDB4]\">\n          Erlessed\n        </h1>\n        <p className=\"text-sm text-gray-600 mt-1\">Debtors Dashboard</p>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <p className=\"text-sm font-medium text-gray-900\">{user.name}</p>\n        <p className=\"text-xs text-[#265651] mt-1 capitalize\">{user.role}</p>\n        <Badge className=\"mt-2 bg-[#6BBDB4]/20 text-[#265651] border-[#6BBDB4]/30\">\n          Finance Team\n        </Badge>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeItem === item.id;\n            \n            return (\n              <li key={item.id}>\n                <Link href={item.href}>\n                  <div\n                    onClick={() => setActiveItem(item.id)}\n                    className={cn(\n                      \"flex items-center gap-3 px-3 py-2 rounded-lg transition-all cursor-pointer\",\n                      isActive\n                        ? \"bg-gradient-to-r from-[#265651]/10 to-[#6BBDB4]/10 text-[#265651] border border-[#6BBDB4]/30\"\n                        : \"hover:bg-gray-100 text-gray-700 hover:text-[#265651]\"\n                    )}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{item.label}</span>\n                    {item.premium && (\n                      <Badge variant=\"outline\" className=\"ml-auto text-xs\">\n                        Premium\n                      </Badge>\n                    )}\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Logout Button */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <Button \n          variant=\"ghost\" \n          className=\"w-full justify-start text-gray-700 hover:text-[#265651] hover:bg-gray-100\"\n          onClick={async () => {\n            await logout();\n            setLocation(\"/modern-auth\");\n          }}\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// KPI Stats Component\nfunction KPIStats() {\n  const stats = [\n    {\n      label: \"Total Claims\",\n      value: \"2,847\",\n      subtitle: \"This month\",\n      icon: FileText,\n      color: \"text-[#265651]\",\n      bgColor: \"bg-[#265651]/10\"\n    },\n    {\n      label: \"Clean Claims %\",\n      value: \"87.5%\",\n      subtitle: \"+3.2% from last month\",\n      icon: CheckCircle,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\"\n    },\n    {\n      label: \"Pending Diagnosis\",\n      value: \"156\",\n      subtitle: \"24 urgent\",\n      icon: AlertCircle,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\"\n    },\n    {\n      label: \"Expected Reimbursement\",\n      value: \"KES 8.4M\",\n      subtitle: \"Next 30 days\",\n      icon: DollarSign,\n      color: \"text-[#6BBDB4]\",\n      bgColor: \"bg-[#6BBDB4]/10\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        \n        return (\n          <Card key={index} className=\"bg-white border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">{stat.label}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-1\">{stat.value}</p>\n                  <p className=\"text-xs text-gray-500 mt-2\">{stat.subtitle}</p>\n                </div>\n                <div className={cn(\"p-3 rounded-lg\", stat.bgColor)}>\n                  <Icon className={cn(\"w-6 h-6\", stat.color)} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n// Claim Batches Component\nfunction ClaimBatches() {\n  const batches = [\n    {\n      id: \"BATCH-2024-01\",\n      insurer: \"SHA\",\n      claims: 324,\n      amount: \"KES 2.1M\",\n      status: \"ready\",\n      lastUpdated: \"2 hours ago\"\n    },\n    {\n      id: \"BATCH-2024-02\",\n      insurer: \"CIC\",\n      claims: 156,\n      amount: \"KES 980K\",\n      status: \"pending\",\n      lastUpdated: \"1 day ago\"\n    },\n    {\n      id: \"BATCH-2024-03\",\n      insurer: \"AAR\",\n      claims: 89,\n      amount: \"KES 540K\",\n      status: \"submitted\",\n      lastUpdated: \"3 days ago\"\n    },\n    {\n      id: \"BATCH-2024-04\",\n      insurer: \"Jubilee\",\n      claims: 210,\n      amount: \"KES 1.5M\",\n      status: \"ready\",\n      lastUpdated: \"5 hours ago\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <div>\n          <CardTitle className=\"text-gray-900\">Claim Batches by Insurer</CardTitle>\n          <p className=\"text-sm text-gray-600 mt-1\">Ready for submission</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\" className=\"text-gray-700\">\n            <Filter className=\"h-4 w-4 mr-1\" />\n            Filter\n          </Button>\n          <Button size=\"sm\" className=\"bg-[#265651] hover:bg-[#265651]/90 text-white\">\n            <Upload className=\"h-4 w-4 mr-1\" />\n            Submit All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {batches.map((batch) => (\n            <div key={batch.id} className=\"p-4 rounded-lg bg-gray-50 border border-gray-200 hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3\">\n                    <Building className=\"h-5 w-5 text-gray-500\" />\n                    <span className=\"font-medium text-gray-900\">{batch.insurer}</span>\n                    <Badge \n                      variant=\"secondary\"\n                      className={cn(\n                        batch.status === \"ready\" && \"bg-green-100 text-green-700 border-green-300\",\n                        batch.status === \"pending\" && \"bg-yellow-100 text-yellow-700 border-yellow-300\",\n                        batch.status === \"submitted\" && \"bg-blue-100 text-blue-700 border-blue-300\"\n                      )}\n                    >\n                      {batch.status}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {batch.claims} claims • {batch.amount} • Last updated {batch.lastUpdated}\n                  </p>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-gray-700\">\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\" className=\"bg-[#6BBDB4] hover:bg-[#6BBDB4]/90 text-white\">\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Pending Diagnosis Component\nfunction PendingDiagnosis() {\n  const pendingCases = [\n    {\n      patient: \"John Kamau\",\n      doctor: \"Dr. Sarah Wanjiru\",\n      service: \"Consultation\",\n      date: \"2024-01-15\",\n      daysOverdue: 3,\n      amount: \"KES 3,500\"\n    },\n    {\n      patient: \"Mary Njeri\",\n      doctor: \"Dr. James Mwangi\",\n      service: \"Lab Tests\",\n      date: \"2024-01-14\",\n      daysOverdue: 4,\n      amount: \"KES 8,200\"\n    },\n    {\n      patient: \"Peter Ochieng\",\n      doctor: \"Dr. Grace Otieno\",\n      service: \"Procedure\",\n      date: \"2024-01-13\",\n      daysOverdue: 5,\n      amount: \"KES 15,000\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <div>\n          <CardTitle className=\"text-gray-900\">Pending Diagnosis</CardTitle>\n          <p className=\"text-sm text-gray-600 mt-1\">Claims awaiting diagnosis codes</p>\n        </div>\n        <Button variant=\"outline\" size=\"sm\" className=\"text-[#265651]\">\n          <Bell className=\"h-4 w-4 mr-1\" />\n          Send Reminders\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {pendingCases.map((case_, index) => (\n            <div key={index} className=\"p-3 rounded-lg bg-yellow-50 border border-yellow-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-gray-900\">{case_.patient}</p>\n                  <p className=\"text-sm text-gray-600\">\n                    {case_.doctor} • {case_.service} • {case_.amount}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <Badge variant=\"destructive\" className=\"bg-red-100 text-red-700 border-red-300\">\n                    {case_.daysOverdue} days overdue\n                  </Badge>\n                  <p className=\"text-xs text-gray-500 mt-1\">{case_.date}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Actions Component\nfunction QuickActions() {\n  const actions = [\n    {\n      label: \"Generate Report\",\n      description: \"Monthly claims summary\",\n      icon: FileSpreadsheet,\n      color: \"from-[#265651] to-[#265651]/80\",\n      href: \"/debtors-dashboard/reports/generate\"\n    },\n    {\n      label: \"Verify Batch\",\n      description: \"Biometric verification\",\n      icon: CheckCircle,\n      color: \"from-[#6BBDB4] to-[#6BBDB4]/80\",\n      href: \"/debtors-dashboard/verify\"\n    },\n    {\n      label: \"Export Claims\",\n      description: \"Download for submission\",\n      icon: Download,\n      color: \"from-purple-500 to-purple-600\",\n      href: \"/debtors-dashboard/export\"\n    },\n    {\n      label: \"Reconciliation\",\n      description: \"Match payments\",\n      icon: TrendingUp,\n      color: \"from-orange-500 to-orange-600\",\n      href: \"/debtors-dashboard/reconcile\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-900\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {actions.map((action, index) => {\n            const Icon = action.icon;\n            \n            return (\n              <Link key={index} href={action.href}>\n                <div className=\"block p-4 rounded-lg bg-gray-50 border border-gray-200 hover:border-[#6BBDB4] hover:bg-[#6BBDB4]/5 transition-all group cursor-pointer\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className={`p-3 rounded-lg bg-gradient-to-r ${action.color} group-hover:scale-110 transition-transform`}>\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900 group-hover:text-[#265651] transition-colors\">\n                        {action.label}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {action.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Main Component\nexport default function DebtorsDashboard() {\n  const dashboardUser = {\n    name: \"Finance Officer\",\n    role: \"debtors-officer\"\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#e8f5f0] via-[#f0faf7] to-[#d1e7e0]\">\n      <Sidebar user={dashboardUser} />\n      <main className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-[#265651] to-[#6BBDB4] rounded-lg p-6 text-white shadow-md\">\n          <h1 className=\"text-2xl font-bold\">Medical Insurance Claims Management</h1>\n          <p className=\"text-white/90 mt-1\">Track, submit, and reconcile insurance claims efficiently</p>\n        </div>\n\n        {/* KPIs */}\n        <KPIStats />\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <ClaimBatches />\n          </div>\n          <div>\n            <PendingDiagnosis />\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <QuickActions />\n      </main>\n    </div>\n  );\n}","size_bytes":14692},"client/src/pages/debtors-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { SharedLayout } from \"@/components/layout/shared-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { \n  FileText, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  DollarSign, \n  Users, \n  Shield,\n  X\n} from \"lucide-react\";\n\nexport default function DebtorsDashboard() {\n  const [, setLocation] = useLocation();\n  \n  // Mock user data for demo purposes\n  const user = {\n    id: 13,\n    username: \"debtors1\",\n    email: \"debtors@test.med\",\n    name: \"Mary Njoroge\",\n    role: \"debtors\",\n    premiumAccess: true\n  };\n\n  return (\n    <SharedLayout user={user} className=\"min-h-screen bg-gray-50\">\n      <div className=\"space-y-8\">\n        {/* KPI Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <FileText className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Claims</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">247</p>\n                  <p className=\"text-xs text-muted-foreground\">Current Month</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Ready Claims</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">198</p>\n                  <p className=\"text-xs text-muted-foreground\">80% Clean Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Pending Diagnosis</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">49</p>\n                  <p className=\"text-xs text-muted-foreground\">Awaiting doctors</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Expected Amount</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">KES 2.4M</p>\n                  <p className=\"text-xs text-muted-foreground\">Total reimbursements</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Features */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Claim Batches */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"h-5 w-5 text-teal-600\" />\n                <span>Claim Batches</span>\n              </CardTitle>\n              <CardDescription>\n                Track claim submissions by insurer\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">SHA Batch #001</p>\n                    <p className=\"text-sm text-gray-600\">145 claims</p>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-800\">Ready</Badge>\n                </div>\n                <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">CIC Batch #002</p>\n                    <p className=\"text-sm text-gray-600\">89 claims</p>\n                  </div>\n                  <Badge className=\"bg-yellow-100 text-yellow-800\">In Progress</Badge>\n                </div>\n                <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">AAR Batch #003</p>\n                    <p className=\"text-sm text-gray-600\">23 claims</p>\n                  </div>\n                  <Badge className=\"bg-blue-100 text-blue-800\">Draft</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Verification Audit */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Shield className=\"h-5 w-5 text-teal-600\" />\n                <span>Verification Audit</span>\n                <Badge className=\"bg-teal-100 text-teal-800\">Premium</Badge>\n              </CardTitle>\n              <CardDescription>\n                Biometric verification compliance tracking\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <p className=\"text-2xl font-bold text-green-600\">85%</p>\n                  <p className=\"text-xs text-gray-600\">Verified</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-red-600\">12</p>\n                  <p className=\"text-xs text-gray-600\">Missing</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-orange-600\">5</p>\n                  <p className=\"text-xs text-gray-600\">Mismatches</p>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <span>John Wanjiku - Lab Tests</span>\n                  </span>\n                  <span className=\"text-gray-500\">Verified</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center space-x-2\">\n                    <Clock className=\"h-4 w-4 text-orange-600\" />\n                    <span>Mary Njeri - Pharmacy</span>\n                  </span>\n                  <span className=\"text-gray-500\">+30min</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center space-x-2\">\n                    <X className=\"h-4 w-4 text-red-600\" />\n                    <span>David Ochieng - Physio</span>\n                  </span>\n                  <span className=\"text-gray-500\">Missing</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>\n              Common debtors department workflows\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center space-y-2\">\n                <FileText className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Submit Batch</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center space-y-2\">\n                <AlertTriangle className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Send Reminders</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center space-y-2\"\n                onClick={() => setLocation(\"/verification-audit\")}\n              >\n                <Shield className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Audit Report</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center space-y-2\">\n                <Users className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Verify Claims</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </SharedLayout>\n  );\n}","size_bytes":8941},"client/src/pages/debtors-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  DollarSign, Clock, AlertTriangle, FileText, \n  TrendingUp, Users, Crown, Star \n} from \"lucide-react\";\n\ninterface Claim {\n  id: number;\n  claimId: string;\n  patientId: number;\n  serviceType: string;\n  status: string;\n  serviceCost: string;\n  createdAt: string;\n  diagnosisCode?: string;\n  isVoid: boolean;\n}\n\nexport default function DebtorsPage() {\n  const { data: claims, isLoading } = useQuery<Claim[]>({\n    queryKey: [\"/api/claims/recent\"],\n  });\n\n  const getStatusIcon = (status: string, isVoid: boolean) => {\n    if (isVoid) return <AlertTriangle className=\"w-4 h-4 text-red-500\" />;\n    \n    switch (status) {\n      case 'approved':\n        return <FileText className=\"w-4 h-4 text-green-500\" />;\n      case 'pending':\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case 'denied':\n        return <AlertTriangle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string, isVoid: boolean) => {\n    if (isVoid) return 'bg-red-100 text-red-800';\n    \n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'denied':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount));\n  };\n\n  // Calculate summary statistics\n  const stats = claims ? {\n    outstanding: claims.filter(c => c.status === 'pending').length,\n    missingDiagnosis: claims.filter(c => !c.diagnosisCode && c.status === 'pending').length,\n    totalValue: claims.reduce((sum, c) => sum + parseFloat(c.serviceCost), 0),\n    avgProcessing: 4.2, // days\n    voidClaims: claims.filter(c => c.isVoid).length\n  } : null;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Debtors Management Module</h1>\n          <p className=\"text-gray-600\">Manage outstanding claims, missing documentation, and billing analysis</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Select defaultValue=\"all\">\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Claims</SelectItem>\n              <SelectItem value=\"pending\">Pending Review</SelectItem>\n              <SelectItem value=\"missing-diagnosis\">Missing Diagnosis</SelectItem>\n              <SelectItem value=\"void\">Void Claims</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button>\n            Generate Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Statistics */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Outstanding Claims</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.outstanding}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Awaiting processing\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Missing Diagnosis</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.missingDiagnosis}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Require documentation\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Value</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(stats.totalValue.toString())}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Outstanding claims value\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg Processing</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.avgProcessing}d</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Days to completion\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Void Claims</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.voidClaims}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Cancelled transactions\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs defaultValue=\"claims\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"claims\">Claims Management</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Premium Analytics</TabsTrigger>\n          <TabsTrigger value=\"providers\">Provider Analysis</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"claims\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Submitted Claims</CardTitle>\n                  <CardDescription>\n                    Review and manage outstanding healthcare claims\n                  </CardDescription>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\">Basic View</Button>\n                  <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700\">\n                    <Crown className=\"w-3 h-3 mr-1\" />\n                    Premium View\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-16 bg-gray-200 rounded-lg\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : !claims || claims.length === 0 ? (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No claims found</p>\n                  <p className=\"text-sm\">Claims data will appear here when available</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"text-left border-b border-gray-200\">\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Claim ID</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Patient</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Service</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Amount</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Status</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Date</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"space-y-2\">\n                      {claims.slice(0, 20).map((claim) => (\n                        <tr key={claim.id} className=\"border-b border-gray-50\">\n                          <td className=\"py-3 text-sm font-mono\">{claim.claimId}</td>\n                          <td className=\"py-3 text-sm\">Patient #{claim.patientId}</td>\n                          <td className=\"py-3 text-sm\">{claim.serviceType}</td>\n                          <td className=\"py-3 text-sm font-medium\">\n                            {claim.isVoid ? (\n                              <span className=\"line-through text-gray-500\">\n                                {formatCurrency(claim.serviceCost)}\n                              </span>\n                            ) : (\n                              formatCurrency(claim.serviceCost)\n                            )}\n                          </td>\n                          <td className=\"py-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getStatusIcon(claim.status, claim.isVoid)}\n                              <Badge className={getStatusColor(claim.status, claim.isVoid)} variant=\"secondary\">\n                                {claim.isVoid ? 'VOID' : claim.status.toUpperCase()}\n                              </Badge>\n                            </div>\n                          </td>\n                          <td className=\"py-3 text-sm text-gray-500\">\n                            {new Date(claim.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"py-3\">\n                            <div className=\"flex space-x-2\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                View\n                              </Button>\n                              {!claim.diagnosisCode && claim.status === 'pending' && (\n                                <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 border-red-200\">\n                                  Fix\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          {/* Premium Analytics Section */}\n          <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-xl p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h3 className=\"text-lg font-medium text-purple-800 flex items-center space-x-2\">\n                  <Crown className=\"w-5 h-5 text-yellow-500\" />\n                  <span>Premium Analytics Dashboard</span>\n                </h3>\n                <p className=\"text-purple-600 text-sm\">Advanced insights and cost optimization tools</p>\n              </div>\n              <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                <Crown className=\"w-4 h-4 mr-2\" />\n                Upgrade to Premium\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Card className=\"border border-purple-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <TrendingUp className=\"w-4 h-4 text-purple-600\" />\n                    <span className=\"text-sm font-medium text-purple-600\">Real-time Cost Comparison</span>\n                  </div>\n                  <div className=\"text-lg font-bold text-purple-800\">$125 vs $98</div>\n                  <div className=\"text-xs text-purple-600\">22% savings potential identified</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"border border-purple-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Users className=\"w-4 h-4 text-purple-600\" />\n                    <span className=\"text-sm font-medium text-purple-600\">Provider Benchmarking</span>\n                  </div>\n                  <div className=\"text-lg font-bold text-purple-800\">Top 15%</div>\n                  <div className=\"text-xs text-purple-600\">Cost efficiency ranking</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"border border-purple-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Star className=\"w-4 h-4 text-purple-600\" />\n                    <span className=\"text-sm font-medium text-purple-600\">Predictive Analytics</span>\n                  </div>\n                  <div className=\"text-lg font-bold text-purple-800\">94% Accuracy</div>\n                  <div className=\"text-xs text-purple-600\">Cost prediction model</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Alert className=\"mt-4 border-yellow-200 bg-yellow-50\">\n              <Star className=\"h-4 w-4 text-yellow-600\" />\n              <AlertDescription className=\"text-yellow-800\">\n                <strong>Premium Feature:</strong> Advanced analytics includes real-time cost comparisons, \n                provider performance benchmarking, and predictive cost modeling to optimize healthcare spending.\n              </AlertDescription>\n            </Alert>\n          </div>\n\n          {/* Basic Analytics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Claims by Status</CardTitle>\n                <CardDescription>\n                  Distribution of claim statuses\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {stats && [\n                    { status: 'Approved', count: claims?.filter(c => c.status === 'approved').length || 0, color: 'bg-green-500' },\n                    { status: 'Pending', count: stats.outstanding, color: 'bg-yellow-500' },\n                    { status: 'Missing Diagnosis', count: stats.missingDiagnosis, color: 'bg-red-500' },\n                    { status: 'Void', count: stats.voidClaims, color: 'bg-gray-500' }\n                  ].map((item) => {\n                    const percentage = claims ? (item.count / claims.length) * 100 : 0;\n                    return (\n                      <div key={item.status} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${item.color}`}></div>\n                          <span className=\"text-sm font-medium\">{item.status}</span>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"text-sm font-bold\">{item.count}</span>\n                          <span className=\"text-xs text-gray-500 ml-2\">({percentage.toFixed(1)}%)</span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Processing Performance</CardTitle>\n                <CardDescription>\n                  Average processing times and efficiency metrics\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Average Processing Time</span>\n                    <span className=\"font-medium\">{stats?.avgProcessing || 0} days</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Claims Processed Today</span>\n                    <span className=\"font-medium\">{Math.floor((claims?.length || 0) / 30)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Documentation Completion</span>\n                    <span className=\"font-medium\">\n                      {claims ? ((claims.filter(c => c.diagnosisCode).length / claims.length) * 100).toFixed(1) : 0}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Void Rate</span>\n                    <span className=\"font-medium\">\n                      {stats && claims ? ((stats.voidClaims / claims.length) * 100).toFixed(1) : 0}%\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"providers\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Provider Analysis</CardTitle>\n              <CardDescription>\n                Performance metrics by healthcare provider\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12 text-gray-500\">\n                <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p>Provider analysis coming soon</p>\n                <p className=\"text-sm\">Detailed provider performance metrics will be available here</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":19190},"client/src/pages/debtors-verification-audit.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Shield, \n  Download, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  X,\n  FileText,\n  Search,\n  ArrowLeft\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface VerificationAuditEntry {\n  id: string;\n  patientName: string;\n  service: string;\n  billedBy: string;\n  billedAt: string;\n  verifiedBy: string;\n  fingerprintStatus: 'verified' | 'missing' | 'pending' | 'time_mismatch';\n  timestamp: string;\n  department: string;\n  amount: number;\n  serviceCode: string;\n  verificationHash?: string;\n  timeDifference?: number;\n}\n\nconst mockAuditData: VerificationAuditEntry[] = [\n  {\n    id: \"AUD-001\",\n    patientName: \"John Wanjiku\",\n    service: \"Consultation & Lab Tests\",\n    billedBy: \"Dr. Sarah Mwangi\",\n    billedAt: \"2025-01-22 10:30:00\",\n    verifiedBy: \"John Wanjiku\",\n    fingerprintStatus: \"verified\",\n    timestamp: \"2025-01-22 10:28:00\",\n    department: \"Outpatient\",\n    amount: 3500,\n    serviceCode: \"CONS-LAB-001\",\n    verificationHash: \"fp_hash_abc123\",\n    timeDifference: -2\n  },\n  {\n    id: \"AUD-002\",\n    patientName: \"Mary Njeri\",\n    service: \"Medication Dispensing\",\n    billedBy: \"Pharmacist Jane Kiprotich\",\n    billedAt: \"2025-01-22 11:15:00\",\n    verifiedBy: \"Mary Njeri\",\n    fingerprintStatus: \"time_mismatch\",\n    timestamp: \"2025-01-22 11:45:00\",\n    department: \"Pharmacy\",\n    amount: 1200,\n    serviceCode: \"PHARM-DISP-002\",\n    verificationHash: \"fp_hash_def456\",\n    timeDifference: 30\n  },\n  {\n    id: \"AUD-003\",\n    patientName: \"David Ochieng\",\n    service: \"Physiotherapy Session\",\n    billedBy: \"Dr. Anne Mutiso\",\n    billedAt: \"2025-01-22 09:45:00\",\n    verifiedBy: \"\",\n    fingerprintStatus: \"missing\",\n    timestamp: \"\",\n    department: \"Physiotherapy\",\n    amount: 2500,\n    serviceCode: \"PHYSIO-001\",\n    timeDifference: 0\n  },\n  {\n    id: \"AUD-004\",\n    patientName: \"Grace Waweru\",\n    service: \"Laboratory Tests\",\n    billedBy: \"Lab Tech Samuel Kiptoo\",\n    billedAt: \"2025-01-22 12:00:00\",\n    verifiedBy: \"\",\n    fingerprintStatus: \"pending\",\n    timestamp: \"\",\n    department: \"Laboratory\",\n    amount: 1800,\n    serviceCode: \"LAB-TESTS-003\",\n    timeDifference: 0\n  },\n  {\n    id: \"AUD-005\",\n    patientName: \"Peter Kamau\",\n    service: \"X-Ray Imaging\",\n    billedBy: \"Radiologist Dr. Elizabeth Mutua\",\n    billedAt: \"2025-01-22 14:20:00\",\n    verifiedBy: \"Peter Kamau\",\n    fingerprintStatus: \"verified\",\n    timestamp: \"2025-01-22 14:18:00\",\n    department: \"Radiology\",\n    amount: 4200,\n    serviceCode: \"RAD-XRAY-001\",\n    verificationHash: \"fp_hash_ghi789\",\n    timeDifference: -2\n  },\n  {\n    id: \"AUD-006\",\n    patientName: \"Agnes Wanjiru\",\n    service: \"Dental Checkup\",\n    billedBy: \"Dr. Michael Otieno\",\n    billedAt: \"2025-01-22 16:00:00\",\n    verifiedBy: \"\",\n    fingerprintStatus: \"missing\",\n    timestamp: \"\",\n    department: \"Dental\",\n    amount: 2800,\n    serviceCode: \"DENT-CHECK-001\",\n    timeDifference: 0\n  }\n];\n\nexport default function DebtorsVerificationAudit() {\n  const [, setLocation] = useLocation();\n  \n  // Mock user data for demo purposes\n  const user = {\n    id: 13,\n    username: \"debtors1\",\n    email: \"debtors@test.med\",\n    name: \"Mary Njoroge\",\n    role: \"debtors\"\n  };\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [selectedEntry, setSelectedEntry] = useState<VerificationAuditEntry | null>(null);\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'verified':\n        return (\n          <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Verified\n          </Badge>\n        );\n      case 'missing':\n        return (\n          <Badge variant=\"destructive\">\n            <X className=\"h-3 w-3 mr-1\" />\n            Missing\n          </Badge>\n        );\n      case 'pending':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case 'time_mismatch':\n        return (\n          <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Time Mismatch\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const getFilteredData = () => {\n    return mockAuditData.filter(entry => {\n      const matchesSearch = entry.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          entry.service.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          entry.billedBy.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesDepartment = selectedDepartment === \"all\" || entry.department === selectedDepartment;\n      const matchesStatus = selectedStatus === \"all\" || entry.fingerprintStatus === selectedStatus;\n      \n      return matchesSearch && matchesDepartment && matchesStatus;\n    });\n  };\n\n  const exportToCSV = () => {\n    const csvContent = [\n      \"Patient Name,Service,Billed By,Billed At,Verified By,Fingerprint Status,Timestamp,Department,Amount,Service Code\",\n      ...getFilteredData().map(entry => \n        `${entry.patientName},${entry.service},${entry.billedBy},${entry.billedAt},${entry.verifiedBy},${entry.fingerprintStatus},${entry.timestamp},${entry.department},${entry.amount},${entry.serviceCode}`\n      )\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `verification-audit-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const auditSummary = {\n    total: mockAuditData.length,\n    verified: mockAuditData.filter(e => e.fingerprintStatus === 'verified').length,\n    missing: mockAuditData.filter(e => e.fingerprintStatus === 'missing').length,\n    pending: mockAuditData.filter(e => e.fingerprintStatus === 'pending').length,\n    timeMismatches: mockAuditData.filter(e => e.fingerprintStatus === 'time_mismatch').length\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setLocation(\"/debtors-dashboard\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                <span>Back to Dashboard</span>\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Verification Audit Log</h1>\n                <p className=\"text-sm text-gray-600\">Premium Feature - Comprehensive biometric verification tracking</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-gray-900\">{user.name}</p>\n                  <p className=\"text-xs text-gray-500\">{user.role}</p>\n                </div>\n                <Badge className=\"bg-teal-100 text-teal-800\">Premium Access</Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5 text-teal-600\" />\n                  <span>Verification Audit Log</span>\n                </CardTitle>\n                <CardDescription>\n                  Comprehensive audit trail of biometric verifications and billing activities\n                </CardDescription>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={exportToCSV}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export CSV\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Export PDF\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"audit\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"audit\">Audit Table</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"audit\" className=\"space-y-4\">\n                {/* Filters */}\n                <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-4 p-4 bg-gray-50 rounded-lg\">\n                  <div>\n                    <Label htmlFor=\"search\">Search</Label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        id=\"search\"\n                        placeholder=\"Patient, service, or provider...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"department\">Department</Label>\n                    <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"All departments\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Departments</SelectItem>\n                        <SelectItem value=\"Outpatient\">Outpatient</SelectItem>\n                        <SelectItem value=\"Pharmacy\">Pharmacy</SelectItem>\n                        <SelectItem value=\"Laboratory\">Laboratory</SelectItem>\n                        <SelectItem value=\"Physiotherapy\">Physiotherapy</SelectItem>\n                        <SelectItem value=\"Radiology\">Radiology</SelectItem>\n                        <SelectItem value=\"Dental\">Dental</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"status\">Verification Status</Label>\n                    <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"All statuses\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        <SelectItem value=\"verified\">Verified</SelectItem>\n                        <SelectItem value=\"missing\">Missing</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"time_mismatch\">Time Mismatch</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"date-from\">Date From</Label>\n                    <Input\n                      id=\"date-from\"\n                      type=\"date\"\n                      value={dateFrom}\n                      onChange={(e) => setDateFrom(e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"date-to\">Date To</Label>\n                    <Input\n                      id=\"date-to\"\n                      type=\"date\"\n                      value={dateTo}\n                      onChange={(e) => setDateTo(e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                {/* Audit Table */}\n                <div className=\"border rounded-lg\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Patient Name</TableHead>\n                        <TableHead>Service</TableHead>\n                        <TableHead>Billed By</TableHead>\n                        <TableHead>Billed At</TableHead>\n                        <TableHead>Verified By</TableHead>\n                        <TableHead>Fingerprint Status</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {getFilteredData().map((entry) => (\n                        <TableRow key={entry.id} className=\"hover:bg-gray-50\">\n                          <TableCell className=\"font-medium\">{entry.patientName}</TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{entry.service}</div>\n                              <div className=\"text-xs text-gray-500\">{entry.serviceCode}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{entry.billedBy}</div>\n                              <div className=\"text-xs text-gray-500\">{entry.department}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-sm\">\n                            {new Date(entry.billedAt).toLocaleString()}\n                          </TableCell>\n                          <TableCell>\n                            {entry.verifiedBy || <span className=\"text-gray-400\">Not verified</span>}\n                          </TableCell>\n                          <TableCell>\n                            {getStatusBadge(entry.fingerprintStatus)}\n                            {entry.fingerprintStatus === 'time_mismatch' && entry.timeDifference && (\n                              <div className=\"text-xs text-orange-600 mt-1\">\n                                {entry.timeDifference > 0 ? '+' : ''}{entry.timeDifference}min\n                              </div>\n                            )}\n                          </TableCell>\n                          <TableCell className=\"font-medium\">\n                            KES {entry.amount.toLocaleString()}\n                          </TableCell>\n                          <TableCell>\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedEntry(entry)}>\n                                  View Details\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"sm:max-w-2xl\">\n                                <DialogHeader>\n                                  <DialogTitle>Verification Audit Details</DialogTitle>\n                                  <DialogDescription>\n                                    Complete audit trail for {entry.patientName}\n                                  </DialogDescription>\n                                </DialogHeader>\n                                {selectedEntry && (\n                                  <div className=\"space-y-4\">\n                                    <div className=\"grid grid-cols-2 gap-4\">\n                                      <div className=\"space-y-2\">\n                                        <h4 className=\"font-medium\">Service Information</h4>\n                                        <div className=\"space-y-1 text-sm\">\n                                          <p><strong>Patient:</strong> {selectedEntry.patientName}</p>\n                                          <p><strong>Service:</strong> {selectedEntry.service}</p>\n                                          <p><strong>Service Code:</strong> {selectedEntry.serviceCode}</p>\n                                          <p><strong>Amount:</strong> KES {selectedEntry.amount.toLocaleString()}</p>\n                                          <p><strong>Department:</strong> {selectedEntry.department}</p>\n                                        </div>\n                                      </div>\n                                      <div className=\"space-y-2\">\n                                        <h4 className=\"font-medium\">Verification Details</h4>\n                                        <div className=\"space-y-1 text-sm\">\n                                          <p><strong>Billed By:</strong> {selectedEntry.billedBy}</p>\n                                          <p><strong>Billed At:</strong> {new Date(selectedEntry.billedAt).toLocaleString()}</p>\n                                          <p><strong>Verified By:</strong> {selectedEntry.verifiedBy || 'Not verified'}</p>\n                                          <p><strong>Verified At:</strong> {selectedEntry.timestamp ? new Date(selectedEntry.timestamp).toLocaleString() : 'N/A'}</p>\n                                          <p><strong>Status:</strong> {getStatusBadge(selectedEntry.fingerprintStatus)}</p>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    {selectedEntry.verificationHash && (\n                                      <div className=\"p-3 bg-gray-50 rounded-lg\">\n                                        <h4 className=\"font-medium mb-2\">Blockchain Hash</h4>\n                                        <code className=\"text-xs bg-white p-2 rounded border block\">\n                                          {selectedEntry.verificationHash}\n                                        </code>\n                                      </div>\n                                    )}\n                                    {selectedEntry.fingerprintStatus === 'time_mismatch' && (\n                                      <div className=\"p-3 bg-orange-50 rounded-lg border border-orange-200\">\n                                        <div className=\"flex items-center space-x-2\">\n                                          <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                                          <span className=\"font-medium text-orange-800\">Time Mismatch Alert</span>\n                                        </div>\n                                        <p className=\"text-sm text-orange-700 mt-1\">\n                                          Verification occurred {Math.abs(selectedEntry.timeDifference || 0)} minutes \n                                          {(selectedEntry.timeDifference || 0) > 0 ? ' after' : ' before'} billing. \n                                          This may indicate irregular billing practices.\n                                        </p>\n                                      </div>\n                                    )}\n                                  </div>\n                                )}\n                              </DialogContent>\n                            </Dialog>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Verification Rate</p>\n                          <p className=\"text-2xl font-bold text-green-600\">\n                            {auditSummary.total > 0 ? Math.round((auditSummary.verified / auditSummary.total) * 100) : 0}%\n                          </p>\n                        </div>\n                        <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Missing Verifications</p>\n                          <p className=\"text-2xl font-bold text-red-600\">\n                            {auditSummary.missing}\n                          </p>\n                        </div>\n                        <X className=\"h-8 w-8 text-red-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Time Mismatches</p>\n                          <p className=\"text-2xl font-bold text-orange-600\">\n                            {auditSummary.timeMismatches}\n                          </p>\n                        </div>\n                        <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":23093},"client/src/pages/debtors.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\n\nexport default function Debtors() {\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: claims } = useQuery({\n    queryKey: [\"/api/claims\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/analytics/dashboard\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'denied': return 'bg-red-100 text-red-800';\n      case 'void': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filteredClaims = claims?.filter((claim: any) => {\n    const matchesStatus = filterStatus === \"all\" || claim.status === filterStatus;\n    const matchesSearch = !searchTerm || \n      claim.claimId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      claim.serviceType.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesStatus && matchesSearch;\n  }) || [];\n\n  const outstandingClaims = claims?.filter((claim: any) => claim.status === 'pending').length || 0;\n  const missingDiagnosis = claims?.filter((claim: any) => !claim.diagnosisCode).length || 0;\n  const voidClaims = claims?.filter((claim: any) => claim.isVoid).length || 0;\n  const totalValue = filteredClaims.reduce((sum: number, claim: any) => sum + parseFloat(claim.serviceCost || 0), 0);\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Debtors Management</h1>\n                <p className=\"text-gray-600\">Manage outstanding claims and billing issues</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Select value={filterStatus} onValueChange={setFilterStatus}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Claims</SelectItem>\n                    <SelectItem value=\"pending\">Pending Review</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"denied\">Denied</SelectItem>\n                    <SelectItem value=\"void\">Void Claims</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button className=\"teal-button\">\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Generate Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Outstanding Claims</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{outstandingClaims}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-yellow-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Missing Diagnosis</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{missingDiagnosis}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-exclamation-triangle text-red-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Value</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">${totalValue.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-dollar-sign text-blue-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Void Claims</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{voidClaims}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-ban text-gray-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Search and Filter */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search by claim ID or service type...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"medical-form-input\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2 bg-blue-50 px-3 py-2 rounded-lg\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-700\">\n                  Basic View\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-500\">\n                  Premium View\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Claims Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Claims Management</CardTitle>\n                <CardDescription>\n                  {filteredClaims.length} claims found\n                </CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {filteredClaims.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"text-left border-b border-gray-200\">\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Claim ID</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Service Type</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Provider</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Amount</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Status</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Issues</th>\n                        <th className=\"pb-3 text-sm font-medium text-gray-600\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredClaims.map((claim: any) => (\n                        <tr key={claim.id} className=\"border-b border-gray-50 hover:bg-gray-50\">\n                          <td className=\"py-3 text-sm font-mono\">{claim.claimId}</td>\n                          <td className=\"py-3 text-sm\">{claim.serviceType}</td>\n                          <td className=\"py-3 text-sm\">{claim.provider?.name || 'N/A'}</td>\n                          <td className=\"py-3 text-sm\">\n                            {claim.isVoid ? (\n                              <span className=\"line-through text-gray-500\">\n                                ${parseFloat(claim.serviceCost).toFixed(2)}\n                              </span>\n                            ) : (\n                              `$${parseFloat(claim.serviceCost).toFixed(2)}`\n                            )}\n                          </td>\n                          <td className=\"py-3\">\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(claim.status)}`}>\n                              {claim.isVoid ? 'VOID' : claim.status.toUpperCase()}\n                            </span>\n                          </td>\n                          <td className=\"py-3 text-sm\">\n                            {!claim.diagnosisCode && (\n                              <span className=\"text-red-600 text-xs\">Missing Diagnosis</span>\n                            )}\n                            {claim.isVoid && (\n                              <span className=\"text-gray-600 text-xs\">Voided</span>\n                            )}\n                          </td>\n                          <td className=\"py-3\">\n                            <div className=\"flex space-x-2\">\n                              <Button variant=\"ghost\" size=\"sm\">\n                                View\n                              </Button>\n                              {!claim.diagnosisCode && (\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600\">\n                                  Fix\n                                </Button>\n                              )}\n                              {claim.status === 'pending' && (\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600\">\n                                  Review\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center text-gray-500 py-12\">\n                  <i className=\"fas fa-file-invoice text-4xl mb-4 text-gray-300\"></i>\n                  <h3 className=\"text-lg font-medium text-gray-500 mb-2\">No Claims Found</h3>\n                  <p className=\"text-sm\">Try adjusting your search criteria or filters</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Premium Features Section */}\n          <div className=\"mt-8 bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-xl p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium text-purple-800\">\n                <i className=\"fas fa-crown text-yellow-500 mr-2\"></i>\n                Premium Analytics\n              </h3>\n              <Button className=\"bg-purple-600 hover:bg-purple-700 text-white\">\n                Upgrade to Premium\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"bg-white rounded-lg p-4 border border-purple-200\">\n                <div className=\"text-sm text-purple-600 mb-1\">Real-time Cost Comparison</div>\n                <div className=\"text-lg font-bold text-purple-800\">$125 vs $98</div>\n                <div className=\"text-xs text-purple-600\">22% savings potential</div>\n              </div>\n              \n              <div className=\"bg-white rounded-lg p-4 border border-purple-200\">\n                <div className=\"text-sm text-purple-600 mb-1\">Provider Benchmarking</div>\n                <div className=\"text-lg font-bold text-purple-800\">Top 15%</div>\n                <div className=\"text-xs text-purple-600\">Cost efficiency ranking</div>\n              </div>\n              \n              <div className=\"bg-white rounded-lg p-4 border border-purple-200\">\n                <div className=\"text-sm text-purple-600 mb-1\">Predictive Analytics</div>\n                <div className=\"text-lg font-bold text-purple-800\">94% Accuracy</div>\n                <div className=\"text-xs text-purple-600\">Cost prediction model</div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13250},"client/src/pages/demo-dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Stethoscope, \n  Pill, \n  Shield, \n  Building2, \n  User, \n  Settings,\n  ArrowRight,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface RoleCard {\n  title: string;\n  role: string;\n  description: string;\n  icon: React.ReactNode;\n  route: string;\n  features: string[];\n  badgeColor: string;\n}\n\nexport default function DemoDashboard() {\n  const roles: RoleCard[] = [\n    {\n      title: \"Doctor/Clinician\",\n      role: \"Clinical Workflow\",\n      description: \"Streamlined patient consultation and medical documentation\",\n      icon: <Stethoscope className=\"w-8 h-8\" />,\n      route: \"/doctor\",\n      features: [\n        \"Patient queue with triage vitals\",\n        \"AI-powered ICD-10 code suggestions\",\n        \"Smart prescription builder with safety checks\",\n        \"Lab order forms with preauthorization\",\n        \"Digital consultation records\"\n      ],\n      badgeColor: \"bg-blue-100 text-blue-800\"\n    },\n    {\n      title: \"Pharmacist\",\n      role: \"Medication Management\",\n      description: \"Comprehensive prescription validation and benefit tracking\",\n      icon: <Pill className=\"w-8 h-8\" />,\n      route: \"/pharmacy-dashboard\",\n      features: [\n        \"Drug interaction and allergy checking\",\n        \"Real-time benefit utilization tracking\",\n        \"Automated copay calculations\",\n        \"Preauthorization validation\",\n        \"Inventory and dispensing records\"\n      ],\n      badgeColor: \"bg-green-100 text-green-800\"\n    },\n    {\n      title: \"Care Manager\",\n      role: \"Network Oversight\",\n      description: \"Monitor claims, detect fraud, and analyze provider performance\",\n      icon: <Shield className=\"w-8 h-8\" />,\n      route: \"/care-manager-dashboard\",\n      features: [\n        \"Cross-network claims monitoring\",\n        \"AI-powered fraud detection\",\n        \"Provider performance analytics\",\n        \"Cost benchmarking tools\",\n        \"Referral success tracking\"\n      ],\n      badgeColor: \"bg-purple-100 text-purple-800\"\n    },\n    {\n      title: \"Insurance Underwriter\",\n      role: \"Claims Authorization\",\n      description: \"AI-assisted preauthorization and scheme management\",\n      icon: <Building2 className=\"w-8 h-8\" />,\n      route: \"/insurer\",\n      features: [\n        \"AI-assisted preauthorization decisions\",\n        \"Real-time claims inflow monitoring\",\n        \"Scheme usage and burnout tracking\",\n        \"Appeals management workflow\",\n        \"Automated approval thresholds\"\n      ],\n      badgeColor: \"bg-red-100 text-red-800\"\n    },\n    {\n      title: \"Patient/Member\",\n      role: \"Personal Health Management\",\n      description: \"Transparent access to claims, benefits, and family coverage\",\n      icon: <User className=\"w-8 h-8\" />,\n      route: \"/patient\",\n      features: [\n        \"Complete claims history with appeals\",\n        \"Family dependent management\",\n        \"Benefit utilization tracking\",\n        \"Preauthorized services status\",\n        \"Cost estimates by service type\"\n      ],\n      badgeColor: \"bg-yellow-100 text-yellow-800\"\n    },\n    {\n      title: \"System Administrator\",\n      role: \"Platform Management\",\n      description: \"Comprehensive system configuration and user management\",\n      icon: <Settings className=\"w-8 h-8\" />,\n      route: \"/admin\",\n      features: [\n        \"User and provider management\",\n        \"AI feature configuration\",\n        \"System performance monitoring\",\n        \"Professional license validation\",\n        \"Platform analytics and reporting\"\n      ],\n      badgeColor: \"bg-gray-100 text-gray-800\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 via-blue-50 to-indigo-50\">\n      <div className=\"container mx-auto px-6 py-12\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"w-16 h-16 bg-teal-600 rounded-2xl flex items-center justify-center shadow-lg\">\n              <div className=\"text-white text-2xl font-bold\">E</div>\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Erlessed Healthcare Platform\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n            Comprehensive role-based dashboards for modern healthcare claims processing, \n            featuring AI-powered preauthorization, biometric verification, and blockchain anchoring\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-3\">\n            <Badge variant=\"outline\" className=\"text-teal-600 border-teal-200 px-4 py-2\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              AI-Powered Decisions\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-blue-600 border-blue-200 px-4 py-2\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Real-time Processing\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-purple-600 border-purple-200 px-4 py-2\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Fraud Detection\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-green-600 border-green-200 px-4 py-2\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Blockchain Security\n            </Badge>\n          </div>\n        </div>\n\n        {/* Role-based Dashboards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n          {roles.map((role, index) => (\n            <Card key={index} className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"text-teal-600\">\n                    {role.icon}\n                  </div>\n                  <Badge className={role.badgeColor}>\n                    {role.role}\n                  </Badge>\n                </div>\n                <CardTitle className=\"text-xl mb-2\">{role.title}</CardTitle>\n                <CardDescription className=\"text-gray-600\">\n                  {role.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <ul className=\"space-y-2 mb-6\">\n                  {role.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-start text-sm text-gray-700\">\n                      <CheckCircle className=\"w-4 h-4 text-teal-500 mr-2 mt-0.5 flex-shrink-0\" />\n                      {feature}\n                    </li>\n                  ))}\n                </ul>\n                <Link href={role.route}>\n                  <Button className=\"w-full bg-teal-600 hover:bg-teal-700 group-hover:shadow-md transition-all\">\n                    Explore Dashboard\n                    <ArrowRight className=\"w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Key Features Section */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 mb-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900 text-center mb-8\">\n            Platform Capabilities\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Stethoscope className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">Clinical Workflow</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Streamlined patient consultations with AI-powered diagnosis coding and prescription management\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">AI Decision Engine</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Intelligent preauthorization with confidence scoring and transparent reasoning chains\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Building2 className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">Network Analytics</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Comprehensive provider performance monitoring and cost benchmarking across networks\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <User className=\"w-8 h-8 text-yellow-600\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">Patient Transparency</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Complete visibility into claims, benefits, and family coverage with self-service appeals\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* System Architecture */}\n        <div className=\"bg-gradient-to-r from-teal-600 to-blue-600 rounded-2xl shadow-xl p-8 text-white\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\">\n            Enterprise Architecture\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold text-xl mb-4\">Frontend</h3>\n              <div className=\"space-y-2 text-teal-100\">\n                <div>React 18 + TypeScript</div>\n                <div>Tailwind CSS + shadcn/ui</div>\n                <div>TanStack Query</div>\n                <div>Wouter Routing</div>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold text-xl mb-4\">Backend</h3>\n              <div className=\"space-y-2 text-blue-100\">\n                <div>Node.js + Express</div>\n                <div>PostgreSQL + Drizzle ORM</div>\n                <div>Passport.js Authentication</div>\n                <div>OpenAI Integration</div>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold text-xl mb-4\">Features</h3>\n              <div className=\"space-y-2 text-indigo-100\">\n                <div>AI-Powered Preauthorization</div>\n                <div>Fraud Pattern Detection</div>\n                <div>Biometric Verification</div>\n                <div>Blockchain Anchoring</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Demo Access */}\n        <div className=\"text-center mt-12\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Ready to Explore?\n          </h2>\n          <p className=\"text-gray-600 mb-6\">\n            Click on any dashboard above to experience the role-specific workflows and AI-powered features\n          </p>\n          <div className=\"flex justify-center space-x-4\">\n            <Link href=\"/secure-auth\">\n              <Button size=\"lg\" className=\"bg-teal-600 hover:bg-teal-700\">\n                Secure Registration\n              </Button>\n            </Link>\n            <Link href=\"/auth\">\n              <Button size=\"lg\" variant=\"outline\">\n                Quick Demo Login\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 mt-16\">\n          Powered by Aboolean\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12256},"client/src/pages/direct-debtors-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Building2, User, Lock } from \"lucide-react\";\n\nexport default function DirectDebtorsLogin() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"debtors1\");\n  const [password, setPassword] = useState(\"test123\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username, password }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Login failed\");\n      }\n\n      const userData = await response.json();\n      \n      toast({\n        title: \"Login Successful\",\n        description: `Welcome to your ${userData.role} dashboard!`,\n      });\n\n      // Force page reload to ensure authentication state is properly loaded\n      window.location.href = \"/debtors-dashboard\";\n      \n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: error instanceof Error ? error.message : \"Please check your credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-teal-100 rounded-full flex items-center justify-center\">\n            <Building2 className=\"h-8 w-8 text-teal-600\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              Debtors Dashboard Access\n            </CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Direct login for accounts department testing\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"Enter username\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"Enter password\"\n                  required\n                />\n              </div>\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-teal-600 hover:bg-teal-700\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Signing in...\" : \"Access Debtors Dashboard\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n            <h4 className=\"font-medium text-blue-800 mb-2\">Test Credentials</h4>\n            <div className=\"text-sm text-blue-600 space-y-1\">\n              <p><strong>Username:</strong> debtors1</p>\n              <p><strong>Password:</strong> test123</p>\n            </div>\n          </div>\n          \n          <div className=\"mt-4 text-center\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(\"/modern-auth\")}\n              className=\"text-sm\"\n            >\n              Back to Main Login\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4763},"client/src/pages/doctor-consultation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Stethoscope, \n  Pill, \n  TestTube, \n  Clock, \n  User, \n  FileText, \n  CheckCircle,\n  Plus,\n  Trash2,\n  AlertCircle\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ActiveLabOrders from \"@/components/active-lab-orders\";\n\ninterface Patient {\n  id: number;\n  patientId: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  gender: string;\n  phoneNumber?: string;\n  insuranceProvider: string;\n  insurancePlan: string;\n}\n\ninterface Prescription {\n  id?: number;\n  serviceName: string;\n  dosage: string;\n  frequency: string;\n  duration: string;\n  instructions: string;\n}\n\ninterface LabOrder {\n  id?: number;\n  serviceName: string;\n  serviceCode?: string;\n  instructions: string;\n  durationDays: number;\n}\n\ninterface Consultation {\n  id?: number;\n  patientId: string;\n  chiefComplaint: string;\n  history: string;\n  examination: string;\n  diagnosis: string;\n  icdCode?: string;\n  treatmentPlan: string;\n  followUpDate?: string;\n  vitals: {\n    bloodPressure?: string;\n    temperature?: string;\n    pulse?: string;\n    weight?: string;\n    height?: string;\n  };\n}\n\nexport default function DoctorConsultation() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Extract patient ID from URL params\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const patientId = urlParams.get('patientId') || 'P001';\n  \n  const [consultation, setConsultation] = useState<Consultation>({\n    patientId,\n    chiefComplaint: '',\n    history: '',\n    examination: '',\n    diagnosis: '',\n    icdCode: '',\n    treatmentPlan: '',\n    followUpDate: '',\n    vitals: {}\n  });\n  \n  const [prescriptions, setPrescriptions] = useState<Prescription[]>([]);\n  const [labOrders, setLabOrders] = useState<LabOrder[]>([]);\n  const [isSigningOff, setIsSigningOff] = useState(false);\n\n  // Fetch patient data\n  const { data: patient, isLoading: patientLoading } = useQuery({\n    queryKey: [`/api/patients/${patientId}`],\n    enabled: !!patientId\n  });\n\n  // Fetch existing consultation if available\n  const { data: existingConsultation } = useQuery({\n    queryKey: [`/api/consultations/patient/${patientId}`],\n    enabled: !!patientId\n  });\n\n  useEffect(() => {\n    if (existingConsultation && !existingConsultation.signedOff) {\n      setConsultation(existingConsultation);\n    }\n  }, [existingConsultation]);\n\n  const addPrescription = () => {\n    setPrescriptions([...prescriptions, {\n      serviceName: '',\n      dosage: '',\n      frequency: '',\n      duration: '',\n      instructions: ''\n    }]);\n  };\n\n  const removePrescription = (index: number) => {\n    setPrescriptions(prescriptions.filter((_, i) => i !== index));\n  };\n\n  const updatePrescription = (index: number, field: keyof Prescription, value: string) => {\n    const updated = [...prescriptions];\n    updated[index] = { ...updated[index], [field]: value };\n    setPrescriptions(updated);\n  };\n\n  const addLabOrder = () => {\n    setLabOrders([...labOrders, {\n      serviceName: '',\n      serviceCode: '',\n      instructions: '',\n      durationDays: 180\n    }]);\n  };\n\n  const removeLabOrder = (index: number) => {\n    setLabOrders(labOrders.filter((_, i) => i !== index));\n  };\n\n  const updateLabOrder = (index: number, field: keyof LabOrder, value: string | number) => {\n    const updated = [...labOrders];\n    updated[index] = { ...updated[index], [field]: value };\n    setLabOrders(updated);\n  };\n\n  // Sign off consultation mutation\n  const signOffMutation = useMutation({\n    mutationFn: async () => {\n      // Save consultation\n      const consultationResponse = await apiRequest('/api/consultations', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...consultation,\n          signedOff: true,\n          signedOffAt: new Date().toISOString()\n        })\n      });\n\n      const consultationId = consultationResponse.id;\n\n      // Save prescriptions\n      for (const prescription of prescriptions) {\n        if (prescription.serviceName.trim()) {\n          await apiRequest('/api/services', {\n            method: 'POST',\n            body: JSON.stringify({\n              patientId: consultation.patientId,\n              type: 'pharmacy',\n              serviceName: prescription.serviceName,\n              dosage: prescription.dosage,\n              frequency: prescription.frequency,\n              duration: prescription.duration,\n              instructions: prescription.instructions,\n              status: 'active'\n            })\n          });\n        }\n      }\n\n      // Save lab orders\n      for (const labOrder of labOrders) {\n        if (labOrder.serviceName.trim()) {\n          const expiresAt = new Date();\n          expiresAt.setDate(expiresAt.getDate() + labOrder.durationDays);\n          \n          await apiRequest('/api/services', {\n            method: 'POST',\n            body: JSON.stringify({\n              patientId: consultation.patientId,\n              type: 'lab',\n              serviceName: labOrder.serviceName,\n              serviceCode: labOrder.serviceCode,\n              instructions: labOrder.instructions,\n              status: 'active',\n              durationDays: labOrder.durationDays,\n              expiresAt: expiresAt.toISOString()\n            })\n          });\n        }\n      }\n\n      return consultationId;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Consultation Signed Off\",\n        description: \"Patient consultation completed with prescriptions and lab orders.\",\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [`/api/consultations/patient/${patientId}`] });\n      setLocation('/doctor');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Sign Off Failed\", \n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSignOff = () => {\n    if (!consultation.chiefComplaint || !consultation.diagnosis) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: \"Please complete chief complaint and diagnosis before signing off.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsSigningOff(true);\n    signOffMutation.mutate();\n  };\n\n  if (patientLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-teal-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading patient information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Stethoscope className=\"h-8 w-8 text-teal-600\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Doctor Consultation</h1>\n                <p className=\"text-gray-600\">Complete patient consultation and sign-off</p>\n              </div>\n            </div>\n            <Button\n              onClick={() => setLocation('/doctor')}\n              variant=\"outline\"\n            >\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n\n        {/* Patient Information */}\n        {patient && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <User className=\"h-5 w-5\" />\n                <span>Patient Information</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Name</Label>\n                  <p className=\"text-lg font-semibold\">{patient.firstName} {patient.lastName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Patient ID</Label>\n                  <p className=\"text-lg\">{patient.patientId}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Insurance</Label>\n                  <p className=\"text-lg\">{patient.insuranceProvider} - {patient.insurancePlan}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Gender</Label>\n                  <p className=\"text-lg\">{patient.gender}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Date of Birth</Label>\n                  <p className=\"text-lg\">{new Date(patient.dateOfBirth).toLocaleDateString()}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Phone</Label>\n                  <p className=\"text-lg\">{patient.phoneNumber || 'N/A'}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Consultation Form */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Vitals */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Vital Signs</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"bloodPressure\">Blood Pressure</Label>\n                    <Input\n                      id=\"bloodPressure\"\n                      placeholder=\"120/80\"\n                      value={consultation.vitals.bloodPressure || ''}\n                      onChange={(e) => setConsultation({\n                        ...consultation,\n                        vitals: { ...consultation.vitals, bloodPressure: e.target.value }\n                      })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"temperature\">Temperature (°C)</Label>\n                    <Input\n                      id=\"temperature\"\n                      placeholder=\"37.0\"\n                      value={consultation.vitals.temperature || ''}\n                      onChange={(e) => setConsultation({\n                        ...consultation,\n                        vitals: { ...consultation.vitals, temperature: e.target.value }\n                      })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"pulse\">Pulse (bpm)</Label>\n                    <Input\n                      id=\"pulse\"\n                      placeholder=\"72\"\n                      value={consultation.vitals.pulse || ''}\n                      onChange={(e) => setConsultation({\n                        ...consultation,\n                        vitals: { ...consultation.vitals, pulse: e.target.value }\n                      })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"weight\">Weight (kg)</Label>\n                    <Input\n                      id=\"weight\"\n                      placeholder=\"70\"\n                      value={consultation.vitals.weight || ''}\n                      onChange={(e) => setConsultation({\n                        ...consultation,\n                        vitals: { ...consultation.vitals, weight: e.target.value }\n                      })}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Clinical Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Clinical Assessment</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"chiefComplaint\">Chief Complaint *</Label>\n                  <Textarea\n                    id=\"chiefComplaint\"\n                    placeholder=\"Patient's main complaint...\"\n                    value={consultation.chiefComplaint}\n                    onChange={(e) => setConsultation({...consultation, chiefComplaint: e.target.value})}\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"history\">History of Present Illness</Label>\n                  <Textarea\n                    id=\"history\"\n                    placeholder=\"Detailed history...\"\n                    value={consultation.history}\n                    onChange={(e) => setConsultation({...consultation, history: e.target.value})}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"examination\">Physical Examination</Label>\n                  <Textarea\n                    id=\"examination\"\n                    placeholder=\"Examination findings...\"\n                    value={consultation.examination}\n                    onChange={(e) => setConsultation({...consultation, examination: e.target.value})}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"diagnosis\">Diagnosis *</Label>\n                    <Input\n                      id=\"diagnosis\"\n                      placeholder=\"Primary diagnosis\"\n                      value={consultation.diagnosis}\n                      onChange={(e) => setConsultation({...consultation, diagnosis: e.target.value})}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"icdCode\">ICD-10 Code</Label>\n                    <Input\n                      id=\"icdCode\"\n                      placeholder=\"A00.0\"\n                      value={consultation.icdCode || ''}\n                      onChange={(e) => setConsultation({...consultation, icdCode: e.target.value})}\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"treatmentPlan\">Treatment Plan</Label>\n                  <Textarea\n                    id=\"treatmentPlan\"\n                    placeholder=\"Treatment recommendations...\"\n                    value={consultation.treatmentPlan}\n                    onChange={(e) => setConsultation({...consultation, treatmentPlan: e.target.value})}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"followUpDate\">Follow-up Date</Label>\n                  <Input\n                    id=\"followUpDate\"\n                    type=\"date\"\n                    value={consultation.followUpDate || ''}\n                    onChange={(e) => setConsultation({...consultation, followUpDate: e.target.value})}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Prescriptions, Lab Orders and Active Lab Orders */}\n          <div className=\"space-y-6\">\n            {/* Active Lab Orders */}\n            <ActiveLabOrders patientId={patientId} doctorId={1} />\n            {/* Prescriptions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Pill className=\"h-5 w-5\" />\n                    <span>Prescriptions</span>\n                  </div>\n                  <Button onClick={addPrescription} size=\"sm\">\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add\n                  </Button>\n                </CardTitle>\n                <CardDescription>\n                  Medication prescriptions with duration\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {prescriptions.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-4\">No prescriptions added</p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {prescriptions.map((prescription, index) => (\n                      <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <h4 className=\"font-medium\">Prescription {index + 1}</h4>\n                          <Button\n                            onClick={() => removePrescription(index)}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 gap-3\">\n                          <Input\n                            placeholder=\"Medication name\"\n                            value={prescription.serviceName}\n                            onChange={(e) => updatePrescription(index, 'serviceName', e.target.value)}\n                          />\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            <Input\n                              placeholder=\"Dosage (e.g., 500mg)\"\n                              value={prescription.dosage}\n                              onChange={(e) => updatePrescription(index, 'dosage', e.target.value)}\n                            />\n                            <Input\n                              placeholder=\"Frequency (e.g., 2x daily)\"\n                              value={prescription.frequency}\n                              onChange={(e) => updatePrescription(index, 'frequency', e.target.value)}\n                            />\n                          </div>\n                          <Input\n                            placeholder=\"Duration (e.g., 7 days)\"\n                            value={prescription.duration}\n                            onChange={(e) => updatePrescription(index, 'duration', e.target.value)}\n                          />\n                          <Textarea\n                            placeholder=\"Instructions for patient\"\n                            value={prescription.instructions}\n                            onChange={(e) => updatePrescription(index, 'instructions', e.target.value)}\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Lab Orders */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <TestTube className=\"h-5 w-5\" />\n                    <span>Lab Orders</span>\n                  </div>\n                  <Button onClick={addLabOrder} size=\"sm\">\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add\n                  </Button>\n                </CardTitle>\n                <CardDescription>\n                  Laboratory tests (auto-expire in 6 months)\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {labOrders.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-4\">No lab orders added</p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {labOrders.map((labOrder, index) => (\n                      <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <h4 className=\"font-medium\">Lab Order {index + 1}</h4>\n                          <Button\n                            onClick={() => removeLabOrder(index)}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 gap-3\">\n                          <Input\n                            placeholder=\"Test name (e.g., Full Blood Count)\"\n                            value={labOrder.serviceName}\n                            onChange={(e) => updateLabOrder(index, 'serviceName', e.target.value)}\n                          />\n                          <Input\n                            placeholder=\"Test code (optional)\"\n                            value={labOrder.serviceCode || ''}\n                            onChange={(e) => updateLabOrder(index, 'serviceCode', e.target.value)}\n                          />\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            <div>\n                              <Label className=\"text-sm\">Expires in (days)</Label>\n                              <Input\n                                type=\"number\"\n                                value={labOrder.durationDays}\n                                onChange={(e) => updateLabOrder(index, 'durationDays', parseInt(e.target.value))}\n                                min=\"1\"\n                                max=\"365\"\n                              />\n                            </div>\n                            <div className=\"flex items-end\">\n                              <Badge variant=\"outline\" className=\"h-fit\">\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                {labOrder.durationDays} days\n                              </Badge>\n                            </div>\n                          </div>\n                          <Textarea\n                            placeholder=\"Special instructions\"\n                            value={labOrder.instructions}\n                            onChange={(e) => updateLabOrder(index, 'instructions', e.target.value)}\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Sign Off Button */}\n        <Card className=\"mt-6\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n                <div>\n                  <p className=\"font-medium\">Ready to sign off consultation?</p>\n                  <p className=\"text-sm text-gray-600\">\n                    This will complete the consultation and activate all prescriptions and lab orders.\n                  </p>\n                </div>\n              </div>\n              <Button\n                onClick={handleSignOff}\n                disabled={isSigningOff || signOffMutation.isPending}\n                className=\"bg-teal-600 hover:bg-teal-700\"\n              >\n                {isSigningOff || signOffMutation.isPending ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                    Signing Off...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Sign Off Consultation\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":24598},"client/src/pages/doctor-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Clock, User, AlertTriangle, Stethoscope, FileText, Pill, TestTube } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { SupportWidget } from \"@/components/ui/support-widget\";\nimport { ChatSupport } from \"@/components/ui/chat-support\";\nimport { LogoutButton } from \"@/components/ui/logout-button\";\n\ninterface QueuePatient {\n  id: number;\n  patientId: number;\n  patient: {\n    firstName: string;\n    lastName: string;\n    patientId: string;\n    dateOfBirth: string;\n    gender: string;\n    phoneNumber: string;\n  };\n  queueNumber: number;\n  priority: \"high\" | \"normal\" | \"low\";\n  chiefComplaint: string;\n  vitals: {\n    bloodPressure?: string;\n    temperature?: string;\n    pulse?: string;\n    respiratoryRate?: string;\n    oxygenSaturation?: string;\n  };\n  triageNotes: string;\n  status: \"waiting\" | \"in_consultation\" | \"completed\";\n  checkedInAt: string;\n}\n\ninterface ConsultationForm {\n  patientId: number;\n  queueId: number;\n  chiefComplaint: string;\n  historyOfPresentingIllness: string;\n  pastMedicalHistory: string;\n  examination: string;\n  diagnosis: string;\n  icd10Codes: string[];\n  treatment: string;\n  notes: string;\n  followUpInstructions: string;\n}\n\ninterface LabOrder {\n  testType: string;\n  testCode: string;\n  urgency: \"routine\" | \"urgent\" | \"stat\";\n  clinicalInfo: string;\n}\n\ninterface Prescription {\n  medicationName: string;\n  dosage: string;\n  frequency: string;\n  duration: string;\n  quantity: number;\n  indication: string;\n}\n\nexport default function DoctorDashboard() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"queue\");\n  const [selectedPatient, setSelectedPatient] = useState<QueuePatient | null>(null);\n  const [consultationForm, setConsultationForm] = useState<ConsultationForm>({\n    patientId: 0,\n    queueId: 0,\n    chiefComplaint: \"\",\n    historyOfPresentingIllness: \"\",\n    pastMedicalHistory: \"\",\n    examination: \"\",\n    diagnosis: \"\",\n    icd10Codes: [],\n    treatment: \"\",\n    notes: \"\",\n    followUpInstructions: \"\",\n  });\n  const [prescriptions, setPrescriptions] = useState<Prescription[]>([]);\n  const [labOrders, setLabOrders] = useState<LabOrder[]>([]);\n  const [icdSuggestions, setIcdSuggestions] = useState<string[]>([]);\n\n  // Mock data for patient queue\n  const { data: patientQueue = [] } = useQuery({\n    queryKey: [\"/api/doctor/queue\"],\n    queryFn: async () => {\n      // Mock patient queue data\n      return [\n        {\n          id: 1,\n          patientId: 1,\n          patient: {\n            firstName: \"John\",\n            lastName: \"Doe\",\n            patientId: \"P001234\",\n            dateOfBirth: \"1985-06-15\",\n            gender: \"Male\",\n            phoneNumber: \"+254712345678\"\n          },\n          queueNumber: 1,\n          priority: \"high\" as const,\n          chiefComplaint: \"Chest pain and shortness of breath\",\n          vitals: {\n            bloodPressure: \"150/90\",\n            temperature: \"37.2°C\",\n            pulse: \"88 bpm\",\n            respiratoryRate: \"20/min\",\n            oxygenSaturation: \"96%\"\n          },\n          triageNotes: \"Patient reports acute onset chest pain, stable vitals\",\n          status: \"waiting\" as const,\n          checkedInAt: \"2024-06-18T08:30:00Z\"\n        },\n        {\n          id: 2,\n          patientId: 2,\n          patient: {\n            firstName: \"Mary\",\n            lastName: \"Smith\",\n            patientId: \"P001235\",\n            dateOfBirth: \"1990-03-22\",\n            gender: \"Female\",\n            phoneNumber: \"+254723456789\"\n          },\n          queueNumber: 2,\n          priority: \"normal\" as const,\n          chiefComplaint: \"Headache and fever for 3 days\",\n          vitals: {\n            bloodPressure: \"120/80\",\n            temperature: \"38.5°C\",\n            pulse: \"92 bpm\",\n            respiratoryRate: \"18/min\"\n          },\n          triageNotes: \"Fever, mild dehydration, no neck stiffness\",\n          status: \"waiting\" as const,\n          checkedInAt: \"2024-06-18T09:15:00Z\"\n        }\n      ] as QueuePatient[];\n    },\n  });\n\n  const startConsultationMutation = useMutation({\n    mutationFn: async (queueId: number) => {\n      return apiRequest(\"POST\", `/api/doctor/queue/${queueId}/start`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Consultation Started\",\n        description: \"Patient consultation has been initiated\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctor/queue\"] });\n    },\n  });\n\n  const submitConsultationMutation = useMutation({\n    mutationFn: async (data: ConsultationForm) => {\n      return apiRequest(\"POST\", \"/api/doctor/consultations\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Consultation Completed\",\n        description: \"Patient consultation has been saved successfully\",\n      });\n      setSelectedPatient(null);\n      setActiveTab(\"queue\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctor/queue\"] });\n    },\n  });\n\n  const startConsultation = (patient: QueuePatient) => {\n    setSelectedPatient(patient);\n    setConsultationForm({\n      patientId: patient.patientId,\n      queueId: patient.id,\n      chiefComplaint: patient.chiefComplaint,\n      historyOfPresentingIllness: \"\",\n      pastMedicalHistory: \"\",\n      examination: \"\",\n      diagnosis: \"\",\n      icd10Codes: [],\n      treatment: \"\",\n      notes: \"\",\n      followUpInstructions: \"\",\n    });\n    setActiveTab(\"consultation\");\n    startConsultationMutation.mutate(patient.id);\n  };\n\n  const suggestICD10Codes = async (diagnosis: string) => {\n    if (diagnosis.length > 3) {\n      // Mock ICD-10 suggestions\n      const suggestions = [\n        \"I20.9 - Angina pectoris, unspecified\",\n        \"I25.9 - Chronic ischemic heart disease, unspecified\",\n        \"R06.0 - Dyspnea\",\n        \"R50.9 - Fever, unspecified\"\n      ].filter(code => \n        code.toLowerCase().includes(diagnosis.toLowerCase()) ||\n        diagnosis.toLowerCase().includes(\"chest\") && code.includes(\"I20\") ||\n        diagnosis.toLowerCase().includes(\"fever\") && code.includes(\"R50\")\n      );\n      setIcdSuggestions(suggestions);\n    }\n  };\n\n  const addPrescription = () => {\n    setPrescriptions([...prescriptions, {\n      medicationName: \"\",\n      dosage: \"\",\n      frequency: \"\",\n      duration: \"\",\n      quantity: 0,\n      indication: \"\"\n    }]);\n  };\n\n  const addLabOrder = () => {\n    setLabOrders([...labOrders, {\n      testType: \"\",\n      testCode: \"\",\n      urgency: \"routine\",\n      clinicalInfo: \"\"\n    }]);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"normal\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"low\": return \"bg-green-100 text-green-800 border-green-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getTimeSinceCheckIn = (checkedInAt: string) => {\n    const checkInTime = new Date(checkedInAt);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - checkInTime.getTime()) / (1000 * 60));\n    return `${diffInMinutes} min ago`;\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Doctor Dashboard</h1>\n          <p className=\"text-gray-600\">Manage patient consultations and clinical workflow</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"outline\" className=\"text-teal-600 border-teal-200\">\n            <Stethoscope className=\"w-4 h-4 mr-1\" />\n            Clinician\n          </Badge>\n          <LogoutButton variant=\"dropdown\" />\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"queue\">Patient Queue</TabsTrigger>\n          <TabsTrigger value=\"consultation\">Consultation</TabsTrigger>\n          <TabsTrigger value=\"prescriptions\">Prescriptions</TabsTrigger>\n          <TabsTrigger value=\"lab-orders\">Lab Orders</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"queue\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"w-5 h-5 mr-2\" />\n                Patient Queue ({patientQueue.length})\n              </CardTitle>\n              <CardDescription>\n                Patients waiting for consultation, ordered by priority and check-in time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {patientQueue.map((patient) => (\n                  <Card key={patient.id} className=\"border-l-4 border-l-teal-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex flex-col items-center\">\n                            <div className=\"w-8 h-8 bg-teal-100 rounded-full flex items-center justify-center text-teal-800 font-bold\">\n                              {patient.queueNumber}\n                            </div>\n                            <Badge className={getPriorityColor(patient.priority)}>\n                              {patient.priority}\n                            </Badge>\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">\n                              {patient.patient.firstName} {patient.patient.lastName}\n                            </h3>\n                            <p className=\"text-gray-600\">ID: {patient.patient.patientId}</p>\n                            <p className=\"text-sm text-gray-500\">\n                              {patient.patient.gender} • {patient.patient.phoneNumber}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right space-y-2\">\n                          <div className=\"flex items-center text-gray-500\">\n                            <Clock className=\"w-4 h-4 mr-1\" />\n                            {getTimeSinceCheckIn(patient.checkedInAt)}\n                          </div>\n                          <Button\n                            onClick={() => startConsultation(patient)}\n                            className=\"bg-teal-600 hover:bg-teal-700\"\n                          >\n                            Start Consultation\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <Separator className=\"my-3\" />\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Chief Complaint</h4>\n                          <p className=\"text-gray-700\">{patient.chiefComplaint}</p>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Vital Signs</h4>\n                          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                            <div>BP: {patient.vitals.bloodPressure}</div>\n                            <div>Temp: {patient.vitals.temperature}</div>\n                            <div>Pulse: {patient.vitals.pulse}</div>\n                            <div>RR: {patient.vitals.respiratoryRate}</div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {patient.triageNotes && (\n                        <div className=\"mt-3\">\n                          <h4 className=\"font-medium text-gray-900 mb-1\">Triage Notes</h4>\n                          <p className=\"text-gray-600 text-sm\">{patient.triageNotes}</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"consultation\" className=\"space-y-4\">\n          {selectedPatient ? (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  Consultation - {selectedPatient.patient.firstName} {selectedPatient.patient.lastName}\n                </CardTitle>\n                <CardDescription>\n                  Complete consultation form with ICD-10 diagnosis codes\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"chiefComplaint\">Chief Complaint</Label>\n                    <Textarea\n                      id=\"chiefComplaint\"\n                      value={consultationForm.chiefComplaint}\n                      onChange={(e) => setConsultationForm({\n                        ...consultationForm,\n                        chiefComplaint: e.target.value\n                      })}\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"historyOfPresentingIllness\">History of Presenting Illness</Label>\n                    <Textarea\n                      id=\"historyOfPresentingIllness\"\n                      value={consultationForm.historyOfPresentingIllness}\n                      onChange={(e) => setConsultationForm({\n                        ...consultationForm,\n                        historyOfPresentingIllness: e.target.value\n                      })}\n                      rows={3}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"pastMedicalHistory\">Past Medical History</Label>\n                    <Textarea\n                      id=\"pastMedicalHistory\"\n                      value={consultationForm.pastMedicalHistory}\n                      onChange={(e) => setConsultationForm({\n                        ...consultationForm,\n                        pastMedicalHistory: e.target.value\n                      })}\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"examination\">Physical Examination</Label>\n                    <Textarea\n                      id=\"examination\"\n                      value={consultationForm.examination}\n                      onChange={(e) => setConsultationForm({\n                        ...consultationForm,\n                        examination: e.target.value\n                      })}\n                      rows={3}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"diagnosis\">Diagnosis</Label>\n                  <Input\n                    id=\"diagnosis\"\n                    value={consultationForm.diagnosis}\n                    onChange={(e) => {\n                      setConsultationForm({\n                        ...consultationForm,\n                        diagnosis: e.target.value\n                      });\n                      suggestICD10Codes(e.target.value);\n                    }}\n                    placeholder=\"Enter primary diagnosis\"\n                  />\n                  {icdSuggestions.length > 0 && (\n                    <div className=\"mt-2 p-3 bg-gray-50 rounded-md\">\n                      <h4 className=\"text-sm font-medium text-gray-900 mb-2\">ICD-10 Code Suggestions</h4>\n                      <div className=\"space-y-1\">\n                        {icdSuggestions.map((suggestion, index) => (\n                          <Button\n                            key={index}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"justify-start h-auto p-2 text-left\"\n                            onClick={() => {\n                              const code = suggestion.split(' - ')[0];\n                              setConsultationForm({\n                                ...consultationForm,\n                                icd10Codes: [...consultationForm.icd10Codes, code]\n                              });\n                            }}\n                          >\n                            {suggestion}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {consultationForm.icd10Codes.length > 0 && (\n                  <div>\n                    <Label>Selected ICD-10 Codes</Label>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {consultationForm.icd10Codes.map((code, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"cursor-pointer\">\n                          {code}\n                          <button\n                            onClick={() => {\n                              setConsultationForm({\n                                ...consultationForm,\n                                icd10Codes: consultationForm.icd10Codes.filter((_, i) => i !== index)\n                              });\n                            }}\n                            className=\"ml-2 text-red-500 hover:text-red-700\"\n                          >\n                            ×\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"treatment\">Treatment Plan</Label>\n                    <Textarea\n                      id=\"treatment\"\n                      value={consultationForm.treatment}\n                      onChange={(e) => setConsultationForm({\n                        ...consultationForm,\n                        treatment: e.target.value\n                      })}\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"followUpInstructions\">Follow-up Instructions</Label>\n                    <Textarea\n                      id=\"followUpInstructions\"\n                      value={consultationForm.followUpInstructions}\n                      onChange={(e) => setConsultationForm({\n                        ...consultationForm,\n                        followUpInstructions: e.target.value\n                      })}\n                      rows={3}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\">Additional Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={consultationForm.notes}\n                    onChange={(e) => setConsultationForm({\n                      ...consultationForm,\n                      notes: e.target.value\n                    })}\n                    rows={2}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setActiveTab(\"queue\")}>\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() => submitConsultationMutation.mutate(consultationForm)}\n                    disabled={submitConsultationMutation.isPending}\n                    className=\"bg-teal-600 hover:bg-teal-700\"\n                  >\n                    {submitConsultationMutation.isPending ? \"Saving...\" : \"Complete Consultation\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"flex items-center justify-center h-64\">\n                <div className=\"text-center\">\n                  <Stethoscope className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Select a patient from the queue to start consultation</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"prescriptions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Pill className=\"w-5 h-5 mr-2\" />\n                  Prescription Management\n                </div>\n                <Button onClick={addPrescription} size=\"sm\">\n                  Add Prescription\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {prescriptions.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Pill className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">No prescriptions added yet</p>\n                  <Button onClick={addPrescription} className=\"mt-4\">\n                    Add First Prescription\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {prescriptions.map((prescription, index) => (\n                    <Card key={index} className=\"border-dashed\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div>\n                            <Label>Medication Name</Label>\n                            <Input\n                              value={prescription.medicationName}\n                              onChange={(e) => {\n                                const updated = [...prescriptions];\n                                updated[index].medicationName = e.target.value;\n                                setPrescriptions(updated);\n                              }}\n                              placeholder=\"e.g., Amoxicillin\"\n                            />\n                          </div>\n                          <div>\n                            <Label>Dosage</Label>\n                            <Input\n                              value={prescription.dosage}\n                              onChange={(e) => {\n                                const updated = [...prescriptions];\n                                updated[index].dosage = e.target.value;\n                                setPrescriptions(updated);\n                              }}\n                              placeholder=\"e.g., 500mg\"\n                            />\n                          </div>\n                          <div>\n                            <Label>Frequency</Label>\n                            <Select\n                              value={prescription.frequency}\n                              onValueChange={(value) => {\n                                const updated = [...prescriptions];\n                                updated[index].frequency = value;\n                                setPrescriptions(updated);\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select frequency\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"once_daily\">Once daily</SelectItem>\n                                <SelectItem value=\"twice_daily\">Twice daily</SelectItem>\n                                <SelectItem value=\"three_times_daily\">Three times daily</SelectItem>\n                                <SelectItem value=\"four_times_daily\">Four times daily</SelectItem>\n                                <SelectItem value=\"as_needed\">As needed</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-4 mt-4\">\n                          <div>\n                            <Label>Duration</Label>\n                            <Input\n                              value={prescription.duration}\n                              onChange={(e) => {\n                                const updated = [...prescriptions];\n                                updated[index].duration = e.target.value;\n                                setPrescriptions(updated);\n                              }}\n                              placeholder=\"e.g., 7 days\"\n                            />\n                          </div>\n                          <div>\n                            <Label>Quantity</Label>\n                            <Input\n                              type=\"number\"\n                              value={prescription.quantity}\n                              onChange={(e) => {\n                                const updated = [...prescriptions];\n                                updated[index].quantity = parseInt(e.target.value) || 0;\n                                setPrescriptions(updated);\n                              }}\n                              placeholder=\"Total tablets/capsules\"\n                            />\n                          </div>\n                          <div>\n                            <Label>Indication</Label>\n                            <Input\n                              value={prescription.indication}\n                              onChange={(e) => {\n                                const updated = [...prescriptions];\n                                updated[index].indication = e.target.value;\n                                setPrescriptions(updated);\n                              }}\n                              placeholder=\"Reason for prescription\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mt-4 flex justify-end\">\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setPrescriptions(prescriptions.filter((_, i) => i !== index));\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"lab-orders\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <TestTube className=\"w-5 h-5 mr-2\" />\n                  Laboratory Orders\n                </div>\n                <Button onClick={addLabOrder} size=\"sm\">\n                  Add Lab Order\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {labOrders.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <TestTube className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">No lab orders added yet</p>\n                  <Button onClick={addLabOrder} className=\"mt-4\">\n                    Add First Lab Order\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {labOrders.map((order, index) => (\n                    <Card key={index} className=\"border-dashed\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label>Test Type</Label>\n                            <Select\n                              value={order.testType}\n                              onValueChange={(value) => {\n                                const updated = [...labOrders];\n                                updated[index].testType = value;\n                                setLabOrders(updated);\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select test type\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"complete_blood_count\">Complete Blood Count (CBC)</SelectItem>\n                                <SelectItem value=\"basic_metabolic_panel\">Basic Metabolic Panel</SelectItem>\n                                <SelectItem value=\"lipid_panel\">Lipid Panel</SelectItem>\n                                <SelectItem value=\"liver_function\">Liver Function Tests</SelectItem>\n                                <SelectItem value=\"thyroid_function\">Thyroid Function Tests</SelectItem>\n                                <SelectItem value=\"urinalysis\">Urinalysis</SelectItem>\n                                <SelectItem value=\"chest_xray\">Chest X-Ray</SelectItem>\n                                <SelectItem value=\"ecg\">ECG/EKG</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label>Urgency</Label>\n                            <Select\n                              value={order.urgency}\n                              onValueChange={(value: \"routine\" | \"urgent\" | \"stat\") => {\n                                const updated = [...labOrders];\n                                updated[index].urgency = value;\n                                setLabOrders(updated);\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"routine\">Routine</SelectItem>\n                                <SelectItem value=\"urgent\">Urgent</SelectItem>\n                                <SelectItem value=\"stat\">STAT</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                        <div className=\"mt-4\">\n                          <Label>Clinical Information</Label>\n                          <Textarea\n                            value={order.clinicalInfo}\n                            onChange={(e) => {\n                              const updated = [...labOrders];\n                              updated[index].clinicalInfo = e.target.value;\n                              setLabOrders(updated);\n                            }}\n                            placeholder=\"Clinical indication and relevant history\"\n                            rows={2}\n                          />\n                        </div>\n                        <div className=\"mt-4 flex justify-end\">\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setLabOrders(labOrders.filter((_, i) => i !== index));\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean\n      </div>\n\n      {/* Support Widgets */}\n      <SupportWidget userRole=\"doctor\" className=\"fixed\" />\n      <ChatSupport userRole=\"doctor\" userName=\"Dr. User\" className=\"fixed\" />\n    </div>\n  );\n}","size_bytes":33222},"client/src/pages/enhanced-auth-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ErllessedLogo } from \"@/components/erlessed-logo\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { \n  User, \n  Mail, \n  Lock, \n  Building, \n  Shield, \n  CheckCircle, \n  AlertCircle, \n  Loader2,\n  Brain,\n  Globe\n} from \"lucide-react\";\n\nconst registrationSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string(),\n  name: z.string().min(2, \"Full name is required\"),\n  role: z.string().min(1, \"Role selection is required\"),\n  cadre: z.string().optional(),\n  registrationNumber: z.string().optional(),\n  careProviderId: z.number().optional(),\n  department: z.string().optional(),\n  country: z.string().default(\"kenya\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegistrationForm = z.infer<typeof registrationSchema>;\n\ninterface DomainDetectionResult {\n  careProvider: any;\n  suggestedRole: string | null;\n  suggestedCadre: string | null;\n  branch: string | null;\n  confidence: number;\n}\n\ninterface RegistrationValidationResult {\n  isValid: boolean;\n  registrationBody: string | null;\n  cadre: string | null;\n  specialization: string | null;\n  expiryDate: string | null;\n  errors: string[];\n}\n\ninterface RoleOption {\n  value: string;\n  label: string;\n  requiresRegistration: boolean;\n}\n\ninterface CadreOption {\n  value: string;\n  label: string;\n}\n\nexport default function EnhancedAuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  // Domain detection and validation states\n  const [domainResult, setDomainResult] = useState<DomainDetectionResult | null>(null);\n  const [registrationResult, setRegistrationResult] = useState<RegistrationValidationResult | null>(null);\n  const [roleOptions, setRoleOptions] = useState<RoleOption[]>([]);\n  const [cadreOptions, setCadreOptions] = useState<CadreOption[]>([]);\n  const [careProviders, setCareProviders] = useState<any[]>([]);\n  const [isValidatingEmail, setIsValidatingEmail] = useState(false);\n  const [isValidatingRegistration, setIsValidatingRegistration] = useState(false);\n\n  const form = useForm<RegistrationForm>({\n    resolver: zodResolver(registrationSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      name: \"\",\n      role: \"\",\n      cadre: \"\",\n      registrationNumber: \"\",\n      department: \"\",\n      country: \"kenya\"\n    }\n  });\n\n  const selectedRole = form.watch(\"role\");\n  const emailValue = form.watch(\"email\");\n  const registrationNumber = form.watch(\"registrationNumber\");\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  // Load initial data\n  useEffect(() => {\n    loadRoleOptions();\n    loadCareProviders();\n  }, []);\n\n  // Validate email domain when email changes\n  useEffect(() => {\n    if (emailValue && emailValue.includes(\"@\")) {\n      validateEmailDomain(emailValue);\n    }\n  }, [emailValue]);\n\n  // Load cadre options when role changes\n  useEffect(() => {\n    if (selectedRole) {\n      loadCadreOptions(selectedRole);\n    }\n  }, [selectedRole]);\n\n  // Validate registration number when it changes\n  useEffect(() => {\n    if (registrationNumber && selectedRole && registrationNumber.length >= 6) {\n      validateRegistrationNumber(registrationNumber, selectedRole);\n    }\n  }, [registrationNumber, selectedRole]);\n\n  const loadRoleOptions = async () => {\n    try {\n      const response = await fetch(\"/api/roles\");\n      const data = await response.json();\n      setRoleOptions(data.roleOptions || []);\n    } catch (error) {\n      console.error(\"Failed to load role options:\", error);\n    }\n  };\n\n  const loadCareProviders = async () => {\n    try {\n      const response = await fetch(\"/api/care-providers\");\n      const data = await response.json();\n      setCareProviders(data || []);\n    } catch (error) {\n      console.error(\"Failed to load care providers:\", error);\n    }\n  };\n\n  const loadCadreOptions = async (role: string) => {\n    try {\n      const response = await fetch(`/api/roles?role=${role}`);\n      const data = await response.json();\n      setCadreOptions(data.cadreOptions || []);\n    } catch (error) {\n      console.error(\"Failed to load cadre options:\", error);\n    }\n  };\n\n  const validateEmailDomain = async (email: string) => {\n    setIsValidatingEmail(true);\n    try {\n      const response = await fetch(\"/api/register/validate-role\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email })\n      });\n      \n      const data = await response.json();\n      \n      if (data.domain) {\n        setDomainResult(data.domain);\n        \n        // Auto-fill detected values\n        if (data.domain.careProvider) {\n          form.setValue(\"careProviderId\", data.domain.careProvider.id);\n        }\n        if (data.domain.suggestedRole) {\n          form.setValue(\"role\", data.domain.suggestedRole);\n        }\n        if (data.domain.suggestedCadre) {\n          form.setValue(\"cadre\", data.domain.suggestedCadre);\n        }\n      }\n    } catch (error) {\n      console.error(\"Domain validation failed:\", error);\n    } finally {\n      setIsValidatingEmail(false);\n    }\n  };\n\n  const validateRegistrationNumber = async (regNumber: string, role: string) => {\n    setIsValidatingRegistration(true);\n    try {\n      const response = await fetch(\"/api/register/validate-role\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          email: emailValue,\n          registrationNumber: regNumber, \n          role,\n          country: form.getValues(\"country\")\n        })\n      });\n      \n      const data = await response.json();\n      \n      if (data.registration) {\n        setRegistrationResult(data.registration);\n        \n        if (data.registration.isValid && data.registration.cadre) {\n          form.setValue(\"cadre\", data.registration.cadre);\n        }\n      }\n    } catch (error) {\n      console.error(\"Registration validation failed:\", error);\n    } finally {\n      setIsValidatingRegistration(false);\n    }\n  };\n\n  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    const formData = new FormData(e.currentTarget);\n    const username = formData.get(\"username\") as string;\n    const password = formData.get(\"password\") as string;\n    \n    try {\n      await loginMutation.mutateAsync({ username, password });\n      setLocation(\"/\");\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegistration = async (data: RegistrationForm) => {\n    setIsLoading(true);\n    try {\n      await registerMutation.mutateAsync({\n        username: data.username,\n        email: data.email,\n        password: data.password,\n        name: data.name,\n        role: data.role,\n        cadre: data.cadre || null,\n        careProviderId: data.careProviderId || null,\n        department: data.department || null,\n        registrationNumber: data.registrationNumber || null,\n        registrationBody: registrationResult?.registrationBody || null,\n        isVerified: registrationResult?.isValid || false\n      });\n      \n      toast({\n        title: \"Registration Successful\",\n        description: \"Your account has been created successfully.\"\n      });\n      \n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const requiresRegistration = roleOptions.find(r => r.value === selectedRole)?.requiresRegistration;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n        {/* Left Column - Branding & Info */}\n        <div className=\"space-y-8 text-center lg:text-left\">\n          <div className=\"space-y-4\">\n            <ErllessedLogo size=\"lg\" />\n            <h1 className=\"text-4xl font-bold text-gray-900\">\n              Secure Healthcare Platform\n            </h1>\n            <p className=\"text-xl text-gray-600 leading-relaxed\">\n              Advanced AI-powered claims processing with domain-based authentication \n              and professional license verification for healthcare providers.\n            </p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3 justify-center lg:justify-start\">\n              <div className=\"w-8 h-8 bg-teal-primary rounded-full flex items-center justify-center\">\n                <Shield className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-gray-700\">Auto-detect care provider from email domain</span>\n            </div>\n            <div className=\"flex items-center space-x-3 justify-center lg:justify-start\">\n              <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                <Brain className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-gray-700\">AI-powered preauthorization decisions</span>\n            </div>\n            <div className=\"flex items-center space-x-3 justify-center lg:justify-start\">\n              <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-gray-700\">Professional license verification</span>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-gray-500 mt-8\">\n            Powered by <span className=\"font-semibold text-teal-primary\">Aboolean</span>\n          </div>\n        </div>\n\n        {/* Right Column - Authentication Forms */}\n        <Card className=\"w-full max-w-md mx-auto shadow-xl border-0\">\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n            </TabsList>\n\n            {/* Login Tab */}\n            <TabsContent value=\"login\">\n              <CardHeader className=\"text-center pb-4\">\n                <CardTitle className=\"text-2xl\">Welcome Back</CardTitle>\n                <CardDescription>\n                  Sign in to your Erlessed account\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-username\">Username</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"login-username\"\n                        name=\"username\"\n                        placeholder=\"Enter your username\"\n                        className=\"pl-10\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"login-password\"\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        className=\"pl-10\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full teal-button\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Signing In...\n                      </>\n                    ) : (\n                      \"Sign In\"\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </TabsContent>\n\n            {/* Registration Tab */}\n            <TabsContent value=\"register\">\n              <CardHeader className=\"text-center pb-4\">\n                <CardTitle className=\"text-2xl\">Create Account</CardTitle>\n                <CardDescription>\n                  Join the Erlessed healthcare platform\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={form.handleSubmit(handleRegistration)} className=\"space-y-4\">\n                  {/* Basic Information */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"username\">Username</Label>\n                      <Input\n                        id=\"username\"\n                        {...form.register(\"username\")}\n                        placeholder=\"Choose username\"\n                      />\n                      {form.formState.errors.username && (\n                        <p className=\"text-sm text-red-600\">{form.formState.errors.username.message}</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Full Name</Label>\n                      <Input\n                        id=\"name\"\n                        {...form.register(\"name\")}\n                        placeholder=\"Your full name\"\n                      />\n                      {form.formState.errors.name && (\n                        <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Email with Domain Detection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Work Email</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"email\"\n                        {...form.register(\"email\")}\n                        type=\"email\"\n                        placeholder=\"your.name@hospital.com\"\n                        className=\"pl-10\"\n                      />\n                      {isValidatingEmail && (\n                        <Loader2 className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 animate-spin text-blue-500\" />\n                      )}\n                    </div>\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                    )}\n                    \n                    {/* Domain Detection Result */}\n                    {domainResult && (\n                      <Alert className={domainResult.careProvider ? \"border-green-200 bg-green-50\" : \"border-yellow-200 bg-yellow-50\"}>\n                        <Globe className=\"w-4 h-4\" />\n                        <AlertDescription>\n                          {domainResult.careProvider ? (\n                            <div className=\"space-y-1\">\n                              <p className=\"font-medium text-green-800\">\n                                <CheckCircle className=\"w-4 h-4 inline mr-1\" />\n                                Care Provider Detected: {domainResult.careProvider.name}\n                              </p>\n                              {domainResult.suggestedRole && (\n                                <p className=\"text-sm text-green-700\">\n                                  Suggested Role: {domainResult.suggestedRole}\n                                </p>\n                              )}\n                              <Badge className=\"text-xs\">\n                                {domainResult.confidence}% confidence\n                              </Badge>\n                            </div>\n                          ) : (\n                            <p className=\"text-yellow-800\">\n                              <AlertCircle className=\"w-4 h-4 inline mr-1\" />\n                              Unknown domain. Please select care provider manually.\n                            </p>\n                          )}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </div>\n\n                  {/* Role Selection */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"role\">Role</Label>\n                      <Select \n                        value={form.watch(\"role\")} \n                        onValueChange={(value) => form.setValue(\"role\", value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select your role\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {roleOptions.map((role) => (\n                            <SelectItem key={role.value} value={role.value}>\n                              {role.label}\n                              {role.requiresRegistration && (\n                                <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                                  Requires License\n                                </Badge>\n                              )}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      {form.formState.errors.role && (\n                        <p className=\"text-sm text-red-600\">{form.formState.errors.role.message}</p>\n                      )}\n                    </div>\n\n                    {/* Cadre Selection */}\n                    {cadreOptions.length > 0 && (\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"cadre\">Cadre/Specialization</Label>\n                        <Select \n                          value={form.watch(\"cadre\")} \n                          onValueChange={(value) => form.setValue(\"cadre\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select cadre\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {cadreOptions.map((cadre) => (\n                              <SelectItem key={cadre.value} value={cadre.value}>\n                                {cadre.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Professional Registration */}\n                  {requiresRegistration && (\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"registrationNumber\">\n                        Professional Registration Number\n                        <span className=\"text-red-500 ml-1\">*</span>\n                      </Label>\n                      <div className=\"relative\">\n                        <Shield className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                        <Input\n                          id=\"registrationNumber\"\n                          {...form.register(\"registrationNumber\")}\n                          placeholder=\"e.g., KMP/12345\"\n                          className=\"pl-10\"\n                        />\n                        {isValidatingRegistration && (\n                          <Loader2 className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 animate-spin text-blue-500\" />\n                        )}\n                      </div>\n                      \n                      {/* Registration Validation Result */}\n                      {registrationResult && (\n                        <Alert className={registrationResult.isValid ? \"border-green-200 bg-green-50\" : \"border-red-200 bg-red-50\"}>\n                          {registrationResult.isValid ? (\n                            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          ) : (\n                            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n                          )}\n                          <AlertDescription>\n                            {registrationResult.isValid ? (\n                              <div className=\"space-y-1\">\n                                <p className=\"font-medium text-green-800\">\n                                  Valid registration verified\n                                </p>\n                                <p className=\"text-sm text-green-700\">\n                                  Board: {registrationResult.registrationBody}\n                                </p>\n                                {registrationResult.expiryDate && (\n                                  <p className=\"text-sm text-green-700\">\n                                    Valid until: {registrationResult.expiryDate}\n                                  </p>\n                                )}\n                              </div>\n                            ) : (\n                              <div>\n                                <p className=\"font-medium text-red-800\">Registration validation failed</p>\n                                {registrationResult.errors.map((error, i) => (\n                                  <p key={i} className=\"text-sm text-red-700\">{error}</p>\n                                ))}\n                              </div>\n                            )}\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Care Provider Selection (if not auto-detected) */}\n                  {!domainResult?.careProvider && careProviders.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"careProvider\">Care Provider</Label>\n                      <Select \n                        value={form.watch(\"careProviderId\")?.toString()} \n                        onValueChange={(value) => form.setValue(\"careProviderId\", parseInt(value))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select your facility\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {careProviders.map((provider) => (\n                            <SelectItem key={provider.id} value={provider.id.toString()}>\n                              <div className=\"flex items-center space-x-2\">\n                                <Building className=\"w-4 h-4\" />\n                                <span>{provider.name}</span>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {provider.type}\n                                </Badge>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  {/* Password Fields */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"password\">Password</Label>\n                      <Input\n                        id=\"password\"\n                        {...form.register(\"password\")}\n                        type=\"password\"\n                        placeholder=\"Create password\"\n                      />\n                      {form.formState.errors.password && (\n                        <p className=\"text-sm text-red-600\">{form.formState.errors.password.message}</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                      <Input\n                        id=\"confirmPassword\"\n                        {...form.register(\"confirmPassword\")}\n                        type=\"password\"\n                        placeholder=\"Confirm password\"\n                      />\n                      {form.formState.errors.confirmPassword && (\n                        <p className=\"text-sm text-red-600\">{form.formState.errors.confirmPassword.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full teal-button\"\n                    disabled={isLoading || (requiresRegistration && !registrationResult?.isValid)}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Creating Account...\n                      </>\n                    ) : (\n                      \"Create Account\"\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </TabsContent>\n          </Tabs>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":27228},"client/src/pages/enhanced-signup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ErllessedLogo } from \"@/components/erlessed-logo\";\nimport { Building2, CheckCircle, AlertCircle, User, FileText } from \"lucide-react\";\n\ninterface CareProvider {\n  id: string;\n  name: string;\n  domain: string;\n  type: \"hospital\" | \"clinic\" | \"pharmacy\" | \"insurance\";\n}\n\ninterface RegistrationData {\n  name: string;\n  email: string;\n  password: string;\n  role: string;\n  careProviderId?: string;\n  regulatorType?: string;\n  registrationNumber?: string;\n}\n\nconst CARE_PROVIDERS: CareProvider[] = [\n  { id: \"aku\", name: \"Aga Khan University Hospital\", domain: \"aku.edu\", type: \"hospital\" },\n  { id: \"knh\", name: \"Kenyatta National Hospital\", domain: \"knh.or.ke\", type: \"hospital\" },\n  { id: \"mnh\", name: \"Mater Hospital\", domain: \"materhealth.com\", type: \"hospital\" },\n  { id: \"nairobi-hospital\", name: \"The Nairobi Hospital\", domain: \"nairobihospital.org\", type: \"hospital\" },\n  { id: \"mp-shah\", name: \"MP Shah Hospital\", domain: \"mpshah.org\", type: \"hospital\" },\n  { id: \"avenue-healthcare\", name: \"Avenue Healthcare\", domain: \"avenue.co.ke\", type: \"clinic\" },\n  { id: \"goodlife-pharmacy\", name: \"Goodlife Pharmacy\", domain: \"goodlife.co.ke\", type: \"pharmacy\" },\n  { id: \"nhif\", name: \"National Hospital Insurance Fund\", domain: \"nhif.or.ke\", type: \"insurance\" },\n  { id: \"axa-kenya\", name: \"AXA Kenya\", domain: \"axa.co.ke\", type: \"insurance\" },\n  { id: \"jubilee-insurance\", name: \"Jubilee Insurance\", domain: \"jubileekenya.com\", type: \"insurance\" }\n];\n\nconst USER_ROLES = [\n  { value: \"doctor\", label: \"Doctor\", clinical: true },\n  { value: \"pharmacist\", label: \"Pharmacist\", clinical: true },\n  { value: \"clinical-officer\", label: \"Clinical Officer\", clinical: true },\n  { value: \"billing-officer\", label: \"Billing Officer\", clinical: false },\n  { value: \"care-manager\", label: \"Care Manager\", clinical: false },\n  { value: \"front-office\", label: \"Front Office\", clinical: false },\n  { value: \"insurer-officer\", label: \"Insurer Officer\", clinical: false }\n];\n\nconst REGULATORS = [\n  { value: \"KMPDC\", label: \"Kenya Medical Practitioners and Dentists Council (KMPDC)\" },\n  { value: \"COC\", label: \"Clinical Officers Council (COC)\" },\n  { value: \"PPB\", label: \"Pharmacy and Poisons Board (PPB)\" }\n];\n\nexport default function EnhancedSignup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [step, setStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState<\"idle\" | \"verifying\" | \"verified\" | \"failed\">(\"idle\");\n  \n  const [formData, setFormData] = useState<RegistrationData>({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"\"\n  });\n\n  const selectedRole = USER_ROLES.find(role => role.value === formData.role);\n  const detectedProvider = CARE_PROVIDERS.find(provider => \n    formData.email.includes(`@${provider.domain}`)\n  );\n\n  const validateStep1 = () => {\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Full name is required\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n    \n    if (!formData.email.includes(\"@\") || !formData.email.includes(\".\")) {\n      toast({\n        title: \"Validation Error\", \n        description: \"Please enter a valid email address\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n    \n    if (formData.password.length < 8) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Password must be at least 8 characters long\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n    \n    return true;\n  };\n\n  const validateStep2 = () => {\n    if (!formData.role) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select your role\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n\n    if (selectedRole?.clinical) {\n      if (!formData.regulatorType) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please select your regulatory body\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n      \n      if (!formData.registrationNumber?.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Registration number is required for clinical roles\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n    }\n    \n    return true;\n  };\n\n  const handleStep1Submit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (validateStep1()) {\n      setStep(2);\n    }\n  };\n\n  const verifyLicense = async () => {\n    if (!formData.regulatorType || !formData.registrationNumber) return;\n    \n    setVerificationStatus(\"verifying\");\n    \n    // Simulate license verification API call\n    setTimeout(() => {\n      const isValid = Math.random() > 0.3; // 70% success rate for demo\n      setVerificationStatus(isValid ? \"verified\" : \"failed\");\n      \n      toast({\n        title: isValid ? \"License Verified\" : \"Verification Failed\",\n        description: isValid \n          ? \"Your professional license has been validated\"\n          : \"Unable to verify license. Please check your details\",\n        variant: isValid ? \"default\" : \"destructive\"\n      });\n    }, 2000);\n  };\n\n  const handleFinalSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!validateStep2()) return;\n\n    setIsLoading(true);\n\n    try {\n      // Simulate registration API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      toast({\n        title: \"Registration Successful\",\n        description: `Welcome to Erlessed, ${formData.name}! Redirecting to your dashboard...`,\n      });\n\n      // Redirect based on role\n      setTimeout(() => {\n        switch (formData.role) {\n          case \"doctor\":\n            setLocation(\"/doctor\");\n            break;\n          case \"pharmacist\":\n            setLocation(\"/pharmacy-dashboard\");\n            break;\n          case \"care-manager\":\n            setLocation(\"/care-manager-dashboard\");\n            break;\n          case \"insurer-officer\":\n            setLocation(\"/insurer\");\n            break;\n          case \"clinical-officer\":\n          case \"billing-officer\":\n          case \"front-office\":\n            setLocation(\"/patient\");\n            break;\n          default:\n            setLocation(\"/\");\n        }\n      }, 2000);\n\n    } catch (error) {\n      toast({\n        title: \"Registration Failed\",\n        description: \"Please try again or contact support\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getProgressValue = () => {\n    if (step === 1) return 33;\n    if (step === 2 && !selectedRole?.clinical) return 100;\n    if (step === 2 && selectedRole?.clinical) return 66;\n    return 100;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 flex\">\n      {/* Left Panel - Registration Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-lg space-y-6\">\n          <div className=\"text-center\">\n            <ErllessedLogo className=\"mx-auto h-16 w-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900\">Join Erlessed</h2>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              Create your healthcare professional account\n            </p>\n          </div>\n\n          {/* Progress Indicator */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-xs text-gray-500\">\n              <span>Step {step} of 2</span>\n              <span>{Math.round(getProgressValue())}% Complete</span>\n            </div>\n            <Progress value={getProgressValue()} className=\"h-2\" />\n          </div>\n\n          <Card className=\"border-0 shadow-xl bg-white/90 backdrop-blur-sm\">\n            <CardHeader className=\"text-center pb-4\">\n              <CardTitle className=\"text-xl\">\n                {step === 1 ? \"Personal Information\" : \"Professional Details\"}\n              </CardTitle>\n              <CardDescription>\n                {step === 1 \n                  ? \"Enter your basic information to get started\"\n                  : \"Set up your professional profile\"\n                }\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent>\n              {step === 1 && (\n                <form onSubmit={handleStep1Submit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      type=\"text\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({...formData, name: e.target.value})}\n                      placeholder=\"Enter your full name\"\n                      className=\"medical-form-input\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({...formData, email: e.target.value})}\n                      placeholder=\"your.email@hospital.com\"\n                      className=\"medical-form-input\"\n                      required\n                    />\n                    {detectedProvider && (\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Building2 className=\"w-4 h-4 text-teal-600\" />\n                        <Badge variant=\"secondary\" className=\"bg-teal-100 text-teal-700\">\n                          {detectedProvider.name} Detected\n                        </Badge>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      value={formData.password}\n                      onChange={(e) => setFormData({...formData, password: e.target.value})}\n                      placeholder=\"Create a secure password\"\n                      className=\"medical-form-input\"\n                      required\n                    />\n                    <p className=\"text-xs text-gray-500\">\n                      Must be at least 8 characters long\n                    </p>\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full teal-button\">\n                    Continue to Professional Details\n                  </Button>\n                </form>\n              )}\n\n              {step === 2 && (\n                <form onSubmit={handleFinalSubmit} className=\"space-y-6\">\n                  {/* Care Provider Detection */}\n                  {detectedProvider && (\n                    <div className=\"p-4 bg-teal-50 border border-teal-200 rounded-lg\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <Building2 className=\"w-5 h-5 text-teal-600\" />\n                        <h3 className=\"font-medium text-teal-800\">Care Provider Detected</h3>\n                      </div>\n                      <p className=\"text-sm text-teal-700\">\n                        You'll be automatically assigned to <strong>{detectedProvider.name}</strong>\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Role Selection */}\n                  <div className=\"space-y-2\">\n                    <Label>Select Your Role</Label>\n                    <Select value={formData.role} onValueChange={(value) => setFormData({...formData, role: value})}>\n                      <SelectTrigger className=\"medical-form-input\">\n                        <SelectValue placeholder=\"Choose your professional role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {USER_ROLES.map((role) => (\n                          <SelectItem key={role.value} value={role.value}>\n                            <div className=\"flex items-center justify-between w-full\">\n                              {role.label}\n                              {role.clinical && (\n                                <Badge variant=\"outline\" className=\"ml-2 text-xs\">Clinical</Badge>\n                              )}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Clinical Role Verification */}\n                  {selectedRole?.clinical && (\n                    <div className=\"space-y-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <div className=\"flex items-center space-x-2 mb-3\">\n                        <FileText className=\"w-5 h-5 text-blue-600\" />\n                        <h3 className=\"font-medium text-blue-800\">Professional License Verification</h3>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Regulatory Body</Label>\n                        <Select \n                          value={formData.regulatorType} \n                          onValueChange={(value) => setFormData({...formData, regulatorType: value})}\n                        >\n                          <SelectTrigger className=\"medical-form-input\">\n                            <SelectValue placeholder=\"Select your regulatory authority\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {REGULATORS.map((regulator) => (\n                              <SelectItem key={regulator.value} value={regulator.value}>\n                                {regulator.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Registration Number</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            value={formData.registrationNumber || \"\"}\n                            onChange={(e) => setFormData({...formData, registrationNumber: e.target.value})}\n                            placeholder=\"Enter your registration number\"\n                            className=\"medical-form-input flex-1\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={verifyLicense}\n                            disabled={verificationStatus === \"verifying\" || !formData.registrationNumber}\n                            className=\"whitespace-nowrap\"\n                          >\n                            {verificationStatus === \"verifying\" ? \"Verifying...\" : \"Verify\"}\n                          </Button>\n                        </div>\n                        \n                        {verificationStatus === \"verified\" && (\n                          <div className=\"flex items-center space-x-2 text-green-600\">\n                            <CheckCircle className=\"w-4 h-4\" />\n                            <span className=\"text-sm\">License verified successfully</span>\n                          </div>\n                        )}\n                        \n                        {verificationStatus === \"failed\" && (\n                          <div className=\"flex items-center space-x-2 text-red-600\">\n                            <AlertCircle className=\"w-4 h-4\" />\n                            <span className=\"text-sm\">Verification failed - please check details</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex space-x-3\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setStep(1)}\n                      className=\"flex-1\"\n                    >\n                      Back\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      className=\"flex-1 teal-button\"\n                    >\n                      {isLoading ? \"Creating Account...\" : \"Complete Registration\"}\n                    </Button>\n                  </div>\n                </form>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">\n              By signing up, you agree to our Terms of Service and Privacy Policy\n            </p>\n            <p className=\"text-xs text-gray-400 mt-1\">Powered by Aboolean.</p>\n          </div>\n        </div>\n      </div>\n      {/* Right Panel - Features */}\n      <div className=\"hidden lg:flex lg:flex-1 bg-gradient-to-br from-teal-600 to-blue-700 text-white p-12 items-center justify-center\">\n        <div className=\"max-w-lg\">\n          <h3 className=\"text-3xl font-bold mb-8\">\n            Professional Healthcare Platform\n          </h3>\n          \n          <div className=\"space-y-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                <User className=\"w-4 h-4\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg\">Role-Based Access</h4>\n                <p className=\"text-teal-100 text-sm\">\n                  Tailored dashboards for every healthcare professional\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-4 h-4\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg\">License Verification</h4>\n                <p className=\"text-teal-100 text-sm\">\n                  Automated validation with Kenya regulatory boards\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                <Building2 className=\"w-4 h-4\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg\">Institution Integration</h4>\n                <p className=\"text-teal-100 text-sm\">\n                  Seamless connection with major healthcare providers\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19668},"client/src/pages/focused-claims.tsx":{"content":"import Sidebar from \"@/components/Sidebar\";\nimport Dashboard from \"@/components/Dashboard\";\n\nexport default function FocusedClaims() {\n  // Simulate login: Change role to \"doctor\", \"pharmacy\", or \"front-office\"\n  const user = { name: \"Dr. Achieng\", role: \"doctor\", isPremium: true };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#0e0d3c] via-[#1b1150] to-[#2a1a5e] text-white\">\n      <Sidebar role={user.role} />\n      <main className=\"flex-1 p-6\">\n        <Dashboard user={user} />\n      </main>\n    </div>\n  );\n}","size_bytes":543},"client/src/pages/front-desk.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Fingerprint, \n  Shield, \n  CheckCircle, \n  AlertTriangle, \n  Loader2, \n  Building2,\n  User,\n  FileText,\n  Clock,\n  Phone,\n  MessageSquare,\n  Smartphone,\n  Download\n} from \"lucide-react\";\nimport { generateClaimForm, downloadPDF, generateFilename, type PatientData, type ClaimService } from \"@/utils/autofillClaim\";\n// Temporary mock biometric service\nconst mockBiometricService = {\n  async simulateFingerprintScan(patientId: string) {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    return {\n      fingerprintHash: `fp_${patientId}_${Date.now()}`,\n      deviceFingerprint: `device_${Date.now()}`,\n      timestamp: Date.now(),\n      sessionId: `session_${Date.now()}`\n    };\n  },\n  async storeBiometricData(patientId: string, data: any) {\n    localStorage.setItem(`biometric_${patientId}`, JSON.stringify(data));\n  }\n};\nimport { EnhancedClaimTracker } from \"@/components/enhanced-claim-tracker\";\n\ninterface InsurancePolicy {\n  id: string;\n  insurerName: string;\n  schemeName: string;\n  policyNumber: string;\n  coverageAmount: number;\n  expiryDate: string;\n  isActive: boolean;\n}\n\ninterface ActiveSession {\n  sessionId: string;\n  facilityName: string;\n  serviceName: string;\n  startedAt: string;\n  userId: string;\n  userRole: string;\n}\n\ninterface Patient {\n  id: number;\n  patientId: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  gender: string;\n  phoneNumber?: string;\n  biometricId?: string;\n}\n\nexport default function FrontDeskPage() {\n  const [step, setStep] = useState<'input' | 'verification' | 'selection' | 'session' | 'service' | 'preauth' | 'complete'>('input');\n  const [patientId, setPatientId] = useState('');\n  const [otpCode, setOtpCode] = useState('');\n  const [verificationMethod, setVerificationMethod] = useState<'fingerprint' | 'otp'>('fingerprint');\n  \n  // Biometric states\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [verificationStatus, setVerificationStatus] = useState<'idle' | 'scanning' | 'success' | 'failed'>('idle');\n  \n  // Patient data\n  const [verifiedPatient, setVerifiedPatient] = useState<Patient | null>(null);\n  const [activePolicies, setActivePolicies] = useState<InsurancePolicy[]>([]);\n  const [selectedInsurer, setSelectedInsurer] = useState<InsurancePolicy | null>(null);\n  \n  // Session management\n  const [activeSessions, setActiveSessions] = useState<ActiveSession[]>([]);\n  const [showSessionModal, setShowSessionModal] = useState(false);\n  const [sessionToHandle, setSessionToHandle] = useState<ActiveSession | null>(null);\n  \n  // SMS OTP states\n  const [isSendingOtp, setIsSendingOtp] = useState(false);\n  const [otpSent, setOtpSent] = useState(false);\n  \n  // Service selection and preauthorization states\n  const [selectedService, setSelectedService] = useState<string>('');\n  const [benefitBuckets, setBenefitBuckets] = useState<any[]>([]);\n  const [preauthResult, setPreauthResult] = useState<any>(null);\n  const [preauthLoading, setPreauthLoading] = useState(false);\n\n  const handlePatientLookup = async () => {\n    if (!patientId.trim()) return;\n    \n    setStep('verification');\n    setVerificationStatus('idle');\n  };\n\n  const handleFingerprintVerification = async () => {\n    setIsScanning(true);\n    setVerificationStatus('scanning');\n    setScanProgress(0);\n\n    try {\n      // Generate realistic biometric scan\n      const biometricData = await mockBiometricService.simulateFingerprintScan(patientId);\n      \n      // Simulate progressive scanning\n      const progressInterval = setInterval(() => {\n        setScanProgress(prev => {\n          if (prev >= 100) {\n            clearInterval(progressInterval);\n            return 100;\n          }\n          return prev + Math.random() * 12 + 3;\n        });\n      }, 180);\n\n      // Wait for scanning completion\n      await new Promise(resolve => {\n        const checkProgress = () => {\n          if (scanProgress >= 100) {\n            clearInterval(progressInterval);\n            resolve(true);\n          } else {\n            setTimeout(checkProgress, 100);\n          }\n        };\n        checkProgress();\n      });\n\n      // Store biometric data\n      await mockBiometricService.storeBiometricData(patientId, biometricData);\n      \n      // Verify patient with biometric data\n      await verifyPatientIdentity(biometricData);\n      \n    } catch (error) {\n      console.error('Fingerprint verification error:', error);\n      setVerificationStatus('failed');\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  const handleSendOtp = async () => {\n    setIsSendingOtp(true);\n    \n    try {\n      // Simulate SMS sending delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // In production, this would call SMS API\n      console.log(`Sending OTP to patient ${patientId}`);\n      \n      setOtpSent(true);\n    } catch (error) {\n      console.error('OTP sending failed:', error);\n    } finally {\n      setIsSendingOtp(false);\n    }\n  };\n\n  const handleOtpVerification = async () => {\n    if (!otpCode.trim() || otpCode.length !== 6) {\n      return;\n    }\n    \n    setVerificationStatus('scanning');\n    \n    try {\n      // Simulate OTP verification\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // For demo, accept any 6-digit code\n      if (otpCode.length === 6) {\n        await verifyPatientIdentity(null, otpCode);\n      } else {\n        setVerificationStatus('failed');\n      }\n    } catch (error) {\n      console.error('OTP verification error:', error);\n      setVerificationStatus('failed');\n    }\n  };\n\n  const verifyPatientIdentity = async (biometricData?: any, otp?: string) => {\n    try {\n      const response = await fetch(`/api/front-desk/verify-patient`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          patientId,\n          biometricData,\n          otpCode: otp\n        })\n      });\n      \n      const data = await response.json();\n\n      if (data.verified) {\n        setVerifiedPatient(data.patient);\n        setActivePolicies(data.activePolicies || []);\n        setActiveSessions(data.activeSessions || []);\n        setVerificationStatus('success');\n        \n        // Check for active sessions at other facilities\n        if (data.activeSessions && data.activeSessions.length > 0) {\n          setSessionToHandle(data.activeSessions[0]);\n          setShowSessionModal(true);\n        } else if (data.activePolicies && data.activePolicies.length > 1) {\n          // Multiple insurers - show selection\n          setStep('selection');\n        } else if (data.activePolicies && data.activePolicies.length === 1) {\n          // Single insurer - proceed directly\n          setSelectedInsurer(data.activePolicies[0]);\n          setStep('complete');\n        } else {\n          // No active policies\n          setStep('complete');\n        }\n      } else {\n        setVerificationStatus('failed');\n      }\n    } catch (error) {\n      console.error('Patient verification error:', error);\n      setVerificationStatus('failed');\n    }\n  };\n\n  const handleInsurerSelection = (insurerId: string) => {\n    const selected = activePolicies.find(policy => policy.id === insurerId);\n    if (selected) {\n      setSelectedInsurer(selected);\n      setStep('complete');\n      \n      // Store selection in session\n      sessionStorage.setItem('selectedInsurer', JSON.stringify(selected));\n    }\n  };\n\n  const handleContinueSession = async (continueSession: boolean) => {\n    setShowSessionModal(false);\n    \n    if (continueSession && sessionToHandle) {\n      // Continue existing session\n      try {\n        await fetch('/api/front-desk/continue-session', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n          body: JSON.stringify({\n            sessionId: sessionToHandle.sessionId,\n            patientId: verifiedPatient?.patientId\n          })\n        });\n        \n        setStep('complete');\n      } catch (error) {\n        console.error('Session continuation error:', error);\n      }\n    } else {\n      // Start new session - check for multiple insurers\n      if (activePolicies.length > 1) {\n        setStep('selection');\n      } else if (activePolicies.length === 1) {\n        setSelectedInsurer(activePolicies[0]);\n        setStep('complete');\n      } else {\n        setStep('complete');\n      }\n    }\n  };\n\n  const handleStartNewClaim = async () => {\n    if (!verifiedPatient || !selectedInsurer) return;\n    \n    // Mock benefit buckets for the patient's insurance\n    const mockBenefits = [\n      {\n        serviceType: 'consultation',\n        name: 'Medical Consultation',\n        description: 'General consultation with doctor',\n        totalAllowed: 12,\n        usedCount: 3,\n        remainingAmount: 'KES 45,000',\n        icon: '🩺'\n      },\n      {\n        serviceType: 'laboratory',\n        name: 'Laboratory Tests',\n        description: 'Blood tests, X-rays, and diagnostics',\n        totalAllowed: 20,\n        usedCount: 5,\n        remainingAmount: 'KES 25,000',\n        icon: '🧪'\n      },\n      {\n        serviceType: 'pharmacy',\n        name: 'Pharmacy Benefits',\n        description: 'Prescription medications',\n        totalAllowed: 24,\n        usedCount: 8,\n        remainingAmount: 'KES 18,000',\n        icon: '💊'\n      },\n      {\n        serviceType: 'specialist',\n        name: 'Specialist Consultation',\n        description: 'Cardiologist, Dermatologist, etc.',\n        totalAllowed: 6,\n        usedCount: 1,\n        remainingAmount: 'KES 30,000',\n        icon: '👨‍⚕️'\n      }\n    ];\n    \n    setBenefitBuckets(mockBenefits);\n    setStep('service');\n  };\n\n  const handleServiceSelection = async (serviceType: string) => {\n    setSelectedService(serviceType);\n    setStep('preauth');\n    setPreauthLoading(true);\n    \n    try {\n      const response = await fetch('/api/preauth', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          patientId: verifiedPatient?.id,\n          insurer: selectedInsurer?.insurerName,\n          serviceType: serviceType,\n          clinicalJustification: `${serviceType} service requested for patient ${verifiedPatient?.patientId}`,\n          estimatedCost: getEstimatedCost(serviceType),\n          urgency: 'routine'\n        })\n      });\n      \n      const result = await response.json();\n      setPreauthResult(result);\n      \n      if (result.decision === 'approved') {\n        // Success - allow billing\n        setStep('complete');\n      } else {\n        // Show denial reason\n        // Stay on preauth step to show the denial\n      }\n    } catch (error) {\n      console.error('Preauthorization error:', error);\n      setPreauthResult({\n        decision: 'denied',\n        reason: 'System error during preauthorization. Please try again.',\n        confidence: 0\n      });\n    } finally {\n      setPreauthLoading(false);\n    }\n  };\n\n  const getEstimatedCost = (serviceType: string): string => {\n    const costs = {\n      consultation: '2500',\n      laboratory: '4500',\n      pharmacy: '3200',\n      specialist: '5000'\n    };\n    return costs[serviceType as keyof typeof costs] || '2000';\n  };\n\n  const generatePatientClaimForm = async () => {\n    if (!verifiedPatient || !selectedInsurer) return;\n    \n    try {\n      const patientData: PatientData = {\n        name: `${verifiedPatient.firstName} ${verifiedPatient.lastName}`,\n        dateOfBirth: new Date(verifiedPatient.dateOfBirth).toLocaleDateString(),\n        gender: verifiedPatient.gender,\n        memberId: verifiedPatient.patientId,\n        phoneNumber: verifiedPatient.phoneNumber || '',\n        address: verifiedPatient.address || '',\n        diagnosis: 'General Consultation',\n        treatment: 'Medical Evaluation',\n        serviceDate: new Date().toLocaleDateString(),\n        providerName: 'Erlessed Healthcare Platform'\n      };\n\n      const sampleServices: ClaimService[] = [\n        {\n          serviceCode: 'CONS001',\n          serviceName: 'General Consultation',\n          quantity: 1,\n          unitCost: 2000,\n          totalCost: 2000,\n          serviceDate: new Date().toLocaleDateString()\n        }\n      ];\n\n      const pdfBytes = await generateClaimForm(\n        patientData, \n        selectedInsurer.insurerName, \n        sampleServices\n      );\n      \n      const filename = generateFilename(patientData, selectedInsurer.insurerName);\n      downloadPDF(pdfBytes, filename);\n      \n    } catch (error) {\n      console.error('Error generating claim form:', error);\n    }\n  };\n\n  const resetFlow = () => {\n    setStep('input');\n    setPatientId('');\n    setOtpCode('');\n    setVerificationStatus('idle');\n    setVerifiedPatient(null);\n    setActivePolicies([]);\n    setSelectedInsurer(null);\n    setActiveSessions([]);\n    setScanProgress(0);\n    setOtpSent(false);\n    setSelectedService('');\n    setBenefitBuckets([]);\n    setPreauthResult(null);\n    setPreauthLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Front Office Patient Verification</h1>\n          <p className=\"text-gray-600\">Secure patient identity verification and claim session management</p>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"flex items-center justify-center space-x-4 mb-8\">\n          <div className={`flex items-center space-x-2 ${step === 'input' ? 'text-teal-600' : step === 'verification' || step === 'selection' || step === 'complete' ? 'text-green-600' : 'text-gray-400'}`}>\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === 'input' ? 'bg-teal-100 border-2 border-teal-600' : step === 'verification' || step === 'selection' || step === 'complete' ? 'bg-green-100 border-2 border-green-600' : 'bg-gray-100 border-2 border-gray-300'}`}>\n              <User className=\"w-4 h-4\" />\n            </div>\n            <span className=\"text-sm font-medium\">Patient ID</span>\n          </div>\n          \n          <div className={`w-8 h-1 ${step === 'verification' || step === 'selection' || step === 'complete' ? 'bg-green-600' : 'bg-gray-300'}`}></div>\n          \n          <div className={`flex items-center space-x-2 ${step === 'verification' ? 'text-teal-600' : step === 'selection' || step === 'complete' ? 'text-green-600' : 'text-gray-400'}`}>\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === 'verification' ? 'bg-teal-100 border-2 border-teal-600' : step === 'selection' || step === 'complete' ? 'bg-green-100 border-2 border-green-600' : 'bg-gray-100 border-2 border-gray-300'}`}>\n              <Shield className=\"w-4 h-4\" />\n            </div>\n            <span className=\"text-sm font-medium\">Verification</span>\n          </div>\n          \n          <div className={`w-8 h-1 ${step === 'complete' ? 'bg-green-600' : 'bg-gray-300'}`}></div>\n          \n          <div className={`flex items-center space-x-2 ${step === 'complete' ? 'text-green-600' : 'text-gray-400'}`}>\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === 'complete' ? 'bg-green-100 border-2 border-green-600' : 'bg-gray-100 border-2 border-gray-300'}`}>\n              <CheckCircle className=\"w-4 h-4\" />\n            </div>\n            <span className=\"text-sm font-medium\">Complete</span>\n          </div>\n        </div>\n\n        {/* Step 1: Patient ID Input */}\n        {step === 'input' && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5 text-blue-600\" />\n                Patient Identification\n              </CardTitle>\n              <CardDescription>\n                Enter the patient ID to begin verification process\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Patient ID</label>\n                <Input\n                  value={patientId}\n                  onChange={(e) => setPatientId(e.target.value)}\n                  placeholder=\"Enter patient ID (e.g., PAT001)\"\n                  className=\"text-lg\"\n                />\n              </div>\n              \n              <Button \n                onClick={handlePatientLookup}\n                disabled={!patientId.trim()}\n                className=\"w-full bg-teal-600 hover:bg-teal-700\"\n              >\n                Lookup Patient\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 2: Verification Method Selection and Execution */}\n        {step === 'verification' && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"w-5 h-5 text-teal-600\" />\n                  Identity Verification\n                </CardTitle>\n                <CardDescription>\n                  Choose verification method for patient {patientId}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Verification Method Selection */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Button\n                    variant={verificationMethod === 'fingerprint' ? 'default' : 'outline'}\n                    onClick={() => setVerificationMethod('fingerprint')}\n                    className=\"h-20 flex flex-col items-center justify-center space-y-2\"\n                  >\n                    <Fingerprint className=\"w-6 h-6\" />\n                    <span>Fingerprint Scan</span>\n                  </Button>\n                  \n                  <Button\n                    variant={verificationMethod === 'otp' ? 'default' : 'outline'}\n                    onClick={() => setVerificationMethod('otp')}\n                    className=\"h-20 flex flex-col items-center justify-center space-y-2\"\n                  >\n                    <Smartphone className=\"w-6 h-6\" />\n                    <span>SMS OTP</span>\n                  </Button>\n                </div>\n\n                {/* Fingerprint Verification */}\n                {verificationMethod === 'fingerprint' && (\n                  <div className=\"text-center space-y-4\">\n                    {verificationStatus === 'idle' && (\n                      <Button\n                        onClick={handleFingerprintVerification}\n                        className=\"bg-teal-600 hover:bg-teal-700\"\n                      >\n                        <Fingerprint className=\"w-4 h-4 mr-2\" />\n                        Start Fingerprint Scan\n                      </Button>\n                    )}\n                    \n                    {verificationStatus === 'scanning' && (\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"relative\">\n                            <Fingerprint className={`w-16 h-16 text-teal-600 ${isScanning ? 'animate-pulse' : ''}`} />\n                            {isScanning && (\n                              <Loader2 className=\"w-6 h-6 animate-spin absolute -top-1 -right-1 text-blue-600\" />\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-gray-600\">Scanning fingerprint...</p>\n                          <Progress value={scanProgress} className=\"h-2\" />\n                          <p className=\"text-xs text-gray-500\">{Math.round(scanProgress)}% complete</p>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {verificationStatus === 'success' && (\n                      <div className=\"text-center text-green-600\">\n                        <CheckCircle className=\"w-16 h-16 mx-auto mb-2\" />\n                        <p className=\"font-medium\">Fingerprint Verified Successfully</p>\n                      </div>\n                    )}\n                    \n                    {verificationStatus === 'failed' && (\n                      <div className=\"text-center\">\n                        <AlertTriangle className=\"w-16 h-16 mx-auto mb-2 text-red-600\" />\n                        <p className=\"font-medium text-red-600\">Verification Failed</p>\n                        <Button\n                          onClick={() => setVerificationStatus('idle')}\n                          variant=\"outline\"\n                          className=\"mt-2\"\n                        >\n                          Try Again\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* SMS OTP Verification */}\n                {verificationMethod === 'otp' && (\n                  <div className=\"space-y-4\">\n                    {!otpSent ? (\n                      <div className=\"text-center\">\n                        <Button\n                          onClick={handleSendOtp}\n                          disabled={isSendingOtp}\n                          className=\"bg-blue-600 hover:bg-blue-700\"\n                        >\n                          {isSendingOtp ? (\n                            <>\n                              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                              Sending OTP...\n                            </>\n                          ) : (\n                            <>\n                              <MessageSquare className=\"w-4 h-4 mr-2\" />\n                              Send OTP\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        <Alert>\n                          <Phone className=\"w-4 h-4\" />\n                          <AlertDescription>\n                            OTP has been sent to the patient's registered phone number\n                          </AlertDescription>\n                        </Alert>\n                        \n                        <div>\n                          <label className=\"block text-sm font-medium mb-2\">Enter 6-digit OTP</label>\n                          <Input\n                            value={otpCode}\n                            onChange={(e) => setOtpCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                            placeholder=\"000000\"\n                            className=\"text-center text-lg tracking-widest\"\n                            maxLength={6}\n                          />\n                        </div>\n                        \n                        <Button\n                          onClick={handleOtpVerification}\n                          disabled={otpCode.length !== 6 || verificationStatus === 'scanning'}\n                          className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                        >\n                          {verificationStatus === 'scanning' ? (\n                            <>\n                              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                              Verifying...\n                            </>\n                          ) : (\n                            'Verify OTP'\n                          )}\n                        </Button>\n                        \n                        {verificationStatus === 'failed' && (\n                          <Alert>\n                            <AlertTriangle className=\"w-4 h-4\" />\n                            <AlertDescription>\n                              Invalid OTP. Please check and try again.\n                            </AlertDescription>\n                          </Alert>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Step 3: Insurer Selection */}\n        {step === 'selection' && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"w-5 h-5 text-blue-600\" />\n                Insurance Provider Selection\n              </CardTitle>\n              <CardDescription>\n                Patient {verifiedPatient?.firstName} {verifiedPatient?.lastName} has multiple active insurance policies\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4\">\n                {activePolicies.map((policy) => (\n                  <Card \n                    key={policy.id}\n                    className=\"cursor-pointer hover:shadow-md transition-shadow border-l-4 border-l-blue-500\"\n                    onClick={() => handleInsurerSelection(policy.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{policy.insurerName}</h3>\n                          <p className=\"text-gray-600\">{policy.schemeName}</p>\n                          <p className=\"text-sm text-gray-500\">Policy: {policy.policyNumber}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge className=\"bg-green-100 text-green-800 mb-2\">Active</Badge>\n                          <p className=\"text-sm font-medium\">\n                            KES {policy.coverageAmount.toLocaleString()}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            Expires: {new Date(policy.expiryDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 4: Service Selection */}\n        {step === 'service' && verifiedPatient && selectedInsurer && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-teal-600\" />\n                Select Service Type\n              </CardTitle>\n              <CardDescription>\n                Choose the type of service for {verifiedPatient.firstName} {verifiedPatient.lastName}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {benefitBuckets.map((bucket) => {\n                  const usagePercent = (bucket.usedCount / bucket.totalAllowed) * 100;\n                  const isLowUsage = usagePercent < 50;\n                  const isMediumUsage = usagePercent >= 50 && usagePercent < 80;\n                  const isHighUsage = usagePercent >= 80;\n                  \n                  return (\n                    <Card \n                      key={bucket.serviceType}\n                      className=\"cursor-pointer hover:shadow-md transition-all border-l-4 border-l-teal-500 hover:border-l-teal-600\"\n                      onClick={() => handleServiceSelection(bucket.serviceType)}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <span className=\"text-2xl\">{bucket.icon}</span>\n                            <div>\n                              <h3 className=\"font-semibold text-lg\">{bucket.name}</h3>\n                              <p className=\"text-sm text-gray-600\">{bucket.description}</p>\n                            </div>\n                          </div>\n                          <Badge \n                            className={`${\n                              isLowUsage ? 'bg-green-100 text-green-800' :\n                              isMediumUsage ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-red-100 text-red-800'\n                            }`}\n                          >\n                            {bucket.usedCount}/{bucket.totalAllowed}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Usage</span>\n                            <span>{Math.round(usagePercent)}%</span>\n                          </div>\n                          <Progress \n                            value={usagePercent} \n                            className={`h-2 ${\n                              isLowUsage ? '[&>div]:bg-green-500' :\n                              isMediumUsage ? '[&>div]:bg-yellow-500' :\n                              '[&>div]:bg-red-500'\n                            }`}\n                          />\n                          <p className=\"text-sm font-medium text-teal-700\">\n                            Remaining: {bucket.remainingAmount}\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n              \n              <div className=\"mt-6 pt-4 border-t\">\n                <Button \n                  onClick={() => setStep('complete')} \n                  variant=\"outline\" \n                  className=\"w-full\"\n                >\n                  Back to Patient Summary\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 5: Preauthorization */}\n        {step === 'preauth' && verifiedPatient && selectedService && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-blue-600\" />\n                Preauthorization Request\n              </CardTitle>\n              <CardDescription>\n                Processing preauthorization for {selectedService} service\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {preauthLoading ? (\n                <div className=\"text-center space-y-4\">\n                  <Loader2 className=\"w-16 h-16 mx-auto animate-spin text-blue-600\" />\n                  <div>\n                    <p className=\"text-lg font-medium\">Processing Authorization...</p>\n                    <p className=\"text-sm text-gray-600\">Analyzing patient eligibility and coverage</p>\n                  </div>\n                </div>\n              ) : preauthResult ? (\n                <div className=\"space-y-4\">\n                  {preauthResult.decision === 'approved' ? (\n                    <Alert className=\"border-green-200 bg-green-50\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <AlertDescription className=\"text-green-800\">\n                        <strong>Preauthorization Approved</strong>\n                        <br />\n                        {preauthResult.reason || 'Service authorized for billing.'}\n                        <br />\n                        <span className=\"text-sm\">Confidence: {Math.round((preauthResult.confidence || 0.95) * 100)}%</span>\n                      </AlertDescription>\n                    </Alert>\n                  ) : (\n                    <Alert className=\"border-red-200 bg-red-50\">\n                      <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                      <AlertDescription className=\"text-red-800\">\n                        <strong>Preauthorization Denied</strong>\n                        <br />\n                        {preauthResult.reason || 'Service not authorized at this time.'}\n                        <br />\n                        <span className=\"text-sm\">Confidence: {Math.round((preauthResult.confidence || 0.85) * 100)}%</span>\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                  \n                  {preauthResult.chainOfThought && (\n                    <Card className=\"mt-4\">\n                      <CardHeader>\n                        <CardTitle className=\"text-sm\">Decision Process</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2 text-sm\">\n                          {preauthResult.chainOfThought.map((step: any, index: number) => (\n                            <div key={index} className=\"flex items-start gap-2\">\n                              <span className=\"text-blue-600 font-mono text-xs mt-1\">{index + 1}.</span>\n                              <span className=\"text-gray-700\">{step}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                  \n                  <div className=\"flex gap-4 pt-4\">\n                    <Button \n                      onClick={() => setStep('service')} \n                      variant=\"outline\" \n                      className=\"flex-1\"\n                    >\n                      Select Different Service\n                    </Button>\n                    {preauthResult.decision === 'approved' ? (\n                      <Button \n                        onClick={() => setStep('complete')} \n                        className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                      >\n                        Proceed to Billing\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={() => setStep('complete')} \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                      >\n                        Return to Summary\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ) : null}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 6: Complete */}\n        {step === 'complete' && verifiedPatient && (\n          <div className=\"space-y-6\">\n            {/* Patient Summary */}\n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-green-700\">\n                  <CheckCircle className=\"w-5 h-5\" />\n                  Patient Verified Successfully\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">\n                      {verifiedPatient.firstName} {verifiedPatient.lastName}\n                    </h3>\n                    <p className=\"text-gray-600\">ID: {verifiedPatient.patientId}</p>\n                    <p className=\"text-gray-600\">DOB: {new Date(verifiedPatient.dateOfBirth).toLocaleDateString()}</p>\n                    <p className=\"text-gray-600\">Gender: {verifiedPatient.gender}</p>\n                  </div>\n                  \n                  {selectedInsurer && (\n                    <div>\n                      <h4 className=\"font-medium text-gray-700 mb-2\">Selected Insurance</h4>\n                      <div className=\"bg-blue-50 p-3 rounded-lg\">\n                        <p className=\"font-medium\">{selectedInsurer.insurerName}</p>\n                        <p className=\"text-sm text-gray-600\">{selectedInsurer.schemeName}</p>\n                        <p className=\"text-sm text-gray-600\">Coverage: KES {selectedInsurer.coverageAmount.toLocaleString()}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Enhanced Claims Tracker */}\n            <EnhancedClaimTracker patientId={verifiedPatient.patientId} showAllClaims={false} />\n\n            {/* Action Buttons */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button onClick={resetFlow} variant=\"outline\">\n                Verify New Patient\n              </Button>\n              {selectedInsurer && (\n                <Button \n                  onClick={generatePatientClaimForm}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Generate Claim Form\n                </Button>\n              )}\n              <Button \n                onClick={handleStartNewClaim}\n                className=\"bg-teal-600 hover:bg-teal-700\"\n              >\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Start New Claim\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Active Session Modal */}\n        {showSessionModal && sessionToHandle && (\n          <Dialog open={showSessionModal} onOpenChange={setShowSessionModal}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n                  Active Session Detected\n                </DialogTitle>\n                <DialogDescription>\n                  An active claim session was found at another facility\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                <Alert>\n                  <Building2 className=\"w-4 h-4\" />\n                  <AlertDescription>\n                    <strong>Facility:</strong> {sessionToHandle.facilityName}<br />\n                    <strong>Service:</strong> {sessionToHandle.serviceName}<br />\n                    <strong>Started:</strong> {new Date(sessionToHandle.startedAt).toLocaleString()}<br />\n                    <strong>Provider:</strong> {sessionToHandle.userRole}\n                  </AlertDescription>\n                </Alert>\n                \n                <p className=\"text-sm text-gray-600\">\n                  Would you like to continue the existing session or start a new one?\n                </p>\n              </div>\n              \n              <DialogFooter className=\"gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => handleContinueSession(false)}\n                >\n                  Start New Session\n                </Button>\n                <Button \n                  onClick={() => handleContinueSession(true)}\n                  className=\"bg-orange-600 hover:bg-orange-700\"\n                >\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  Continue Existing\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":40190},"client/src/pages/hms-integration.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AlertCircle, CheckCircle, Database, FileText, Heart, TestTube, Pill, Activity, Upload, Download, Shield, Clock } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function HMSIntegrationPage() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [syncStatus, setSyncStatus] = useState<\"idle\" | \"syncing\" | \"complete\" | \"error\">(\"idle\");\n  const [syncProgress, setSyncProgress] = useState(0);\n  \n  const [hmsCredentials, setHmsCredentials] = useState({\n    system_type: \"\",\n    base_url: \"\",\n    username: \"\",\n    password: \"\",\n    client_id: \"\",\n    client_secret: \"\",\n    oauth_endpoint: \"\"\n  });\n\n  const [syncConfig, setSyncConfig] = useState({\n    include_vitals: true,\n    include_labs: true,\n    include_prescriptions: true,\n    include_diagnoses: true,\n    patient_ids: \"\",\n    date_from: \"\",\n    date_to: \"\"\n  });\n\n  const handleSync = async (syncType: string) => {\n    setSyncStatus(\"syncing\");\n    setSyncProgress(0);\n    \n    // Simulate sync progress\n    const interval = setInterval(() => {\n      setSyncProgress((prev) => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setSyncStatus(\"complete\");\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 500);\n  };\n\n  const syncMetrics = {\n    vitals_synced: 247,\n    labs_synced: 156,\n    prescriptions_synced: 89,\n    diagnoses_synced: 134,\n    last_sync: \"2024-06-18 18:45:23\",\n    total_patients: 67\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">HMS Integration Service</h1>\n          <p className=\"text-gray-600\">Secure microservice for hospital management system integration</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">\n            <Database className=\"w-4 h-4 mr-1\" />\n            Service Active\n          </Badge>\n          <Badge variant=\"outline\" className=\"text-blue-600 border-blue-200\">\n            Port 8001\n          </Badge>\n        </div>\n      </div>\n\n      {/* Service Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Activity className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Service Status</p>\n                <p className=\"text-2xl font-bold text-green-600\">Online</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Database className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Connected HMS</p>\n                <p className=\"text-2xl font-bold text-gray-900\">3</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Records Synced</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{syncMetrics.vitals_synced + syncMetrics.labs_synced + syncMetrics.prescriptions_synced + syncMetrics.diagnoses_synced}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-8 w-8 text-teal-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Last Sync</p>\n                <p className=\"text-sm font-bold text-gray-900\">{syncMetrics.last_sync}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Service Overview</TabsTrigger>\n          <TabsTrigger value=\"sync\">Data Synchronization</TabsTrigger>\n          <TabsTrigger value=\"config\">HMS Configuration</TabsTrigger>\n          <TabsTrigger value=\"consent\">Patient Consent</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Database className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Supported HMS Systems\n                </CardTitle>\n                <CardDescription>\n                  Compatible hospital management systems and integration methods\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-semibold\">OpenMRS</p>\n                    <p className=\"text-sm text-gray-600\">REST API + Session Auth</p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-semibold\">AfyaPro</p>\n                    <p className=\"text-sm text-gray-600\">FHIR + OAuth2</p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-semibold\">Custom EMR</p>\n                    <p className=\"text-sm text-gray-600\">Token-based Auth</p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"w-5 h-5 mr-2 text-red-600\" />\n                  Sync Statistics\n                </CardTitle>\n                <CardDescription>\n                  Real-time synchronization metrics and performance\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Activity className=\"w-4 h-4 mr-2 text-blue-600\" />\n                    Vital Signs\n                  </span>\n                  <span className=\"font-semibold\">{syncMetrics.vitals_synced}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <TestTube className=\"w-4 h-4 mr-2 text-green-600\" />\n                    Lab Results\n                  </span>\n                  <span className=\"font-semibold\">{syncMetrics.labs_synced}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Pill className=\"w-4 h-4 mr-2 text-purple-600\" />\n                    Prescriptions\n                  </span>\n                  <span className=\"font-semibold\">{syncMetrics.prescriptions_synced}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <FileText className=\"w-4 h-4 mr-2 text-orange-600\" />\n                    Diagnoses\n                  </span>\n                  <span className=\"font-semibold\">{syncMetrics.diagnoses_synced}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Available API Endpoints</CardTitle>\n              <CardDescription>HMS integration service endpoints and capabilities</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-green-600\">Synchronization Endpoints</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /sync/vitals</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /sync/labs</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /sync/prescriptions</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /sync/diagnoses</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /sync/bulk</code></div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-blue-600\">File Upload Endpoints</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /sync/file/vitals</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /sync/file/labs</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">GET /sync/status</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">POST /consent/log</code></div>\n                    <div><code className=\"bg-gray-100 px-2 py-1 rounded\">GET /consent/verify/{id}</code></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sync\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Data Synchronization Control</CardTitle>\n              <CardDescription>Configure and execute data synchronization with HMS systems</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {syncStatus === \"syncing\" && (\n                <Alert>\n                  <Activity className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Synchronization in progress... {syncProgress}%\n                    <Progress value={syncProgress} className=\"mt-2\" />\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {syncStatus === \"complete\" && (\n                <Alert className=\"border-green-200 bg-green-50\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <AlertDescription className=\"text-green-800\">\n                    Synchronization completed successfully\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Sync Configuration</h4>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"vitals\">Include Vital Signs</Label>\n                      <Switch\n                        id=\"vitals\"\n                        checked={syncConfig.include_vitals}\n                        onCheckedChange={(checked) => setSyncConfig({...syncConfig, include_vitals: checked})}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"labs\">Include Lab Results</Label>\n                      <Switch\n                        id=\"labs\"\n                        checked={syncConfig.include_labs}\n                        onCheckedChange={(checked) => setSyncConfig({...syncConfig, include_labs: checked})}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"prescriptions\">Include Prescriptions</Label>\n                      <Switch\n                        id=\"prescriptions\"\n                        checked={syncConfig.include_prescriptions}\n                        onCheckedChange={(checked) => setSyncConfig({...syncConfig, include_prescriptions: checked})}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"diagnoses\">Include Diagnoses</Label>\n                      <Switch\n                        id=\"diagnoses\"\n                        checked={syncConfig.include_diagnoses}\n                        onCheckedChange={(checked) => setSyncConfig({...syncConfig, include_diagnoses: checked})}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"patient_ids\">Patient IDs (comma-separated)</Label>\n                    <Textarea\n                      id=\"patient_ids\"\n                      placeholder=\"P001, P002, P003 or leave empty for all patients\"\n                      value={syncConfig.patient_ids}\n                      onChange={(e) => setSyncConfig({...syncConfig, patient_ids: e.target.value})}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <Label htmlFor=\"date_from\">From Date</Label>\n                      <Input\n                        id=\"date_from\"\n                        type=\"date\"\n                        value={syncConfig.date_from}\n                        onChange={(e) => setSyncConfig({...syncConfig, date_from: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"date_to\">To Date</Label>\n                      <Input\n                        id=\"date_to\"\n                        type=\"date\"\n                        value={syncConfig.date_to}\n                        onChange={(e) => setSyncConfig({...syncConfig, date_to: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Sync Actions</h4>\n                  \n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <Button\n                      onClick={() => handleSync(\"vitals\")}\n                      disabled={syncStatus === \"syncing\"}\n                      className=\"w-full\"\n                    >\n                      <Heart className=\"w-4 h-4 mr-2\" />\n                      Sync Vitals\n                    </Button>\n                    <Button\n                      onClick={() => handleSync(\"labs\")}\n                      disabled={syncStatus === \"syncing\"}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      <TestTube className=\"w-4 h-4 mr-2\" />\n                      Sync Labs\n                    </Button>\n                    <Button\n                      onClick={() => handleSync(\"prescriptions\")}\n                      disabled={syncStatus === \"syncing\"}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      <Pill className=\"w-4 h-4 mr-2\" />\n                      Sync Prescriptions\n                    </Button>\n                    <Button\n                      onClick={() => handleSync(\"diagnoses\")}\n                      disabled={syncStatus === \"syncing\"}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Sync Diagnoses\n                    </Button>\n                  </div>\n\n                  <Button\n                    onClick={() => handleSync(\"bulk\")}\n                    disabled={syncStatus === \"syncing\"}\n                    className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Bulk Synchronization\n                  </Button>\n\n                  <div className=\"border-t pt-4 space-y-3\">\n                    <h5 className=\"font-medium text-sm\">File Upload Fallback</h5>\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Upload CSV File\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Upload XML File\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"config\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>HMS System Configuration</CardTitle>\n              <CardDescription>Configure connection settings for hospital management systems</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"system_type\">HMS System Type</Label>\n                    <Select\n                      value={hmsCredentials.system_type}\n                      onValueChange={(value) => setHmsCredentials({...hmsCredentials, system_type: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select HMS type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"openmrs\">OpenMRS</SelectItem>\n                        <SelectItem value=\"afyapro\">AfyaPro</SelectItem>\n                        <SelectItem value=\"custom\">Custom EMR</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"base_url\">Base URL</Label>\n                    <Input\n                      id=\"base_url\"\n                      placeholder=\"https://hms.hospital.com\"\n                      value={hmsCredentials.base_url}\n                      onChange={(e) => setHmsCredentials({...hmsCredentials, base_url: e.target.value})}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      placeholder=\"HMS username\"\n                      value={hmsCredentials.username}\n                      onChange={(e) => setHmsCredentials({...hmsCredentials, username: e.target.value})}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      placeholder=\"HMS password\"\n                      value={hmsCredentials.password}\n                      onChange={(e) => setHmsCredentials({...hmsCredentials, password: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"client_id\">Client ID (OAuth2)</Label>\n                    <Input\n                      id=\"client_id\"\n                      placeholder=\"OAuth2 client ID\"\n                      value={hmsCredentials.client_id}\n                      onChange={(e) => setHmsCredentials({...hmsCredentials, client_id: e.target.value})}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"client_secret\">Client Secret (OAuth2)</Label>\n                    <Input\n                      id=\"client_secret\"\n                      type=\"password\"\n                      placeholder=\"OAuth2 client secret\"\n                      value={hmsCredentials.client_secret}\n                      onChange={(e) => setHmsCredentials({...hmsCredentials, client_secret: e.target.value})}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"oauth_endpoint\">OAuth2 Token Endpoint</Label>\n                    <Input\n                      id=\"oauth_endpoint\"\n                      placeholder=\"https://hms.hospital.com/oauth/token\"\n                      value={hmsCredentials.oauth_endpoint}\n                      onChange={(e) => setHmsCredentials({...hmsCredentials, oauth_endpoint: e.target.value})}\n                    />\n                  </div>\n\n                  <div className=\"pt-4\">\n                    <Button className=\"w-full\">Test Connection</Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"consent\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"w-5 h-5 mr-2 text-green-600\" />\n                Patient Consent Management\n              </CardTitle>\n              <CardDescription>\n                Manage patient consent for data synchronization and analytics\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Patient consent is required before any data synchronization. All consent is logged with fingerprint/OTP verification.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Log Patient Consent</h4>\n                  \n                  <div>\n                    <Label htmlFor=\"patient_id\">Patient ID</Label>\n                    <Input id=\"patient_id\" placeholder=\"P001234\" />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"consent_type\">Consent Type</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select consent type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"data_sync\">Data Synchronization</SelectItem>\n                        <SelectItem value=\"analytics\">Analytics Processing</SelectItem>\n                        <SelectItem value=\"sharing\">Data Sharing</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"granted_by\">Granted By</Label>\n                    <Input id=\"granted_by\" placeholder=\"Healthcare provider name\" />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"fingerprint_hash\">Fingerprint Hash</Label>\n                    <Input id=\"fingerprint_hash\" placeholder=\"SHA256 fingerprint hash\" />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"otp_code\">OTP Code</Label>\n                    <Input id=\"otp_code\" placeholder=\"6-digit OTP verification\" />\n                  </div>\n\n                  <Button className=\"w-full\">\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Log Consent\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Consent Verification</h4>\n                  \n                  <div>\n                    <Label htmlFor=\"verify_patient_id\">Patient ID</Label>\n                    <Input id=\"verify_patient_id\" placeholder=\"P001234\" />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"verify_consent_type\">Consent Type</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select consent type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"data_sync\">Data Synchronization</SelectItem>\n                        <SelectItem value=\"analytics\">Analytics Processing</SelectItem>\n                        <SelectItem value=\"sharing\">Data Sharing</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Verify Consent\n                  </Button>\n\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h5 className=\"font-medium text-sm mb-2\">Recent Consent Activities</h5>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>P001234 - Data Sync</span>\n                        <Badge variant=\"outline\" className=\"text-green-600\">Valid</Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>P001235 - Analytics</span>\n                        <Badge variant=\"outline\" className=\"text-green-600\">Valid</Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>P001236 - Data Sync</span>\n                        <Badge variant=\"outline\" className=\"text-yellow-600\">Expired</Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean • HMS Integration Service v1.0.0\n      </div>\n    </div>\n  );\n}","size_bytes":27604},"client/src/pages/home-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  FileText, Brain, Users, TrendingUp, Clock, Shield, \n  Activity, DollarSign, AlertTriangle, CheckCircle \n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface DashboardStats {\n  analytics: {\n    totalClaims: number;\n    totalAmount: number;\n    avgProcessingTime: number;\n    approvalRate: number;\n  };\n  recentDecisions: Array<{\n    id: number;\n    decision: string;\n    confidence: number;\n    requestType: string;\n    createdAt: string;\n  }>;\n  fraudAlerts: number;\n  topProviders: Array<{\n    providerId: string;\n    totalAmount: number;\n    approvalRate: number;\n  }>;\n}\n\nexport default function HomePage() {\n  const { user } = useAuth();\n\n  const { data: dashboardStats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const getRoleBasedGreeting = () => {\n    switch (user?.role) {\n      case 'front-office':\n        return \"Welcome to the Front Office Dashboard\";\n      case 'doctor':\n        return \"Welcome to the Physician Dashboard\";\n      case 'lab':\n        return \"Welcome to the Laboratory Dashboard\";\n      case 'pharmacy':\n        return \"Welcome to the Pharmacy Dashboard\";\n      case 'debtors':\n        return \"Welcome to the Debtors Management Dashboard\";\n      case 'care-manager':\n        return \"Welcome to the Care Manager Dashboard\";\n      default:\n        return \"Welcome to Erlessed\";\n    }\n  };\n\n  const getRoleSpecificActions = () => {\n    switch (user?.role) {\n      case 'front-office':\n        return [\n          { label: \"Verify Patient\", href: \"/verification\", icon: Shield },\n          { label: \"New Claim\", href: \"/claims\", icon: FileText },\n          { label: \"View Analytics\", href: \"/analytics\", icon: TrendingUp },\n        ];\n      case 'doctor':\n        return [\n          { label: \"Patient Verification\", href: \"/verification\", icon: Shield },\n          { label: \"Submit Claim\", href: \"/claims\", icon: FileText },\n          { label: \"AI Preauth\", href: \"/preauth\", icon: Brain },\n        ];\n      case 'pharmacy':\n        return [\n          { label: \"Prescription Validation\", href: \"/pharmacy\", icon: Shield },\n          { label: \"Drug Interaction Check\", href: \"/pharmacy\", icon: AlertTriangle },\n          { label: \"Benefit Categories\", href: \"/pharmacy\", icon: Activity },\n        ];\n      case 'care-manager':\n        return [\n          { label: \"Analytics Dashboard\", href: \"/analytics\", icon: TrendingUp },\n          { label: \"Provider Performance\", href: \"/analytics\", icon: Users },\n          { label: \"Fraud Detection\", href: \"/analytics\", icon: AlertTriangle },\n        ];\n      default:\n        return [\n          { label: \"Patient Verification\", href: \"/verification\", icon: Shield },\n          { label: \"Claims Processing\", href: \"/claims\", icon: FileText },\n          { label: \"AI Decisions\", href: \"/preauth\", icon: Brain },\n        ];\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">{getRoleBasedGreeting()}</h1>\n          <p className=\"text-gray-600\">\n            {user?.department && `${user.department} • `}\n            Role: {user?.role?.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n          <span className=\"text-sm text-gray-600\">System Online</span>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      {dashboardStats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Claims</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{dashboardStats.analytics.totalClaims?.toLocaleString() || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Active processing pipeline\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">AI Approval Rate</CardTitle>\n              <Brain className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{dashboardStats.analytics.approvalRate?.toFixed(1) || 0}%</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Chain-of-thought decisions\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Processing Time</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{dashboardStats.analytics.avgProcessingTime?.toFixed(1) || 0}s</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Average decision time\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Value</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">${(dashboardStats.analytics.totalAmount || 0).toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Claims processed\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>\n            Common tasks for your role\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {getRoleSpecificActions().map((action, index) => (\n              <Link key={index} href={action.href}>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full h-20 flex flex-col items-center justify-center space-y-2 hover:bg-teal-50 hover:border-teal-300\"\n                >\n                  <action.icon className=\"w-6 h-6 text-teal-600\" />\n                  <span>{action.label}</span>\n                </Button>\n              </Link>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent AI Decisions */}\n      {dashboardStats?.recentDecisions && dashboardStats.recentDecisions.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Brain className=\"w-5 h-5 text-purple-600\" />\n              <span>Recent AI Decisions</span>\n            </CardTitle>\n            <CardDescription>\n              Latest automated preauthorization decisions\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {dashboardStats.recentDecisions.slice(0, 5).map((decision) => (\n                <div key={decision.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-3 h-3 rounded-full ${\n                      decision.decision === 'approved' ? 'bg-green-500' : \n                      decision.decision === 'denied' ? 'bg-red-500' : \n                      'bg-yellow-500'\n                    }`} />\n                    <div>\n                      <p className=\"font-medium text-sm\">{decision.requestType.replace('_', ' ').toUpperCase()}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(decision.createdAt).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={\n                      decision.decision === 'approved' ? 'default' : \n                      decision.decision === 'denied' ? 'destructive' : \n                      'secondary'\n                    }>\n                      {decision.decision.toUpperCase()}\n                    </Badge>\n                    <span className=\"text-sm text-gray-500\">{decision.confidence?.toFixed(1)}%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Fraud Alerts */}\n      {dashboardStats?.fraudAlerts && dashboardStats.fraudAlerts > 0 && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            <strong>{dashboardStats.fraudAlerts} fraud alert{dashboardStats.fraudAlerts !== 1 ? 's' : ''}</strong> detected in the last 24 hours. \n            <Link href=\"/analytics\" className=\"underline ml-1\">Review suspicious activity</Link>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* System Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Activity className=\"w-5 h-5 text-green-600\" />\n            <span>System Status</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-500\" />\n              <div>\n                <p className=\"font-medium\">AI Engine</p>\n                <p className=\"text-sm text-gray-500\">Operational</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-500\" />\n              <div>\n                <p className=\"font-medium\">Blockchain Network</p>\n                <p className=\"text-sm text-gray-500\">Sepolia Connected</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-500\" />\n              <div>\n                <p className=\"font-medium\">Database</p>\n                <p className=\"text-sm text-gray-500\">Healthy</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11740},"client/src/pages/insurer-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Shield, TrendingUp, AlertTriangle, DollarSign, Clock, FileText, Settings } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { LogoutButton } from \"@/components/ui/logout-button\";\n\ninterface PreauthorizationRequest {\n  id: number;\n  patient: {\n    firstName: string;\n    lastName: string;\n    patientId: string;\n    age: number;\n    gender: string;\n    membershipNumber: string;\n    scheme: string;\n  };\n  provider: {\n    name: string;\n    type: string;\n    riskScore: number;\n  };\n  serviceType: string;\n  procedureCode: string;\n  diagnosis: string;\n  icd10Code: string;\n  clinicalJustification: string;\n  estimatedCost: number;\n  urgency: \"routine\" | \"urgent\" | \"emergency\";\n  requestedBy: string;\n  submittedAt: string;\n  aiDecision: \"approved\" | \"denied\" | \"review_required\";\n  aiConfidence: number;\n  aiReasoning: string[];\n  status: \"pending\" | \"approved\" | \"denied\" | \"review_required\";\n}\n\ninterface ClaimInflow {\n  providerId: number;\n  providerName: string;\n  todayClaims: number;\n  weekClaims: number;\n  monthClaims: number;\n  averageClaimValue: number;\n  flaggedPercentage: number;\n  lastClaimTime: string;\n}\n\ninterface SchemeUsage {\n  schemeId: number;\n  schemeName: string;\n  totalMembers: number;\n  activeMembers: number;\n  totalVisits: number;\n  benefitUtilization: number;\n  burnoutRate: number;\n  averageCostPerMember: number;\n}\n\nexport default function InsurerDashboard() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"preauth\");\n  const [selectedRequest, setSelectedRequest] = useState<PreauthorizationRequest | null>(null);\n  const [reviewNotes, setReviewNotes] = useState(\"\");\n  const [decision, setDecision] = useState<\"approved\" | \"denied\" | \"\">(\"\");\n\n  // Fetch pending preauthorization requests\n  const { data: preauthorizationRequests = [] } = useQuery({\n    queryKey: [\"/api/insurer/preauthorizations/pending\"],\n    queryFn: async () => [\n      {\n        id: 1,\n        patient: {\n          firstName: \"John\",\n          lastName: \"Doe\",\n          patientId: \"P001234\",\n          age: 45,\n          gender: \"Male\",\n          membershipNumber: \"NHIF123456789\",\n          scheme: \"NHIF Principal\"\n        },\n        provider: {\n          name: \"Aga Khan University Hospital\",\n          type: \"Hospital\",\n          riskScore: 2.1\n        },\n        serviceType: \"Cardiac Catheterization\",\n        procedureCode: \"93458\",\n        diagnosis: \"Coronary Artery Disease\",\n        icd10Code: \"I25.10\",\n        clinicalJustification: \"Patient presents with chest pain and abnormal stress test. ECG shows ST depression. Requires cardiac catheterization to assess coronary anatomy and determine need for intervention.\",\n        estimatedCost: 450000,\n        urgency: \"urgent\" as const,\n        requestedBy: \"Dr. Sarah Wilson\",\n        submittedAt: \"2024-06-18T09:30:00Z\",\n        aiDecision: \"review_required\" as const,\n        aiConfidence: 75,\n        aiReasoning: [\n          \"High-cost procedure requires careful review\",\n          \"Patient age and symptoms support clinical indication\", \n          \"Provider has good track record for this procedure\",\n          \"Previous similar cases were medically necessary\"\n        ],\n        status: \"pending\" as const\n      },\n      {\n        id: 2,\n        patient: {\n          firstName: \"Mary\",\n          lastName: \"Smith\",\n          patientId: \"P001235\",\n          age: 32,\n          gender: \"Female\",\n          membershipNumber: \"CORP987654321\",\n          scheme: \"Corporate Health Plan\"\n        },\n        provider: {\n          name: \"Kenyatta National Hospital\",\n          type: \"Hospital\",\n          riskScore: 3.2\n        },\n        serviceType: \"MRI Brain\",\n        procedureCode: \"70553\",\n        diagnosis: \"Chronic Headaches\",\n        icd10Code: \"R51\",\n        clinicalJustification: \"Patient has persistent headaches for 3 months, not responding to medication. Neurological examination normal. MRI needed to rule out secondary causes.\",\n        estimatedCost: 25000,\n        urgency: \"routine\" as const,\n        requestedBy: \"Dr. James Brown\",\n        submittedAt: \"2024-06-18T08:15:00Z\",\n        aiDecision: \"approved\" as const,\n        aiConfidence: 92,\n        aiReasoning: [\n          \"Standard diagnostic protocol for chronic headaches\",\n          \"Cost is within normal range for this procedure\",\n          \"Clinical justification is appropriate\",\n          \"No red flags in patient or provider history\"\n        ],\n        status: \"pending\" as const\n      }\n    ] as PreauthorizationRequest[],\n  });\n\n  // Fetch claim inflow data\n  const { data: claimInflow = [] } = useQuery({\n    queryKey: [\"/api/insurer/claims/inflow\"],\n    queryFn: async () => [\n      {\n        providerId: 1,\n        providerName: \"Aga Khan University Hospital\",\n        todayClaims: 45,\n        weekClaims: 287,\n        monthClaims: 1234,\n        averageClaimValue: 18500,\n        flaggedPercentage: 2.1,\n        lastClaimTime: \"2024-06-18T10:45:00Z\"\n      },\n      {\n        providerId: 2,\n        providerName: \"Kenyatta National Hospital\",\n        todayClaims: 67,\n        weekClaims: 421,\n        monthClaims: 1789,\n        averageClaimValue: 15200,\n        flaggedPercentage: 3.8,\n        lastClaimTime: \"2024-06-18T10:52:00Z\"\n      },\n      {\n        providerId: 3,\n        providerName: \"Carepoint Medical Centers\",\n        todayClaims: 123,\n        weekClaims: 834,\n        monthClaims: 3567,\n        averageClaimValue: 4200,\n        flaggedPercentage: 1.2,\n        lastClaimTime: \"2024-06-18T10:58:00Z\"\n      }\n    ] as ClaimInflow[],\n  });\n\n  // Fetch scheme usage data\n  const { data: schemeUsage = [] } = useQuery({\n    queryKey: [\"/api/insurer/schemes/usage\"],\n    queryFn: async () => [\n      {\n        schemeId: 1,\n        schemeName: \"NHIF Principal\",\n        totalMembers: 125000,\n        activeMembers: 98500,\n        totalVisits: 15600,\n        benefitUtilization: 78.5,\n        burnoutRate: 12.3,\n        averageCostPerMember: 8500\n      },\n      {\n        schemeId: 2,\n        schemeName: \"Corporate Health Plans\",\n        totalMembers: 45000,\n        activeMembers: 42000,\n        totalVisits: 8900,\n        benefitUtilization: 65.2,\n        burnoutRate: 8.7,\n        averageCostPerMember: 15200\n      }\n    ] as SchemeUsage[],\n  });\n\n  const processPreauthorizationMutation = useMutation({\n    mutationFn: async (data: {\n      requestId: number;\n      decision: \"approved\" | \"denied\";\n      reviewNotes: string;\n    }) => {\n      return apiRequest(\"/api/insurer/preauthorizations/process\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Decision Recorded\",\n        description: \"Preauthorization decision has been processed successfully\",\n      });\n      setSelectedRequest(null);\n      setReviewNotes(\"\");\n      setDecision(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/insurer/preauthorizations/pending\"] });\n    },\n  });\n\n  const processDecision = () => {\n    if (!selectedRequest || !decision) return;\n\n    processPreauthorizationMutation.mutate({\n      requestId: selectedRequest.id,\n      decision,\n      reviewNotes,\n    });\n  };\n\n  const getUrgencyBadge = (urgency: string) => {\n    const variants = {\n      routine: \"bg-green-100 text-green-800\",\n      urgent: \"bg-yellow-100 text-yellow-800\", \n      emergency: \"bg-red-100 text-red-800\"\n    };\n    return variants[urgency as keyof typeof variants] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getAIDecisionBadge = (decision: string) => {\n    const variants = {\n      approved: \"bg-green-100 text-green-800\",\n      denied: \"bg-red-100 text-red-800\",\n      review_required: \"bg-yellow-100 text-yellow-800\"\n    };\n    return variants[decision as keyof typeof variants] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getRiskScoreColor = (score: number) => {\n    if (score >= 7) return \"text-red-600\";\n    if (score >= 4) return \"text-yellow-600\";\n    return \"text-green-600\";\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 85) return \"text-green-600\";\n    if (confidence >= 70) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Insurer Dashboard</h1>\n          <p className=\"text-gray-600\">Manage preauthorizations and monitor network activity</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"outline\" className=\"text-teal-600 border-teal-200\">\n            <Shield className=\"w-4 h-4 mr-1\" />\n            Insurer\n          </Badge>\n          <LogoutButton variant=\"dropdown\" />\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"preauth\">Preauthorizations</TabsTrigger>\n          <TabsTrigger value=\"claims\">Claims Inflow</TabsTrigger>\n          <TabsTrigger value=\"schemes\">Scheme Management</TabsTrigger>\n          <TabsTrigger value=\"appeals\">Appeals</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"preauth\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Pending Requests */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"w-5 h-5 mr-2\" />\n                  Pending Requests ({preauthorizationRequests.length})\n                </CardTitle>\n                <CardDescription>\n                  AI-assisted preauthorization decisions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {preauthorizationRequests.map((request) => (\n                    <Card \n                      key={request.id} \n                      className={`cursor-pointer border-l-4 transition-colors ${\n                        selectedRequest?.id === request.id \n                          ? \"border-l-teal-500 bg-teal-50\" \n                          : \"border-l-gray-300 hover:border-l-teal-300\"\n                      }`}\n                      onClick={() => setSelectedRequest(request)}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-semibold\">\n                            {request.patient.firstName} {request.patient.lastName}\n                          </h3>\n                          <Badge className={getUrgencyBadge(request.urgency)}>\n                            {request.urgency}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-1 text-sm text-gray-600\">\n                          <div>Service: {request.serviceType}</div>\n                          <div>Provider: {request.provider.name}</div>\n                          <div>Cost: KES {request.estimatedCost.toLocaleString()}</div>\n                        </div>\n\n                        <div className=\"flex items-center justify-between mt-3\">\n                          <Badge className={getAIDecisionBadge(request.aiDecision)}>\n                            AI: {request.aiDecision.replace('_', ' ')}\n                          </Badge>\n                          <span className={`text-sm font-medium ${getConfidenceColor(request.aiConfidence)}`}>\n                            {request.aiConfidence}% confidence\n                          </span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Decision Panel */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  {selectedRequest ? \"Review Request\" : \"Select Request\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {selectedRequest ? (\n                  <div className=\"space-y-6\">\n                    {/* Patient Info */}\n                    <div>\n                      <h3 className=\"font-semibold text-lg mb-3\">Patient Information</h3>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"font-medium\">Name:</span>\n                          <div>{selectedRequest.patient.firstName} {selectedRequest.patient.lastName}</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Member ID:</span>\n                          <div>{selectedRequest.patient.membershipNumber}</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Age/Gender:</span>\n                          <div>{selectedRequest.patient.age} years, {selectedRequest.patient.gender}</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Scheme:</span>\n                          <div>{selectedRequest.patient.scheme}</div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Clinical Information */}\n                    <div>\n                      <h3 className=\"font-semibold text-lg mb-3\">Clinical Information</h3>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <span className=\"font-medium text-sm\">Diagnosis:</span>\n                          <div className=\"text-sm\">{selectedRequest.diagnosis} ({selectedRequest.icd10Code})</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-sm\">Requested Service:</span>\n                          <div className=\"text-sm\">{selectedRequest.serviceType} (Code: {selectedRequest.procedureCode})</div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-sm\">Clinical Justification:</span>\n                          <div className=\"text-sm text-gray-700 bg-gray-50 p-3 rounded\">\n                            {selectedRequest.clinicalJustification}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-sm\">Estimated Cost:</span>\n                          <div className=\"text-lg font-semibold text-teal-600\">\n                            KES {selectedRequest.estimatedCost.toLocaleString()}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* AI Analysis */}\n                    <div>\n                      <h3 className=\"font-semibold text-lg mb-3\">AI Analysis</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <Badge className={getAIDecisionBadge(selectedRequest.aiDecision)}>\n                            {selectedRequest.aiDecision.replace('_', ' ').toUpperCase()}\n                          </Badge>\n                          <span className={`font-medium ${getConfidenceColor(selectedRequest.aiConfidence)}`}>\n                            {selectedRequest.aiConfidence}% Confidence\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-sm\">AI Reasoning:</span>\n                          <ul className=\"mt-2 space-y-1\">\n                            {selectedRequest.aiReasoning.map((reason, index) => (\n                              <li key={index} className=\"text-sm text-gray-700 flex items-start\">\n                                <span className=\"text-teal-500 mr-2\">•</span>\n                                {reason}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Decision Section */}\n                    <div>\n                      <h3 className=\"font-semibold text-lg mb-3\">Your Decision</h3>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"decision\">Decision</Label>\n                          <Select value={decision} onValueChange={setDecision}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select decision\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"approved\">Approve</SelectItem>\n                              <SelectItem value=\"denied\">Deny</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"reviewNotes\">Review Notes</Label>\n                          <Textarea\n                            id=\"reviewNotes\"\n                            value={reviewNotes}\n                            onChange={(e) => setReviewNotes(e.target.value)}\n                            placeholder=\"Enter your review notes and justification\"\n                            rows={4}\n                          />\n                        </div>\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => setSelectedRequest(null)}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            onClick={processDecision}\n                            disabled={!decision || processPreauthorizationMutation.isPending}\n                            className=\"bg-teal-600 hover:bg-teal-700\"\n                          >\n                            {processPreauthorizationMutation.isPending ? \"Processing...\" : \"Submit Decision\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Select a preauthorization request to review</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"claims\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <TrendingUp className=\"w-5 h-5 mr-2\" />\n                Real-time Claims Inflow\n              </CardTitle>\n              <CardDescription>\n                Monitor claim submission patterns across providers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {claimInflow.map((provider) => (\n                  <Card key={provider.providerId} className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{provider.providerName}</h3>\n                          <p className=\"text-sm text-gray-600\">\n                            Last claim: {new Date(provider.lastClaimTime).toLocaleTimeString()}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold text-blue-600\">\n                            {provider.todayClaims}\n                          </div>\n                          <p className=\"text-sm text-gray-600\">Today</p>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-4 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold\">{provider.weekClaims}</div>\n                          <p className=\"text-xs text-gray-600\">This Week</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold\">{provider.monthClaims}</div>\n                          <p className=\"text-xs text-gray-600\">This Month</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold\">\n                            KES {provider.averageClaimValue.toLocaleString()}\n                          </div>\n                          <p className=\"text-xs text-gray-600\">Avg. Value</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className={`text-lg font-semibold ${\n                            provider.flaggedPercentage > 5 ? \"text-red-600\" : \n                            provider.flaggedPercentage > 2 ? \"text-yellow-600\" : \"text-green-600\"\n                          }`}>\n                            {provider.flaggedPercentage}%\n                          </div>\n                          <p className=\"text-xs text-gray-600\">Flagged</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"schemes\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Settings className=\"w-5 h-5 mr-2\" />\n                Scheme Usage & Configuration\n              </CardTitle>\n              <CardDescription>\n                Monitor benefit utilization and configure co-pay policies\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {schemeUsage.map((scheme) => (\n                  <Card key={scheme.schemeId} className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"font-semibold text-lg\">{scheme.schemeName}</h3>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-teal-600\">\n                          {scheme.benefitUtilization}%\n                        </div>\n                        <p className=\"text-sm text-gray-600\">Utilization</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 gap-4 mb-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">{scheme.totalMembers.toLocaleString()}</div>\n                        <p className=\"text-xs text-gray-600\">Total Members</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">{scheme.activeMembers.toLocaleString()}</div>\n                        <p className=\"text-xs text-gray-600\">Active Members</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">{scheme.totalVisits.toLocaleString()}</div>\n                        <p className=\"text-xs text-gray-600\">Total Visits</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className={`text-lg font-semibold ${\n                          scheme.burnoutRate > 15 ? \"text-red-600\" : \n                          scheme.burnoutRate > 10 ? \"text-yellow-600\" : \"text-green-600\"\n                        }`}>\n                          {scheme.burnoutRate}%\n                        </div>\n                        <p className=\"text-xs text-gray-600\">Burnout Rate</p>\n                      </div>\n                    </div>\n\n                    <Separator className=\"my-4\" />\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <span className=\"text-sm text-gray-600\">Average Cost per Member:</span>\n                        <div className=\"font-semibold\">KES {scheme.averageCostPerMember.toLocaleString()}</div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Configure Benefits\n                      </Button>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"appeals\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"w-5 h-5 mr-2\" />\n                Claims Appeals Management\n              </CardTitle>\n              <CardDescription>\n                Review and process member appeals for denied claims\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <AlertTriangle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600\">No pending appeals</p>\n                <p className=\"text-sm text-gray-500\">Member appeals will appear here for review</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean\n      </div>\n    </div>\n  );\n}","size_bytes":27297},"client/src/pages/mobile-field-worker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { MapPin, User, FileText, Camera, Phone, Navigation } from \"lucide-react\";\n\ninterface FieldVisit {\n  id: string;\n  patientName: string;\n  patientId: string;\n  address: string;\n  coordinates: { lat: number; lng: number };\n  scheduledTime: string;\n  visitType: \"assessment\" | \"follow-up\" | \"emergency\" | \"medication-delivery\";\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  status: \"scheduled\" | \"in-progress\" | \"completed\" | \"cancelled\";\n  notes?: string;\n  vitals?: {\n    bloodPressure?: string;\n    heartRate?: number;\n    temperature?: number;\n    oxygenSaturation?: number;\n  };\n}\n\ninterface PatientLocation {\n  id: string;\n  name: string;\n  address: string;\n  distance: string;\n  estimatedTime: string;\n  urgency: \"low\" | \"medium\" | \"high\";\n}\n\nexport default function MobileFieldWorker() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"visits\");\n  const [selectedVisit, setSelectedVisit] = useState<FieldVisit | null>(null);\n  const [vitals, setVitals] = useState({\n    bloodPressure: \"\",\n    heartRate: \"\",\n    temperature: \"\",\n    oxygenSaturation: \"\"\n  });\n\n  const todayVisits: FieldVisit[] = [\n    {\n      id: \"FV001\",\n      patientName: \"Mary Wanjiku\",\n      patientId: \"PAT-2024-001\",\n      address: \"Kiambu Road, Nairobi\",\n      coordinates: { lat: -1.2494, lng: 36.7816 },\n      scheduledTime: \"09:00 AM\",\n      visitType: \"assessment\",\n      priority: \"high\",\n      status: \"scheduled\"\n    },\n    {\n      id: \"FV002\",\n      patientName: \"John Kamau\",\n      patientId: \"PAT-2024-002\",\n      address: \"Westlands, Nairobi\",\n      coordinates: { lat: -1.2630, lng: 36.8063 },\n      scheduledTime: \"11:30 AM\",\n      visitType: \"follow-up\",\n      priority: \"medium\",\n      status: \"scheduled\"\n    },\n    {\n      id: \"FV003\",\n      patientName: \"Grace Achieng\",\n      patientId: \"PAT-2024-003\",\n      address: \"Karen, Nairobi\",\n      coordinates: { lat: -1.3197, lng: 36.7076 },\n      scheduledTime: \"02:00 PM\",\n      visitType: \"medication-delivery\",\n      priority: \"low\",\n      status: \"scheduled\"\n    }\n  ];\n\n  const nearbyPatients: PatientLocation[] = [\n    {\n      id: \"NP001\",\n      name: \"Samuel Ochieng\",\n      address: \"Kilimani, Nairobi\",\n      distance: \"0.8 km\",\n      estimatedTime: \"12 min\",\n      urgency: \"medium\"\n    },\n    {\n      id: \"NP002\",\n      name: \"Faith Njeri\",\n      address: \"Lavington, Nairobi\",\n      distance: \"1.2 km\",\n      estimatedTime: \"18 min\",\n      urgency: \"low\"\n    }\n  ];\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\": return \"bg-red-500\";\n      case \"high\": return \"bg-orange-500\";\n      case \"medium\": return \"bg-yellow-500\";\n      case \"low\": return \"bg-green-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"text-green-600 bg-green-50\";\n      case \"in-progress\": return \"text-blue-600 bg-blue-50\";\n      case \"scheduled\": return \"text-gray-600 bg-gray-50\";\n      case \"cancelled\": return \"text-red-600 bg-red-50\";\n      default: return \"text-gray-600 bg-gray-50\";\n    }\n  };\n\n  const startVisit = (visit: FieldVisit) => {\n    setSelectedVisit({ ...visit, status: \"in-progress\" });\n    setActiveTab(\"current-visit\");\n  };\n\n  const completeVisit = () => {\n    if (selectedVisit) {\n      const processedVitals = {\n        bloodPressure: vitals.bloodPressure,\n        heartRate: vitals.heartRate ? parseInt(vitals.heartRate) : undefined,\n        temperature: vitals.temperature ? parseFloat(vitals.temperature) : undefined,\n        oxygenSaturation: vitals.oxygenSaturation ? parseInt(vitals.oxygenSaturation) : undefined,\n      };\n      setSelectedVisit({ ...selectedVisit, status: \"completed\", vitals: processedVitals });\n      setActiveTab(\"visits\");\n      setVitals({ bloodPressure: \"\", heartRate: \"\", temperature: \"\", oxygenSaturation: \"\" });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile Header */}\n      <div className=\"bg-gradient-to-r from-teal-600 to-blue-600 text-white p-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-lg font-bold\">Erlessed Field</h1>\n            <p className=\"text-sm opacity-90\">Welcome, {user?.username}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm\">Today</p>\n            <p className=\"text-xs opacity-75\">{new Date().toLocaleDateString()}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-4\">\n            <TabsTrigger value=\"visits\" className=\"text-xs\">Visits</TabsTrigger>\n            <TabsTrigger value=\"current-visit\" className=\"text-xs\">Current</TabsTrigger>\n            <TabsTrigger value=\"nearby\" className=\"text-xs\">Nearby</TabsTrigger>\n            <TabsTrigger value=\"emergency\" className=\"text-xs\">Emergency</TabsTrigger>\n          </TabsList>\n\n          {/* Today's Visits */}\n          <TabsContent value=\"visits\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Today's Schedule</h2>\n              <Badge variant=\"secondary\">{todayVisits.length} visits</Badge>\n            </div>\n\n            {todayVisits.map((visit) => (\n              <Card key={visit.id} className=\"border-l-4 border-l-teal-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h3 className=\"font-semibold text-sm\">{visit.patientName}</h3>\n                      <p className=\"text-xs text-gray-600\">{visit.patientId}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`w-2 h-2 rounded-full ${getPriorityColor(visit.priority)}`}></div>\n                      <Badge className={getStatusColor(visit.status)} variant=\"secondary\">\n                        {visit.status}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-1 mb-3\">\n                    <div className=\"flex items-center text-xs text-gray-600\">\n                      <MapPin className=\"w-3 h-3 mr-1\" />\n                      {visit.address}\n                    </div>\n                    <div className=\"flex items-center text-xs text-gray-600\">\n                      <User className=\"w-3 h-3 mr-1\" />\n                      {visit.visitType.replace('-', ' ')} • {visit.scheduledTime}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      size=\"sm\" \n                      className=\"flex-1 bg-teal-600 hover:bg-teal-700\"\n                      onClick={() => startVisit(visit)}\n                    >\n                      <Navigation className=\"w-3 h-3 mr-1\" />\n                      Start Visit\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      <Phone className=\"w-3 h-3 mr-1\" />\n                      Call\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Current Visit */}\n          <TabsContent value=\"current-visit\" className=\"space-y-4\">\n            {selectedVisit ? (\n              <>\n                <Card className=\"border-l-4 border-l-blue-500\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg flex items-center justify-between\">\n                      {selectedVisit.patientName}\n                      <Badge className=\"bg-blue-100 text-blue-700\">In Progress</Badge>\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600\">{selectedVisit.address}</p>\n                  </CardHeader>\n                </Card>\n\n                {/* Vitals Collection */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Patient Vitals</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"bp\" className=\"text-xs\">Blood Pressure</Label>\n                        <Input\n                          id=\"bp\"\n                          placeholder=\"120/80\"\n                          value={vitals.bloodPressure}\n                          onChange={(e) => setVitals({...vitals, bloodPressure: e.target.value})}\n                          className=\"h-8 text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"hr\" className=\"text-xs\">Heart Rate</Label>\n                        <Input\n                          id=\"hr\"\n                          placeholder=\"72\"\n                          value={vitals.heartRate}\n                          onChange={(e) => setVitals({...vitals, heartRate: e.target.value})}\n                          className=\"h-8 text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"temp\" className=\"text-xs\">Temperature (°C)</Label>\n                        <Input\n                          id=\"temp\"\n                          placeholder=\"36.5\"\n                          value={vitals.temperature}\n                          onChange={(e) => setVitals({...vitals, temperature: e.target.value})}\n                          className=\"h-8 text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"o2\" className=\"text-xs\">O2 Saturation</Label>\n                        <Input\n                          id=\"o2\"\n                          placeholder=\"98\"\n                          value={vitals.oxygenSaturation}\n                          onChange={(e) => setVitals({...vitals, oxygenSaturation: e.target.value})}\n                          className=\"h-8 text-sm\"\n                        />\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full bg-gray-600 hover:bg-gray-700\">\n                      <Camera className=\"w-4 h-4 mr-2\" />\n                      Take Photo\n                    </Button>\n\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                        onClick={completeVisit}\n                      >\n                        Complete Visit\n                      </Button>\n                      <Button variant=\"outline\" className=\"flex-1\">\n                        Save & Continue\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <FileText className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Active Visit</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Start a visit from your schedule to begin patient assessment\n                  </p>\n                  <Button onClick={() => setActiveTab(\"visits\")} className=\"bg-teal-600 hover:bg-teal-700\">\n                    View Schedule\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Nearby Patients */}\n          <TabsContent value=\"nearby\" className=\"space-y-4\">\n            <h2 className=\"text-lg font-semibold\">Nearby Patients</h2>\n            \n            {nearbyPatients.map((patient) => (\n              <Card key={patient.id}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h3 className=\"font-semibold text-sm\">{patient.name}</h3>\n                      <p className=\"text-xs text-gray-600\">{patient.address}</p>\n                    </div>\n                    <Badge \n                      variant=\"secondary\" \n                      className={patient.urgency === 'medium' ? 'bg-yellow-100 text-yellow-700' : 'bg-green-100 text-green-700'}\n                    >\n                      {patient.urgency}\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"text-xs text-gray-600\">\n                      {patient.distance} • {patient.estimatedTime} away\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" className=\"flex-1 bg-teal-600 hover:bg-teal-700\">\n                      <Navigation className=\"w-3 h-3 mr-1\" />\n                      Navigate\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      <Phone className=\"w-3 h-3 mr-1\" />\n                      Call\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Emergency */}\n          <TabsContent value=\"emergency\" className=\"space-y-4\">\n            <Card className=\"border-l-4 border-l-red-500\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-red-600\">Emergency Services</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Button className=\"w-full bg-red-600 hover:bg-red-700 h-12\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Call Emergency Services\n                </Button>\n                \n                <Button className=\"w-full bg-orange-600 hover:bg-orange-700 h-12\">\n                  <User className=\"w-5 h-5 mr-2\" />\n                  Request Supervisor\n                </Button>\n                \n                <Button className=\"w-full bg-blue-600 hover:bg-blue-700 h-12\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  Report Incident\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":15103},"client/src/pages/mobile-patient-portal.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Heart, FileText, Calendar, Pill, Phone, MapPin, \n  CreditCard, Shield, Clock, CheckCircle, AlertCircle,\n  User, Camera, Download, Star\n} from \"lucide-react\";\n\ninterface Appointment {\n  id: string;\n  doctorName: string;\n  specialty: string;\n  date: string;\n  time: string;\n  location: string;\n  type: \"consultation\" | \"follow-up\" | \"procedure\" | \"test\";\n  status: \"confirmed\" | \"pending\" | \"cancelled\" | \"completed\";\n}\n\ninterface Prescription {\n  id: string;\n  medicationName: string;\n  dosage: string;\n  frequency: string;\n  prescribedBy: string;\n  dateIssued: string;\n  refillsRemaining: number;\n  status: \"active\" | \"expired\" | \"discontinued\";\n}\n\ninterface ClaimStatus {\n  id: string;\n  serviceDate: string;\n  provider: string;\n  service: string;\n  amount: number;\n  status: \"submitted\" | \"processing\" | \"approved\" | \"denied\" | \"paid\";\n  copayAmount?: number;\n}\n\ninterface HealthMetric {\n  type: string;\n  value: string;\n  unit: string;\n  date: string;\n  status: \"normal\" | \"warning\" | \"critical\";\n}\n\nexport default function MobilePatientPortal() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n\n  const appointments: Appointment[] = [\n    {\n      id: \"APT001\",\n      doctorName: \"Dr. Sarah Mwangi\",\n      specialty: \"Cardiology\",\n      date: \"2024-12-21\",\n      time: \"10:00 AM\",\n      location: \"Nairobi Hospital\",\n      type: \"consultation\",\n      status: \"confirmed\"\n    },\n    {\n      id: \"APT002\",\n      doctorName: \"Dr. James Kiprotich\",\n      specialty: \"General Practice\",\n      date: \"2024-12-28\",\n      time: \"2:30 PM\",\n      location: \"Karen Medical Center\",\n      type: \"follow-up\",\n      status: \"pending\"\n    }\n  ];\n\n  const prescriptions: Prescription[] = [\n    {\n      id: \"RX001\",\n      medicationName: \"Lisinopril 10mg\",\n      dosage: \"10mg\",\n      frequency: \"Once daily\",\n      prescribedBy: \"Dr. Sarah Mwangi\",\n      dateIssued: \"2024-12-15\",\n      refillsRemaining: 2,\n      status: \"active\"\n    },\n    {\n      id: \"RX002\",\n      medicationName: \"Metformin 500mg\",\n      dosage: \"500mg\",\n      frequency: \"Twice daily\",\n      prescribedBy: \"Dr. James Kiprotich\",\n      dateIssued: \"2024-12-10\",\n      refillsRemaining: 1,\n      status: \"active\"\n    }\n  ];\n\n  const claims: ClaimStatus[] = [\n    {\n      id: \"CLM001\",\n      serviceDate: \"2024-12-15\",\n      provider: \"Nairobi Hospital\",\n      service: \"Cardiology Consultation\",\n      amount: 8500,\n      status: \"approved\",\n      copayAmount: 1000\n    },\n    {\n      id: \"CLM002\",\n      serviceDate: \"2024-12-10\",\n      provider: \"Lab Quest\",\n      service: \"Blood Tests\",\n      amount: 3200,\n      status: \"processing\"\n    }\n  ];\n\n  const healthMetrics: HealthMetric[] = [\n    { type: \"Blood Pressure\", value: \"118/75\", unit: \"mmHg\", date: \"2024-12-19\", status: \"normal\" },\n    { type: \"Heart Rate\", value: \"72\", unit: \"bpm\", date: \"2024-12-19\", status: \"normal\" },\n    { type: \"Blood Sugar\", value: \"95\", unit: \"mg/dL\", date: \"2024-12-18\", status: \"normal\" },\n    { type: \"Weight\", value: \"68.5\", unit: \"kg\", date: \"2024-12-17\", status: \"normal\" }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"confirmed\": case \"approved\": case \"active\": case \"paid\":\n        return \"text-green-600 bg-green-50\";\n      case \"pending\": case \"processing\": case \"submitted\":\n        return \"text-yellow-600 bg-yellow-50\";\n      case \"cancelled\": case \"denied\": case \"expired\":\n        return \"text-red-600 bg-red-50\";\n      case \"completed\":\n        return \"text-blue-600 bg-blue-50\";\n      default:\n        return \"text-gray-600 bg-gray-50\";\n    }\n  };\n\n  const getHealthStatusColor = (status: string) => {\n    switch (status) {\n      case \"normal\": return \"text-green-600\";\n      case \"warning\": return \"text-yellow-600\";\n      case \"critical\": return \"text-red-600\";\n      default: return \"text-gray-600\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile Header */}\n      <div className=\"bg-gradient-to-r from-teal-600 to-blue-600 text-white p-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-lg font-bold\">My Health Portal</h1>\n            <p className=\"text-sm opacity-90\">Welcome back, {user?.username}</p>\n          </div>\n          <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center\">\n            <User className=\"w-5 h-5\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5 mb-4\">\n            <TabsTrigger value=\"dashboard\" className=\"text-xs\">Home</TabsTrigger>\n            <TabsTrigger value=\"appointments\" className=\"text-xs\">Visits</TabsTrigger>\n            <TabsTrigger value=\"prescriptions\" className=\"text-xs\">Meds</TabsTrigger>\n            <TabsTrigger value=\"claims\" className=\"text-xs\">Claims</TabsTrigger>\n            <TabsTrigger value=\"health\" className=\"text-xs\">Health</TabsTrigger>\n          </TabsList>\n\n          {/* Dashboard */}\n          <TabsContent value=\"dashboard\" className=\"space-y-4\">\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Card className=\"border-l-4 border-l-teal-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"w-5 h-5 text-teal-600\" />\n                    <div>\n                      <p className=\"text-xs text-gray-600\">Next Visit</p>\n                      <p className=\"text-sm font-semibold\">Dec 21</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-l-4 border-l-blue-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Pill className=\"w-5 h-5 text-blue-600\" />\n                    <div>\n                      <p className=\"text-xs text-gray-600\">Active Meds</p>\n                      <p className=\"text-sm font-semibold\">{prescriptions.filter(p => p.status === 'active').length}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Claim Approved</p>\n                    <p className=\"text-xs text-gray-600\">Cardiology consultation - KES 8,500</p>\n                    <p className=\"text-xs text-gray-500\">2 hours ago</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <Calendar className=\"w-4 h-4 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Appointment Confirmed</p>\n                    <p className=\"text-xs text-gray-600\">Dr. Sarah Mwangi - Dec 21, 10:00 AM</p>\n                    <p className=\"text-xs text-gray-500\">Yesterday</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                    <Pill className=\"w-4 h-4 text-purple-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Prescription Refilled</p>\n                    <p className=\"text-xs text-gray-600\">Lisinopril 10mg - 2 refills remaining</p>\n                    <p className=\"text-xs text-gray-500\">3 days ago</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <Button className=\"h-16 flex-col bg-teal-600 hover:bg-teal-700\">\n                    <Calendar className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Book Visit</span>\n                  </Button>\n                  <Button className=\"h-16 flex-col\" variant=\"outline\">\n                    <Pill className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Refill Rx</span>\n                  </Button>\n                  <Button className=\"h-16 flex-col\" variant=\"outline\">\n                    <FileText className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">View Records</span>\n                  </Button>\n                  <Button className=\"h-16 flex-col\" variant=\"outline\">\n                    <Phone className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Contact Care</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Appointments */}\n          <TabsContent value=\"appointments\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">My Appointments</h2>\n              <Button size=\"sm\" className=\"bg-teal-600 hover:bg-teal-700\">\n                <Calendar className=\"w-4 h-4 mr-1\" />\n                Book\n              </Button>\n            </div>\n\n            {appointments.map((appointment) => (\n              <Card key={appointment.id} className=\"border-l-4 border-l-blue-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h3 className=\"font-semibold text-sm\">{appointment.doctorName}</h3>\n                      <p className=\"text-xs text-gray-600\">{appointment.specialty}</p>\n                    </div>\n                    <Badge className={getStatusColor(appointment.status)} variant=\"secondary\">\n                      {appointment.status}\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-1 mb-3\">\n                    <div className=\"flex items-center text-xs text-gray-600\">\n                      <Calendar className=\"w-3 h-3 mr-1\" />\n                      {appointment.date} at {appointment.time}\n                    </div>\n                    <div className=\"flex items-center text-xs text-gray-600\">\n                      <MapPin className=\"w-3 h-3 mr-1\" />\n                      {appointment.location}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      Reschedule\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      <Phone className=\"w-3 h-3 mr-1\" />\n                      Call\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Prescriptions */}\n          <TabsContent value=\"prescriptions\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">My Medications</h2>\n              <Button size=\"sm\" className=\"bg-teal-600 hover:bg-teal-700\">\n                <Pill className=\"w-4 h-4 mr-1\" />\n                Refill\n              </Button>\n            </div>\n\n            {prescriptions.map((prescription) => (\n              <Card key={prescription.id} className=\"border-l-4 border-l-green-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h3 className=\"font-semibold text-sm\">{prescription.medicationName}</h3>\n                      <p className=\"text-xs text-gray-600\">{prescription.dosage} • {prescription.frequency}</p>\n                    </div>\n                    <Badge className={getStatusColor(prescription.status)} variant=\"secondary\">\n                      {prescription.status}\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-1 mb-3\">\n                    <div className=\"flex items-center text-xs text-gray-600\">\n                      <User className=\"w-3 h-3 mr-1\" />\n                      Prescribed by {prescription.prescribedBy}\n                    </div>\n                    <div className=\"flex items-center text-xs text-gray-600\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      Issued {prescription.dateIssued}\n                    </div>\n                    <div className=\"text-xs text-green-600\">\n                      {prescription.refillsRemaining} refills remaining\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" className=\"flex-1 bg-green-600 hover:bg-green-700\">\n                      Request Refill\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      Set Reminder\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Claims */}\n          <TabsContent value=\"claims\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Claims Status</h2>\n              <Button size=\"sm\" className=\"bg-teal-600 hover:bg-teal-700\">\n                <FileText className=\"w-4 h-4 mr-1\" />\n                Submit\n              </Button>\n            </div>\n\n            {claims.map((claim) => (\n              <Card key={claim.id} className=\"border-l-4 border-l-purple-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h3 className=\"font-semibold text-sm\">{claim.service}</h3>\n                      <p className=\"text-xs text-gray-600\">{claim.provider}</p>\n                    </div>\n                    <Badge className={getStatusColor(claim.status)} variant=\"secondary\">\n                      {claim.status}\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-1 mb-3\">\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-gray-600\">Service Date:</span>\n                      <span>{claim.serviceDate}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-gray-600\">Total Amount:</span>\n                      <span className=\"font-medium\">KES {claim.amount.toLocaleString()}</span>\n                    </div>\n                    {claim.copayAmount && (\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-gray-600\">Your Copay:</span>\n                        <span className=\"text-red-600\">KES {claim.copayAmount.toLocaleString()}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      <Download className=\"w-3 h-3 mr-1\" />\n                      Download\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      View Details\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Health Metrics */}\n          <TabsContent value=\"health\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Health Metrics</h2>\n              <Button size=\"sm\" className=\"bg-teal-600 hover:bg-teal-700\">\n                <Heart className=\"w-4 h-4 mr-1\" />\n                Log Data\n              </Button>\n            </div>\n\n            {/* Health Score */}\n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-semibold\">Health Score</h3>\n                  <Badge className=\"bg-green-100 text-green-700\">Excellent</Badge>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex-1\">\n                    <Progress value={85} className=\"h-2\" />\n                  </div>\n                  <span className=\"text-2xl font-bold text-green-600\">85</span>\n                </div>\n                <p className=\"text-xs text-gray-600 mt-2\">\n                  Based on your recent vitals and health data\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Recent Metrics */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              {healthMetrics.map((metric, index) => (\n                <Card key={index}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"text-sm font-medium\">{metric.type}</h4>\n                      <div className={`w-2 h-2 rounded-full ${\n                        metric.status === 'normal' ? 'bg-green-500' :\n                        metric.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'\n                      }`}></div>\n                    </div>\n                    <div className=\"text-lg font-bold\">{metric.value}</div>\n                    <div className=\"text-xs text-gray-600\">{metric.unit}</div>\n                    <div className=\"text-xs text-gray-500 mt-1\">{metric.date}</div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Quick Health Actions */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Health Tools</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <Button className=\"h-16 flex-col\" variant=\"outline\">\n                    <Camera className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Symptom Check</span>\n                  </Button>\n                  <Button className=\"h-16 flex-col\" variant=\"outline\">\n                    <Heart className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Vitals Log</span>\n                  </Button>\n                  <Button className=\"h-16 flex-col\" variant=\"outline\">\n                    <FileText className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Health Report</span>\n                  </Button>\n                  <Button className=\"h-16 flex-col\" variant=\"outline\">\n                    <Star className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Wellness Tips</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":20725},"client/src/pages/modern-admin-dashboard-light.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  ArrowRight,\n  Users,\n  FileText,\n  TrendingUp,\n  DollarSign,\n  UserCheck,\n  Building,\n  Activity,\n  ShieldCheck,\n  Eye,\n  LogOut,\n  Home,\n  FileBarChart,\n  UserCog,\n  History,\n  Settings\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n// Sidebar Component with light theme\nfunction Sidebar({ user }: { user: any }) {\n  const [activeItem, setActiveItem] = useState(\"dashboard\");\n  const { logout } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const menuItems = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: Home, href: \"/modern-admin\" },\n    { id: \"users\", label: \"User Management\", icon: UserCog, href: \"/modern-admin/users\" },\n    { id: \"providers\", label: \"Care Providers\", icon: Building, href: \"/modern-admin/providers\" },\n    { id: \"license\", label: \"License Validation\", icon: ShieldCheck, href: \"/modern-admin/license\" },\n    { id: \"audit\", label: \"Audit Logs\", icon: History, href: \"/modern-admin/audit\" },\n    { id: \"settings\", label: \"Global Settings\", icon: Settings, href: \"/modern-admin/settings\" }\n  ];\n\n  return (\n    <div className=\"w-64 bg-white border-r border-gray-200 shadow-sm\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <h1 className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#265651] to-[#6BBDB4]\">\n          Erlessed\n        </h1>\n        <p className=\"text-sm text-gray-600 mt-1\">Admin Dashboard</p>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <p className=\"text-sm font-medium text-gray-900\">{user.name}</p>\n        <p className=\"text-xs text-[#265651] mt-1 capitalize\">{user.role}</p>\n        {user.isPremium && (\n          <span className=\"inline-block mt-2 px-2 py-1 text-xs bg-gradient-to-r from-[#265651] to-[#6BBDB4] rounded-full text-white\">\n            Premium\n          </span>\n        )}\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeItem === item.id;\n            \n            return (\n              <li key={item.id}>\n                <Link href={item.href}>\n                  <div\n                    onClick={() => setActiveItem(item.id)}\n                    className={cn(\n                      \"flex items-center gap-3 px-3 py-2 rounded-lg transition-all cursor-pointer\",\n                      isActive\n                        ? \"bg-gradient-to-r from-[#265651]/10 to-[#6BBDB4]/10 text-[#265651] border border-[#6BBDB4]/30\"\n                        : \"hover:bg-gray-100 text-gray-700 hover:text-[#265651]\"\n                    )}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{item.label}</span>\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Logout Button */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <Button \n          variant=\"ghost\" \n          className=\"w-full justify-start text-gray-700 hover:text-[#265651] hover:bg-gray-100\"\n          onClick={async () => {\n            await logout();\n            setLocation(\"/modern-auth\");\n          }}\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Welcome Card Component\nfunction WelcomeCard({ user }: { user: any }) {\n  return (\n    <Card className=\"bg-gradient-to-r from-[#265651] to-[#6BBDB4] border-0 shadow-md text-white\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">\n              Welcome back, {user.name}!\n            </h2>\n            <p className=\"text-white/90 mt-1\">\n              Here's your system overview for today\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-white/80\">\n              {new Date().toLocaleDateString('en-US', { \n                weekday: 'long', \n                year: 'numeric', \n                month: 'long', \n                day: 'numeric' \n              })}\n            </p>\n            <Badge className=\"mt-2 bg-white/20 text-white border-white/30\">\n              Admin Access\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Stats Component\nfunction QuickStats({ user }: { user: any }) {\n  const stats = [\n    {\n      label: \"Total Users\",\n      value: \"2,847\",\n      change: \"+12%\",\n      changeType: \"positive\",\n      icon: Users,\n      color: \"text-[#265651]\",\n      bgColor: \"bg-[#265651]/10\"\n    },\n    {\n      label: \"Active Claims\",\n      value: \"156\",\n      change: \"+8%\",\n      changeType: \"positive\",\n      icon: FileText,\n      color: \"text-[#6BBDB4]\",\n      bgColor: \"bg-[#6BBDB4]/10\"\n    },\n    {\n      label: \"System Health\",\n      value: \"98.5%\",\n      change: \"+0.5%\",\n      changeType: \"positive\",\n      icon: Activity,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\"\n    },\n    {\n      label: \"Monthly Revenue\",\n      value: \"KES 2.4M\",\n      change: \"+18%\",\n      changeType: \"positive\",\n      icon: DollarSign,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        \n        return (\n          <Card key={index} className=\"bg-white border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">{stat.label}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-1\">{stat.value}</p>\n                  <div className=\"flex items-center mt-2\">\n                    <span className={cn(\n                      \"text-sm font-medium\",\n                      stat.changeType === \"positive\" ? \"text-green-600\" : \"text-red-600\"\n                    )}>\n                      {stat.change}\n                    </span>\n                    <span className=\"text-sm text-gray-500 ml-1\">vs last month</span>\n                  </div>\n                </div>\n                <div className={cn(\"p-3 rounded-lg\", stat.bgColor)}>\n                  <Icon className={cn(\"w-6 h-6\", stat.color)} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n// Recent Claims Component\nfunction RecentClaims() {\n  const recentClaims = [\n    {\n      id: \"CLM-2024-001\",\n      patient: \"John Kamau\",\n      provider: \"Aga Khan Hospital\",\n      amount: \"KES 45,000\",\n      status: \"approved\",\n      date: \"2 hours ago\"\n    },\n    {\n      id: \"CLM-2024-002\",\n      patient: \"Mary Wanjiru\",\n      provider: \"Nairobi Hospital\",\n      amount: \"KES 28,500\",\n      status: \"pending\",\n      date: \"3 hours ago\"\n    },\n    {\n      id: \"CLM-2024-003\",\n      patient: \"Peter Ochieng\",\n      provider: \"MP Shah Hospital\",\n      amount: \"KES 67,200\",\n      status: \"rejected\",\n      date: \"5 hours ago\"\n    },\n    {\n      id: \"CLM-2024-004\",\n      patient: \"Grace Muthoni\",\n      provider: \"Kenyatta Hospital\",\n      amount: \"KES 15,800\",\n      status: \"approved\",\n      date: \"6 hours ago\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"text-gray-900\">Recent Claims</CardTitle>\n        <Button variant=\"ghost\" size=\"sm\" className=\"text-[#265651] hover:text-[#265651]/80\">\n          View All <ArrowRight className=\"ml-2 h-4 w-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {recentClaims.map((claim) => (\n            <div key={claim.id} className=\"flex items-center justify-between p-4 rounded-lg bg-gray-50 border border-gray-200 hover:bg-gray-100 transition-colors\">\n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-gray-900\">{claim.id}</span>\n                  <Badge \n                    variant={\n                      claim.status === \"approved\" ? \"default\" : \n                      claim.status === \"pending\" ? \"secondary\" : \"destructive\"\n                    }\n                    className={cn(\n                      claim.status === \"approved\" && \"bg-green-100 text-green-700 border-green-300\",\n                      claim.status === \"pending\" && \"bg-yellow-100 text-yellow-700 border-yellow-300\",\n                      claim.status === \"rejected\" && \"bg-red-100 text-red-700 border-red-300\"\n                    )}\n                  >\n                    {claim.status}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {claim.patient} • {claim.provider}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold text-gray-900\">{claim.amount}</p>\n                <p className=\"text-xs text-gray-500\">{claim.date}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Actions Component\nfunction QuickActions({ user }: { user: any }) {\n  const actions = [\n    {\n      label: \"Add New User\",\n      description: \"Create a new system user\",\n      icon: UserCheck,\n      color: \"from-[#265651] to-[#265651]/80\",\n      href: \"/modern-admin/users/new\"\n    },\n    {\n      label: \"System Health\",\n      description: \"View system diagnostics\",\n      icon: Activity,\n      color: \"from-[#6BBDB4] to-[#6BBDB4]/80\",\n      href: \"/modern-admin/health\"\n    },\n    {\n      label: \"Security Audit\",\n      description: \"Review security logs\",\n      icon: ShieldCheck,\n      color: \"from-purple-500 to-purple-600\",\n      href: \"/modern-admin/security\"\n    },\n    {\n      label: \"View Reports\",\n      description: \"Analytics & insights\",\n      icon: Eye,\n      color: \"from-orange-500 to-orange-600\",\n      href: \"/modern-admin/reports\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-900\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {actions.map((action, index) => {\n            const Icon = action.icon;\n            \n            return (\n              <Link key={index} href={action.href}>\n                <div className=\"block p-4 rounded-lg bg-gray-50 border border-gray-200 hover:border-[#6BBDB4] hover:bg-[#6BBDB4]/5 transition-all group cursor-pointer\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className={`p-3 rounded-lg bg-gradient-to-r ${action.color} group-hover:scale-110 transition-transform`}>\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900 group-hover:text-[#265651] transition-colors\">\n                        {action.label}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {action.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Main Component\nexport default function ModernAdminDashboard() {\n  const { user } = useAuth();\n  \n  const dashboardUser = {\n    name: user?.name || \"Administrator\",\n    role: user?.role || \"admin\",\n    isPremium: true\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#e8f5f0] via-[#f0faf7] to-[#d1e7e0]\">\n      <Sidebar user={dashboardUser} />\n      <main className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n        <WelcomeCard user={dashboardUser} />\n        <QuickStats user={dashboardUser} />\n        <RecentClaims />\n        <QuickActions user={dashboardUser} />\n      </main>\n    </div>\n  );\n}","size_bytes":12699},"client/src/pages/modern-admin-dashboard.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Users, \n  Building2, \n  CheckCircle, \n  FileText, \n  Settings,\n  LayoutDashboard,\n  LogOut,\n  Activity,\n  TrendingUp,\n  Database,\n  Brain,\n  ChevronRight,\n  Shield,\n  UserCheck,\n  Server,\n  Clock,\n  AlertCircle,\n  ArrowUp,\n  ArrowDown,\n  Eye,\n  DollarSign,\n  ShieldCheck\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Sidebar Component\nfunction Sidebar({ user }: { user: any }) {\n  const [location] = useLocation();\n  const { logout } = useAuth();\n\n  const menuItems = [\n    { path: \"/modern-admin\", label: \"Dashboard\", icon: LayoutDashboard },\n    { path: \"/modern-admin/users\", label: \"User Management\", icon: Users },\n    { path: \"/modern-admin/providers\", label: \"Care Providers\", icon: Building2 },\n    { path: \"/modern-admin/validation\", label: \"License Validation\", icon: CheckCircle },\n    { path: \"/modern-admin/audit\", label: \"Audit Logs\", icon: FileText },\n    { path: \"/modern-admin/settings\", label: \"Global Settings\", icon: Settings }\n  ];\n\n  return (\n    <div className=\"w-64 bg-[#0a0a2e] border-r border-[#1a1a5e] p-6 h-screen flex flex-col\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#265651] to-[#6BBDB4]\">\n          Erlessed\n        </h1>\n        <p className=\"text-sm text-gray-400 mt-1\">Healthcare Platform</p>\n      </div>\n\n      <div className=\"mb-8 p-4 bg-[#1a1150] rounded-lg border border-[#2a1a5e]\">\n        <p className=\"text-sm text-gray-400\">Logged in as</p>\n        <p className=\"font-semibold text-white\">{user.name}</p>\n        <p className=\"text-xs text-[#6BBDB4] mt-1 capitalize\">{user.role}</p>\n        {user.isPremium && (\n          <span className=\"inline-block mt-2 px-2 py-1 text-xs bg-gradient-to-r from-[#265651] to-[#6BBDB4] rounded-full text-white\">\n            Premium\n          </span>\n        )}\n      </div>\n\n      <nav className=\"space-y-2 flex-1\">\n        {menuItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 cursor-pointer\",\n                  isActive\n                    ? \"bg-gradient-to-r from-[#265651]/20 to-[#6BBDB4]/20 text-white border border-[#6BBDB4]/30\"\n                    : \"text-gray-400 hover:text-white hover:bg-[#1a1150]\"\n                )}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <div className=\"pt-8\">\n        <button\n          onClick={logout}\n          className=\"flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-400 hover:text-white hover:bg-[#1a1150] w-full transition-all duration-200\"\n        >\n          <LogOut className=\"w-5 h-5\" />\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// Welcome Card Component\nfunction WelcomeCard({ user }: { user: any }) {\n  return (\n    <Card className=\"bg-gradient-to-r from-[#1a1150] to-[#2a1a5e] border-[#3a2a6e]\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-2\">\n          Welcome back, {user.name}!\n        </h2>\n        <p className=\"text-gray-300\">\n          Monitor platform health, manage users, and configure system settings from your admin dashboard.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Stats Component\nfunction QuickStats({ user }: { user: any }) {\n  const stats = [\n    {\n      label: \"Total Users\",\n      value: \"1,247\",\n      change: \"+12%\",\n      trend: \"up\",\n      icon: Users,\n      color: \"from-blue-500 to-blue-600\"\n    },\n    {\n      label: \"Active Claims\",\n      value: \"892\",\n      change: \"+8%\",\n      trend: \"up\",\n      icon: Activity,\n      color: \"from-green-500 to-green-600\"\n    },\n    {\n      label: \"System Uptime\",\n      value: \"99.8%\",\n      change: \"+0.2%\",\n      trend: \"up\",\n      icon: Server,\n      color: \"from-purple-500 to-purple-600\"\n    },\n    {\n      label: \"Revenue\",\n      value: \"KES 4.2M\",\n      change: \"+15%\",\n      trend: \"up\",\n      icon: DollarSign,\n      color: \"from-orange-500 to-orange-600\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        const TrendIcon = stat.trend === \"up\" ? ArrowUp : ArrowDown;\n        \n        return (\n          <Card key={index} className=\"bg-[#1a1150] border-[#2a1a5e] hover:border-[#3a2a6e] transition-all\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`p-3 rounded-lg bg-gradient-to-r ${stat.color}`}>\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <Badge \n                  variant=\"secondary\" \n                  className={cn(\n                    \"flex items-center gap-1\",\n                    stat.trend === \"up\" ? \"text-green-400\" : \"text-red-400\"\n                  )}\n                >\n                  <TrendIcon className=\"w-3 h-3\" />\n                  {stat.change}\n                </Badge>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white\">{stat.value}</h3>\n              <p className=\"text-sm text-gray-400 mt-1\">{stat.label}</p>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n// Recent Claims Component\nfunction RecentClaims() {\n  const claims = [\n    {\n      id: \"CLM-2024-001\",\n      patient: \"John Kamau\",\n      provider: \"Aga Khan Hospital\",\n      amount: \"KES 45,000\",\n      status: \"approved\",\n      date: \"2 hours ago\"\n    },\n    {\n      id: \"CLM-2024-002\",\n      patient: \"Mary Wanjiru\",\n      provider: \"Nairobi Hospital\",\n      amount: \"KES 28,500\",\n      status: \"pending\",\n      date: \"3 hours ago\"\n    },\n    {\n      id: \"CLM-2024-003\",\n      patient: \"Peter Ochieng\",\n      provider: \"MP Shah Hospital\",\n      amount: \"KES 67,200\",\n      status: \"rejected\",\n      date: \"5 hours ago\"\n    },\n    {\n      id: \"CLM-2024-004\",\n      patient: \"Grace Muthoni\",\n      provider: \"Kenyatta Hospital\",\n      amount: \"KES 15,800\",\n      status: \"approved\",\n      date: \"6 hours ago\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-[#1a1150] border-[#2a1a5e]\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-white\">Recent Claims Activity</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-[#6BBDB4] hover:text-[#6BBDB4]/80\">\n            View All\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {claims.map((claim) => (\n            <div \n              key={claim.id} \n              className=\"flex items-center justify-between p-4 rounded-lg bg-[#0a0a2e] border border-[#2a1a5e] hover:border-[#3a2a6e] transition-all\"\n            >\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-3\">\n                  <h4 className=\"font-medium text-white\">{claim.id}</h4>\n                  <Badge \n                    variant={\n                      claim.status === \"approved\" ? \"default\" :\n                      claim.status === \"pending\" ? \"secondary\" : \"destructive\"\n                    }\n                    className={cn(\n                      claim.status === \"approved\" && \"bg-green-500/20 text-green-400 border-green-500/30\",\n                      claim.status === \"pending\" && \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n                      claim.status === \"rejected\" && \"bg-red-500/20 text-red-400 border-red-500/30\"\n                    )}\n                  >\n                    {claim.status}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-gray-400 mt-1\">\n                  {claim.patient} • {claim.provider}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold text-white\">{claim.amount}</p>\n                <p className=\"text-xs text-gray-400\">{claim.date}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Actions Component\nfunction QuickActions({ user }: { user: any }) {\n  const actions = [\n    {\n      label: \"Add New User\",\n      description: \"Create a new system user\",\n      icon: UserCheck,\n      color: \"from-blue-500 to-blue-600\",\n      href: \"/modern-admin/users/new\"\n    },\n    {\n      label: \"System Health\",\n      description: \"View system diagnostics\",\n      icon: Activity,\n      color: \"from-green-500 to-green-600\",\n      href: \"/modern-admin/health\"\n    },\n    {\n      label: \"Security Audit\",\n      description: \"Review security logs\",\n      icon: ShieldCheck,\n      color: \"from-purple-500 to-purple-600\",\n      href: \"/modern-admin/security\"\n    },\n    {\n      label: \"View Reports\",\n      description: \"Analytics & insights\",\n      icon: Eye,\n      color: \"from-orange-500 to-orange-600\",\n      href: \"/modern-admin/reports\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-[#1a1150] border-[#2a1a5e]\">\n      <CardHeader>\n        <CardTitle className=\"text-white\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {actions.map((action, index) => {\n            const Icon = action.icon;\n            \n            return (\n              <Link key={index} href={action.href}>\n                <div className=\"block p-4 rounded-lg bg-[#0a0a2e] border border-[#2a1a5e] hover:border-[#3a2a6e] transition-all group cursor-pointer\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className={`p-3 rounded-lg bg-gradient-to-r ${action.color} group-hover:scale-110 transition-transform`}>\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-white group-hover:text-[#6BBDB4] transition-colors\">\n                        {action.label}\n                      </h4>\n                      <p className=\"text-sm text-gray-400 mt-1\">\n                        {action.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Main Component\nexport default function ModernAdminDashboard() {\n  const { user } = useAuth();\n  \n  const dashboardUser = {\n    name: user?.name || \"Administrator\",\n    role: user?.role || \"admin\",\n    isPremium: true\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#e8f5f0] via-[#f0faf7] to-[#d1e7e0] text-gray-900\">\n      <Sidebar user={dashboardUser} />\n      <main className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n        <WelcomeCard user={dashboardUser} />\n        <QuickStats user={dashboardUser} />\n        <RecentClaims />\n        <QuickActions user={dashboardUser} />\n      </main>\n    </div>\n  );\n}","size_bytes":11652},"client/src/pages/modern-admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { SharedLayout } from \"@/components/layout/shared-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Users, \n  Building2, \n  Shield, \n  FileText, \n  Settings, \n  Database, \n  Brain, \n  Link,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Search,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Download,\n  Upload,\n  Activity,\n  Clock,\n  Globe,\n  Zap\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst sidebarItems = [\n  { path: \"/modern-admin\", icon: <Users className=\"h-5 w-5\" />, label: \"User Management\" },\n  { path: \"/modern-admin/providers\", icon: <Building2 className=\"h-5 w-5\" />, label: \"Care Providers\" },\n  { path: \"/modern-admin/licenses\", icon: <Shield className=\"h-5 w-5\" />, label: \"License Validation\" },\n  { path: \"/modern-admin/logs\", icon: <FileText className=\"h-5 w-5\" />, label: \"Audit Logs\" },\n  { path: \"/modern-admin/settings\", icon: <Settings className=\"h-5 w-5\" />, label: \"Global Settings\" }\n];\n\n// Mock data for demonstration\nconst mockUsers = [\n  {\n    id: 1,\n    name: \"Dr. Sarah Mwangi\",\n    email: \"sarah.mwangi@nairobi.hospital\",\n    role: \"doctor\",\n    careProvider: \"Nairobi Hospital\",\n    licenseStatus: \"verified\",\n    licenseNumber: \"DOC/2024/001\",\n    registrationBoard: \"KMPDC\",\n    lastLogin: \"2024-06-24 14:30\",\n    status: \"active\"\n  },\n  {\n    id: 2,\n    name: \"John Kiprotich\",\n    email: \"j.kiprotich@agakhan.org\",\n    role: \"pharmacist\",\n    careProvider: \"Aga Khan Hospital\",\n    licenseStatus: \"pending\",\n    licenseNumber: \"PHARM/2024/045\",\n    registrationBoard: \"PPB\",\n    lastLogin: \"2024-06-24 09:15\",\n    status: \"active\"\n  },\n  {\n    id: 3,\n    name: \"Grace Mutindi\",\n    email: \"g.mutindi@caremanager.co.ke\",\n    role: \"care-manager\",\n    careProvider: \"Independent\",\n    licenseStatus: \"not_required\",\n    licenseNumber: \"N/A\",\n    registrationBoard: \"N/A\",\n    lastLogin: \"2024-06-23 16:45\",\n    status: \"active\"\n  },\n  {\n    id: 4,\n    name: \"Dr. Michael Ochieng\",\n    email: \"m.ochieng@mtrh.go.ke\",\n    role: \"doctor\",\n    careProvider: \"Moi Teaching Hospital\",\n    licenseStatus: \"expired\",\n    licenseNumber: \"DOC/2023/089\",\n    registrationBoard: \"KMPDC\",\n    lastLogin: \"2024-06-20 11:20\",\n    status: \"suspended\"\n  }\n];\n\nconst mockCareProviders = [\n  {\n    id: 1,\n    name: \"Nairobi Hospital\",\n    domain: \"nairobi.hospital\",\n    type: \"Private Hospital\",\n    location: \"Nairobi\",\n    compliance: \"excellent\",\n    activeUsers: 45,\n    totalClaims: 1250,\n    approvalRate: 94.5,\n    lastActivity: \"2024-06-24 15:30\",\n    accreditation: \"JCI Accredited\"\n  },\n  {\n    id: 2,\n    name: \"Aga Khan Hospital\",\n    domain: \"agakhan.org\",\n    type: \"Private Hospital\",\n    location: \"Nairobi\",\n    compliance: \"good\",\n    activeUsers: 38,\n    totalClaims: 980,\n    approvalRate: 91.2,\n    lastActivity: \"2024-06-24 14:15\",\n    accreditation: \"ISO 9001\"\n  },\n  {\n    id: 3,\n    name: \"Kenyatta Hospital\",\n    domain: \"knh.or.ke\",\n    type: \"Public Hospital\",\n    location: \"Nairobi\",\n    compliance: \"average\",\n    activeUsers: 125,\n    totalClaims: 2100,\n    approvalRate: 87.8,\n    lastActivity: \"2024-06-24 13:45\",\n    accreditation: \"COHSASA\"\n  }\n];\n\nconst mockSystemHealth = {\n  database: { status: \"healthy\", responseTime: \"12ms\", uptime: \"99.9%\" },\n  intelligenceEngine: { status: \"healthy\", responseTime: \"340ms\", uptime: \"99.7%\" },\n  blockchain: { status: \"warning\", responseTime: \"1200ms\", uptime: \"98.5%\" },\n  lastUpdate: \"2024-06-24 15:32:45\"\n};\n\n// Domain mapping for auto-detection\nconst careProviderDomains = {\n  \"nairobi.hospital\": \"Nairobi Hospital\",\n  \"agakhan.org\": \"Aga Khan Hospital\", \n  \"knh.or.ke\": \"Kenyatta Hospital\",\n  \"mtrh.go.ke\": \"Moi Teaching Hospital\",\n  \"gertrudes.org\": \"Gertrudes Children's Hospital\"\n};\n\nexport default function ModernAdminDashboard() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState(\"all\");\n  const [licenseTestForm, setLicenseTestForm] = useState({\n    regNumber: \"\",\n    cadre: \"doctor\"\n  });\n  const [licenseTestResult, setLicenseTestResult] = useState(null);\n  const [isTestingLicense, setIsTestingLicense] = useState(false);\n\n  // Mock user data for demo purposes\n  const user = {\n    id: 1,\n    username: \"admin\",\n    email: \"admin@erlessed.com\",\n    name: \"System Administrator\",\n    role: \"admin\",\n    premiumAccess: true\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'suspended': return 'bg-red-100 text-red-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getLicenseStatusColor = (status: string) => {\n    switch (status) {\n      case 'verified': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'expired': return 'bg-red-100 text-red-800';\n      case 'not_required': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getComplianceColor = (compliance: string) => {\n    switch (compliance) {\n      case 'excellent': return 'text-green-600';\n      case 'good': return 'text-blue-600';\n      case 'average': return 'text-yellow-600';\n      case 'poor': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getHealthStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'warning': return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'error': return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default: return <AlertCircle className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const filteredUsers = mockUsers.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.careProvider.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = selectedRole === \"all\" || user.role === selectedRole;\n    return matchesSearch && matchesRole;\n  });\n\n  const handleLicenseTest = async () => {\n    setIsTestingLicense(true);\n    \n    // Simulate API call delay\n    setTimeout(() => {\n      // Mock license validation result\n      const mockResult = {\n        regNumber: licenseTestForm.regNumber,\n        cadre: licenseTestForm.cadre,\n        status: \"verified\",\n        practitionerName: \"Dr. John Doe\",\n        licenseExpiry: \"2025-12-31\",\n        registrationBoard: licenseTestForm.cadre === \"doctor\" ? \"KMPDC\" : \"PPB\",\n        specialization: \"General Practice\",\n        isActive: true\n      };\n      \n      setLicenseTestResult(mockResult);\n      setIsTestingLicense(false);\n    }, 2000);\n  };\n\n  const detectCareProvider = (email: string) => {\n    const domain = email.split('@')[1];\n    return careProviderDomains[domain] || \"Independent\";\n  };\n\n  return (\n    <SharedLayout \n      user={user} \n      sidebarItems={sidebarItems}\n      className=\"min-h-screen bg-gray-50\"\n    >\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n            <p className=\"text-gray-600\">System management and oversight</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Audit Logs\n            </Button>\n            <Button className=\"bg-teal-600 hover:bg-teal-700\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Global Settings\n            </Button>\n          </div>\n        </div>\n\n        {/* System Health Status */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {getHealthStatusIcon(mockSystemHealth.database.status)}\n                  <div>\n                    <p className=\"font-medium\">Database</p>\n                    <p className=\"text-sm text-gray-600\">{mockSystemHealth.database.responseTime}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium\">{mockSystemHealth.database.uptime}</p>\n                  <p className=\"text-xs text-gray-500\">Uptime</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {getHealthStatusIcon(mockSystemHealth.intelligenceEngine.status)}\n                  <div>\n                    <p className=\"font-medium\">Intelligence Engine</p>\n                    <p className=\"text-sm text-gray-600\">{mockSystemHealth.intelligenceEngine.responseTime}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium\">{mockSystemHealth.intelligenceEngine.uptime}</p>\n                  <p className=\"text-xs text-gray-500\">Uptime</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {getHealthStatusIcon(mockSystemHealth.blockchain.status)}\n                  <div>\n                    <p className=\"font-medium\">Blockchain Ledger</p>\n                    <p className=\"text-sm text-gray-600\">{mockSystemHealth.blockchain.responseTime}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium\">{mockSystemHealth.blockchain.uptime}</p>\n                  <p className=\"text-xs text-gray-500\">Uptime</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"users\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"providers\">Care Providers</TabsTrigger>\n            <TabsTrigger value=\"licenses\">License Validation</TabsTrigger>\n          </TabsList>\n\n          {/* User Management Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Users className=\"h-5 w-5 text-blue-600\" />\n                      <span>User Management</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Manage user accounts, roles, and license verification status\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search users...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 w-64\"\n                      />\n                    </div>\n                    <Select value={selectedRole} onValueChange={setSelectedRole}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"All Roles\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Roles</SelectItem>\n                        <SelectItem value=\"doctor\">Doctor</SelectItem>\n                        <SelectItem value=\"pharmacist\">Pharmacist</SelectItem>\n                        <SelectItem value=\"care-manager\">Care Manager</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Button className=\"bg-teal-600 hover:bg-teal-700\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add User\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Care Provider</TableHead>\n                      <TableHead>License Status</TableHead>\n                      <TableHead>Registration Board</TableHead>\n                      <TableHead>Last Login</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredUsers.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell className=\"font-medium\">{user.name}</TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{user.role}</Badge>\n                        </TableCell>\n                        <TableCell>{user.careProvider}</TableCell>\n                        <TableCell>\n                          <Badge className={getLicenseStatusColor(user.licenseStatus)}>\n                            {user.licenseStatus.replace('_', ' ').toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{user.registrationBoard}</TableCell>\n                        <TableCell className=\"text-sm text-gray-600\">{user.lastLogin}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(user.status)}>\n                            {user.status.toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-red-600\">\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Care Providers Tab */}\n          <TabsContent value=\"providers\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {mockCareProviders.map((provider) => (\n                <Card key={provider.id}>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{provider.name}</CardTitle>\n                        <CardDescription>{provider.type} • {provider.location}</CardDescription>\n                      </div>\n                      <Badge className={`${getComplianceColor(provider.compliance)} bg-opacity-20`}>\n                        {provider.compliance.toUpperCase()}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Domain</p>\n                        <p className=\"font-medium\">{provider.domain}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Accreditation</p>\n                        <p className=\"font-medium\">{provider.accreditation}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Active Users</p>\n                        <p className=\"font-medium\">{provider.activeUsers}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Total Claims</p>\n                        <p className=\"font-medium\">{provider.totalClaims}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-4 border-t\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm text-gray-600\">Approval Rate</span>\n                        <span className=\"text-sm font-medium\">{provider.approvalRate}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-teal-600 h-2 rounded-full\" \n                          style={{ width: `${provider.approvalRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center text-xs text-gray-500\">\n                      <span>Last activity: {provider.lastActivity}</span>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Activity className=\"h-4 w-4 mr-1\" />\n                        View Details\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* License Validation Tab */}\n          <TabsContent value=\"licenses\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Shield className=\"h-5 w-5 text-green-600\" />\n                    <span>License Validation API Test</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Test the license validation system by entering registration details\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"regNumber\">Registration Number</Label>\n                    <Input\n                      id=\"regNumber\"\n                      placeholder=\"Enter registration number\"\n                      value={licenseTestForm.regNumber}\n                      onChange={(e) => setLicenseTestForm(prev => ({\n                        ...prev,\n                        regNumber: e.target.value\n                      }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cadre\">Professional Cadre</Label>\n                    <Select \n                      value={licenseTestForm.cadre} \n                      onValueChange={(value) => setLicenseTestForm(prev => ({\n                        ...prev,\n                        cadre: value\n                      }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"doctor\">Doctor (KMPDC)</SelectItem>\n                        <SelectItem value=\"pharmacist\">Pharmacist (PPB)</SelectItem>\n                        <SelectItem value=\"clinical_officer\">Clinical Officer (COC)</SelectItem>\n                        <SelectItem value=\"nurse\">Nurse (NCK)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <Button \n                    onClick={handleLicenseTest}\n                    disabled={!licenseTestForm.regNumber || isTestingLicense}\n                    className=\"w-full bg-teal-600 hover:bg-teal-700\"\n                  >\n                    {isTestingLicense ? (\n                      <>\n                        <Zap className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Validating...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"h-4 w-4 mr-2\" />\n                        Validate License\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-5 w-5 text-blue-600\" />\n                    <span>Validation Result</span>\n                  </CardTitle>\n                  <CardDescription>\n                    License validation response from regulatory boards\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {licenseTestResult ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                        <span className=\"font-medium text-green-700\">License Verified</span>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-gray-600\">Practitioner</p>\n                          <p className=\"font-medium\">{licenseTestResult.practitionerName}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Registration No.</p>\n                          <p className=\"font-medium\">{licenseTestResult.regNumber}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Board</p>\n                          <p className=\"font-medium\">{licenseTestResult.registrationBoard}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Specialization</p>\n                          <p className=\"font-medium\">{licenseTestResult.specialization}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Expires</p>\n                          <p className=\"font-medium\">{licenseTestResult.licenseExpiry}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Status</p>\n                          <Badge className=\"bg-green-100 text-green-800\">ACTIVE</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Shield className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                      <p>Enter registration details and click validate to see results</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Domain Auto-Mapping Logic */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Globe className=\"h-5 w-5 text-purple-600\" />\n                  <span>Domain-Based Auto-Mapping</span>\n                </CardTitle>\n                <CardDescription>\n                  Automatic care provider detection based on email domains\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {Object.entries(careProviderDomains).map(([domain, provider]) => (\n                    <div key={domain} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{domain}</p>\n                        <p className=\"text-sm text-gray-600\">{provider}</p>\n                      </div>\n                      <Link className=\"h-4 w-4 text-teal-600\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </SharedLayout>\n  );\n}","size_bytes":26225},"client/src/pages/modern-auth-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ErllessedLogo } from \"@/components/erlessed-logo\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Stethoscope, Shield, Heart, Activity, Users, Building2,\n  User, Lock, Mail, ArrowRight, CheckCircle, AlertCircle\n} from \"lucide-react\";\n\nconst loginSchema = z.object({\n  identifier: z.string().min(1, \"Email or username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function ModernAuthPage() {\n  const [, setLocation] = useLocation();\n  const { login, user } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginError, setLoginError] = useState(\"\");\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      identifier: \"\",\n      password: \"\",\n    },\n  });\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      const roleRedirects = {\n        doctor: \"/modern-doctor\",\n        pharmacist: \"/modern-pharmacy\",\n        \"care-manager\": \"/care-manager-dashboard\",\n        insurer: \"/insurer\",\n        patient: \"/patient\",\n        admin: \"/admin\"\n      };\n      setLocation(roleRedirects[user.role as keyof typeof roleRedirects] || \"/dashboard\");\n    }\n  }, [user, setLocation]);\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    setLoginError(\"\");\n\n    try {\n      await login(data.identifier, data.password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully signed in to Erlessed\",\n      });\n    } catch (error) {\n      setLoginError(\"Invalid credentials. Please check your email/username and password.\");\n      toast({\n        title: \"Sign in failed\",\n        description: \"Please check your credentials and try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const features = [\n    {\n      icon: <Stethoscope className=\"h-6 w-6 text-primary\" />,\n      title: \"Clinical Excellence\",\n      description: \"Advanced decision support tools for healthcare providers\"\n    },\n    {\n      icon: <Shield className=\"h-6 w-6 text-[#265651]\" />,\n      title: \"Secure Claims Processing\",\n      description: \"End-to-end encryption and compliance with healthcare standards\"\n    },\n    {\n      icon: <Activity className=\"h-6 w-6 text-green-600\" />,\n      title: \"Real-time Analytics\",\n      description: \"Instant insights into patient care and financial performance\"\n    },\n    {\n      icon: <Users className=\"h-6 w-6 text-purple-600\" />,\n      title: \"Multi-role Access\",\n      description: \"Tailored dashboards for every healthcare role\"\n    }\n  ];\n\n  const quickLoginOptions = [\n    { role: \"Doctor\", credentials: \"testuser / test123\", icon: <Stethoscope className=\"h-4 w-4\" /> },\n    { role: \"Pharmacist\", credentials: \"pharmacy@knh.or.ke\", icon: <Heart className=\"h-4 w-4\" /> },\n    { role: \"Care Manager\", credentials: \"manager@aku.edu\", icon: <Users className=\"h-4 w-4\" /> },\n    { role: \"Patient\", credentials: \"patient@gmail.com\", icon: <User className=\"h-4 w-4\" /> }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#6BBDB4]/10 via-white to-[#265651]/10\">\n      <div className=\"container mx-auto flex min-h-screen\">\n        {/* Left Panel - Branding & Features */}\n        <div className=\"hidden lg:flex lg:w-1/2 flex-col justify-center p-12\">\n          <div className=\"max-w-md mx-auto space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <ErllessedLogo className=\"h-16 w-auto mx-auto\" />\n              <h1 className=\"text-4xl font-bold text-gray-900\">\n                Healthcare Claims Platform\n              </h1>\n              <p className=\"text-lg text-gray-600\">\n                Streamlining healthcare delivery with intelligent claims processing,\n                real-time verification, and comprehensive analytics.\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {features.map((feature, index) => (\n                <div key={index} className=\"flex items-start space-x-4\">\n                  <div className=\"flex-shrink-0 p-2 bg-white rounded-xl shadow-sm\">\n                    {feature.icon}\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{feature.title}</h3>\n                    <p className=\"text-sm text-gray-600\">{feature.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"pt-8 border-t\">\n              <p className=\"text-sm text-gray-500 text-center\">\n                Trusted by healthcare providers across Kenya\n              </p>\n              <div className=\"flex items-center justify-center space-x-6 mt-4\">\n                <Building2 className=\"h-8 w-8 text-gray-300\" />\n                <Heart className=\"h-8 w-8 text-gray-300\" />\n                <Shield className=\"h-8 w-8 text-gray-300\" />\n                <Activity className=\"h-8 w-8 text-gray-300\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Panel - Login Form */}\n        <div className=\"w-full lg:w-1/2 flex items-center justify-center p-8\">\n          <div className=\"w-full max-w-md space-y-6\">\n            {/* Mobile Logo */}\n            <div className=\"lg:hidden text-center\">\n              <ErllessedLogo className=\"h-12 w-auto mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900\">Welcome back</h2>\n              <p className=\"text-gray-600\">Sign in to your healthcare dashboard</p>\n            </div>\n\n            {/* Login Card */}\n            <Card className=\"border-0 shadow-2xl\">\n              <CardHeader className=\"space-y-1 text-center\">\n                <CardTitle className=\"text-2xl font-bold\">Sign In</CardTitle>\n                <CardDescription>\n                  Enter your credentials to access your dashboard\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"identifier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center space-x-2\">\n                            <Mail className=\"h-4 w-4\" />\n                            <span>Email or Username</span>\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              placeholder=\"Enter email or username\"\n                              className=\"h-12\"\n                              autoComplete=\"username\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center space-x-2\">\n                            <Lock className=\"h-4 w-4\" />\n                            <span>Password</span>\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              placeholder=\"Enter password\"\n                              className=\"h-12\"\n                              autoComplete=\"current-password\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {loginError && (\n                      <div className=\"flex items-center space-x-2 text-sm text-red-600 bg-red-50 p-3 rounded-xl\">\n                        <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n                        <span>{loginError}</span>\n                      </div>\n                    )}\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full h-12 text-base\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                          <span>Signing in...</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center space-x-2\">\n                          <span>Sign In</span>\n                          <ArrowRight className=\"h-4 w-4\" />\n                        </div>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <Separator className=\"w-full\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-xs uppercase\">\n                    <span className=\"bg-white px-2 text-gray-500\">Demo Access</span>\n                  </div>\n                </div>\n\n                {/* Quick Login Options */}\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-gray-600 text-center\">Quick access for testing:</p>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {quickLoginOptions.map((option, index) => (\n                      <Button\n                        key={index}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"h-auto p-3 flex flex-col items-center space-y-1\"\n                        onClick={() => {\n                          const [username] = option.credentials.split(\" / \");\n                          form.setValue(\"identifier\", username);\n                          form.setValue(\"password\", \"test123\");\n                        }}\n                      >\n                        {option.icon}\n                        <span className=\"text-xs\">{option.role}</span>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"text-center space-y-2\">\n                  <p className=\"text-sm text-gray-600\">\n                    Don't have an account?{\" \"}\n                    <Link href=\"/signup\" className=\"text-primary hover:underline font-medium\">\n                      Sign up here\n                    </Link>\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    By signing in, you agree to our Terms of Service and Privacy Policy\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Support Information */}\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-sm text-gray-600\">\n                Need help? Contact support at{\" \"}\n                <a href=\"mailto:support@erlessed.com\" className=\"text-primary hover:underline\">\n                  support@erlessed.com\n                </a>\n              </p>\n              <div className=\"flex items-center justify-center space-x-2 text-xs text-gray-500\">\n                <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                <span>Secure • HIPAA Compliant • 99.9% Uptime</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12644},"client/src/pages/modern-care-manager-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { SharedLayout } from \"@/components/layout/shared-layout\";\nimport { \n  AlertTriangle, TrendingUp, Users, DollarSign, Activity, Shield, \n  Building2, Search, Filter, Eye, Flag, CheckCircle, XCircle,\n  BarChart3, PieChart, TrendingDown, Zap\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface ClaimOverview {\n  id: number;\n  patientName: string;\n  patientId: string;\n  provider: string;\n  serviceType: string;\n  claimAmount: number;\n  status: \"pending\" | \"approved\" | \"denied\" | \"flagged\" | \"void\";\n  submittedAt: string;\n  flaggedReasons?: string[];\n  riskScore?: number;\n}\n\ninterface FraudAlert {\n  id: number;\n  alertType: string;\n  description: string;\n  riskLevel: \"low\" | \"medium\" | \"high\";\n  providerId: number;\n  providerName: string;\n  patientCount: number;\n  flaggedAmount: number;\n  detectedAt: string;\n  status: \"open\" | \"investigating\" | \"resolved\" | \"false_positive\";\n}\n\ninterface ProviderAnalytics {\n  providerId: number;\n  providerName: string;\n  providerType: string;\n  totalClaims: number;\n  totalAmount: number;\n  approvalRate: number;\n  averageClaimValue: number;\n  flaggedClaims: number;\n  topServices: string[];\n  riskScore: number;\n}\n\nexport default function ModernCareManagerDashboard() {\n  const { user } = useAuth();\n  const [selectedProvider, setSelectedProvider] = useState<string>(\"all\");\n  const [selectedScheme, setSelectedScheme] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Mock data\n  const claimsOverview: ClaimOverview[] = [\n    {\n      id: 1,\n      patientName: \"Sarah Johnson\",\n      patientId: \"PT-2024-001\",\n      provider: \"Aga Khan Hospital\",\n      serviceType: \"Cardiology Consultation\",\n      claimAmount: 15000,\n      status: \"flagged\",\n      submittedAt: \"2024-06-20T08:30:00Z\",\n      flaggedReasons: [\"Unusual service frequency\", \"High cost variance\"],\n      riskScore: 85\n    },\n    {\n      id: 2,\n      patientName: \"Michael Ochieng\",\n      patientId: \"PT-2024-002\",\n      provider: \"Kenyatta National Hospital\",\n      serviceType: \"Diabetes Follow-up\",\n      claimAmount: 3500,\n      status: \"approved\",\n      submittedAt: \"2024-06-20T09:15:00Z\",\n      riskScore: 12\n    },\n    {\n      id: 3,\n      patientName: \"Grace Wanjiku\",\n      patientId: \"PT-2024-003\",\n      provider: \"Nairobi Hospital\",\n      serviceType: \"General Consultation\",\n      claimAmount: 2800,\n      status: \"pending\",\n      submittedAt: \"2024-06-20T10:00:00Z\",\n      riskScore: 25\n    }\n  ];\n\n  const fraudAlerts: FraudAlert[] = [\n    {\n      id: 1,\n      alertType: \"Billing Pattern Anomaly\",\n      description: \"Unusual spike in high-value procedures from provider\",\n      riskLevel: \"high\",\n      providerId: 101,\n      providerName: \"Metropolitan Medical Center\",\n      patientCount: 15,\n      flaggedAmount: 850000,\n      detectedAt: \"2024-06-20T07:00:00Z\",\n      status: \"investigating\"\n    },\n    {\n      id: 2,\n      alertType: \"Duplicate Claims\",\n      description: \"Multiple claims for same service on same date\",\n      riskLevel: \"medium\",\n      providerId: 205,\n      providerName: \"City Clinic Network\",\n      patientCount: 3,\n      flaggedAmount: 45000,\n      detectedAt: \"2024-06-20T08:30:00Z\",\n      status: \"open\"\n    }\n  ];\n\n  const providerAnalytics: ProviderAnalytics[] = [\n    {\n      providerId: 101,\n      providerName: \"Aga Khan Hospital\",\n      providerType: \"Tertiary Hospital\",\n      totalClaims: 1245,\n      totalAmount: 15600000,\n      approvalRate: 94.2,\n      averageClaimValue: 12530,\n      flaggedClaims: 23,\n      topServices: [\"Cardiology\", \"Orthopedics\", \"Surgery\"],\n      riskScore: 15\n    },\n    {\n      providerId: 102,\n      providerName: \"Kenyatta National Hospital\",\n      providerType: \"Public Hospital\",\n      totalClaims: 3456,\n      totalAmount: 28900000,\n      approvalRate: 89.7,\n      averageClaimValue: 8365,\n      flaggedClaims: 67,\n      topServices: [\"Emergency\", \"Internal Medicine\", \"Pediatrics\"],\n      riskScore: 28\n    },\n    {\n      providerId: 103,\n      providerName: \"Nairobi Hospital\",\n      providerType: \"Private Hospital\",\n      totalClaims: 987,\n      totalAmount: 18700000,\n      approvalRate: 96.1,\n      averageClaimValue: 18943,\n      flaggedClaims: 12,\n      topServices: [\"Surgery\", \"Diagnostics\", \"Maternity\"],\n      riskScore: 8\n    }\n  ];\n\n  const sidebarItems = [\n    { path: \"/care-manager-dashboard\", icon: <BarChart3 className=\"h-5 w-5\" />, label: \"Claims Overview\" },\n    { path: \"/care-manager/analytics\", icon: <PieChart className=\"h-5 w-5\" />, label: \"Analytics\" },\n    { path: \"/care-manager/fraud\", icon: <AlertTriangle className=\"h-5 w-5\" />, label: \"Fraud Review\", badge: \"2\" },\n    { path: \"/care-manager/cost\", icon: <DollarSign className=\"h-5 w-5\" />, label: \"Cost Analysis\" },\n    { path: \"/care-manager/providers\", icon: <Building2 className=\"h-5 w-5\" />, label: \"Provider Performance\" },\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"pending\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"denied\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"flagged\": return \"bg-purple-100 text-purple-800 border-purple-200\";\n      case \"void\": return \"bg-gray-100 text-gray-800 border-gray-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getRiskColor = (score: number) => {\n    if (score >= 70) return \"text-red-600 bg-red-50\";\n    if (score >= 40) return \"text-orange-600 bg-orange-50\";\n    if (score >= 20) return \"text-yellow-600 bg-yellow-50\";\n    return \"text-green-600 bg-green-50\";\n  };\n\n  const getRiskLevel = (score: number) => {\n    if (score >= 70) return \"HIGH\";\n    if (score >= 40) return \"MEDIUM\";\n    if (score >= 20) return \"LOW\";\n    return \"MINIMAL\";\n  };\n\n  return (\n    <SharedLayout sidebarItems={sidebarItems} title=\"Care Manager Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Top KPIs */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Activity className=\"h-8 w-8 text-primary\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">1,247</p>\n                  <p className=\"text-sm text-muted-foreground\">Active Claims</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"h-8 w-8 text-orange-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">23</p>\n                  <p className=\"text-sm text-muted-foreground\">Flagged Claims</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <XCircle className=\"h-8 w-8 text-red-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">8</p>\n                  <p className=\"text-sm text-muted-foreground\">Void Claims</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-8 w-8 text-green-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">KES 2.4M</p>\n                  <p className=\"text-sm text-muted-foreground\">Net Claims Value</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-wrap items-center space-x-4 space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Search className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search claims, patients, providers...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-64\"\n                />\n              </div>\n              <Select value={selectedProvider} onValueChange={setSelectedProvider}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Providers\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Providers</SelectItem>\n                  <SelectItem value=\"aku\">Aga Khan Hospital</SelectItem>\n                  <SelectItem value=\"knh\">Kenyatta National Hospital</SelectItem>\n                  <SelectItem value=\"nairobi\">Nairobi Hospital</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={selectedScheme} onValueChange={setSelectedScheme}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Schemes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Schemes</SelectItem>\n                  <SelectItem value=\"sha\">SHA</SelectItem>\n                  <SelectItem value=\"private\">Private Insurance</SelectItem>\n                  <SelectItem value=\"corporate\">Corporate</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\">Claims Overview</TabsTrigger>\n            <TabsTrigger value=\"providers\">Provider Analytics</TabsTrigger>\n            <TabsTrigger value=\"fraud\">Fraud Monitoring</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4 mt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Claims List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Claims</CardTitle>\n                  <CardDescription>Latest claim submissions across network</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {claimsOverview.map((claim) => (\n                      <div key={claim.id} className=\"border rounded-xl p-4 space-y-3\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">{claim.patientName}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{claim.patientId}</p>\n                          </div>\n                          <Badge className={getStatusColor(claim.status)}>\n                            {claim.status.toUpperCase()}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"text-sm space-y-1\">\n                          <p><span className=\"font-medium\">Provider:</span> {claim.provider}</p>\n                          <p><span className=\"font-medium\">Service:</span> {claim.serviceType}</p>\n                          <p><span className=\"font-medium\">Amount:</span> KES {claim.claimAmount.toLocaleString()}</p>\n                        </div>\n\n                        {claim.riskScore && (\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm\">Risk Score:</span>\n                            <Badge className={getRiskColor(claim.riskScore)}>\n                              {claim.riskScore}% {getRiskLevel(claim.riskScore)}\n                            </Badge>\n                          </div>\n                        )}\n\n                        {claim.flaggedReasons && (\n                          <div className=\"space-y-1\">\n                            <p className=\"text-sm font-medium text-orange-600\">Flagged Reasons:</p>\n                            <ul className=\"text-xs text-orange-700 space-y-1\">\n                              {claim.flaggedReasons.map((reason, index) => (\n                                <li key={index}>• {reason}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            Review\n                          </Button>\n                          {claim.status === \"flagged\" && (\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Flag className=\"h-4 w-4 mr-1\" />\n                              Investigate\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Fraud Alerts */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n                    <span>Active Fraud Alerts</span>\n                  </CardTitle>\n                  <CardDescription>System-detected suspicious patterns</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {fraudAlerts.map((alert) => (\n                      <div key={alert.id} className=\"border border-orange-200 bg-orange-50 rounded-xl p-4 space-y-3\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-medium text-orange-800\">{alert.alertType}</h4>\n                            <p className=\"text-sm text-orange-700\">{alert.description}</p>\n                          </div>\n                          <Badge className={\n                            alert.riskLevel === \"high\" ? \"bg-red-100 text-red-800\" :\n                            alert.riskLevel === \"medium\" ? \"bg-orange-100 text-orange-800\" :\n                            \"bg-yellow-100 text-yellow-800\"\n                          }>\n                            {alert.riskLevel.toUpperCase()}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"text-sm space-y-1\">\n                          <p><span className=\"font-medium\">Provider:</span> {alert.providerName}</p>\n                          <p><span className=\"font-medium\">Patients Affected:</span> {alert.patientCount}</p>\n                          <p><span className=\"font-medium\">Flagged Amount:</span> KES {alert.flaggedAmount.toLocaleString()}</p>\n                        </div>\n\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" className=\"bg-orange-600 hover:bg-orange-700\">\n                            <Zap className=\"h-4 w-4 mr-1\" />\n                            Investigate\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Mark Reviewed\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"providers\" className=\"space-y-4 mt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {providerAnalytics.map((provider) => (\n                <Card key={provider.providerId} className=\"card-hover\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>{provider.providerName}</span>\n                      <Badge variant=\"outline\">{provider.providerType}</Badge>\n                    </CardTitle>\n                    <CardDescription>\n                      Risk Score: <span className={getRiskColor(provider.riskScore)}>{provider.riskScore}%</span>\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Total Claims</p>\n                        <p className=\"font-medium\">{provider.totalClaims.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Total Amount</p>\n                        <p className=\"font-medium\">KES {(provider.totalAmount / 1000000).toFixed(1)}M</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Approval Rate</p>\n                        <p className=\"font-medium\">{provider.approvalRate}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Avg Claim</p>\n                        <p className=\"font-medium\">KES {provider.averageClaimValue.toLocaleString()}</p>\n                      </div>\n                    </div>\n\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Approval Rate</span>\n                        <span>{provider.approvalRate}%</span>\n                      </div>\n                      <Progress value={provider.approvalRate} className=\"h-2\" />\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Top Services</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {provider.topServices.map((service, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {service}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full\" variant=\"outline\">\n                      <BarChart3 className=\"h-4 w-4 mr-2\" />\n                      View Detailed Analytics\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"fraud\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5 text-red-500\" />\n                  <span>Fraud Detection Dashboard</span>\n                </CardTitle>\n                <CardDescription>\n                  Advanced pattern recognition and anomaly detection\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium\">Detection Algorithms</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Billing Pattern Analysis</span>\n                        <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Duplicate Detection</span>\n                        <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Outlier Analysis</span>\n                        <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Network Analysis</span>\n                        <Badge className=\"bg-orange-100 text-orange-800\">Training</Badge>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium\">Today's Detection Stats</h4>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span>Claims Analyzed</span>\n                          <span>1,247</span>\n                        </div>\n                        <Progress value={100} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span>Anomalies Detected</span>\n                          <span>23 (1.8%)</span>\n                        </div>\n                        <Progress value={1.8} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span>False Positives</span>\n                          <span>2 (8.7%)</span>\n                        </div>\n                        <Progress value={8.7} className=\"h-2\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium\">Risk Heatmap</h4>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {[...Array(9)].map((_, i) => (\n                        <div\n                          key={i}\n                          className={`h-8 rounded ${\n                            i === 2 || i === 5 ? 'bg-red-200' :\n                            i === 1 || i === 4 || i === 7 ? 'bg-orange-200' :\n                            'bg-green-200'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Provider risk distribution across network\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </SharedLayout>\n  );\n}","size_bytes":23686},"client/src/pages/modern-care-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { SharedLayout } from \"@/components/layout/shared-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  AlertTriangle, \n  TrendingUp, \n  DollarSign, \n  Shield, \n  Eye, \n  Users, \n  Activity,\n  Filter,\n  Download,\n  Search,\n  Bell,\n  BarChart3,\n  PieChart,\n  LineChart,\n  Target,\n  Zap,\n  Heart,\n  Brain,\n  Stethoscope,\n  Award,\n  Clock\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst sidebarItems = [\n  { path: \"/modern-care-manager\", icon: <BarChart3 className=\"h-5 w-5\" />, label: \"Claims Overview\" },\n  { path: \"/modern-care-manager/fraud\", icon: <Shield className=\"h-5 w-5\" />, label: \"Fraud Alerts\", badge: \"12\" },\n  { path: \"/modern-care-manager/costs\", icon: <TrendingUp className=\"h-5 w-5\" />, label: \"Cost Trends\" },\n  { path: \"/modern-care-manager/referrals\", icon: <Users className=\"h-5 w-5\" />, label: \"Referral Patterns\" },\n  { path: \"/modern-care-manager/benchmarks\", icon: <Target className=\"h-5 w-5\" />, label: \"Provider Benchmarks\", badge: \"Premium\" },\n  { path: \"/modern-care-manager/analytics\", icon: <Brain className=\"h-5 w-5\" />, label: \"Advanced Analytics\", badge: \"Premium\" }\n];\n\n// Mock data for demonstration\nconst mockClaimsData = [\n  {\n    id: \"CLM-2024-001\",\n    patient: \"Mary Wanjiku\",\n    provider: \"Nairobi Hospital\",\n    amount: 45000,\n    service: \"Cardiac Surgery\",\n    flaggedReason: \"Unusual procedure frequency\",\n    severity: \"high\",\n    status: \"pending_review\",\n    riskScore: 85,\n    submittedDate: \"2024-06-22\",\n    flags: [\"High Cost\", \"Frequency Alert\"]\n  },\n  {\n    id: \"CLM-2024-002\",\n    patient: \"James Kiprotich\",\n    provider: \"Aga Khan Hospital\",\n    amount: 15000,\n    service: \"MRI Scan\",\n    flaggedReason: \"Duplicate service\",\n    severity: \"medium\",\n    status: \"investigating\",\n    riskScore: 65,\n    submittedDate: \"2024-06-21\",\n    flags: [\"Duplicate\", \"Same Provider\"]\n  },\n  {\n    id: \"CLM-2024-003\",\n    patient: \"Grace Mutindi\",\n    provider: \"Kenyatta Hospital\",\n    amount: 8500,\n    service: \"Lab Tests\",\n    flaggedReason: \"Pattern deviation\",\n    severity: \"low\",\n    status: \"cleared\",\n    riskScore: 25,\n    submittedDate: \"2024-06-20\",\n    flags: [\"Pattern Alert\"]\n  }\n];\n\nconst mockProviderBenchmarks = [\n  {\n    provider: \"Nairobi Hospital\",\n    category: \"Cardiac\",\n    avgCost: 42000,\n    survivalRate: 94.5,\n    patientSatisfaction: 4.6,\n    avgStayDays: 5.2,\n    complicationRate: 2.1,\n    benchmark: \"excellent\"\n  },\n  {\n    provider: \"Aga Khan Hospital\",\n    category: \"Orthopedic\",\n    avgCost: 38000,\n    survivalRate: 97.2,\n    patientSatisfaction: 4.8,\n    avgStayDays: 4.1,\n    complicationRate: 1.8,\n    benchmark: \"excellent\"\n  },\n  {\n    provider: \"Kenyatta Hospital\",\n    category: \"General Surgery\",\n    avgCost: 28000,\n    survivalRate: 91.8,\n    patientSatisfaction: 4.2,\n    avgStayDays: 6.8,\n    complicationRate: 3.2,\n    benchmark: \"good\"\n  }\n];\n\nconst mockBenefitBurnRates = [\n  { category: \"Inpatient Care\", used: 68, total: 100, percentage: 68 },\n  { category: \"Outpatient Services\", used: 42, total: 80, percentage: 52.5 },\n  { category: \"Prescription Drugs\", used: 89, total: 120, percentage: 74.2 },\n  { category: \"Diagnostic Tests\", used: 156, total: 200, percentage: 78 },\n  { category: \"Emergency Services\", used: 23, total: 50, percentage: 46 }\n];\n\nexport default function ModernCareManagerDashboard() {\n  const [, setLocation] = useLocation();\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"30days\");\n  const [selectedProvider, setSelectedProvider] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Mock user data for demo purposes\n  const user = {\n    id: 5,\n    username: \"caremanager1\",\n    email: \"care@nairobi.hospital\",\n    name: \"Dr. Sarah Mwangi\",\n    role: \"care-manager\",\n    premiumAccess: true\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getBenchmarkColor = (benchmark: string) => {\n    switch (benchmark) {\n      case 'excellent': return 'text-green-600';\n      case 'good': return 'text-blue-600';\n      case 'average': return 'text-yellow-600';\n      case 'poor': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const filteredClaims = mockClaimsData.filter(claim =>\n    claim.patient.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    claim.provider.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    claim.service.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <SharedLayout \n      user={user} \n      sidebarItems={sidebarItems}\n      className=\"min-h-screen bg-gray-50\"\n    >\n      <div className=\"space-y-8\">\n        {/* Header Analytics */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Care Manager Dashboard</h1>\n            <p className=\"text-gray-600\">Cross-network claims oversight and provider analytics</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Bell className=\"h-4 w-4 mr-2\" />\n              Notifications\n              <Badge className=\"ml-2 bg-red-500\">3</Badge>\n            </Button>\n            <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">7 Days</SelectItem>\n                <SelectItem value=\"30days\">30 Days</SelectItem>\n                <SelectItem value=\"90days\">90 Days</SelectItem>\n                <SelectItem value=\"1year\">1 Year</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"bg-[#265651] hover:bg-[#265651]/90\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Report\n            </Button>\n          </div>\n        </div>\n\n        {/* KPI Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Gross Claims</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">KES 24.8M</p>\n                  <p className=\"text-xs text-green-600\">↑ 12% from last month</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Net Claims</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">KES 22.1M</p>\n                  <p className=\"text-xs text-green-600\">89% approval rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Void Claims</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">247</p>\n                  <p className=\"text-xs text-red-600\">KES 2.7M lost</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Shield className=\"h-8 w-8 text-red-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Fraud Risk</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">3.2%</p>\n                  <p className=\"text-xs text-orange-600\">12 high-risk cases</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"flagged-claims\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"flagged-claims\">Flagged Claims</TabsTrigger>\n            <TabsTrigger value=\"cost-trends\">Cost Trends</TabsTrigger>\n            <TabsTrigger value=\"benchmarks\">Provider Benchmarks</TabsTrigger>\n            <TabsTrigger value=\"analytics\">\n              Premium Analytics\n              <Badge className=\"ml-2 bg-[#6BBDB4]/20 text-[#265651]\">Premium</Badge>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* AI-Flagged Claims Table */}\n          <TabsContent value=\"flagged-claims\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Zap className=\"h-5 w-5 text-yellow-600\" />\n                      <span>Intelligence-Flagged Claims</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Claims requiring review based on pattern analysis and risk scoring\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search claims...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 w-64\"\n                      />\n                    </div>\n                    <Select value={selectedProvider} onValueChange={setSelectedProvider}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"All Providers\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Providers</SelectItem>\n                        <SelectItem value=\"nairobi\">Nairobi Hospital</SelectItem>\n                        <SelectItem value=\"agakhan\">Aga Khan Hospital</SelectItem>\n                        <SelectItem value=\"kenyatta\">Kenyatta Hospital</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Claim ID</TableHead>\n                      <TableHead>Patient</TableHead>\n                      <TableHead>Provider</TableHead>\n                      <TableHead>Service</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Risk Score</TableHead>\n                      <TableHead>Severity</TableHead>\n                      <TableHead>Flags</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredClaims.map((claim) => (\n                      <TableRow key={claim.id}>\n                        <TableCell className=\"font-medium\">{claim.id}</TableCell>\n                        <TableCell>{claim.patient}</TableCell>\n                        <TableCell>{claim.provider}</TableCell>\n                        <TableCell>{claim.service}</TableCell>\n                        <TableCell>KES {claim.amount.toLocaleString()}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium\">{claim.riskScore}%</span>\n                            <Progress value={claim.riskScore} className=\"w-16 h-2\" />\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getSeverityColor(claim.severity)}>\n                            {claim.severity.toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {claim.flags.map((flag, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs border-[#6BBDB4] text-[#265651]\">\n                                {flag}\n                              </Badge>\n                            ))}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700 text-white\">\n                              Override\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Cost Trends */}\n          <TabsContent value=\"cost-trends\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <LineChart className=\"h-5 w-5 text-blue-600\" />\n                    <span>Cross-Provider Cost Trends</span>\n                  </CardTitle>\n                  <CardDescription>\n                    30-day rolling average costs by service category\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <p className=\"text-2xl font-bold text-blue-600\">KES 28,450</p>\n                      <p className=\"text-sm text-gray-600\">Avg Surgery Cost</p>\n                      <p className=\"text-xs text-green-600\">↓ 5% from last month</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-2xl font-bold text-purple-600\">KES 12,800</p>\n                      <p className=\"text-sm text-gray-600\">Avg Diagnostic</p>\n                      <p className=\"text-xs text-red-600\">↑ 8% from last month</p>\n                    </div>\n                  </div>\n                  <div className=\"h-48 bg-gray-100 rounded-lg flex items-center justify-center\">\n                    <p className=\"text-gray-500\">Cost Trend Chart</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <PieChart className=\"h-5 w-5 text-green-600\" />\n                    <span>Benefit Category Burn Rates</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Current utilization vs annual limits\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {mockBenefitBurnRates.map((benefit, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm font-medium\">{benefit.category}</span>\n                        <span className=\"text-sm text-gray-600\">\n                          {benefit.used}/{benefit.total} ({benefit.percentage.toFixed(1)}%)\n                        </span>\n                      </div>\n                      <Progress \n                        value={benefit.percentage} \n                        className=\"h-2\"\n                        color={benefit.percentage > 80 ? \"red\" : benefit.percentage > 60 ? \"yellow\" : \"green\"}\n                      />\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Provider Benchmarks */}\n          <TabsContent value=\"benchmarks\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target className=\"h-5 w-5 text-teal-600\" />\n                  <span>Real-Time Provider Benchmarking</span>\n                </CardTitle>\n                <CardDescription>\n                  Survival rates, costs, and quality metrics across care providers\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Provider</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Avg Cost</TableHead>\n                      <TableHead>Survival Rate</TableHead>\n                      <TableHead>Patient Satisfaction</TableHead>\n                      <TableHead>Avg Stay (Days)</TableHead>\n                      <TableHead>Complication Rate</TableHead>\n                      <TableHead>Benchmark</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {mockProviderBenchmarks.map((provider, index) => (\n                      <TableRow key={index}>\n                        <TableCell className=\"font-medium\">{provider.provider}</TableCell>\n                        <TableCell>{provider.category}</TableCell>\n                        <TableCell>KES {provider.avgCost.toLocaleString()}</TableCell>\n                        <TableCell className=\"text-green-600 font-medium\">\n                          {provider.survivalRate}%\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-1\">\n                            <span>{provider.patientSatisfaction}</span>\n                            <Award className=\"h-4 w-4 text-yellow-500\" />\n                          </div>\n                        </TableCell>\n                        <TableCell>{provider.avgStayDays}</TableCell>\n                        <TableCell className=\"text-red-600\">{provider.complicationRate}%</TableCell>\n                        <TableCell>\n                          <Badge className={`${getBenchmarkColor(provider.benchmark)} bg-opacity-20`}>\n                            {provider.benchmark.toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Premium Analytics */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            {user.premiumAccess ? (\n              <>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Eye className=\"h-5 w-5 text-purple-600\" />\n                        <span>Real-Time Cost Visibility</span>\n                        <Badge className=\"bg-purple-100 text-purple-800\">Premium</Badge>\n                      </CardTitle>\n                      <CardDescription>\n                        Live cost tracking and policy fit analysis\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"p-4 bg-blue-50 rounded-lg\">\n                          <p className=\"text-lg font-bold text-blue-600\">KES 2.4M</p>\n                          <p className=\"text-sm text-gray-600\">Today's Inpatient Costs</p>\n                          <p className=\"text-xs text-green-600\">Within policy limits</p>\n                        </div>\n                        <div className=\"p-4 bg-orange-50 rounded-lg\">\n                          <p className=\"text-lg font-bold text-orange-600\">KES 890K</p>\n                          <p className=\"text-sm text-gray-600\">Today's Procedure Costs</p>\n                          <p className=\"text-xs text-orange-600\">Approaching threshold</p>\n                        </div>\n                      </div>\n                      <div className=\"h-32 bg-gradient-to-r from-blue-100 to-purple-100 rounded-lg flex items-center justify-center\">\n                        <p className=\"text-gray-600\">Real-Time Cost Dashboard</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Activity className=\"h-5 w-5 text-red-600\" />\n                        <span>Procedure Referral Analytics</span>\n                        <Badge className=\"bg-red-100 text-red-800\">Premium</Badge>\n                      </CardTitle>\n                      <CardDescription>\n                        Cost-to-policy fit analysis for referral patterns\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Heart className=\"h-5 w-5 text-red-500\" />\n                            <div>\n                              <p className=\"font-medium\">Cardiac Procedures</p>\n                              <p className=\"text-sm text-gray-600\">89% policy compliance</p>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-green-100 text-green-800\">Optimal</Badge>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Brain className=\"h-5 w-5 text-purple-500\" />\n                            <div>\n                              <p className=\"font-medium\">Neurological</p>\n                              <p className=\"text-sm text-gray-600\">76% policy compliance</p>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-yellow-100 text-yellow-800\">Review</Badge>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Stethoscope className=\"h-5 w-5 text-blue-500\" />\n                            <div>\n                              <p className=\"font-medium\">General Surgery</p>\n                              <p className=\"text-sm text-gray-600\">94% policy compliance</p>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-green-100 text-green-800\">Excellent</Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-5 w-5 text-teal-600\" />\n                      <span>Survival Rate Analytics & Outcomes</span>\n                      <Badge className=\"bg-[#6BBDB4]/20 text-[#265651]\">Premium</Badge>\n                    </CardTitle>\n                    <CardDescription>\n                      Advanced outcomes tracking and predictive analytics\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                        <div className=\"text-3xl font-bold text-green-600 mb-2\">94.2%</div>\n                        <p className=\"text-sm font-medium\">Overall Survival Rate</p>\n                        <p className=\"text-xs text-gray-600\">30-day post-procedure</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                        <div className=\"text-3xl font-bold text-blue-600 mb-2\">87.8%</div>\n                        <p className=\"text-sm font-medium\">Complication-Free Rate</p>\n                        <p className=\"text-xs text-gray-600\">Major procedures</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                        <div className=\"text-3xl font-bold text-purple-600 mb-2\">4.6</div>\n                        <p className=\"text-sm font-medium\">Avg Satisfaction Score</p>\n                        <p className=\"text-xs text-gray-600\">Out of 5.0</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <Shield className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Premium Analytics</h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Unlock advanced analytics including real-time cost visibility, procedure referral analysis, and survival rate tracking.\n                  </p>\n                  <Button className=\"bg-[#265651] hover:bg-[#265651]/90\">\n                    Upgrade to Premium\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </SharedLayout>\n  );\n}","size_bytes":27610},"client/src/pages/modern-doctor-dashboard-light.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Users,\n  Calendar,\n  Activity,\n  FileText,\n  AlertCircle,\n  ChevronRight,\n  Home,\n  UserPlus,\n  ClipboardList,\n  Pill,\n  FileBarChart,\n  History,\n  Settings,\n  LogOut,\n  Clock,\n  Thermometer,\n  Heart,\n  TrendingUp\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n// Sidebar Component with light theme\nfunction Sidebar({ user }: { user: any }) {\n  const [activeItem, setActiveItem] = useState(\"dashboard\");\n  const { logout } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const menuItems = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: Home, href: \"/modern-doctor\" },\n    { id: \"queue\", label: \"Patient Queue\", icon: Users, href: \"/modern-doctor/queue\" },\n    { id: \"consultations\", label: \"Consultations\", icon: ClipboardList, href: \"/modern-doctor/consultations\" },\n    { id: \"prescriptions\", label: \"Prescriptions\", icon: Pill, href: \"/modern-doctor/prescriptions\" },\n    { id: \"lab-orders\", label: \"Lab Orders\", icon: FileBarChart, href: \"/modern-doctor/lab\" },\n    { id: \"history\", label: \"Patient History\", icon: History, href: \"/modern-doctor/history\" },\n    { id: \"settings\", label: \"Settings\", icon: Settings, href: \"/modern-doctor/settings\" }\n  ];\n\n  return (\n    <div className=\"w-64 bg-white border-r border-gray-200 shadow-sm\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <h1 className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#265651] to-[#6BBDB4]\">\n          Erlessed\n        </h1>\n        <p className=\"text-sm text-gray-600 mt-1\">Doctor Dashboard</p>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <p className=\"text-sm font-medium text-gray-900\">{user.name}</p>\n        <p className=\"text-xs text-[#265651] mt-1 capitalize\">{user.role}</p>\n        <Badge className=\"mt-2 bg-[#6BBDB4]/20 text-[#265651] border-[#6BBDB4]/30\">\n          KMPDC Verified\n        </Badge>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeItem === item.id;\n            \n            return (\n              <li key={item.id}>\n                <Link href={item.href}>\n                  <div\n                    onClick={() => setActiveItem(item.id)}\n                    className={cn(\n                      \"flex items-center gap-3 px-3 py-2 rounded-lg transition-all cursor-pointer\",\n                      isActive\n                        ? \"bg-gradient-to-r from-[#265651]/10 to-[#6BBDB4]/10 text-[#265651] border border-[#6BBDB4]/30\"\n                        : \"hover:bg-gray-100 text-gray-700 hover:text-[#265651]\"\n                    )}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{item.label}</span>\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Logout Button */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <Button \n          variant=\"ghost\" \n          className=\"w-full justify-start text-gray-700 hover:text-[#265651] hover:bg-gray-100\"\n          onClick={async () => {\n            await logout();\n            setLocation(\"/modern-auth\");\n          }}\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Welcome Card Component\nfunction WelcomeCard({ user }: { user: any }) {\n  return (\n    <Card className=\"bg-gradient-to-r from-[#265651] to-[#6BBDB4] border-0 shadow-md text-white\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">\n              Welcome back, Dr. {user.name}!\n            </h2>\n            <p className=\"text-white/90 mt-1\">\n              You have {user.appointmentsToday || 12} appointments scheduled today\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-white/80\">\n              {new Date().toLocaleDateString('en-US', { \n                weekday: 'long', \n                year: 'numeric', \n                month: 'long', \n                day: 'numeric' \n              })}\n            </p>\n            <div className=\"flex items-center gap-2 mt-2\">\n              <Clock className=\"w-4 h-4 text-white/80\" />\n              <span className=\"text-sm text-white/80\">Next patient in 15 mins</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Stats Component\nfunction QuickStats({ user }: { user: any }) {\n  const stats = [\n    {\n      label: \"Patients Today\",\n      value: \"12\",\n      change: \"3 remaining\",\n      icon: Users,\n      color: \"text-[#265651]\",\n      bgColor: \"bg-[#265651]/10\"\n    },\n    {\n      label: \"Consultations\",\n      value: \"9\",\n      change: \"75% complete\",\n      icon: ClipboardList,\n      color: \"text-[#6BBDB4]\",\n      bgColor: \"bg-[#6BBDB4]/10\"\n    },\n    {\n      label: \"Lab Results\",\n      value: \"5\",\n      change: \"2 pending\",\n      icon: FileBarChart,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\"\n    },\n    {\n      label: \"Prescriptions\",\n      value: \"24\",\n      change: \"Today\",\n      icon: Pill,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        \n        return (\n          <Card key={index} className=\"bg-white border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">{stat.label}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-1\">{stat.value}</p>\n                  <p className=\"text-sm text-gray-500 mt-2\">{stat.change}</p>\n                </div>\n                <div className={cn(\"p-3 rounded-lg\", stat.bgColor)}>\n                  <Icon className={cn(\"w-6 h-6\", stat.color)} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n// Patient Queue Component\nfunction PatientQueue() {\n  const patients = [\n    {\n      id: \"PT-001\",\n      name: \"Sarah Mwangi\",\n      age: 32,\n      visitType: \"Follow-up\",\n      priority: \"normal\",\n      waitTime: \"10 mins\",\n      vitals: { bp: \"120/80\", temp: \"36.5°C\", pulse: \"72 bpm\" }\n    },\n    {\n      id: \"PT-002\",\n      name: \"James Ochieng\",\n      age: 45,\n      visitType: \"New Visit\",\n      priority: \"high\",\n      waitTime: \"25 mins\",\n      vitals: { bp: \"145/95\", temp: \"37.8°C\", pulse: \"88 bpm\" }\n    },\n    {\n      id: \"PT-003\",\n      name: \"Grace Njeri\",\n      age: 28,\n      visitType: \"Emergency\",\n      priority: \"urgent\",\n      waitTime: \"5 mins\",\n      vitals: { bp: \"110/70\", temp: \"36.2°C\", pulse: \"65 bpm\" }\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"text-gray-900\">Patient Queue</CardTitle>\n        <Button variant=\"ghost\" size=\"sm\" className=\"text-[#265651] hover:text-[#265651]/80\">\n          View All <ChevronRight className=\"ml-1 h-4 w-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {patients.map((patient) => (\n            <div key={patient.id} className=\"p-4 rounded-lg bg-gray-50 border border-gray-200 hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"font-medium text-gray-900\">{patient.name}</span>\n                    <Badge \n                      variant=\"secondary\"\n                      className={cn(\n                        patient.priority === \"urgent\" && \"bg-red-100 text-red-700 border-red-300\",\n                        patient.priority === \"high\" && \"bg-orange-100 text-orange-700 border-orange-300\",\n                        patient.priority === \"normal\" && \"bg-blue-100 text-blue-700 border-blue-300\"\n                      )}\n                    >\n                      {patient.priority}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {patient.visitType} • Age {patient.age} • Waiting {patient.waitTime}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                    <div className=\"flex items-center gap-1\">\n                      <Heart className=\"w-4 h-4 text-red-500\" />\n                      <span>{patient.vitals.bp}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Thermometer className=\"w-4 h-4 text-blue-500\" />\n                      <span>{patient.vitals.temp}</span>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" className=\"mt-2 bg-[#265651] hover:bg-[#265651]/90 text-white\">\n                    Start Consultation\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Actions Component\nfunction QuickActions({ user }: { user: any }) {\n  const actions = [\n    {\n      label: \"New Consultation\",\n      description: \"Start patient visit\",\n      icon: UserPlus,\n      color: \"from-[#265651] to-[#265651]/80\",\n      href: \"/modern-doctor/consultation/new\"\n    },\n    {\n      label: \"Lab Results\",\n      description: \"Review pending results\",\n      icon: FileBarChart,\n      color: \"from-[#6BBDB4] to-[#6BBDB4]/80\",\n      href: \"/modern-doctor/lab-results\"\n    },\n    {\n      label: \"Write Prescription\",\n      description: \"E-prescribe medications\",\n      icon: Pill,\n      color: \"from-purple-500 to-purple-600\",\n      href: \"/modern-doctor/prescribe\"\n    },\n    {\n      label: \"Patient Records\",\n      description: \"Access medical history\",\n      icon: History,\n      color: \"from-orange-500 to-orange-600\",\n      href: \"/modern-doctor/records\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-900\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {actions.map((action, index) => {\n            const Icon = action.icon;\n            \n            return (\n              <Link key={index} href={action.href}>\n                <div className=\"block p-4 rounded-lg bg-gray-50 border border-gray-200 hover:border-[#6BBDB4] hover:bg-[#6BBDB4]/5 transition-all group cursor-pointer\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className={`p-3 rounded-lg bg-gradient-to-r ${action.color} group-hover:scale-110 transition-transform`}>\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900 group-hover:text-[#265651] transition-colors\">\n                        {action.label}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {action.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Main Component\nexport default function ModernDoctorDashboard() {\n  const { user } = useAuth();\n  \n  const dashboardUser = {\n    name: user?.name || \"Doctor\",\n    role: user?.role || \"doctor\",\n    appointmentsToday: 12\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#e8f5f0] via-[#f0faf7] to-[#d1e7e0]\">\n      <Sidebar user={dashboardUser} />\n      <main className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n        <WelcomeCard user={dashboardUser} />\n        <QuickStats user={dashboardUser} />\n        <PatientQueue />\n        <QuickActions user={dashboardUser} />\n      </main>\n    </div>\n  );\n}","size_bytes":12922},"client/src/pages/modern-doctor-dashboard.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Users, \n  Stethoscope, \n  Calendar, \n  ClipboardList, \n  Activity,\n  LogOut,\n  Clock,\n  AlertCircle,\n  ChevronRight,\n  UserCheck,\n  Heart,\n  Thermometer,\n  ArrowUp,\n  ArrowDown,\n  Pill,\n  TestTube,\n  FileText,\n  Brain\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Sidebar Component\nfunction Sidebar({ user }: { user: any }) {\n  const [location] = useLocation();\n  const { logout } = useAuth();\n\n  const menuItems = [\n    { path: \"/modern-doctor\", label: \"Dashboard\", icon: Activity },\n    { path: \"/modern-doctor/patients\", label: \"Patient Queue\", icon: Users },\n    { path: \"/modern-doctor/consultations\", label: \"Consultations\", icon: Stethoscope },\n    { path: \"/modern-doctor/prescriptions\", label: \"Prescriptions\", icon: Pill },\n    { path: \"/modern-doctor/lab-orders\", label: \"Lab Orders\", icon: TestTube },\n    { path: \"/modern-doctor/appointments\", label: \"Appointments\", icon: Calendar }\n  ];\n\n  return (\n    <div className=\"w-64 bg-[#0a0a2e] border-r border-[#1a1a5e] p-6 h-screen flex flex-col\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#265651] to-[#6BBDB4]\">\n          Erlessed\n        </h1>\n        <p className=\"text-sm text-gray-400 mt-1\">Doctor Portal</p>\n      </div>\n\n      <div className=\"mb-8 p-4 bg-[#1a1150] rounded-lg border border-[#2a1a5e]\">\n        <p className=\"text-sm text-gray-400\">Logged in as</p>\n        <p className=\"font-semibold text-white\">{user.name}</p>\n        <p className=\"text-xs text-[#6BBDB4] mt-1 capitalize\">{user.role}</p>\n        {user.isPremium && (\n          <span className=\"inline-block mt-2 px-2 py-1 text-xs bg-gradient-to-r from-[#265651] to-[#6BBDB4] rounded-full text-white\">\n            Premium\n          </span>\n        )}\n      </div>\n\n      <nav className=\"space-y-2 flex-1\">\n        {menuItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 cursor-pointer\",\n                  isActive\n                    ? \"bg-gradient-to-r from-[#265651]/20 to-[#6BBDB4]/20 text-white border border-[#6BBDB4]/30\"\n                    : \"text-gray-400 hover:text-white hover:bg-[#1a1150]\"\n                )}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <div className=\"pt-8\">\n        <button\n          onClick={logout}\n          className=\"flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-400 hover:text-white hover:bg-[#1a1150] w-full transition-all duration-200\"\n        >\n          <LogOut className=\"w-5 h-5\" />\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// Welcome Card Component\nfunction WelcomeCard({ user }: { user: any }) {\n  return (\n    <Card className=\"bg-gradient-to-r from-[#1a1150] to-[#2a1a5e] border-[#3a2a6e]\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-2\">\n          Welcome back, Dr. {user.name}!\n        </h2>\n        <p className=\"text-gray-300\">\n          You have 12 patients in queue today. Your next consultation is with John Kamau in 15 minutes.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Stats Component\nfunction QuickStats({ user }: { user: any }) {\n  const stats = [\n    {\n      label: \"Patients Today\",\n      value: \"24\",\n      change: \"+3\",\n      trend: \"up\",\n      icon: Users,\n      color: \"from-blue-500 to-blue-600\"\n    },\n    {\n      label: \"Consultations\",\n      value: \"18\",\n      change: \"+2\",\n      trend: \"up\",\n      icon: Stethoscope,\n      color: \"from-green-500 to-green-600\"\n    },\n    {\n      label: \"Lab Orders\",\n      value: \"8\",\n      change: \"-1\",\n      trend: \"down\",\n      icon: TestTube,\n      color: \"from-purple-500 to-purple-600\"\n    },\n    {\n      label: \"Prescriptions\",\n      value: \"32\",\n      change: \"+5\",\n      trend: \"up\",\n      icon: Pill,\n      color: \"from-orange-500 to-orange-600\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        const TrendIcon = stat.trend === \"up\" ? ArrowUp : ArrowDown;\n        \n        return (\n          <Card key={index} className=\"bg-[#1a1150] border-[#2a1a5e] hover:border-[#3a2a6e] transition-all\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`p-3 rounded-lg bg-gradient-to-r ${stat.color}`}>\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <Badge \n                  variant=\"secondary\" \n                  className={cn(\n                    \"flex items-center gap-1\",\n                    stat.trend === \"up\" ? \"text-green-400\" : \"text-red-400\"\n                  )}\n                >\n                  <TrendIcon className=\"w-3 h-3\" />\n                  {stat.change}\n                </Badge>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white\">{stat.value}</h3>\n              <p className=\"text-sm text-gray-400 mt-1\">{stat.label}</p>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n// Recent Claims Component (Patient Queue for Doctors)\nfunction RecentClaims() {\n  const patients = [\n    {\n      queueNumber: \"Q001\",\n      name: \"John Kamau\",\n      complaint: \"Chest pain, shortness of breath\",\n      priority: \"high\",\n      vitals: \"BP: 150/90, Temp: 37.8°C\",\n      waitTime: \"15 min\"\n    },\n    {\n      queueNumber: \"Q002\",\n      name: \"Mary Wanjiru\",\n      complaint: \"Headache, fever\",\n      priority: \"normal\",\n      vitals: \"BP: 120/80, Temp: 38.2°C\",\n      waitTime: \"25 min\"\n    },\n    {\n      queueNumber: \"Q003\",\n      name: \"Peter Ochieng\",\n      complaint: \"Follow-up consultation\",\n      priority: \"low\",\n      vitals: \"BP: 118/75, Temp: 36.8°C\",\n      waitTime: \"35 min\"\n    },\n    {\n      queueNumber: \"Q004\",\n      name: \"Grace Muthoni\",\n      complaint: \"Abdominal pain\",\n      priority: \"normal\",\n      vitals: \"BP: 125/82, Temp: 37.2°C\",\n      waitTime: \"45 min\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-[#1a1150] border-[#2a1a5e]\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-white\">Patient Queue</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-[#6BBDB4] hover:text-[#6BBDB4]/80\">\n            View All\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {patients.map((patient) => (\n            <div \n              key={patient.queueNumber} \n              className=\"flex items-center justify-between p-4 rounded-lg bg-[#0a0a2e] border border-[#2a1a5e] hover:border-[#3a2a6e] transition-all\"\n            >\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-3\">\n                  <h4 className=\"font-medium text-white\">{patient.queueNumber} - {patient.name}</h4>\n                  <Badge \n                    variant={\n                      patient.priority === \"high\" ? \"destructive\" :\n                      patient.priority === \"normal\" ? \"secondary\" : \"default\"\n                    }\n                    className={cn(\n                      patient.priority === \"high\" && \"bg-red-500/20 text-red-400 border-red-500/30\",\n                      patient.priority === \"normal\" && \"bg-blue-500/20 text-blue-400 border-blue-500/30\",\n                      patient.priority === \"low\" && \"bg-green-500/20 text-green-400 border-green-500/30\"\n                    )}\n                  >\n                    {patient.priority} priority\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-gray-400 mt-1\">{patient.complaint}</p>\n                <p className=\"text-xs text-gray-500 mt-1\">{patient.vitals}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-400\">Wait time</p>\n                <p className=\"font-semibold text-white\">{patient.waitTime}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Actions Component\nfunction QuickActions({ user }: { user: any }) {\n  const actions = [\n    {\n      label: \"Start Consultation\",\n      description: \"Begin patient consultation\",\n      icon: Stethoscope,\n      color: \"from-blue-500 to-blue-600\",\n      href: \"/modern-doctor/consultation/new\"\n    },\n    {\n      label: \"Write Prescription\",\n      description: \"Create new prescription\",\n      icon: FileText,\n      color: \"from-green-500 to-green-600\",\n      href: \"/modern-doctor/prescription/new\"\n    },\n    {\n      label: \"Order Lab Tests\",\n      description: \"Request laboratory tests\",\n      icon: TestTube,\n      color: \"from-purple-500 to-purple-600\",\n      href: \"/modern-doctor/lab-order/new\"\n    },\n    {\n      label: \"AI Diagnosis\",\n      description: \"Get AI-assisted diagnosis\",\n      icon: Brain,\n      color: \"from-orange-500 to-orange-600\",\n      href: \"/modern-doctor/ai-assist\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-[#1a1150] border-[#2a1a5e]\">\n      <CardHeader>\n        <CardTitle className=\"text-white\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {actions.map((action, index) => {\n            const Icon = action.icon;\n            \n            return (\n              <Link key={index} href={action.href}>\n                <div className=\"block p-4 rounded-lg bg-[#0a0a2e] border border-[#2a1a5e] hover:border-[#3a2a6e] transition-all group cursor-pointer\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className={`p-3 rounded-lg bg-gradient-to-r ${action.color} group-hover:scale-110 transition-transform`}>\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-white group-hover:text-[#6BBDB4] transition-colors\">\n                        {action.label}\n                      </h4>\n                      <p className=\"text-sm text-gray-400 mt-1\">\n                        {action.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Main Component\nexport default function ModernDoctorDashboard() {\n  const { user } = useAuth();\n  \n  const dashboardUser = {\n    name: user?.name || \"Doctor\",\n    role: user?.role || \"doctor\",\n    isPremium: true\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#0e0d3c] via-[#1b1150] to-[#2a1a5e] text-white\">\n      <Sidebar user={dashboardUser} />\n      <main className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n        <WelcomeCard user={dashboardUser} />\n        <QuickStats user={dashboardUser} />\n        <RecentClaims />\n        <QuickActions user={dashboardUser} />\n      </main>\n    </div>\n  );\n}","size_bytes":11793},"client/src/pages/modern-front-office-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { SharedLayout } from \"@/components/layout/shared-layout\";\nimport { BiometricVerificationModal } from \"@/components/biometric-verification-modal\";\nimport { ClaimFormGenerator } from \"@/components/claim-form-generator\";\nimport { \n  Users, Calendar, FileText, CreditCard, Clock, Phone, \n  CheckCircle, AlertCircle, Search, Plus, User, MapPin,\n  Fingerprint, Shield, Activity, TrendingUp\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Appointment {\n  id: number;\n  patient: {\n    firstName: string;\n    lastName: string;\n    patientId: string;\n    phoneNumber: string;\n    email: string;\n    insuranceProvider: string;\n    memberId: string;\n  };\n  appointmentType: string;\n  scheduledTime: string;\n  status: \"scheduled\" | \"checked_in\" | \"in_progress\" | \"completed\" | \"cancelled\";\n  doctor: string;\n  department: string;\n  notes?: string;\n}\n\ninterface WalkInPatient {\n  id: number;\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  chiefComplaint: string;\n  urgency: \"low\" | \"medium\" | \"high\";\n  registeredAt: string;\n  insurance?: {\n    provider: string;\n    memberId: string;\n  };\n}\n\nexport default function ModernFrontOfficeDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"appointments\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);\n  const [showBiometricModal, setShowBiometricModal] = useState(false);\n  const [showClaimGenerator, setShowClaimGenerator] = useState(false);\n  const [verifiedPatient, setVerifiedPatient] = useState<any>(null);\n\n  // Mock data\n  const appointments: Appointment[] = [\n    {\n      id: 1,\n      patient: {\n        firstName: \"Sarah\",\n        lastName: \"Johnson\",\n        patientId: \"PT-2024-001\",\n        phoneNumber: \"+254712345678\",\n        email: \"sarah.j@email.com\",\n        insuranceProvider: \"CIC Insurance\",\n        memberId: \"CIC-001234567\"\n      },\n      appointmentType: \"General Consultation\",\n      scheduledTime: \"2024-06-21T09:00:00Z\",\n      status: \"scheduled\",\n      doctor: \"Dr. James Mwangi\",\n      department: \"General Medicine\"\n    },\n    {\n      id: 2,\n      patient: {\n        firstName: \"Michael\",\n        lastName: \"Ochieng\",\n        patientId: \"PT-2024-002\",\n        phoneNumber: \"+254723456789\",\n        email: \"michael.o@email.com\",\n        insuranceProvider: \"AAR Insurance\",\n        memberId: \"AAR-987654321\"\n      },\n      appointmentType: \"Follow-up Visit\",\n      scheduledTime: \"2024-06-21T10:30:00Z\",\n      status: \"checked_in\",\n      doctor: \"Dr. Grace Wanjiku\",\n      department: \"Endocrinology\"\n    },\n    {\n      id: 3,\n      patient: {\n        firstName: \"Grace\",\n        lastName: \"Wanjiku\",\n        patientId: \"PT-2024-003\",\n        phoneNumber: \"+254734567890\",\n        email: \"grace.w@email.com\",\n        insuranceProvider: \"SHA\",\n        memberId: \"SHA-567890123\"\n      },\n      appointmentType: \"Specialist Consultation\",\n      scheduledTime: \"2024-06-21T14:00:00Z\",\n      status: \"scheduled\",\n      doctor: \"Dr. Peter Kimani\",\n      department: \"Cardiology\"\n    }\n  ];\n\n  const walkInPatients: WalkInPatient[] = [\n    {\n      id: 1,\n      firstName: \"David\",\n      lastName: \"Mwiti\",\n      phoneNumber: \"+254745678901\",\n      chiefComplaint: \"Chest pain\",\n      urgency: \"high\",\n      registeredAt: \"2024-06-21T08:45:00Z\",\n      insurance: {\n        provider: \"CIC Insurance\",\n        memberId: \"CIC-445566778\"\n      }\n    },\n    {\n      id: 2,\n      firstName: \"Mary\",\n      lastName: \"Njeri\",\n      phoneNumber: \"+254756789012\",\n      chiefComplaint: \"Headache and fever\",\n      urgency: \"medium\",\n      registeredAt: \"2024-06-21T09:15:00Z\"\n    }\n  ];\n\n  const sidebarItems = [\n    { path: \"/front-office\", icon: <Calendar className=\"h-5 w-5\" />, label: \"Appointments\", badge: appointments.length.toString() },\n    { path: \"/front-office/walk-ins\", icon: <Users className=\"h-5 w-5\" />, label: \"Walk-in Patients\", badge: walkInPatients.length.toString() },\n    { path: \"/front-office/registration\", icon: <FileText className=\"h-5 w-5\" />, label: \"Patient Registration\" },\n    { path: \"/front-office/insurance\", icon: <Shield className=\"h-5 w-5\" />, label: \"Insurance Verification\" },\n    { path: \"/front-office/billing\", icon: <CreditCard className=\"h-5 w-5\" />, label: \"Billing & Claims\" },\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"checked_in\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"in_progress\": return \"bg-purple-100 text-purple-800 border-purple-200\";\n      case \"completed\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"cancelled\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case \"high\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"medium\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"low\": return \"bg-green-100 text-green-800 border-green-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const handleBiometricVerification = (patientData: any) => {\n    setVerifiedPatient(patientData);\n    toast({\n      title: \"Patient Verified\",\n      description: `Identity confirmed for ${patientData.firstName} ${patientData.lastName}`,\n    });\n  };\n\n  const handleGenerateClaim = () => {\n    if (!verifiedPatient) {\n      toast({\n        title: \"Verification Required\",\n        description: \"Please verify patient identity first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setShowClaimGenerator(true);\n  };\n\n  const checkInPatient = (appointmentId: number) => {\n    toast({\n      title: \"Patient Checked In\",\n      description: \"Patient has been successfully checked in\",\n    });\n  };\n\n  const startInsuranceVerification = (patient: any) => {\n    setShowBiometricModal(true);\n  };\n\n  return (\n    <SharedLayout sidebarItems={sidebarItems} title=\"Front Office Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Top Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-8 w-8 text-primary\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{appointments.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Today's Appointments</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-8 w-8 text-blue-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{walkInPatients.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Walk-in Patients</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">12</p>\n                  <p className=\"text-sm text-muted-foreground\">Completed Today</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-8 w-8 text-purple-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">95%</p>\n                  <p className=\"text-sm text-muted-foreground\">Check-in Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"appointments\">Appointments</TabsTrigger>\n            <TabsTrigger value=\"walk-ins\">Walk-in Patients</TabsTrigger>\n            <TabsTrigger value=\"registration\">New Registration</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"appointments\" className=\"space-y-4 mt-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Today's Appointments</h2>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search appointments...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {appointments.map((appointment) => (\n                <Card key={appointment.id} className=\"card-hover\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          {appointment.patient.firstName} {appointment.patient.lastName}\n                        </CardTitle>\n                        <CardDescription>\n                          {appointment.patient.patientId} | {appointment.patient.phoneNumber}\n                        </CardDescription>\n                      </div>\n                      <Badge className={getStatusColor(appointment.status)}>\n                        {appointment.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Appointment Type</p>\n                        <p className=\"font-medium\">{appointment.appointmentType}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Scheduled Time</p>\n                        <p className=\"font-medium\">{new Date(appointment.scheduledTime).toLocaleTimeString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Doctor</p>\n                        <p className=\"font-medium\">{appointment.doctor}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Department</p>\n                        <p className=\"font-medium\">{appointment.department}</p>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"text-sm\">\n                      <p className=\"text-muted-foreground mb-1\">Insurance Information</p>\n                      <div className=\"flex justify-between\">\n                        <span>Provider:</span>\n                        <span className=\"font-medium\">{appointment.patient.insuranceProvider}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Member ID:</span>\n                        <span className=\"font-medium\">{appointment.patient.memberId}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      {appointment.status === \"scheduled\" && (\n                        <Button \n                          size=\"sm\" \n                          onClick={() => checkInPatient(appointment.id)}\n                          className=\"flex-1\"\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Check In\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => startInsuranceVerification(appointment.patient)}\n                        className=\"flex-1\"\n                      >\n                        <Fingerprint className=\"h-4 w-4 mr-1\" />\n                        Verify Insurance\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"walk-ins\" className=\"space-y-4 mt-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Walk-in Patients</h2>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Register Walk-in\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              {walkInPatients.map((patient) => (\n                <Card key={patient.id} className=\"card-hover\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium text-lg\">\n                            {patient.firstName} {patient.lastName}\n                          </h3>\n                          <Badge className={getUrgencyColor(patient.urgency)}>\n                            {patient.urgency.toUpperCase()} PRIORITY\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{patient.phoneNumber}</p>\n                        <p className=\"text-sm\"><span className=\"font-medium\">Chief Complaint:</span> {patient.chiefComplaint}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Registered: {new Date(patient.registeredAt).toLocaleString()}\n                        </p>\n                        {patient.insurance && (\n                          <div className=\"text-sm\">\n                            <p><span className=\"font-medium\">Insurance:</span> {patient.insurance.provider}</p>\n                            <p><span className=\"font-medium\">Member ID:</span> {patient.insurance.memberId}</p>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-col space-y-2\">\n                        <Button size=\"sm\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          Schedule\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Fingerprint className=\"h-4 w-4 mr-1\" />\n                          Verify Identity\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"registration\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>New Patient Registration</CardTitle>\n                <CardDescription>Register a new patient and verify insurance information</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input id=\"firstName\" placeholder=\"Enter first name\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input id=\"lastName\" placeholder=\"Enter last name\" />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                    <Input id=\"dateOfBirth\" type=\"date\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"gender\">Gender</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select gender\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input id=\"phone\" placeholder=\"+254...\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input id=\"email\" type=\"email\" placeholder=\"patient@email.com\" />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Insurance Information</h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"insuranceProvider\">Insurance Provider</Label>\n                      <Select>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select provider\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"CIC\">CIC Insurance</SelectItem>\n                          <SelectItem value=\"AAR\">AAR Insurance</SelectItem>\n                          <SelectItem value=\"SHA\">Social Health Authority</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"memberId\">Member ID</Label>\n                      <Input id=\"memberId\" placeholder=\"Insurance member ID\" />\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                  <Input id=\"emergencyContact\" placeholder=\"Emergency contact number\" />\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <Button className=\"flex-1\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Register Patient\n                  </Button>\n                  <Button variant=\"outline\" className=\"flex-1\">\n                    <Fingerprint className=\"h-4 w-4 mr-2\" />\n                    Register with Biometric\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Patient Verification Section */}\n        {verifiedPatient && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                <span>Patient Verified</span>\n              </CardTitle>\n              <CardDescription>\n                Identity confirmed for insurance processing\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-muted-foreground\">Patient Name</p>\n                  <p className=\"font-medium\">{verifiedPatient.firstName} {verifiedPatient.lastName}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Member ID</p>\n                  <p className=\"font-medium\">{verifiedPatient.memberId}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Insurance Provider</p>\n                  <p className=\"font-medium\">{verifiedPatient.insurerName}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Verification Status</p>\n                  <Badge className=\"bg-green-100 text-green-800\">VERIFIED</Badge>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button onClick={handleGenerateClaim} className=\"flex-1\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Generate Claim Form\n                </Button>\n                <Button variant=\"outline\">\n                  <Shield className=\"h-4 w-4 mr-2\" />\n                  Check Benefits\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Biometric Verification Modal */}\n        <BiometricVerificationModal\n          isOpen={showBiometricModal}\n          onClose={() => setShowBiometricModal(false)}\n          onVerificationComplete={handleBiometricVerification}\n        />\n\n        {/* Claim Form Generator */}\n        {verifiedPatient && (\n          <ClaimFormGenerator\n            isOpen={showClaimGenerator}\n            onClose={() => setShowClaimGenerator(false)}\n            patientData={verifiedPatient}\n          />\n        )}\n      </div>\n    </SharedLayout>\n  );\n}","size_bytes":22823},"client/src/pages/modern-insurer-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { SharedLayout } from \"@/components/layout/shared-layout\";\nimport { \n  Shield, TrendingUp, AlertTriangle, DollarSign, Clock, FileText, \n  Settings, CheckCircle, XCircle, Search, Zap, Brain, BarChart3,\n  Users, Activity, Target, AlertCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface PreauthorizationRequest {\n  id: number;\n  patient: {\n    firstName: string;\n    lastName: string;\n    patientId: string;\n    age: number;\n    gender: string;\n    membershipNumber: string;\n    scheme: string;\n  };\n  provider: {\n    name: string;\n    type: string;\n    riskScore: number;\n  };\n  serviceType: string;\n  procedureCode: string;\n  diagnosis: string;\n  icd10Code: string;\n  clinicalJustification: string;\n  estimatedCost: number;\n  urgency: \"routine\" | \"urgent\" | \"emergency\";\n  requestedBy: string;\n  submittedAt: string;\n  aiDecision: \"approved\" | \"denied\" | \"review_required\";\n  aiConfidence: number;\n  aiReasoning: string[];\n  status: \"pending\" | \"approved\" | \"denied\" | \"review_required\";\n}\n\ninterface SchemeUsage {\n  schemeId: string;\n  schemeName: string;\n  totalLimit: number;\n  usedAmount: number;\n  remainingAmount: number;\n  utilizationPercentage: number;\n  memberCount: number;\n  burnoutRisk: \"low\" | \"medium\" | \"high\";\n  projectedBurnout?: string;\n}\n\nexport default function ModernInsurerDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedRequest, setSelectedRequest] = useState<PreauthorizationRequest | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [urgencyFilter, setUrgencyFilter] = useState(\"all\");\n  const [overrideReason, setOverrideReason] = useState(\"\");\n\n  // Mock data\n  const preauthorizationRequests: PreauthorizationRequest[] = [\n    {\n      id: 1,\n      patient: {\n        firstName: \"Sarah\",\n        lastName: \"Johnson\",\n        patientId: \"PT-2024-001\",\n        age: 38,\n        gender: \"Female\",\n        membershipNumber: \"NHIF-001234567\",\n        scheme: \"Essential Package\"\n      },\n      provider: {\n        name: \"Aga Khan Hospital\",\n        type: \"Tertiary Hospital\",\n        riskScore: 15\n      },\n      serviceType: \"Cardiac Catheterization\",\n      procedureCode: \"93458\",\n      diagnosis: \"Coronary Artery Disease\",\n      icd10Code: \"I25.10\",\n      clinicalJustification: \"Patient presents with chest pain and abnormal stress test. Catheterization needed to assess coronary anatomy for treatment planning.\",\n      estimatedCost: 450000,\n      urgency: \"urgent\",\n      requestedBy: \"Dr. James Mwangi\",\n      submittedAt: \"2024-06-20T08:30:00Z\",\n      aiDecision: \"approved\",\n      aiConfidence: 87,\n      aiReasoning: [\n        \"Clinical indicators support necessity of procedure\",\n        \"Provider has excellent track record\",\n        \"Cost within expected range for this procedure\",\n        \"Patient age and condition warrant intervention\"\n      ],\n      status: \"pending\"\n    },\n    {\n      id: 2,\n      patient: {\n        firstName: \"Michael\",\n        lastName: \"Ochieng\",\n        patientId: \"PT-2024-002\",\n        age: 47,\n        gender: \"Male\",\n        membershipNumber: \"CORP-987654321\",\n        scheme: \"Corporate Plus\"\n      },\n      provider: {\n        name: \"Nairobi Hospital\",\n        type: \"Private Hospital\",\n        riskScore: 8\n      },\n      serviceType: \"MRI Brain with Contrast\",\n      procedureCode: \"70553\",\n      diagnosis: \"Chronic Headaches\",\n      icd10Code: \"G44.209\",\n      clinicalJustification: \"Patient has persistent headaches not responding to treatment. MRI needed to rule out structural abnormalities.\",\n      estimatedCost: 85000,\n      urgency: \"routine\",\n      requestedBy: \"Dr. Grace Wanjiku\",\n      submittedAt: \"2024-06-20T09:15:00Z\",\n      aiDecision: \"review_required\",\n      aiConfidence: 65,\n      aiReasoning: [\n        \"Moderate clinical necessity indicated\",\n        \"Alternative imaging options available\",\n        \"Provider cost variance noted\",\n        \"Requires human review for final decision\"\n      ],\n      status: \"pending\"\n    },\n    {\n      id: 3,\n      patient: {\n        firstName: \"Grace\",\n        lastName: \"Wanjiku\",\n        patientId: \"PT-2024-003\",\n        age: 29,\n        gender: \"Female\",\n        membershipNumber: \"NHIF-567890123\",\n        scheme: \"Essential Package\"\n      },\n      provider: {\n        name: \"Kenyatta National Hospital\",\n        type: \"Public Hospital\",\n        riskScore: 28\n      },\n      serviceType: \"Cosmetic Surgery\",\n      procedureCode: \"15824\",\n      diagnosis: \"Aesthetic Enhancement\",\n      icd10Code: \"Z41.1\",\n      clinicalJustification: \"Patient requests aesthetic improvement procedure.\",\n      estimatedCost: 200000,\n      urgency: \"routine\",\n      requestedBy: \"Dr. Peter Kimani\",\n      submittedAt: \"2024-06-20T10:00:00Z\",\n      aiDecision: \"denied\",\n      aiConfidence: 95,\n      aiReasoning: [\n        \"Procedure not medically necessary\",\n        \"Cosmetic procedures excluded from scheme coverage\",\n        \"No clinical indication for intervention\",\n        \"Patient can seek private payment option\"\n      ],\n      status: \"pending\"\n    }\n  ];\n\n  const schemeUsage: SchemeUsage[] = [\n    {\n      schemeId: \"SHA-ESS\",\n      schemeName: \"SHA Essential Package\",\n      totalLimit: 50000000,\n      usedAmount: 42000000,\n      remainingAmount: 8000000,\n      utilizationPercentage: 84,\n      memberCount: 1250,\n      burnoutRisk: \"high\",\n      projectedBurnout: \"2024-08-15\"\n    },\n    {\n      schemeId: \"CORP-PLUS\",\n      schemeName: \"Corporate Plus\",\n      totalLimit: 25000000,\n      usedAmount: 15600000,\n      remainingAmount: 9400000,\n      utilizationPercentage: 62,\n      memberCount: 450,\n      burnoutRisk: \"medium\"\n    },\n    {\n      schemeId: \"PRIV-GOLD\",\n      schemeName: \"Private Gold\",\n      totalLimit: 15000000,\n      usedAmount: 4200000,\n      remainingAmount: 10800000,\n      utilizationPercentage: 28,\n      memberCount: 180,\n      burnoutRisk: \"low\"\n    }\n  ];\n\n  const sidebarItems = [\n    { path: \"/insurer\", icon: <Shield className=\"h-5 w-5\" />, label: \"Preauthorization\", badge: \"3\" },\n    { path: \"/insurer/claims\", icon: <FileText className=\"h-5 w-5\" />, label: \"Claims Processing\" },\n    { path: \"/insurer/schemes\", icon: <Target className=\"h-5 w-5\" />, label: \"Scheme Management\" },\n    { path: \"/insurer/appeals\", icon: <AlertTriangle className=\"h-5 w-5\" />, label: \"Appeals\" },\n    { path: \"/insurer/analytics\", icon: <BarChart3 className=\"h-5 w-5\" />, label: \"Analytics\" },\n    { path: \"/insurer/settings\", icon: <Settings className=\"h-5 w-5\" />, label: \"Configuration\" },\n  ];\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case \"emergency\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"urgent\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"routine\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getDecisionColor = (decision: string) => {\n    switch (decision) {\n      case \"approved\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"denied\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"review_required\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 80) return \"text-green-600\";\n    if (confidence >= 60) return \"text-orange-600\";\n    return \"text-red-600\";\n  };\n\n  const getBurnoutRiskColor = (risk: string) => {\n    switch (risk) {\n      case \"high\": return \"text-red-600 bg-red-50\";\n      case \"medium\": return \"text-orange-600 bg-orange-50\";\n      case \"low\": return \"text-green-600 bg-green-50\";\n      default: return \"text-gray-600 bg-gray-50\";\n    }\n  };\n\n  const processDecision = async (requestId: number, decision: \"approved\" | \"denied\", reason?: string) => {\n    toast({\n      title: \"Decision Processed\",\n      description: `Preauthorization request ${decision} successfully`,\n    });\n    \n    setSelectedRequest(null);\n    setOverrideReason(\"\");\n  };\n\n  const getDecisionIcon = (decision: string) => {\n    switch (decision) {\n      case \"approved\": return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"denied\": return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case \"review_required\": return <AlertCircle className=\"h-4 w-4 text-orange-600\" />;\n      default: return <Clock className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  return (\n    <SharedLayout sidebarItems={sidebarItems} title=\"Insurer Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Top Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"h-8 w-8 text-primary\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">3</p>\n                  <p className=\"text-sm text-muted-foreground\">Pending Requests</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">87%</p>\n                  <p className=\"text-sm text-muted-foreground\">Auto-approval Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"h-8 w-8 text-orange-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">5</p>\n                  <p className=\"text-sm text-muted-foreground\">Appeals</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-8 w-8 text-blue-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">KES 3.2M</p>\n                  <p className=\"text-sm text-muted-foreground\">Today's Approvals</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Panel - Request Queue */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Preauthorization Queue</h2>\n              <div className=\"flex space-x-2\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search requests...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10 w-40\"\n                  />\n                </div>\n                <Select value={urgencyFilter} onValueChange={setUrgencyFilter}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All</SelectItem>\n                    <SelectItem value=\"emergency\">Emergency</SelectItem>\n                    <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    <SelectItem value=\"routine\">Routine</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              {preauthorizationRequests.map((request) => (\n                <Card \n                  key={request.id} \n                  className={`card-hover cursor-pointer transition-all ${\n                    selectedRequest?.id === request.id ? 'ring-2 ring-primary' : ''\n                  } ${request.urgency === 'emergency' ? 'border-l-4 border-l-red-500' : \n                     request.urgency === 'urgent' ? 'border-l-4 border-l-orange-500' : ''}`}\n                  onClick={() => setSelectedRequest(request)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <h3 className=\"font-medium\">\n                            {request.patient.firstName} {request.patient.lastName}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {request.patient.membershipNumber}\n                          </p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Badge className={getUrgencyColor(request.urgency)}>\n                            {request.urgency.toUpperCase()}\n                          </Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-1\">\n                        <p className=\"font-medium text-primary\">{request.serviceType}</p>\n                        <p className=\"text-sm\">{request.diagnosis}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Provider: {request.provider.name}\n                        </p>\n                        <p className=\"text-sm font-medium\">\n                          Est. Cost: KES {request.estimatedCost.toLocaleString()}\n                        </p>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getDecisionIcon(request.aiDecision)}\n                          <Badge className={getDecisionColor(request.aiDecision)}>\n                            {request.aiDecision.replace('_', ' ').toUpperCase()}\n                          </Badge>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xs text-muted-foreground\">Confidence</p>\n                          <p className={`text-sm font-medium ${getConfidenceColor(request.aiConfidence)}`}>\n                            {request.aiConfidence}%\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"text-xs text-muted-foreground\">\n                        Submitted: {new Date(request.submittedAt).toLocaleString()}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Center Panel - Decision Interface */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {selectedRequest ? (\n              <>\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Brain className=\"h-5 w-5 text-purple-500\" />\n                      <span>Decision Support Analysis</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Request for {selectedRequest.serviceType} - {selectedRequest.patient.firstName} {selectedRequest.patient.lastName}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Patient & Provider Info */}\n                    <div className=\"grid grid-cols-2 gap-6\">\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-medium\">Patient Information</h4>\n                        <div className=\"text-sm space-y-1\">\n                          <p><span className=\"font-medium\">Age:</span> {selectedRequest.patient.age}</p>\n                          <p><span className=\"font-medium\">Gender:</span> {selectedRequest.patient.gender}</p>\n                          <p><span className=\"font-medium\">Scheme:</span> {selectedRequest.patient.scheme}</p>\n                          <p><span className=\"font-medium\">Member ID:</span> {selectedRequest.patient.membershipNumber}</p>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-medium\">Provider Information</h4>\n                        <div className=\"text-sm space-y-1\">\n                          <p><span className=\"font-medium\">Facility:</span> {selectedRequest.provider.name}</p>\n                          <p><span className=\"font-medium\">Type:</span> {selectedRequest.provider.type}</p>\n                          <p><span className=\"font-medium\">Risk Score:</span> \n                            <Badge className={getBurnoutRiskColor(selectedRequest.provider.riskScore > 50 ? 'high' : selectedRequest.provider.riskScore > 25 ? 'medium' : 'low')}>\n                              {selectedRequest.provider.riskScore}%\n                            </Badge>\n                          </p>\n                          <p><span className=\"font-medium\">Requested by:</span> {selectedRequest.requestedBy}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Clinical Information */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">Clinical Details</h4>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <p><span className=\"font-medium\">Procedure:</span> {selectedRequest.serviceType}</p>\n                          <p><span className=\"font-medium\">Code:</span> {selectedRequest.procedureCode}</p>\n                        </div>\n                        <div>\n                          <p><span className=\"font-medium\">Diagnosis:</span> {selectedRequest.diagnosis}</p>\n                          <p><span className=\"font-medium\">ICD-10:</span> {selectedRequest.icd10Code}</p>\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"font-medium mb-2\">Clinical Justification:</p>\n                        <div className=\"p-3 bg-muted rounded-xl text-sm\">\n                          {selectedRequest.clinicalJustification}\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Decision Analysis */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Brain className=\"h-5 w-5 text-purple-500\" />\n                        <h4 className=\"font-medium\">Reasoning Chain</h4>\n                        <Badge className={getDecisionColor(selectedRequest.aiDecision)}>\n                          {selectedRequest.aiDecision.replace('_', ' ').toUpperCase()}\n                        </Badge>\n                        <span className={`text-sm font-medium ${getConfidenceColor(selectedRequest.aiConfidence)}`}>\n                          {selectedRequest.aiConfidence}% Confidence\n                        </span>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        {selectedRequest.aiReasoning.map((reason, index) => (\n                          <div key={index} className=\"flex items-start space-x-2 text-sm\">\n                            <div className=\"w-6 h-6 rounded-full bg-primary/10 text-primary flex items-center justify-center text-xs font-medium mt-0.5\">\n                              {index + 1}\n                            </div>\n                            <p className=\"flex-1\">{reason}</p>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Cost Analysis */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">Cost Analysis</h4>\n                      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Estimated Cost</p>\n                          <p className=\"font-medium text-lg\">KES {selectedRequest.estimatedCost.toLocaleString()}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Scheme Coverage</p>\n                          <p className=\"font-medium text-lg text-green-600\">80%</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Patient Copay</p>\n                          <p className=\"font-medium text-lg\">KES {(selectedRequest.estimatedCost * 0.2).toLocaleString()}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Override Capability */}\n                    {selectedRequest.aiDecision !== \"approved\" && (\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-medium\">Override Decision</h4>\n                        <Textarea\n                          placeholder=\"Provide justification for overriding the automated decision...\"\n                          value={overrideReason}\n                          onChange={(e) => setOverrideReason(e.target.value)}\n                          rows={3}\n                        />\n                      </div>\n                    )}\n\n                    {/* Action Buttons */}\n                    <div className=\"flex space-x-3 pt-4\">\n                      <Button \n                        className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                        onClick={() => processDecision(selectedRequest.id, \"approved\", overrideReason)}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        Approve\n                      </Button>\n                      <Button \n                        variant=\"destructive\" \n                        className=\"flex-1\"\n                        onClick={() => processDecision(selectedRequest.id, \"denied\", overrideReason)}\n                      >\n                        <XCircle className=\"h-4 w-4 mr-2\" />\n                        Deny\n                      </Button>\n                      <Button variant=\"outline\">\n                        <Clock className=\"h-4 w-4 mr-2\" />\n                        Request More Info\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <Card className=\"h-full flex items-center justify-center\">\n                <CardContent className=\"text-center\">\n                  <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium\">Select a Request</h3>\n                  <p className=\"text-muted-foreground\">\n                    Choose a preauthorization request to review and process\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Scheme Usage Monitoring */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Target className=\"h-5 w-5\" />\n              <span>Scheme Usage Monitoring</span>\n            </CardTitle>\n            <CardDescription>\n              Real-time tracking of scheme utilization and burnout alerts\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {schemeUsage.map((scheme) => (\n                <div key={scheme.schemeId} className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium\">{scheme.schemeName}</h4>\n                    <Badge className={getBurnoutRiskColor(scheme.burnoutRisk)}>\n                      {scheme.burnoutRisk.toUpperCase()} RISK\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Utilization</span>\n                      <span className={getConfidenceColor(100 - scheme.utilizationPercentage)}>\n                        {scheme.utilizationPercentage}%\n                      </span>\n                    </div>\n                    <Progress value={scheme.utilizationPercentage} className=\"h-2\" />\n                  </div>\n\n                  <div className=\"text-sm space-y-1\">\n                    <div className=\"flex justify-between\">\n                      <span>Used:</span>\n                      <span>KES {(scheme.usedAmount / 1000000).toFixed(1)}M</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Remaining:</span>\n                      <span>KES {(scheme.remainingAmount / 1000000).toFixed(1)}M</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Members:</span>\n                      <span>{scheme.memberCount.toLocaleString()}</span>\n                    </div>\n                    {scheme.projectedBurnout && (\n                      <div className=\"flex justify-between text-red-600 font-medium\">\n                        <span>Projected Burnout:</span>\n                        <span>{new Date(scheme.projectedBurnout).toLocaleDateString()}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {scheme.burnoutRisk === \"high\" && (\n                    <div className=\"p-3 bg-red-50 border border-red-200 rounded-xl\">\n                      <div className=\"flex items-center space-x-2 text-red-700\">\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        <span className=\"text-sm font-medium\">Burnout Alert</span>\n                      </div>\n                      <p className=\"text-xs text-red-600 mt-1\">\n                        Consider implementing usage controls or member communication\n                      </p>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </SharedLayout>\n  );\n}","size_bytes":27823},"client/src/pages/modern-patient-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { SharedLayout } from \"@/components/layout/shared-layout\";\nimport { \n  User, FileText, Users, DollarSign, AlertCircle, Clock, Plus,\n  Heart, Shield, Activity, CheckCircle, XCircle, Calculator,\n  Phone, MapPin, Calendar, CreditCard\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface PatientClaim {\n  id: number;\n  serviceType: string;\n  provider: string;\n  diagnosis: string;\n  claimAmount: number;\n  copayAmount: number;\n  status: \"approved\" | \"denied\" | \"pending\" | \"void\";\n  serviceDate: string;\n  processedDate?: string;\n  denialReason?: string;\n  canAppeal: boolean;\n}\n\ninterface Dependent {\n  id: number;\n  firstName: string;\n  lastName: string;\n  relationship: string;\n  dateOfBirth: string;\n  gender: string;\n  isActive: boolean;\n}\n\ninterface BenefitUsage {\n  category: string;\n  usedAmount: number;\n  totalLimit: number;\n  utilizationPercentage: number;\n  remainingAmount: number;\n}\n\ninterface PreauthorizedService {\n  id: number;\n  serviceType: string;\n  provider: string;\n  estimatedCost: number;\n  approvedAmount: number;\n  status: \"approved\" | \"partially_approved\" | \"pending\";\n  expiryDate: string;\n  conditions?: string;\n}\n\nexport default function ModernPatientDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedClaim, setSelectedClaim] = useState<PatientClaim | null>(null);\n\n  // Mock data\n  const claims: PatientClaim[] = [\n    {\n      id: 1,\n      serviceType: \"General Consultation\",\n      provider: \"Aga Khan Hospital\",\n      diagnosis: \"Hypertension Follow-up\",\n      claimAmount: 5000,\n      copayAmount: 500,\n      status: \"approved\",\n      serviceDate: \"2024-06-15\",\n      processedDate: \"2024-06-16\",\n      canAppeal: false\n    },\n    {\n      id: 2,\n      serviceType: \"Laboratory Tests\",\n      provider: \"Nairobi Hospital\",\n      diagnosis: \"Diabetes Monitoring\",\n      claimAmount: 3500,\n      copayAmount: 350,\n      status: \"approved\",\n      serviceDate: \"2024-06-10\",\n      processedDate: \"2024-06-11\",\n      canAppeal: false\n    },\n    {\n      id: 3,\n      serviceType: \"Specialist Consultation\",\n      provider: \"Kenyatta National Hospital\",\n      diagnosis: \"Cardiology Consultation\",\n      claimAmount: 8000,\n      copayAmount: 1600,\n      status: \"denied\",\n      serviceDate: \"2024-06-05\",\n      processedDate: \"2024-06-07\",\n      denialReason: \"Service not covered under current benefit category\",\n      canAppeal: true\n    }\n  ];\n\n  const dependents: Dependent[] = [\n    {\n      id: 1,\n      firstName: \"John\",\n      lastName: \"Doe Jr.\",\n      relationship: \"Son\",\n      dateOfBirth: \"2015-03-20\",\n      gender: \"Male\",\n      isActive: true\n    },\n    {\n      id: 2,\n      firstName: \"Jane\",\n      lastName: \"Doe\",\n      relationship: \"Daughter\",\n      dateOfBirth: \"2018-07-15\",\n      gender: \"Female\",\n      isActive: true\n    }\n  ];\n\n  const benefitUsage: BenefitUsage[] = [\n    {\n      category: \"Outpatient Services\",\n      usedAmount: 25000,\n      totalLimit: 50000,\n      utilizationPercentage: 50,\n      remainingAmount: 25000\n    },\n    {\n      category: \"Specialist Consultations\",\n      usedAmount: 18000,\n      totalLimit: 30000,\n      utilizationPercentage: 60,\n      remainingAmount: 12000\n    },\n    {\n      category: \"Laboratory & Imaging\",\n      usedAmount: 8000,\n      totalLimit: 20000,\n      utilizationPercentage: 40,\n      remainingAmount: 12000\n    },\n    {\n      category: \"Pharmacy\",\n      usedAmount: 15000,\n      totalLimit: 25000,\n      utilizationPercentage: 60,\n      remainingAmount: 10000\n    }\n  ];\n\n  const preauthorizedServices: PreauthorizedService[] = [\n    {\n      id: 1,\n      serviceType: \"MRI Scan\",\n      provider: \"Nairobi Hospital\",\n      estimatedCost: 45000,\n      approvedAmount: 40000,\n      status: \"approved\",\n      expiryDate: \"2024-07-20\",\n      conditions: \"Prior authorization valid for 30 days\"\n    },\n    {\n      id: 2,\n      serviceType: \"Physical Therapy\",\n      provider: \"Rehab Center\",\n      estimatedCost: 12000,\n      approvedAmount: 12000,\n      status: \"approved\",\n      expiryDate: \"2024-08-15\"\n    }\n  ];\n\n  const sidebarItems = [\n    { path: \"/patient\", icon: <User className=\"h-5 w-5\" />, label: \"Overview\" },\n    { path: \"/patient/claims\", icon: <FileText className=\"h-5 w-5\" />, label: \"My Claims\", badge: claims.length.toString() },\n    { path: \"/patient/family\", icon: <Users className=\"h-5 w-5\" />, label: \"Family Members\" },\n    { path: \"/patient/benefits\", icon: <Shield className=\"h-5 w-5\" />, label: \"Benefits\" },\n    { path: \"/patient/appointments\", icon: <Calendar className=\"h-5 w-5\" />, label: \"Appointments\" },\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"denied\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"pending\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"void\": return \"bg-gray-100 text-gray-800 border-gray-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getUtilizationColor = (percentage: number) => {\n    if (percentage >= 80) return \"text-red-600\";\n    if (percentage >= 60) return \"text-orange-600\";\n    return \"text-green-600\";\n  };\n\n  const appealClaim = async (claimId: number) => {\n    toast({\n      title: \"Appeal Submitted\",\n      description: \"Your claim appeal has been submitted for review\",\n    });\n  };\n\n  const calculateHealthScore = () => {\n    // Mock health score calculation based on recent claims and visits\n    const recentClaims = claims.filter(claim => \n      new Date(claim.serviceDate) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n    ).length;\n    \n    const baseScore = 85;\n    const penalty = Math.min(recentClaims * 5, 20); // Max 20 point penalty\n    return Math.max(baseScore - penalty, 40);\n  };\n\n  const healthScore = calculateHealthScore();\n\n  return (\n    <SharedLayout sidebarItems={sidebarItems} title=\"Patient Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Health Score Widget */}\n        <Card className=\"card-hover\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold\">Health Score</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Based on recent healthcare activity and prevention\n                </p>\n              </div>\n              <div className=\"relative\">\n                <div className=\"w-24 h-24 rounded-full border-8 border-gray-200 border-t-primary animate-pulse-slow flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-primary\">{healthScore}</p>\n                    <p className=\"text-xs text-muted-foreground\">Score</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Top Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"h-8 w-8 text-primary\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{claims.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Claims</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-8 w-8 text-green-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">\n                    KES {claims.reduce((sum, claim) => sum + claim.claimAmount, 0).toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Total Claims Value</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-8 w-8 text-blue-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{dependents.length + 1}</p>\n                  <p className=\"text-sm text-muted-foreground\">Family Members</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"h-8 w-8 text-purple-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">\n                    {Math.round(benefitUsage.reduce((sum, benefit) => sum + benefit.utilizationPercentage, 0) / benefitUsage.length)}%\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Avg Benefit Usage</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"claims\">Claims History</TabsTrigger>\n            <TabsTrigger value=\"family\">Family</TabsTrigger>\n            <TabsTrigger value=\"benefits\">Benefits</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4 mt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Recent Claims */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Claims</CardTitle>\n                  <CardDescription>Your latest healthcare claims and their status</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {claims.slice(0, 3).map((claim) => (\n                      <div key={claim.id} className=\"border rounded-xl p-4 space-y-2\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">{claim.serviceType}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{claim.provider}</p>\n                          </div>\n                          <Badge className={getStatusColor(claim.status)}>\n                            {claim.status.toUpperCase()}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm space-y-1\">\n                          <p><span className=\"font-medium\">Amount:</span> KES {claim.claimAmount.toLocaleString()}</p>\n                          <p><span className=\"font-medium\">Your Share:</span> KES {claim.copayAmount.toLocaleString()}</p>\n                          <p><span className=\"font-medium\">Date:</span> {new Date(claim.serviceDate).toLocaleDateString()}</p>\n                        </div>\n                        {claim.canAppeal && (\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => appealClaim(claim.id)}>\n                            Appeal Decision\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Preauthorized Services */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Preauthorized Services</CardTitle>\n                  <CardDescription>Services approved for future use</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {preauthorizedServices.map((service) => (\n                      <div key={service.id} className=\"border rounded-xl p-4 space-y-2\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">{service.serviceType}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{service.provider}</p>\n                          </div>\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            APPROVED\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm space-y-1\">\n                          <p><span className=\"font-medium\">Approved Amount:</span> KES {service.approvedAmount.toLocaleString()}</p>\n                          <p><span className=\"font-medium\">Expires:</span> {new Date(service.expiryDate).toLocaleDateString()}</p>\n                          {service.conditions && (\n                            <p className=\"text-xs text-orange-600\">{service.conditions}</p>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"claims\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Claims History</CardTitle>\n                <CardDescription>Complete history of your healthcare claims</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {claims.map((claim) => (\n                    <Card key={claim.id} className=\"card-hover\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div>\n                            <h4 className=\"font-medium\">{claim.serviceType}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{claim.provider}</p>\n                            <p className=\"text-sm text-muted-foreground\">{claim.diagnosis}</p>\n                          </div>\n                          <Badge className={getStatusColor(claim.status)}>\n                            {claim.status.toUpperCase()}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4\">\n                          <div>\n                            <p className=\"text-muted-foreground\">Service Date</p>\n                            <p className=\"font-medium\">{new Date(claim.serviceDate).toLocaleDateString()}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Claim Amount</p>\n                            <p className=\"font-medium\">KES {claim.claimAmount.toLocaleString()}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Your Share</p>\n                            <p className=\"font-medium\">KES {claim.copayAmount.toLocaleString()}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Insurance Covered</p>\n                            <p className=\"font-medium\">KES {(claim.claimAmount - claim.copayAmount).toLocaleString()}</p>\n                          </div>\n                        </div>\n\n                        {claim.denialReason && (\n                          <div className=\"p-3 bg-red-50 border border-red-200 rounded-xl mb-4\">\n                            <p className=\"text-sm text-red-700\">\n                              <span className=\"font-medium\">Denial Reason:</span> {claim.denialReason}\n                            </p>\n                          </div>\n                        )}\n\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <FileText className=\"h-4 w-4 mr-1\" />\n                            View Details\n                          </Button>\n                          {claim.canAppeal && (\n                            <Button size=\"sm\" variant=\"outline\" onClick={() => appealClaim(claim.id)}>\n                              <AlertCircle className=\"h-4 w-4 mr-1\" />\n                              Appeal\n                            </Button>\n                          )}\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Phone className=\"h-4 w-4 mr-1\" />\n                            Contact Provider\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"family\" className=\"space-y-4 mt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Primary Member */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Primary Member</CardTitle>\n                  <CardDescription>Your coverage information</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <User className=\"h-8 w-8 text-primary\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">{user?.name || 'John Doe'}</h3>\n                        <p className=\"text-sm text-muted-foreground\">Primary Member</p>\n                        <Badge className=\"bg-green-100 text-green-800 mt-1\">ACTIVE</Badge>\n                      </div>\n                    </div>\n                    <div className=\"text-sm space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Member ID:</span>\n                        <span className=\"font-medium\">SHA-001234567</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Plan:</span>\n                        <span className=\"font-medium\">SHA Essential Health Package</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Coverage Start:</span>\n                        <span className=\"font-medium\">January 1, 2024</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Dependents */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Family Members</span>\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Add Member\n                    </Button>\n                  </CardTitle>\n                  <CardDescription>Your covered dependents</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {dependents.map((dependent) => (\n                      <div key={dependent.id} className=\"flex items-center justify-between p-3 border rounded-xl\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <User className=\"h-5 w-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium\">{dependent.firstName} {dependent.lastName}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {dependent.relationship} • Age: {new Date().getFullYear() - new Date(dependent.dateOfBirth).getFullYear()}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge className={dependent.isActive ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                          {dependent.isActive ? \"ACTIVE\" : \"INACTIVE\"}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"benefits\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Benefit Utilization</CardTitle>\n                <CardDescription>Track your healthcare benefit usage across different categories</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {benefitUsage.map((benefit) => (\n                    <div key={benefit.category} className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">{benefit.category}</h4>\n                        <span className={`text-sm font-medium ${getUtilizationColor(benefit.utilizationPercentage)}`}>\n                          {benefit.utilizationPercentage}%\n                        </span>\n                      </div>\n                      \n                      <Progress value={benefit.utilizationPercentage} className=\"h-3\" />\n                      \n                      <div className=\"text-sm space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Used:</span>\n                          <span className=\"font-medium\">KES {benefit.usedAmount.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Remaining:</span>\n                          <span className=\"font-medium\">KES {benefit.remainingAmount.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Total Limit:</span>\n                          <span className=\"font-medium\">KES {benefit.totalLimit.toLocaleString()}</span>\n                        </div>\n                      </div>\n\n                      {benefit.utilizationPercentage >= 80 && (\n                        <div className=\"p-3 bg-orange-50 border border-orange-200 rounded-xl\">\n                          <div className=\"flex items-center space-x-2 text-orange-700\">\n                            <AlertCircle className=\"h-4 w-4\" />\n                            <span className=\"text-sm font-medium\">High Usage Alert</span>\n                          </div>\n                          <p className=\"text-xs text-orange-600 mt-1\">\n                            You're approaching your limit for this benefit category\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Cost Estimator */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calculator className=\"h-5 w-5\" />\n                  <span>Cost Estimator</span>\n                </CardTitle>\n                <CardDescription>Estimate costs for upcoming healthcare services</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"service-type\">Service Type</Label>\n                      <Input id=\"service-type\" placeholder=\"e.g., General Consultation\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"provider\">Provider</Label>\n                      <Input id=\"provider\" placeholder=\"e.g., Nairobi Hospital\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"estimated-cost\">Estimated Cost</Label>\n                      <Input id=\"estimated-cost\" placeholder=\"e.g., 5000\" type=\"number\" />\n                    </div>\n                  </div>\n                  <Button className=\"w-full md:w-auto\">\n                    <Calculator className=\"h-4 w-4 mr-2\" />\n                    Calculate Copay\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </SharedLayout>\n  );\n}","size_bytes":25948},"client/src/pages/modern-pharmacy-dashboard-light.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Pill,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  ArrowRight,\n  Home,\n  ClipboardList,\n  Shield,\n  FileSearch,\n  TrendingUp,\n  DollarSign,\n  History,\n  Settings,\n  LogOut,\n  Users,\n  AlertCircle,\n  Package\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n// Sidebar Component with light theme\nfunction Sidebar({ user }: { user: any }) {\n  const [activeItem, setActiveItem] = useState(\"dashboard\");\n  const { logout } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const menuItems = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: Home, href: \"/modern-pharmacy\" },\n    { id: \"prescriptions\", label: \"Prescriptions\", icon: ClipboardList, href: \"/modern-pharmacy/prescriptions\" },\n    { id: \"validation\", label: \"Validation Queue\", icon: Shield, href: \"/modern-pharmacy/validation\" },\n    { id: \"inventory\", label: \"Inventory\", icon: Package, href: \"/modern-pharmacy/inventory\" },\n    { id: \"claims\", label: \"Claims\", icon: FileSearch, href: \"/modern-pharmacy/claims\" },\n    { id: \"reports\", label: \"Reports\", icon: TrendingUp, href: \"/modern-pharmacy/reports\" },\n    { id: \"settings\", label: \"Settings\", icon: Settings, href: \"/modern-pharmacy/settings\" }\n  ];\n\n  return (\n    <div className=\"w-64 bg-white border-r border-gray-200 shadow-sm\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <h1 className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#265651] to-[#6BBDB4]\">\n          Erlessed\n        </h1>\n        <p className=\"text-sm text-gray-600 mt-1\">Pharmacy Dashboard</p>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <p className=\"text-sm font-medium text-gray-900\">{user.name}</p>\n        <p className=\"text-xs text-[#265651] mt-1 capitalize\">{user.role}</p>\n        <Badge className=\"mt-2 bg-[#6BBDB4]/20 text-[#265651] border-[#6BBDB4]/30\">\n          PPB Licensed\n        </Badge>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeItem === item.id;\n            \n            return (\n              <li key={item.id}>\n                <Link href={item.href}>\n                  <div\n                    onClick={() => setActiveItem(item.id)}\n                    className={cn(\n                      \"flex items-center gap-3 px-3 py-2 rounded-lg transition-all cursor-pointer\",\n                      isActive\n                        ? \"bg-gradient-to-r from-[#265651]/10 to-[#6BBDB4]/10 text-[#265651] border border-[#6BBDB4]/30\"\n                        : \"hover:bg-gray-100 text-gray-700 hover:text-[#265651]\"\n                    )}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{item.label}</span>\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Logout Button */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <Button \n          variant=\"ghost\" \n          className=\"w-full justify-start text-gray-700 hover:text-[#265651] hover:bg-gray-100\"\n          onClick={async () => {\n            await logout();\n            setLocation(\"/modern-auth\");\n          }}\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Welcome Card Component\nfunction WelcomeCard({ user }: { user: any }) {\n  return (\n    <Card className=\"bg-gradient-to-r from-[#265651] to-[#6BBDB4] border-0 shadow-md text-white\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">\n              Welcome back, {user.name}!\n            </h2>\n            <p className=\"text-white/90 mt-1\">\n              {user.pendingPrescriptions || 8} prescriptions pending validation\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-white/80\">\n              {new Date().toLocaleDateString('en-US', { \n                weekday: 'long', \n                year: 'numeric', \n                month: 'long', \n                day: 'numeric' \n              })}\n            </p>\n            <Badge className=\"mt-2 bg-white/20 text-white border-white/30\">\n              Pharmacy Operations\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Stats Component\nfunction QuickStats({ user }: { user: any }) {\n  const stats = [\n    {\n      label: \"Prescriptions Today\",\n      value: \"124\",\n      change: \"+12%\",\n      changeType: \"positive\",\n      icon: Pill,\n      color: \"text-[#265651]\",\n      bgColor: \"bg-[#265651]/10\"\n    },\n    {\n      label: \"Validated\",\n      value: \"98\",\n      change: \"79% complete\",\n      icon: CheckCircle,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\"\n    },\n    {\n      label: \"Pending Review\",\n      value: \"26\",\n      change: \"8 urgent\",\n      icon: Clock,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\"\n    },\n    {\n      label: \"Revenue Today\",\n      value: \"KES 156K\",\n      change: \"+22%\",\n      changeType: \"positive\",\n      icon: DollarSign,\n      color: \"text-[#6BBDB4]\",\n      bgColor: \"bg-[#6BBDB4]/10\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        \n        return (\n          <Card key={index} className=\"bg-white border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">{stat.label}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-1\">{stat.value}</p>\n                  <div className=\"flex items-center mt-2\">\n                    <span className={cn(\n                      \"text-sm font-medium\",\n                      stat.changeType === \"positive\" ? \"text-green-600\" : \"text-gray-600\"\n                    )}>\n                      {stat.change}\n                    </span>\n                  </div>\n                </div>\n                <div className={cn(\"p-3 rounded-lg\", stat.bgColor)}>\n                  <Icon className={cn(\"w-6 h-6\", stat.color)} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n// Recent Prescriptions Component\nfunction RecentPrescriptions() {\n  const [, setLocation] = useLocation();\n  const prescriptions = [\n    {\n      id: \"RX-2024-001\",\n      patient: \"John Kamau\",\n      medication: \"Amoxicillin 500mg\",\n      doctor: \"Dr. Sarah Wanjiru\",\n      status: \"validated\",\n      insurer: \"SHA\",\n      time: \"10 mins ago\"\n    },\n    {\n      id: \"RX-2024-002\",\n      patient: \"Mary Njeri\",\n      medication: \"Metformin 850mg + Glimepiride 2mg\",\n      doctor: \"Dr. James Mwangi\",\n      status: \"pending\",\n      insurer: \"CIC\",\n      time: \"25 mins ago\"\n    },\n    {\n      id: \"RX-2024-003\",\n      patient: \"Peter Ochieng\",\n      medication: \"Tramadol 50mg\",\n      doctor: \"Dr. Grace Otieno\",\n      status: \"flagged\",\n      insurer: \"AAR\",\n      time: \"45 mins ago\"\n    },\n    {\n      id: \"RX-2024-004\",\n      patient: \"Alice Wambui\",\n      medication: \"Losartan 50mg\",\n      doctor: \"Dr. Michael Kiprop\",\n      status: \"validated\",\n      insurer: \"SHA\",\n      time: \"1 hour ago\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"text-gray-900\">Recent Prescriptions</CardTitle>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"text-[#265651] hover:text-[#265651]/80\"\n          onClick={() => setLocation(\"/pharmacy\")}\n        >\n          View All <ArrowRight className=\"ml-2 h-4 w-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {prescriptions.map((rx) => (\n            <div key={rx.id} className=\"flex items-center justify-between p-4 rounded-lg bg-gray-50 border border-gray-200 hover:bg-gray-100 transition-colors\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <span className=\"font-medium text-gray-900\">{rx.id}</span>\n                  <Badge \n                    variant={\n                      rx.status === \"validated\" ? \"default\" : \n                      rx.status === \"pending\" ? \"secondary\" : \"destructive\"\n                    }\n                    className={cn(\n                      rx.status === \"validated\" && \"bg-green-100 text-green-700 border-green-300\",\n                      rx.status === \"pending\" && \"bg-yellow-100 text-yellow-700 border-yellow-300\",\n                      rx.status === \"flagged\" && \"bg-red-100 text-red-700 border-red-300\"\n                    )}\n                  >\n                    {rx.status}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-gray-600\">\n                    {rx.insurer}\n                  </Badge>\n                </div>\n                <p className=\"font-medium text-gray-800\">{rx.medication}</p>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {rx.patient} • Prescribed by {rx.doctor}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xs text-gray-500\">{rx.time}</p>\n                <Button \n                  size=\"sm\" \n                  className=\"mt-2 bg-[#265651] hover:bg-[#265651]/90 text-white\"\n                  onClick={() => setLocation(\"/ai-preauth\")}\n                >\n                  Process\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Actions Component\nfunction QuickActions({ user }: { user: any }) {\n  const [, setLocation] = useLocation();\n  \n  const actions = [\n    {\n      label: \"Preauthorization\",\n      description: \"Biometric verification\",\n      icon: Shield,\n      color: \"from-[#265651] to-[#265651]/80\",\n      action: () => setLocation(\"/biometric-demo\")\n    },\n    {\n      label: \"Validate Prescription\",\n      description: \"Check drug interactions\",\n      icon: FileSearch,\n      color: \"from-[#6BBDB4] to-[#6BBDB4]/80\",\n      action: () => setLocation(\"/ai-preauth\")\n    },\n    {\n      label: \"Secure Claim Log\",\n      description: \"Blockchain anchoring\",\n      icon: FileText,\n      color: \"from-purple-500 to-purple-600\",\n      action: () => setLocation(\"/blockchain\")\n    },\n    {\n      label: \"System Analytics\",\n      description: \"Performance metrics\",\n      icon: Package,\n      color: \"from-orange-500 to-orange-600\",\n      action: () => setLocation(\"/analytics\")\n    }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-900\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {actions.map((action, index) => {\n            const Icon = action.icon;\n            \n            return (\n              <Button\n                key={index}\n                variant=\"ghost\"\n                onClick={action.action}\n                className=\"h-auto p-4 rounded-lg bg-gray-50 border border-gray-200 hover:border-[#6BBDB4] hover:bg-[#6BBDB4]/5 transition-all group\"\n              >\n                <div className=\"flex items-start space-x-4 w-full\">\n                  <div className={`p-3 rounded-lg bg-gradient-to-r ${action.color} group-hover:scale-110 transition-transform`}>\n                    <Icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"flex-1 text-left\">\n                    <h4 className=\"font-medium text-gray-900 group-hover:text-[#265651] transition-colors\">\n                      {action.label}\n                    </h4>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {action.description}\n                    </p>\n                  </div>\n                </div>\n              </Button>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// System Status Component\nfunction SystemStatus() {\n  const systems = [\n    { name: \"Intelligence Engine\", status: \"operational\", uptime: \"99.9%\" },\n    { name: \"System Database\", status: \"operational\", uptime: \"100%\" },\n    { name: \"Smart Contract Ledger\", status: \"operational\", uptime: \"98.5%\" },\n    { name: \"Biometric Scanner\", status: \"operational\", uptime: \"100%\" }\n  ];\n\n  return (\n    <Card className=\"bg-white border-gray-200 shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-900\">System Status</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {systems.map((system, index) => (\n            <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-gray-50\">\n              <div className=\"flex items-center gap-3\">\n                <div className={cn(\n                  \"w-2 h-2 rounded-full\",\n                  system.status === \"operational\" ? \"bg-green-500\" : \"bg-red-500\"\n                )} />\n                <span className=\"text-sm font-medium text-gray-700\">{system.name}</span>\n              </div>\n              <span className=\"text-sm text-gray-600\">{system.uptime} uptime</span>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Main Component\nexport default function ModernPharmacyDashboard() {\n  const { user } = useAuth();\n  \n  const dashboardUser = {\n    name: user?.name || \"Pharmacist\",\n    role: user?.role || \"pharmacist\",\n    pendingPrescriptions: 8\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#e8f5f0] via-[#f0faf7] to-[#d1e7e0]\">\n      <Sidebar user={dashboardUser} />\n      <main className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n        <WelcomeCard user={dashboardUser} />\n        <QuickStats user={dashboardUser} />\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <RecentPrescriptions />\n          </div>\n          <div>\n            <SystemStatus />\n          </div>\n        </div>\n        <QuickActions user={dashboardUser} />\n      </main>\n    </div>\n  );\n}","size_bytes":14985},"client/src/pages/modern-pharmacy-dashboard.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Pill, \n  FileText, \n  AlertCircle, \n  CheckCircle, \n  Activity,\n  LogOut,\n  Clock,\n  ChevronRight,\n  Shield,\n  Heart,\n  ArrowUp,\n  ArrowDown,\n  Package,\n  Search,\n  Fingerprint,\n  ShieldCheck\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Sidebar Component\nfunction Sidebar({ user }: { user: any }) {\n  const [location] = useLocation();\n  const { logout } = useAuth();\n\n  const menuItems = [\n    { path: \"/modern-pharmacy\", label: \"Dashboard\", icon: Activity },\n    { path: \"/modern-pharmacy/prescriptions\", label: \"Prescriptions\", icon: FileText },\n    { path: \"/modern-pharmacy/dispensing\", label: \"Dispensing\", icon: Pill },\n    { path: \"/modern-pharmacy/inventory\", label: \"Inventory\", icon: Package },\n    { path: \"/modern-pharmacy/verification\", label: \"Verification\", icon: Shield },\n    { path: \"/modern-pharmacy/reports\", label: \"Reports\", icon: FileText }\n  ];\n\n  return (\n    <div className=\"w-64 bg-[#0a0a2e] border-r border-[#1a1a5e] p-6 h-screen flex flex-col\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#265651] to-[#6BBDB4]\">\n          Erlessed\n        </h1>\n        <p className=\"text-sm text-gray-400 mt-1\">Pharmacy Portal</p>\n      </div>\n\n      <div className=\"mb-8 p-4 bg-[#1a1150] rounded-lg border border-[#2a1a5e]\">\n        <p className=\"text-sm text-gray-400\">Logged in as</p>\n        <p className=\"font-semibold text-white\">{user.name}</p>\n        <p className=\"text-xs text-[#6BBDB4] mt-1 capitalize\">{user.role}</p>\n        {user.isPremium && (\n          <span className=\"inline-block mt-2 px-2 py-1 text-xs bg-gradient-to-r from-[#265651] to-[#6BBDB4] rounded-full text-white\">\n            Premium\n          </span>\n        )}\n      </div>\n\n      <nav className=\"space-y-2 flex-1\">\n        {menuItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 cursor-pointer\",\n                  isActive\n                    ? \"bg-gradient-to-r from-[#265651]/20 to-[#6BBDB4]/20 text-white border border-[#6BBDB4]/30\"\n                    : \"text-gray-400 hover:text-white hover:bg-[#1a1150]\"\n                )}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <div className=\"pt-8\">\n        <button\n          onClick={logout}\n          className=\"flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-400 hover:text-white hover:bg-[#1a1150] w-full transition-all duration-200\"\n        >\n          <LogOut className=\"w-5 h-5\" />\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// Welcome Card Component\nfunction WelcomeCard({ user }: { user: any }) {\n  return (\n    <Card className=\"bg-gradient-to-r from-[#1a1150] to-[#2a1a5e] border-[#3a2a6e]\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-2\">\n          Welcome back, {user.name}!\n        </h2>\n        <p className=\"text-gray-300\">\n          You have 15 prescriptions pending verification. 3 items are low in stock and need reordering.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Stats Component\nfunction QuickStats({ user }: { user: any }) {\n  const stats = [\n    {\n      label: \"Prescriptions Today\",\n      value: \"48\",\n      change: \"+12%\",\n      trend: \"up\",\n      icon: FileText,\n      color: \"from-blue-500 to-blue-600\"\n    },\n    {\n      label: \"Dispensed\",\n      value: \"33\",\n      change: \"+8%\",\n      trend: \"up\",\n      icon: CheckCircle,\n      color: \"from-green-500 to-green-600\"\n    },\n    {\n      label: \"Pending Verification\",\n      value: \"15\",\n      change: \"-5%\",\n      trend: \"down\",\n      icon: Clock,\n      color: \"from-purple-500 to-purple-600\"\n    },\n    {\n      label: \"Safety Alerts\",\n      value: \"2\",\n      change: \"-50%\",\n      trend: \"down\",\n      icon: AlertCircle,\n      color: \"from-orange-500 to-orange-600\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        const TrendIcon = stat.trend === \"up\" ? ArrowUp : ArrowDown;\n        \n        return (\n          <Card key={index} className=\"bg-[#1a1150] border-[#2a1a5e] hover:border-[#3a2a6e] transition-all\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`p-3 rounded-lg bg-gradient-to-r ${stat.color}`}>\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <Badge \n                  variant=\"secondary\" \n                  className={cn(\n                    \"flex items-center gap-1\",\n                    stat.trend === \"up\" ? \"text-green-400\" : \"text-red-400\"\n                  )}\n                >\n                  <TrendIcon className=\"w-3 h-3\" />\n                  {stat.change}\n                </Badge>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white\">{stat.value}</h3>\n              <p className=\"text-sm text-gray-400 mt-1\">{stat.label}</p>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n// Recent Claims Component (Pending Prescriptions for Pharmacy)\nfunction RecentClaims() {\n  const prescriptions = [\n    {\n      id: \"RX-2024-001\",\n      patient: \"John Kamau\",\n      medication: \"Amoxicillin 500mg\",\n      quantity: \"21 tablets\",\n      status: \"pending\",\n      doctor: \"Dr. Mwangi\",\n      time: \"10 min ago\"\n    },\n    {\n      id: \"RX-2024-002\",\n      patient: \"Mary Wanjiru\",\n      medication: \"Metformin 850mg\",\n      quantity: \"60 tablets\",\n      status: \"verified\",\n      doctor: \"Dr. Ochieng\",\n      time: \"15 min ago\"\n    },\n    {\n      id: \"RX-2024-003\",\n      patient: \"Peter Ochieng\",\n      medication: \"Paracetamol 500mg\",\n      quantity: \"20 tablets\",\n      status: \"dispensed\",\n      doctor: \"Dr. Kamau\",\n      time: \"25 min ago\"\n    },\n    {\n      id: \"RX-2024-004\",\n      patient: \"Grace Muthoni\",\n      medication: \"Omeprazole 20mg\",\n      quantity: \"30 capsules\",\n      status: \"alert\",\n      doctor: \"Dr. Wanjiku\",\n      time: \"30 min ago\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-[#1a1150] border-[#2a1a5e]\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-white\">Recent Prescriptions</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-[#6BBDB4] hover:text-[#6BBDB4]/80\">\n            View All\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {prescriptions.map((rx) => (\n            <div \n              key={rx.id} \n              className=\"flex items-center justify-between p-4 rounded-lg bg-[#0a0a2e] border border-[#2a1a5e] hover:border-[#3a2a6e] transition-all\"\n            >\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-3\">\n                  <h4 className=\"font-medium text-white\">{rx.id}</h4>\n                  <Badge \n                    variant={\n                      rx.status === \"verified\" ? \"default\" :\n                      rx.status === \"pending\" ? \"secondary\" :\n                      rx.status === \"dispensed\" ? \"outline\" : \"destructive\"\n                    }\n                    className={cn(\n                      rx.status === \"verified\" && \"bg-green-500/20 text-green-400 border-green-500/30\",\n                      rx.status === \"pending\" && \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n                      rx.status === \"dispensed\" && \"bg-blue-500/20 text-blue-400 border-blue-500/30\",\n                      rx.status === \"alert\" && \"bg-red-500/20 text-red-400 border-red-500/30\"\n                    )}\n                  >\n                    {rx.status}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-gray-400 mt-1\">\n                  {rx.patient} • {rx.medication} • {rx.quantity}\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">Prescribed by {rx.doctor}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xs text-gray-400\">{rx.time}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Quick Actions Component\nfunction QuickActions({ user }: { user: any }) {\n  const actions = [\n    {\n      label: \"Verify Patient\",\n      description: \"Biometric verification\",\n      icon: Fingerprint,\n      color: \"from-blue-500 to-blue-600\",\n      href: \"/modern-pharmacy/verify\"\n    },\n    {\n      label: \"Preauthorization\",\n      description: \"Check insurance coverage\",\n      icon: Shield,\n      color: \"from-green-500 to-green-600\",\n      href: \"/modern-pharmacy/preauth\"\n    },\n    {\n      label: \"Validate Prescription\",\n      description: \"Safety & interaction check\",\n      icon: CheckCircle,\n      color: \"from-purple-500 to-purple-600\",\n      href: \"/modern-pharmacy/validate\"\n    },\n    {\n      label: \"Secure Claim Log\",\n      description: \"Blockchain anchoring\",\n      icon: ShieldCheck,\n      color: \"from-orange-500 to-orange-600\",\n      href: \"/modern-pharmacy/blockchain\"\n    }\n  ];\n\n  return (\n    <Card className=\"bg-[#1a1150] border-[#2a1a5e]\">\n      <CardHeader>\n        <CardTitle className=\"text-white\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {actions.map((action, index) => {\n            const Icon = action.icon;\n            \n            return (\n              <Link key={index} href={action.href}>\n                <div className=\"block p-4 rounded-lg bg-[#0a0a2e] border border-[#2a1a5e] hover:border-[#3a2a6e] transition-all group cursor-pointer\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className={`p-3 rounded-lg bg-gradient-to-r ${action.color} group-hover:scale-110 transition-transform`}>\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-white group-hover:text-[#6BBDB4] transition-colors\">\n                        {action.label}\n                      </h4>\n                      <p className=\"text-sm text-gray-400 mt-1\">\n                        {action.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Main Component\nexport default function ModernPharmacyDashboard() {\n  const { user } = useAuth();\n  \n  const dashboardUser = {\n    name: user?.name || \"Pharmacist\",\n    role: user?.role || \"pharmacist\",\n    isPremium: true\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-br from-[#0e0d3c] via-[#1b1150] to-[#2a1a5e] text-white\">\n      <Sidebar user={dashboardUser} />\n      <main className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n        <WelcomeCard user={dashboardUser} />\n        <QuickStats user={dashboardUser} />\n        <RecentClaims />\n        <QuickActions user={dashboardUser} />\n      </main>\n    </div>\n  );\n}","size_bytes":11943},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Building2, Clock, CheckCircle, XCircle, Eye, Users, FileText, Phone, Mail, MapPin, Calendar, UserPlus, AlertTriangle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface OnboardingApplication {\n  id: number;\n  organizationName: string;\n  organizationType: string;\n  contactPerson: string;\n  contactEmail: string;\n  contactPhone: string;\n  domain: string;\n  licenseNumber: string;\n  onboardingStatus: 'pending' | 'approved' | 'rejected';\n  createdAt: string;\n  schemesSupported: string[];\n  servicesOffered?: string[];\n  specializations?: string[];\n}\n\ninterface UserSetup {\n  name: string;\n  email: string;\n  role: string;\n  department?: string;\n  cadre?: string;\n  registrationNumber?: string;\n  permissions: string[];\n}\n\nexport default function OnboardingManagement() {\n  const [selectedApplication, setSelectedApplication] = useState<OnboardingApplication | null>(null);\n  const [userSetup, setUserSetup] = useState<UserSetup[]>([]);\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n  const [showApprovalDialog, setShowApprovalDialog] = useState(false);\n  const [showRejectionDialog, setShowRejectionDialog] = useState(false);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: applications = [], isLoading } = useQuery({\n    queryKey: [\"/api/onboarding/applications\"],\n  });\n\n  const applicationsArray = Array.isArray(applications) ? applications : [];\n\n  const approveMutation = useMutation({\n    mutationFn: ({ id, users }: { id: number; users: UserSetup[] }) =>\n      apiRequest(`/api/onboarding/approve/${id}`, \"POST\", { users }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/applications\"] });\n      setShowApprovalDialog(false);\n      setSelectedApplication(null);\n      setUserSetup([]);\n      toast({\n        title: \"Application Approved\",\n        description: \"The onboarding application has been approved and user accounts created.\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: ({ id, reason }: { id: number; reason: string }) =>\n      apiRequest(`/api/onboarding/reject/${id}`, \"POST\", { reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/applications\"] });\n      setShowRejectionDialog(false);\n      setSelectedApplication(null);\n      setRejectionReason(\"\");\n      toast({\n        title: \"Application Rejected\",\n        description: \"The onboarding application has been rejected.\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-600\"><Clock className=\"w-3 h-3 mr-1\" />Pending</Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"text-green-600 border-green-600\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n      case 'rejected':\n        return <Badge variant=\"outline\" className=\"text-red-600 border-red-600\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const addUser = () => {\n    const newUser: UserSetup = {\n      name: \"\",\n      email: \"\",\n      role: \"front-office\",\n      permissions: []\n    };\n    setUserSetup([...userSetup, newUser]);\n  };\n\n  const updateUser = (index: number, field: keyof UserSetup, value: any) => {\n    const updated = [...userSetup];\n    updated[index] = { ...updated[index], [field]: value };\n    setUserSetup(updated);\n  };\n\n  const removeUser = (index: number) => {\n    setUserSetup(userSetup.filter((_, i) => i !== index));\n  };\n\n  const handleApprove = (application: OnboardingApplication) => {\n    setSelectedApplication(application);\n    // Pre-populate with default admin user\n    setUserSetup([{\n      name: application.contactPerson,\n      email: application.contactEmail,\n      role: \"admin\",\n      permissions: [\"admin\", \"users\", \"claims\", \"analytics\"]\n    }]);\n    setShowApprovalDialog(true);\n  };\n\n  const handleReject = (application: OnboardingApplication) => {\n    setSelectedApplication(application);\n    setShowRejectionDialog(true);\n  };\n\n  const viewDetails = (application: OnboardingApplication) => {\n    setSelectedApplication(application);\n    setShowDetailsDialog(true);\n  };\n\n  const availableRoles = [\n    { value: \"admin\", label: \"Administrator\" },\n    { value: \"doctor\", label: \"Doctor/Clinician\" },\n    { value: \"pharmacist\", label: \"Pharmacist\" },\n    { value: \"care-manager\", label: \"Care Manager\" },\n    { value: \"front-office\", label: \"Front Office\" },\n  ];\n\n  const availablePermissions = [\n    \"admin\", \"users\", \"claims\", \"preauth\", \"analytics\", \"pharmacy\", \"billing\", \"reports\"\n  ];\n\n  const pendingApplications = applicationsArray.filter((app: OnboardingApplication) => app.onboardingStatus === 'pending');\n  const processedApplications = applicationsArray.filter((app: OnboardingApplication) => app.onboardingStatus !== 'pending');\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 p-4\">\n        <div className=\"max-w-7xl mx-auto pt-8\">\n          <div className=\"text-center\">Loading applications...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <div className=\"max-w-7xl mx-auto pt-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center\">\n            <div className=\"bg-teal-100 dark:bg-teal-900 p-3 rounded-full mr-4\">\n              <Building2 className=\"w-8 h-8 text-teal-600 dark:text-teal-400\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                Onboarding Management\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Review and approve healthcare provider applications\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"pending\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"pending\">\n              Pending Applications\n              {pendingApplications.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-2\">{pendingApplications.length}</Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"processed\">Processed Applications</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"pending\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Pending Applications</CardTitle>\n                <CardDescription>\n                  Applications awaiting review and approval\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {pendingApplications.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Building2 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 dark:text-gray-400\">No pending applications</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Organization</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Submitted</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {pendingApplications.map((app: OnboardingApplication) => (\n                        <TableRow key={app.id}>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{app.organizationName}</p>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">{app.domain}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{app.organizationType}</Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{app.contactPerson}</p>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">{app.contactEmail}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n                              <Calendar className=\"w-4 h-4 mr-1\" />\n                              {new Date(app.createdAt).toLocaleDateString()}\n                            </div>\n                          </TableCell>\n                          <TableCell>{getStatusBadge(app.onboardingStatus)}</TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button size=\"sm\" variant=\"outline\" onClick={() => viewDetails(app)}>\n                                <Eye className=\"w-4 h-4 mr-1\" />\n                                View\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\" className=\"text-green-600 hover:text-green-700\" onClick={() => handleApprove(app)}>\n                                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:text-red-700\" onClick={() => handleReject(app)}>\n                                <XCircle className=\"w-4 h-4 mr-1\" />\n                                Reject\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"processed\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Processed Applications</CardTitle>\n                <CardDescription>\n                  Previously reviewed applications\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {processedApplications.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 dark:text-gray-400\">No processed applications</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Organization</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Processed</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {processedApplications.map((app: OnboardingApplication) => (\n                        <TableRow key={app.id}>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{app.organizationName}</p>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">{app.domain}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{app.organizationType}</Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{app.contactPerson}</p>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">{app.contactEmail}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n                              <Calendar className=\"w-4 h-4 mr-1\" />\n                              {new Date(app.createdAt).toLocaleDateString()}\n                            </div>\n                          </TableCell>\n                          <TableCell>{getStatusBadge(app.onboardingStatus)}</TableCell>\n                          <TableCell>\n                            <Button size=\"sm\" variant=\"outline\" onClick={() => viewDetails(app)}>\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              View\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Application Details Dialog */}\n        <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Application Details</DialogTitle>\n              <DialogDescription>\n                Complete information for {selectedApplication?.organizationName}\n              </DialogDescription>\n            </DialogHeader>\n            {selectedApplication && (\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Organization Information</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex items-center\">\n                        <Building2 className=\"w-4 h-4 mr-2 text-gray-400\" />\n                        <span className=\"font-medium\">{selectedApplication.organizationName}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Badge variant=\"outline\" className=\"mr-2\">{selectedApplication.organizationType}</Badge>\n                        <span className=\"text-sm text-gray-600\">{selectedApplication.domain}</span>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        License: {selectedApplication.licenseNumber}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Contact Information</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex items-center\">\n                        <Users className=\"w-4 h-4 mr-2 text-gray-400\" />\n                        <span>{selectedApplication.contactPerson}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Mail className=\"w-4 h-4 mr-2 text-gray-400\" />\n                        <span>{selectedApplication.contactEmail}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Phone className=\"w-4 h-4 mr-2 text-gray-400\" />\n                        <span>{selectedApplication.contactPhone}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Supported Insurance Schemes</Label>\n                    <div className=\"mt-2 flex flex-wrap gap-2\">\n                      {selectedApplication.schemesSupported.map((scheme, index) => (\n                        <Badge key={index} variant=\"secondary\">{scheme}</Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  {selectedApplication.servicesOffered && selectedApplication.servicesOffered.length > 0 && (\n                    <div>\n                      <Label className=\"text-sm font-medium\">Services Offered</Label>\n                      <div className=\"mt-2 flex flex-wrap gap-2\">\n                        {selectedApplication.servicesOffered.map((service, index) => (\n                          <Badge key={index} variant=\"outline\">{service}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {selectedApplication.specializations && selectedApplication.specializations.length > 0 && (\n                    <div>\n                      <Label className=\"text-sm font-medium\">Medical Specializations</Label>\n                      <div className=\"mt-2 flex flex-wrap gap-2\">\n                        {selectedApplication.specializations.map((spec, index) => (\n                          <Badge key={index} variant=\"outline\">{spec}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Application Status</Label>\n                    <div className=\"mt-2\">\n                      {getStatusBadge(selectedApplication.onboardingStatus)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Approval Dialog with User Setup */}\n        <Dialog open={showApprovalDialog} onOpenChange={setShowApprovalDialog}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Approve Application & Setup Users</DialogTitle>\n              <DialogDescription>\n                Configure user accounts for {selectedApplication?.organizationName}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-base font-medium\">User Accounts</Label>\n                <Button onClick={addUser} size=\"sm\">\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Add User\n                </Button>\n              </div>\n\n              {userSetup.map((user, index) => (\n                <Card key={index}>\n                  <CardContent className=\"pt-4\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor={`name-${index}`}>Full Name</Label>\n                        <Input\n                          id={`name-${index}`}\n                          value={user.name}\n                          onChange={(e) => updateUser(index, 'name', e.target.value)}\n                          placeholder=\"Enter full name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`email-${index}`}>Email Address</Label>\n                        <Input\n                          id={`email-${index}`}\n                          type=\"email\"\n                          value={user.email}\n                          onChange={(e) => updateUser(index, 'email', e.target.value)}\n                          placeholder=\"user@domain.com\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`role-${index}`}>Role</Label>\n                        <Select value={user.role} onValueChange={(value) => updateUser(index, 'role', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {availableRoles.map((role) => (\n                              <SelectItem key={role.value} value={role.value}>\n                                {role.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor={`department-${index}`}>Department (Optional)</Label>\n                        <Input\n                          id={`department-${index}`}\n                          value={user.department || ''}\n                          onChange={(e) => updateUser(index, 'department', e.target.value)}\n                          placeholder=\"e.g., Cardiology, Pharmacy\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <Label className=\"text-sm font-medium\">Permissions</Label>\n                      <div className=\"mt-2 grid grid-cols-4 gap-2\">\n                        {availablePermissions.map((permission) => (\n                          <div key={permission} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={`${permission}-${index}`}\n                              checked={user.permissions.includes(permission)}\n                              onCheckedChange={(checked) => {\n                                const newPermissions = checked\n                                  ? [...user.permissions, permission]\n                                  : user.permissions.filter(p => p !== permission);\n                                updateUser(index, 'permissions', newPermissions);\n                              }}\n                            />\n                            <Label htmlFor={`${permission}-${index}`} className=\"text-sm capitalize\">\n                              {permission}\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {userSetup.length > 1 && (\n                      <div className=\"mt-4 flex justify-end\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removeUser(index)}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          Remove User\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n\n              <div className=\"flex justify-end space-x-4 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setShowApprovalDialog(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  onClick={() => selectedApplication && approveMutation.mutate({ id: selectedApplication.id, users: userSetup })}\n                  disabled={approveMutation.isPending || userSetup.length === 0}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  {approveMutation.isPending ? \"Approving...\" : \"Approve & Create Accounts\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Rejection Dialog */}\n        <Dialog open={showRejectionDialog} onOpenChange={setShowRejectionDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Reject Application</DialogTitle>\n              <DialogDescription>\n                Provide a reason for rejecting {selectedApplication?.organizationName}'s application\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"rejection-reason\">Rejection Reason</Label>\n                <Textarea\n                  id=\"rejection-reason\"\n                  value={rejectionReason}\n                  onChange={(e) => setRejectionReason(e.target.value)}\n                  placeholder=\"Explain why this application is being rejected...\"\n                  className=\"min-h-[100px]\"\n                />\n              </div>\n              <div className=\"flex justify-end space-x-4\">\n                <Button variant=\"outline\" onClick={() => setShowRejectionDialog(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  onClick={() => selectedApplication && rejectMutation.mutate({ id: selectedApplication.id, reason: rejectionReason })}\n                  disabled={rejectMutation.isPending || !rejectionReason.trim()}\n                  variant=\"destructive\"\n                >\n                  {rejectMutation.isPending ? \"Rejecting...\" : \"Reject Application\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":26531},"client/src/pages/onboarding-page.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Building2, CheckCircle, Clock, AlertCircle, Users, Shield, FileText, Phone, Mail, MapPin } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { onboardingFormSchema, type OnboardingForm } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function OnboardingPage() {\n  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const [applicationId, setApplicationId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<OnboardingForm>({\n    resolver: zodResolver(onboardingFormSchema),\n    defaultValues: {\n      organizationType: \"hospital\",\n      organizationName: \"\",\n      domain: \"\",\n      contactPerson: \"\",\n      contactEmail: \"\",\n      contactPhone: \"\",\n      address: \"\",\n      licenseNumber: \"\",\n      schemesSupported: [],\n      branch: \"\",\n      servicesOffered: [],\n      specializations: [],\n      operatingHours: \"\",\n      emergencyServices: false,\n    },\n  });\n\n  const { data: insurancePolicies } = useQuery({\n    queryKey: [\"/api/insurance-policies\"],\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: (data: OnboardingForm) => \n      apiRequest(\"/api/onboarding/submit\", \"POST\", data),\n    onSuccess: (result: any) => {\n      setSubmitStatus('success');\n      setApplicationId(result.applicationId);\n      toast({\n        title: \"Application Submitted\",\n        description: \"Your onboarding application has been submitted successfully.\",\n      });\n    },\n    onError: () => {\n      setSubmitStatus('error');\n      toast({\n        title: \"Submission Failed\",\n        description: \"There was an error submitting your application. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: OnboardingForm) => {\n    submitMutation.mutate(data);\n  };\n\n  const organizationType = form.watch(\"organizationType\");\n\n  const availableSchemes = [\n    \"SHA Universal Health Coverage\",\n    \"UNHCR Refugee Health Insurance\", \n    \"CIC General Insurance\",\n    \"AAR Insurance\",\n    \"Jubilee Insurance\",\n    \"Madison Insurance\"\n  ];\n\n  const hospitalServices = [\n    \"Emergency Care\", \"Inpatient Services\", \"Outpatient Clinics\", \"Surgery\", \n    \"Laboratory\", \"Radiology\", \"Pharmacy\", \"Physiotherapy\", \"Maternity\"\n  ];\n\n  const clinicServices = [\n    \"General Practice\", \"Specialist Consultations\", \"Minor Procedures\", \n    \"Laboratory\", \"Pharmacy\", \"Physiotherapy\", \"Dental\", \"Optical\"\n  ];\n\n  const pharmacyServices = [\n    \"Prescription Dispensing\", \"Over-the-counter Sales\", \"Health Screenings\",\n    \"Medication Counseling\", \"Chronic Disease Management\", \"Vaccination\"\n  ];\n\n  const specializations = [\n    \"Cardiology\", \"Neurology\", \"Orthopedics\", \"Pediatrics\", \"Obstetrics & Gynecology\",\n    \"Internal Medicine\", \"Surgery\", \"Oncology\", \"Psychiatry\", \"Dermatology\"\n  ];\n\n  if (submitStatus === 'success') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 p-4\">\n        <div className=\"max-w-4xl mx-auto pt-8\">\n          <Card className=\"text-center\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <CardTitle className=\"text-2xl text-green-800 dark:text-green-400\">\n                Application Submitted Successfully!\n              </CardTitle>\n              <CardDescription className=\"text-lg\">\n                Your onboarding application has been received and is being reviewed.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">Application ID</p>\n                <p className=\"font-mono text-lg font-semibold\">{applicationId}</p>\n              </div>\n              \n              <Alert>\n                <Clock className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Next Steps:</strong> Our team will review your application within 2-3 business days. \n                  You'll receive an email notification once the review is complete.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"grid md:grid-cols-3 gap-4 pt-4\">\n                <div className=\"text-center\">\n                  <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <FileText className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  <p className=\"text-sm font-medium\">Documentation Review</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">1-2 business days</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-8 h-8 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Shield className=\"w-4 h-4 text-orange-600 dark:text-orange-400\" />\n                  </div>\n                  <p className=\"text-sm font-medium\">Security Verification</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">1 business day</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Users className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <p className=\"text-sm font-medium\">Account Setup</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Same day</p>\n                </div>\n              </div>\n\n              <div className=\"pt-6 border-t\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                  Questions about your application? Contact our support team:\n                </p>\n                <div className=\"flex justify-center space-x-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"text-sm\">+254 700 123 456</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"text-sm\">onboarding@erlessed.com</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-6xl mx-auto p-4 pt-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-teal-100 dark:bg-teal-900 p-3 rounded-full mr-3\">\n              <Building2 className=\"w-8 h-8 text-teal-600 dark:text-teal-400\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                Join the Erlessed Network\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Digital onboarding for healthcare providers and insurers\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"form\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"form\">Application Form</TabsTrigger>\n            <TabsTrigger value=\"info\">Process Information</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"info\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Shield className=\"w-5 h-5 text-teal-600 mr-2\" />\n                    Why Join Erlessed?\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <p className=\"font-medium\">AI-Powered Claims Processing</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Reduce claim processing time from days to minutes with our AI engine\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <p className=\"font-medium\">Real-time Preauthorization</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Instant approval for routine procedures, improving patient experience\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <p className=\"font-medium\">Fraud Prevention</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Advanced analytics detect suspicious patterns and prevent fraud\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <p className=\"font-medium\">Blockchain Security</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Immutable audit trails ensure data integrity and transparency\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Clock className=\"w-5 h-5 text-blue-600 mr-2\" />\n                    Onboarding Process\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center text-blue-600 dark:text-blue-400 text-sm font-medium\">1</div>\n                      <div>\n                        <p className=\"font-medium\">Submit Application</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Complete the digital form with organization details</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center text-orange-600 dark:text-orange-400 text-sm font-medium\">2</div>\n                      <div>\n                        <p className=\"font-medium\">Document Verification</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Our team verifies licenses and certifications</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center text-purple-600 dark:text-purple-400 text-sm font-medium\">3</div>\n                      <div>\n                        <p className=\"font-medium\">System Integration</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Connect your existing systems via our APIs</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center text-green-600 dark:text-green-400 text-sm font-medium\">4</div>\n                      <div>\n                        <p className=\"font-medium\">Go Live</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Start processing claims immediately</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"form\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Organization Information</CardTitle>\n                <CardDescription>\n                  Please provide accurate information about your organization. All fields marked with * are required.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"organizationType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Organization Type *</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select organization type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"hospital\">Hospital</SelectItem>\n                                <SelectItem value=\"clinic\">Clinic</SelectItem>\n                                <SelectItem value=\"pharmacy-chain\">Pharmacy Chain</SelectItem>\n                                <SelectItem value=\"insurer\">Insurance Company</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"organizationName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Organization Name *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter organization name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"domain\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Domain *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"example.com\" {...field} />\n                            </FormControl>\n                            <FormDescription>\n                              Domain for user email addresses (e.g., hospital.co.ke)\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"licenseNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>License Number *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter license number\" {...field} />\n                            </FormControl>\n                            <FormDescription>\n                              {organizationType === 'hospital' && 'Ministry of Health facility license'}\n                              {organizationType === 'clinic' && 'Clinical practice license'}\n                              {organizationType === 'pharmacy-chain' && 'Pharmacy board license'}\n                              {organizationType === 'insurer' && 'Insurance regulatory authority license'}\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-medium\">Contact Information</h3>\n                      <div className=\"grid md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"contactPerson\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Contact Person *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Full name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"contactEmail\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Contact Email *</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"email@domain.com\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"contactPhone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Contact Phone *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"+254 700 123 456\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        {organizationType !== 'insurer' && (\n                          <FormField\n                            control={form.control}\n                            name=\"branch\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Branch/Location</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Main branch, Nairobi, etc.\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        )}\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"address\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Physical Address *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Enter complete physical address including city and postal code\"\n                                className=\"min-h-[80px]\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-medium\">Insurance Schemes</h3>\n                      <FormField\n                        control={form.control}\n                        name=\"schemesSupported\"\n                        render={() => (\n                          <FormItem>\n                            <div className=\"mb-4\">\n                              <FormLabel className=\"text-base\">Supported Insurance Schemes *</FormLabel>\n                              <FormDescription>\n                                Select all insurance schemes your organization works with\n                              </FormDescription>\n                            </div>\n                            <div className=\"grid md:grid-cols-2 gap-3\">\n                              {availableSchemes.map((scheme) => (\n                                <FormField\n                                  key={scheme}\n                                  control={form.control}\n                                  name=\"schemesSupported\"\n                                  render={({ field }) => {\n                                    return (\n                                      <FormItem\n                                        key={scheme}\n                                        className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                      >\n                                        <FormControl>\n                                          <Checkbox\n                                            checked={field.value?.includes(scheme)}\n                                            onCheckedChange={(checked) => {\n                                              return checked\n                                                ? field.onChange([...field.value, scheme])\n                                                : field.onChange(\n                                                    field.value?.filter(\n                                                      (value) => value !== scheme\n                                                    )\n                                                  );\n                                            }}\n                                          />\n                                        </FormControl>\n                                        <FormLabel className=\"text-sm font-normal\">\n                                          {scheme}\n                                        </FormLabel>\n                                      </FormItem>\n                                    );\n                                  }}\n                                />\n                              ))}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {organizationType !== 'insurer' && (\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-medium\">Services & Operations</h3>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"servicesOffered\"\n                          render={() => (\n                            <FormItem>\n                              <div className=\"mb-4\">\n                                <FormLabel className=\"text-base\">Services Offered</FormLabel>\n                                <FormDescription>\n                                  Select all services your organization provides\n                                </FormDescription>\n                              </div>\n                              <div className=\"grid md:grid-cols-3 gap-3\">\n                                {(organizationType === 'hospital' ? hospitalServices :\n                                  organizationType === 'clinic' ? clinicServices :\n                                  pharmacyServices).map((service) => (\n                                  <FormField\n                                    key={service}\n                                    control={form.control}\n                                    name=\"servicesOffered\"\n                                    render={({ field }) => {\n                                      return (\n                                        <FormItem\n                                          key={service}\n                                          className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                        >\n                                          <FormControl>\n                                            <Checkbox\n                                              checked={field.value?.includes(service)}\n                                              onCheckedChange={(checked) => {\n                                                return checked\n                                                  ? field.onChange([...field.value || [], service])\n                                                  : field.onChange(\n                                                      field.value?.filter(\n                                                        (value) => value !== service\n                                                      )\n                                                    );\n                                              }}\n                                            />\n                                          </FormControl>\n                                          <FormLabel className=\"text-sm font-normal\">\n                                            {service}\n                                          </FormLabel>\n                                        </FormItem>\n                                      );\n                                    }}\n                                  />\n                                ))}\n                              </div>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        {(organizationType === 'hospital' || organizationType === 'clinic') && (\n                          <FormField\n                            control={form.control}\n                            name=\"specializations\"\n                            render={() => (\n                              <FormItem>\n                                <div className=\"mb-4\">\n                                  <FormLabel className=\"text-base\">Medical Specializations</FormLabel>\n                                  <FormDescription>\n                                    Select medical specializations available at your facility\n                                  </FormDescription>\n                                </div>\n                                <div className=\"grid md:grid-cols-3 gap-3\">\n                                  {specializations.map((spec) => (\n                                    <FormField\n                                      key={spec}\n                                      control={form.control}\n                                      name=\"specializations\"\n                                      render={({ field }) => {\n                                        return (\n                                          <FormItem\n                                            key={spec}\n                                            className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                          >\n                                            <FormControl>\n                                              <Checkbox\n                                                checked={field.value?.includes(spec)}\n                                                onCheckedChange={(checked) => {\n                                                  return checked\n                                                    ? field.onChange([...field.value || [], spec])\n                                                    : field.onChange(\n                                                        field.value?.filter(\n                                                          (value) => value !== spec\n                                                        )\n                                                      );\n                                                }}\n                                              />\n                                            </FormControl>\n                                            <FormLabel className=\"text-sm font-normal\">\n                                              {spec}\n                                            </FormLabel>\n                                          </FormItem>\n                                        );\n                                      }}\n                                    />\n                                  ))}\n                                </div>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        )}\n\n                        <div className=\"grid md:grid-cols-2 gap-6\">\n                          <FormField\n                            control={form.control}\n                            name=\"operatingHours\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Operating Hours</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Mon-Fri 8AM-6PM, Sat 9AM-2PM\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {organizationType === 'hospital' && (\n                            <FormField\n                              control={form.control}\n                              name=\"emergencyServices\"\n                              render={({ field }) => (\n                                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={field.value}\n                                      onCheckedChange={field.onChange}\n                                    />\n                                  </FormControl>\n                                  <div className=\"space-y-1 leading-none\">\n                                    <FormLabel>24/7 Emergency Services</FormLabel>\n                                    <FormDescription>\n                                      Check if your facility provides round-the-clock emergency care\n                                    </FormDescription>\n                                  </div>\n                                </FormItem>\n                              )}\n                            />\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {submitStatus === 'error' && (\n                      <Alert variant=\"destructive\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          There was an error submitting your application. Please check your information and try again.\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()}>\n                        Reset Form\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={submitMutation.isPending}\n                        className=\"bg-teal-600 hover:bg-teal-700\"\n                      >\n                        {submitMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Footer */}\n        <div className=\"text-center mt-12 pt-8 border-t\">\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n            Powered by <span className=\"font-semibold text-teal-600\">Aboolean</span> \n            | Secure, Compliant, AI-Driven Healthcare Solutions\n          </p>\n          <div className=\"flex justify-center space-x-6 text-sm text-gray-500\">\n            <span className=\"flex items-center\">\n              <Shield className=\"w-4 h-4 mr-1\" />\n              Data Protection Act 2019 Compliant\n            </span>\n            <span className=\"flex items-center\">\n              <FileText className=\"w-4 h-4 mr-1\" />\n              SHA Guidelines Integrated\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":35337},"client/src/pages/patient-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, FileText, Users, DollarSign, AlertCircle, Clock, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { LogoutButton } from \"@/components/ui/logout-button\";\n\ninterface PatientClaim {\n  id: number;\n  serviceType: string;\n  provider: string;\n  diagnosis: string;\n  claimAmount: number;\n  copayAmount: number;\n  status: \"approved\" | \"denied\" | \"pending\" | \"void\";\n  serviceDate: string;\n  processedDate?: string;\n  denialReason?: string;\n  canAppeal: boolean;\n}\n\ninterface Dependent {\n  id: number;\n  firstName: string;\n  lastName: string;\n  relationship: string;\n  dateOfBirth: string;\n  gender: string;\n  isActive: boolean;\n}\n\ninterface PreauthorizedService {\n  id: number;\n  serviceType: string;\n  provider: string;\n  estimatedCost: number;\n  approvedAmount: number;\n  status: \"approved\" | \"partially_approved\" | \"pending\";\n  expiryDate: string;\n  conditions?: string;\n}\n\ninterface BenefitSummary {\n  category: string;\n  totalBenefit: number;\n  usedAmount: number;\n  remainingAmount: number;\n  utilizationPercentage: number;\n  resetDate: string;\n}\n\nexport default function PatientDashboard() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"claims\");\n  const [selectedClaim, setSelectedClaim] = useState<PatientClaim | null>(null);\n  const [appealReason, setAppealReason] = useState(\"\");\n  const [newDependent, setNewDependent] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    relationship: \"\",\n    dateOfBirth: \"\",\n    gender: \"\"\n  });\n  const [showAddDependent, setShowAddDependent] = useState(false);\n\n  // Mock patient info\n  const patientInfo = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    patientId: \"P001234\",\n    membershipNumber: \"NHIF123456789\",\n    scheme: \"NHIF Principal\",\n    dateOfBirth: \"1985-06-15\",\n    gender: \"Male\",\n    phoneNumber: \"+254712345678\",\n    email: \"john.doe@email.com\"\n  };\n\n  // Fetch patient claims\n  const { data: claims = [] } = useQuery({\n    queryKey: [\"/api/patient/claims\"],\n    queryFn: async () => [\n      {\n        id: 1,\n        serviceType: \"General Consultation\",\n        provider: \"Aga Khan University Hospital\",\n        diagnosis: \"Hypertension\",\n        claimAmount: 5000,\n        copayAmount: 500,\n        status: \"approved\" as const,\n        serviceDate: \"2024-06-15\",\n        processedDate: \"2024-06-16\",\n        canAppeal: false\n      },\n      {\n        id: 2,\n        serviceType: \"Laboratory Tests\",\n        provider: \"Kenyatta National Hospital\",\n        diagnosis: \"Routine Check-up\",\n        claimAmount: 3500,\n        copayAmount: 350,\n        status: \"approved\" as const,\n        serviceDate: \"2024-06-10\",\n        processedDate: \"2024-06-11\",\n        canAppeal: false\n      },\n      {\n        id: 3,\n        serviceType: \"MRI Scan\",\n        provider: \"Carepoint Medical Center\",\n        diagnosis: \"Back Pain\",\n        claimAmount: 25000,\n        copayAmount: 2500,\n        status: \"denied\" as const,\n        serviceDate: \"2024-06-08\",\n        processedDate: \"2024-06-09\",\n        denialReason: \"Requires additional clinical justification\",\n        canAppeal: true\n      },\n      {\n        id: 4,\n        serviceType: \"Cardiology Consultation\",\n        provider: \"Aga Khan University Hospital\",\n        diagnosis: \"Chest Pain\",\n        claimAmount: 15000,\n        copayAmount: 1500,\n        status: \"pending\" as const,\n        serviceDate: \"2024-06-18\",\n        canAppeal: false\n      }\n    ] as PatientClaim[],\n  });\n\n  // Fetch dependents\n  const { data: dependents = [] } = useQuery({\n    queryKey: [\"/api/patient/dependents\"],\n    queryFn: async () => [\n      {\n        id: 1,\n        firstName: \"Jane\",\n        lastName: \"Doe\",\n        relationship: \"Spouse\",\n        dateOfBirth: \"1990-03-22\",\n        gender: \"Female\",\n        isActive: true\n      },\n      {\n        id: 2,\n        firstName: \"Michael\",\n        lastName: \"Doe\",\n        relationship: \"Child\",\n        dateOfBirth: \"2015-08-10\",\n        gender: \"Male\",\n        isActive: true\n      }\n    ] as Dependent[],\n  });\n\n  // Fetch preauthorized services\n  const { data: preauthorizedServices = [] } = useQuery({\n    queryKey: [\"/api/patient/preauthorizations\"],\n    queryFn: async () => [\n      {\n        id: 1,\n        serviceType: \"Physical Therapy\",\n        provider: \"Rehab Center\",\n        estimatedCost: 20000,\n        approvedAmount: 15000,\n        status: \"approved\" as const,\n        expiryDate: \"2024-07-15\",\n        conditions: \"Maximum 10 sessions\"\n      },\n      {\n        id: 2,\n        serviceType: \"Specialist Consultation\",\n        provider: \"Cardiology Clinic\",\n        estimatedCost: 12000,\n        approvedAmount: 12000,\n        status: \"approved\" as const,\n        expiryDate: \"2024-06-30\"\n      }\n    ] as PreauthorizedService[],\n  });\n\n  // Fetch benefit summary\n  const { data: benefitSummary = [] } = useQuery({\n    queryKey: [\"/api/patient/benefits\"],\n    queryFn: async () => [\n      {\n        category: \"Outpatient Services\",\n        totalBenefit: 50000,\n        usedAmount: 23500,\n        remainingAmount: 26500,\n        utilizationPercentage: 47,\n        resetDate: \"2024-12-31\"\n      },\n      {\n        category: \"Chronic Medications\",\n        totalBenefit: 30000,\n        usedAmount: 8000,\n        remainingAmount: 22000,\n        utilizationPercentage: 27,\n        resetDate: \"2024-12-31\"\n      },\n      {\n        category: \"Emergency Care\",\n        totalBenefit: 100000,\n        usedAmount: 0,\n        remainingAmount: 100000,\n        utilizationPercentage: 0,\n        resetDate: \"2024-12-31\"\n      }\n    ] as BenefitSummary[],\n  });\n\n  const submitAppealMutation = useMutation({\n    mutationFn: async (data: { claimId: number; reason: string }) => {\n      return apiRequest(\"/api/patient/appeals\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Appeal Submitted\",\n        description: \"Your claim appeal has been submitted for review\",\n      });\n      setSelectedClaim(null);\n      setAppealReason(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/patient/claims\"] });\n    },\n  });\n\n  const addDependentMutation = useMutation({\n    mutationFn: async (dependent: typeof newDependent) => {\n      return apiRequest(\"/api/patient/dependents\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(dependent),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Dependent Added\",\n        description: \"New dependent has been added to your coverage\",\n      });\n      setNewDependent({\n        firstName: \"\",\n        lastName: \"\",\n        relationship: \"\",\n        dateOfBirth: \"\",\n        gender: \"\"\n      });\n      setShowAddDependent(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/patient/dependents\"] });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      approved: \"bg-green-100 text-green-800\",\n      denied: \"bg-red-100 text-red-800\",\n      pending: \"bg-yellow-100 text-yellow-800\",\n      void: \"bg-gray-100 text-gray-800\"\n    };\n    return variants[status as keyof typeof variants] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getUtilizationColor = (percentage: number) => {\n    if (percentage >= 80) return \"bg-red-500\";\n    if (percentage >= 60) return \"bg-yellow-500\";\n    return \"bg-green-500\";\n  };\n\n  const submitAppeal = () => {\n    if (!selectedClaim || !appealReason.trim()) return;\n\n    submitAppealMutation.mutate({\n      claimId: selectedClaim.id,\n      reason: appealReason,\n    });\n  };\n\n  const addDependent = () => {\n    if (!newDependent.firstName || !newDependent.lastName || !newDependent.relationship) return;\n\n    addDependentMutation.mutate(newDependent);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">My Health Dashboard</h1>\n          <p className=\"text-gray-600\">Manage your healthcare claims and family coverage</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-right\">\n            <div className=\"font-semibold\">{patientInfo.firstName} {patientInfo.lastName}</div>\n            <div className=\"text-sm text-gray-600\">{patientInfo.membershipNumber}</div>\n          </div>\n          <Badge variant=\"outline\" className=\"text-teal-600 border-teal-200\">\n            <User className=\"w-4 h-4 mr-1\" />\n            {patientInfo.scheme}\n          </Badge>\n          <LogoutButton variant=\"dropdown\" />\n        </div>\n      </div>\n\n      {/* Benefit Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {benefitSummary.map((benefit) => (\n          <Card key={benefit.category}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-medium text-gray-900\">{benefit.category}</h3>\n                <span className=\"text-sm text-gray-600\">\n                  {benefit.utilizationPercentage}% used\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2 mb-4\">\n                <div\n                  className={`h-2 rounded-full ${getUtilizationColor(benefit.utilizationPercentage)}`}\n                  style={{ width: `${benefit.utilizationPercentage}%` }}\n                ></div>\n              </div>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Used:</span>\n                  <span className=\"font-medium\">KES {benefit.usedAmount.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Remaining:</span>\n                  <span className=\"font-medium text-green-600\">\n                    KES {benefit.remainingAmount.toLocaleString()}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Resets:</span>\n                  <span className=\"text-xs\">{new Date(benefit.resetDate).toLocaleDateString()}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"claims\">My Claims</TabsTrigger>\n          <TabsTrigger value=\"dependents\">Family Members</TabsTrigger>\n          <TabsTrigger value=\"preauth\">Preauthorizations</TabsTrigger>\n          <TabsTrigger value=\"estimates\">Cost Estimates</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"claims\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                Claims History ({claims.length})\n              </CardTitle>\n              <CardDescription>\n                View and manage your healthcare claims\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {claims.map((claim) => (\n                  <Card key={claim.id} className=\"border-l-4 border-l-teal-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-teal-100 rounded-full flex items-center justify-center text-teal-800 font-bold\">\n                            {claim.id}\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{claim.serviceType}</h3>\n                            <p className=\"text-gray-600\">{claim.provider}</p>\n                            <p className=\"text-sm text-gray-500\">{claim.diagnosis}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right space-y-2\">\n                          <Badge className={getStatusBadge(claim.status)}>\n                            {claim.status.charAt(0).toUpperCase() + claim.status.slice(1)}\n                          </Badge>\n                          <div className=\"text-lg font-semibold\">\n                            KES {claim.claimAmount.toLocaleString()}\n                          </div>\n                          {claim.copayAmount > 0 && (\n                            <div className=\"text-sm text-gray-600\">\n                              Co-pay: KES {claim.copayAmount.toLocaleString()}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-1\">Service Date</h4>\n                          <p className=\"text-gray-700\">\n                            {new Date(claim.serviceDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                        {claim.processedDate && (\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-1\">Processed</h4>\n                            <p className=\"text-gray-700\">\n                              {new Date(claim.processedDate).toLocaleDateString()}\n                            </p>\n                          </div>\n                        )}\n                        {claim.status === \"pending\" && (\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-1\">Status</h4>\n                            <p className=\"text-yellow-600 flex items-center\">\n                              <Clock className=\"w-4 h-4 mr-1\" />\n                              Processing\n                            </p>\n                          </div>\n                        )}\n                      </div>\n\n                      {claim.denialReason && (\n                        <div className=\"mt-3 p-3 bg-red-50 rounded-md\">\n                          <div className=\"flex items-center mb-1\">\n                            <AlertCircle className=\"w-4 h-4 text-red-500 mr-1\" />\n                            <h4 className=\"font-medium text-red-800\">Denial Reason</h4>\n                          </div>\n                          <p className=\"text-red-700 text-sm\">{claim.denialReason}</p>\n                        </div>\n                      )}\n\n                      {claim.canAppeal && (\n                        <div className=\"mt-3 flex justify-end\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => setSelectedClaim(claim)}\n                          >\n                            Appeal Claim\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Appeal Modal */}\n          {selectedClaim && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Appeal Claim #{selectedClaim.id}</CardTitle>\n                <CardDescription>\n                  Submit an appeal for the denied claim\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"appealReason\">Reason for Appeal</Label>\n                  <Textarea\n                    id=\"appealReason\"\n                    value={appealReason}\n                    onChange={(e) => setAppealReason(e.target.value)}\n                    placeholder=\"Please explain why you believe this claim should be reconsidered...\"\n                    rows={4}\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setSelectedClaim(null)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={submitAppeal}\n                    disabled={!appealReason.trim() || submitAppealMutation.isPending}\n                    className=\"bg-teal-600 hover:bg-teal-700\"\n                  >\n                    {submitAppealMutation.isPending ? \"Submitting...\" : \"Submit Appeal\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"dependents\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Family Members ({dependents.length})\n                </div>\n                <Button onClick={() => setShowAddDependent(true)} size=\"sm\">\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Add Dependent\n                </Button>\n              </CardTitle>\n              <CardDescription>\n                Manage family members covered under your plan\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {dependents.map((dependent) => (\n                  <Card key={dependent.id} className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <User className=\"w-5 h-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">\n                              {dependent.firstName} {dependent.lastName}\n                            </h3>\n                            <p className=\"text-gray-600 capitalize\">{dependent.relationship}</p>\n                            <p className=\"text-sm text-gray-500\">\n                              {dependent.gender} • Born {new Date(dependent.dateOfBirth).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant={dependent.isActive ? \"default\" : \"secondary\"}>\n                            {dependent.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Add Dependent Form */}\n          {showAddDependent && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Add New Dependent</CardTitle>\n                <CardDescription>\n                  Add a family member to your coverage\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={newDependent.firstName}\n                      onChange={(e) => setNewDependent({\n                        ...newDependent,\n                        firstName: e.target.value\n                      })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={newDependent.lastName}\n                      onChange={(e) => setNewDependent({\n                        ...newDependent,\n                        lastName: e.target.value\n                      })}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"relationship\">Relationship</Label>\n                    <Select\n                      value={newDependent.relationship}\n                      onValueChange={(value) => setNewDependent({\n                        ...newDependent,\n                        relationship: value\n                      })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select relationship\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"spouse\">Spouse</SelectItem>\n                        <SelectItem value=\"child\">Child</SelectItem>\n                        <SelectItem value=\"parent\">Parent</SelectItem>\n                        <SelectItem value=\"sibling\">Sibling</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                    <Input\n                      id=\"dateOfBirth\"\n                      type=\"date\"\n                      value={newDependent.dateOfBirth}\n                      onChange={(e) => setNewDependent({\n                        ...newDependent,\n                        dateOfBirth: e.target.value\n                      })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"gender\">Gender</Label>\n                    <Select\n                      value={newDependent.gender}\n                      onValueChange={(value) => setNewDependent({\n                        ...newDependent,\n                        gender: value\n                      })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select gender\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Male\">Male</SelectItem>\n                        <SelectItem value=\"Female\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setShowAddDependent(false)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={addDependent}\n                    disabled={addDependentMutation.isPending}\n                    className=\"bg-teal-600 hover:bg-teal-700\"\n                  >\n                    {addDependentMutation.isPending ? \"Adding...\" : \"Add Dependent\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"preauth\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                Current Preauthorizations ({preauthorizedServices.length})\n              </CardTitle>\n              <CardDescription>\n                Services that have been pre-approved for you\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {preauthorizedServices.map((service) => (\n                  <Card key={service.id} className=\"border-l-4 border-l-green-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{service.serviceType}</h3>\n                          <p className=\"text-gray-600\">{service.provider}</p>\n                          {service.conditions && (\n                            <p className=\"text-sm text-gray-500\">{service.conditions}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            {service.status.replace('_', ' ')}\n                          </Badge>\n                          <div className=\"text-lg font-semibold text-green-600\">\n                            KES {service.approvedAmount.toLocaleString()}\n                          </div>\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-1\">Estimated Cost</h4>\n                          <p className=\"text-gray-700\">\n                            KES {service.estimatedCost.toLocaleString()}\n                          </p>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-1\">Expires</h4>\n                          <p className=\"text-gray-700\">\n                            {new Date(service.expiryDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"estimates\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <DollarSign className=\"w-5 h-5 mr-2\" />\n                Cost Estimates\n              </CardTitle>\n              <CardDescription>\n                Get estimates for common services based on your scheme\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card className=\"p-4\">\n                    <h3 className=\"font-medium mb-2\">General Consultation</h3>\n                    <div className=\"space-y-1 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Hospital:</span>\n                        <span>KES 3,000 - 8,000</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Clinic:</span>\n                        <span>KES 1,500 - 4,000</span>\n                      </div>\n                      <div className=\"flex justify-between font-medium text-teal-600\">\n                        <span>Your co-pay (10%):</span>\n                        <span>KES 150 - 800</span>\n                      </div>\n                    </div>\n                  </Card>\n\n                  <Card className=\"p-4\">\n                    <h3 className=\"font-medium mb-2\">Laboratory Tests</h3>\n                    <div className=\"space-y-1 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Basic Panel:</span>\n                        <span>KES 2,000 - 5,000</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Comprehensive:</span>\n                        <span>KES 5,000 - 12,000</span>\n                      </div>\n                      <div className=\"flex justify-between font-medium text-teal-600\">\n                        <span>Your co-pay (10%):</span>\n                        <span>KES 200 - 1,200</span>\n                      </div>\n                    </div>\n                  </Card>\n                </div>\n\n                <div className=\"text-center py-8 bg-gray-50 rounded-md\">\n                  <DollarSign className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Need a specific estimate?</p>\n                  <Button className=\"mt-2 bg-teal-600 hover:bg-teal-700\">\n                    Contact Customer Service\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean\n      </div>\n    </div>\n  );\n}","size_bytes":29868},"client/src/pages/patient-queue.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Clock, AlertTriangle, User, Stethoscope, FileText, Filter } from \"lucide-react\";\nimport { BiometricScanner } from \"@/components/biometric-scanner\";\n\ninterface TriagePatient {\n  id: number;\n  patientId: string;\n  name: string;\n  age: number;\n  gender: string;\n  arrivalTime: string;\n  priority: 'emergency' | 'urgent' | 'routine';\n  chiefComplaint: string;\n  vitals: {\n    bloodPressure: string;\n    heartRate: number;\n    temperature: number;\n    oxygenSat: number;\n  };\n  insurance: string;\n  claimStatus: 'verified' | 'pending' | 'denied';\n  labPending: boolean;\n  referralPending: boolean;\n  waitTime: number;\n}\n\nexport default function PatientQueue() {\n  const [filter, setFilter] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedPatient, setSelectedPatient] = useState<TriagePatient | null>(null);\n\n  // Mock patient queue data\n  const patientQueue: TriagePatient[] = [\n    {\n      id: 1,\n      patientId: \"PT-2024-001\",\n      name: \"Sarah Johnson\",\n      age: 34,\n      gender: \"Female\",\n      arrivalTime: \"09:15 AM\",\n      priority: \"urgent\",\n      chiefComplaint: \"Chest pain radiating to left arm\",\n      vitals: {\n        bloodPressure: \"150/95\",\n        heartRate: 98,\n        temperature: 37.2,\n        oxygenSat: 97\n      },\n      insurance: \"Premium Health+\",\n      claimStatus: \"verified\",\n      labPending: true,\n      referralPending: false,\n      waitTime: 45\n    },\n    {\n      id: 2,\n      patientId: \"PT-2024-002\",\n      name: \"Michael Chen\",\n      age: 28,\n      gender: \"Male\",\n      arrivalTime: \"09:30 AM\",\n      priority: \"routine\",\n      chiefComplaint: \"Annual physical exam\",\n      vitals: {\n        bloodPressure: \"120/80\",\n        heartRate: 72,\n        temperature: 36.8,\n        oxygenSat: 99\n      },\n      insurance: \"Basic Care\",\n      claimStatus: \"verified\",\n      labPending: false,\n      referralPending: false,\n      waitTime: 30\n    },\n    {\n      id: 3,\n      patientId: \"PT-2024-003\",\n      name: \"Emma Rodriguez\",\n      age: 45,\n      gender: \"Female\",\n      arrivalTime: \"08:45 AM\",\n      priority: \"emergency\",\n      chiefComplaint: \"Severe abdominal pain\",\n      vitals: {\n        bloodPressure: \"110/70\",\n        heartRate: 110,\n        temperature: 38.5,\n        oxygenSat: 95\n      },\n      insurance: \"Emergency Care\",\n      claimStatus: \"pending\",\n      labPending: true,\n      referralPending: true,\n      waitTime: 75\n    }\n  ];\n\n  const filteredPatients = patientQueue.filter(patient => {\n    const matchesSearch = patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         patient.patientId.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    switch (filter) {\n      case 'emergency':\n        return matchesSearch && patient.priority === 'emergency';\n      case 'lab-pending':\n        return matchesSearch && patient.labPending;\n      case 'referral-pending':\n        return matchesSearch && patient.referralPending;\n      case 'claim-issues':\n        return matchesSearch && patient.claimStatus !== 'verified';\n      default:\n        return matchesSearch;\n    }\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'emergency': return 'bg-red-100 text-red-800 border-red-200';\n      case 'urgent': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'routine': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getClaimStatusColor = (status: string) => {\n    switch (status) {\n      case 'verified': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'denied': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Patient Queue & Triage</h1>\n          <p className=\"text-gray-600 mt-1\">Real-time patient queue with triage priority and claim status</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge variant=\"outline\" className=\"text-sm\">\n            <Clock className=\"w-4 h-4 mr-1\" />\n            {filteredPatients.length} patients waiting\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"w-5 h-5 text-blue-600\" />\n            <span>Queue Filters</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search by patient name or ID...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"sm:w-48\">\n              <Select value={filter} onValueChange={setFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Patients</SelectItem>\n                  <SelectItem value=\"emergency\">Emergency Priority</SelectItem>\n                  <SelectItem value=\"lab-pending\">Lab Results Pending</SelectItem>\n                  <SelectItem value=\"referral-pending\">Referral Pending</SelectItem>\n                  <SelectItem value=\"claim-issues\">Claim Issues</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"queue\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"queue\">Patient Queue</TabsTrigger>\n          <TabsTrigger value=\"triage\">Triage Summary</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"queue\" className=\"space-y-4\">\n          {filteredPatients.map((patient) => (\n            <Card key={patient.id} className=\"hover:shadow-md transition-shadow cursor-pointer\"\n                  onClick={() => setSelectedPatient(patient)}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <User className=\"w-5 h-5 text-gray-500\" />\n                        <h3 className=\"text-lg font-semibold text-gray-900\">{patient.name}</h3>\n                      </div>\n                      <Badge className={getPriorityColor(patient.priority)}>\n                        {patient.priority.toUpperCase()}\n                      </Badge>\n                      <Badge className={getClaimStatusColor(patient.claimStatus)}>\n                        {patient.claimStatus}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Patient ID: <span className=\"font-medium\">{patient.patientId}</span></p>\n                        <p className=\"text-gray-600\">Age/Gender: <span className=\"font-medium\">{patient.age}Y {patient.gender}</span></p>\n                        <p className=\"text-gray-600\">Insurance: <span className=\"font-medium\">{patient.insurance}</span></p>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-gray-600\">Arrival: <span className=\"font-medium\">{patient.arrivalTime}</span></p>\n                        <p className=\"text-gray-600\">Wait Time: <span className=\"font-medium\">{patient.waitTime} min</span></p>\n                        <p className=\"text-gray-600\">Chief Complaint:</p>\n                        <p className=\"font-medium text-gray-900\">{patient.chiefComplaint}</p>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-gray-600\">Vitals:</p>\n                        <p className=\"text-xs text-gray-600\">\n                          BP: {patient.vitals.bloodPressure} | \n                          HR: {patient.vitals.heartRate} | \n                          Temp: {patient.vitals.temperature}°C |\n                          O2: {patient.vitals.oxygenSat}%\n                        </p>\n                        <div className=\"flex space-x-2 mt-2\">\n                          {patient.labPending && (\n                            <Badge variant=\"outline\" className=\"text-xs\">Lab Pending</Badge>\n                          )}\n                          {patient.referralPending && (\n                            <Badge variant=\"outline\" className=\"text-xs\">Referral Pending</Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col space-y-2 ml-4\">\n                    <Button size=\"sm\" className=\"teal-button\">\n                      <Stethoscope className=\"w-4 h-4 mr-1\" />\n                      Consult\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <FileText className=\"w-4 h-4 mr-1\" />\n                      View Chart\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"triage\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Priority Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n                  <span>Priority Cases</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-red-600 font-medium\">Emergency</span>\n                    <Badge className=\"bg-red-100 text-red-800\">\n                      {patientQueue.filter(p => p.priority === 'emergency').length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-yellow-600 font-medium\">Urgent</span>\n                    <Badge className=\"bg-yellow-100 text-yellow-800\">\n                      {patientQueue.filter(p => p.priority === 'urgent').length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-green-600 font-medium\">Routine</span>\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      {patientQueue.filter(p => p.priority === 'routine').length}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Pending Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Pending Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Lab Results</span>\n                    <Badge variant=\"outline\">\n                      {patientQueue.filter(p => p.labPending).length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Referrals</span>\n                    <Badge variant=\"outline\">\n                      {patientQueue.filter(p => p.referralPending).length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Claim Issues</span>\n                    <Badge variant=\"outline\">\n                      {patientQueue.filter(p => p.claimStatus !== 'verified').length}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Wait Time Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Queue Statistics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Average Wait</span>\n                    <span className=\"font-medium\">\n                      {Math.round(patientQueue.reduce((acc, p) => acc + p.waitTime, 0) / patientQueue.length)} min\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Longest Wait</span>\n                    <span className=\"font-medium text-red-600\">\n                      {Math.max(...patientQueue.map(p => p.waitTime))} min\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Total Patients</span>\n                    <span className=\"font-medium\">{patientQueue.length}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Patient Detail Modal/Panel */}\n      {selectedPatient && (\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Patient Details: {selectedPatient.name}</span>\n              <Button variant=\"ghost\" onClick={() => setSelectedPatient(null)}>×</Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-medium mb-3\">Patient Information</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <p>ID: {selectedPatient.patientId}</p>\n                  <p>Age: {selectedPatient.age} years</p>\n                  <p>Gender: {selectedPatient.gender}</p>\n                  <p>Insurance: {selectedPatient.insurance}</p>\n                  <p>Claim Status: <Badge className={getClaimStatusColor(selectedPatient.claimStatus)}>{selectedPatient.claimStatus}</Badge></p>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium mb-3\">Clinical Information</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <p>Chief Complaint: {selectedPatient.chiefComplaint}</p>\n                  <p>Priority: <Badge className={getPriorityColor(selectedPatient.priority)}>{selectedPatient.priority}</Badge></p>\n                  <p>Vitals: BP {selectedPatient.vitals.bloodPressure}, HR {selectedPatient.vitals.heartRate}, T {selectedPatient.vitals.temperature}°C</p>\n                </div>\n                \n                <div className=\"mt-4 space-y-2\">\n                  <Button className=\"teal-button w-full\">\n                    <Stethoscope className=\"w-4 h-4 mr-2\" />\n                    Start Consultation\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    View Full Medical History\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16692},"client/src/pages/patient-verification.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { BiometricScanner } from \"@/components/biometric-scanner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Patient {\n  id: number;\n  patientId: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  gender: string;\n  insuranceProvider: string;\n  insurancePlan: string;\n  policyNumber: string;\n  benefits?: any[];\n  dependents?: any[];\n}\n\nexport default function PatientVerification() {\n  const [verifiedPatient, setVerifiedPatient] = useState<Patient | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const verificationMutation = useMutation({\n    mutationFn: async (data: { patientId?: string; biometricHash?: string; otp?: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/patients/verify\", data);\n      return await res.json();\n    },\n    onSuccess: (patient) => {\n      setVerifiedPatient(patient);\n      toast({\n        title: \"Patient Verified\",\n        description: `Successfully verified ${patient.firstName} ${patient.lastName}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Verification Failed\",\n        description: \"Could not verify patient. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBiometricVerification = async (biometricHash: string) => {\n    verificationMutation.mutate({ biometricHash });\n  };\n\n  const handleManualSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!searchQuery.trim()) return;\n    \n    verificationMutation.mutate({ patientId: searchQuery.trim() });\n  };\n\n  const handleOTPVerification = async (otp: string) => {\n    verificationMutation.mutate({ otp });\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Patient Verification</h1>\n            <p className=\"text-gray-600\">Verify patient identity using biometric or OTP authentication</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Verification Methods */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-shield-alt text-teal-600\"></i>\n                    <span>Patient Verification</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Choose your preferred verification method\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Tabs defaultValue=\"biometric\" className=\"space-y-4\">\n                    <TabsList className=\"grid w-full grid-cols-3\">\n                      <TabsTrigger value=\"biometric\">Fingerprint</TabsTrigger>\n                      <TabsTrigger value=\"otp\">SMS OTP</TabsTrigger>\n                      <TabsTrigger value=\"manual\">Manual ID</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"biometric\" className=\"space-y-4\">\n                      <div className=\"text-center py-8\">\n                        <BiometricScanner\n                          onScanComplete={handleBiometricVerification}\n                          isLoading={verificationMutation.isPending}\n                        />\n                        <p className=\"text-sm text-gray-600 mt-4\">\n                          Place finger on scanner for instant verification\n                        </p>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"otp\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"phone\">Patient Phone Number</Label>\n                          <Input\n                            id=\"phone\"\n                            type=\"tel\"\n                            placeholder=\"+1 (555) 123-4567\"\n                            className=\"medical-form-input\"\n                          />\n                        </div>\n                        <Button className=\"w-full teal-button\">\n                          Send OTP\n                        </Button>\n                        <div>\n                          <Label htmlFor=\"otp\">Enter OTP Code</Label>\n                          <Input\n                            id=\"otp\"\n                            type=\"text\"\n                            placeholder=\"123456\"\n                            maxLength={6}\n                            className=\"medical-form-input text-center text-lg tracking-widest\"\n                            onChange={(e) => {\n                              if (e.target.value.length === 6) {\n                                handleOTPVerification(e.target.value);\n                              }\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"manual\" className=\"space-y-4\">\n                      <form onSubmit={handleManualSearch} className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"search\">Patient ID or Insurance Number</Label>\n                          <Input\n                            id=\"search\"\n                            type=\"text\"\n                            placeholder=\"PT-2024-001847 or Insurance ID\"\n                            value={searchQuery}\n                            onChange={(e) => setSearchQuery(e.target.value)}\n                            className=\"medical-form-input\"\n                          />\n                        </div>\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full teal-button\"\n                          disabled={verificationMutation.isPending || !searchQuery.trim()}\n                        >\n                          {verificationMutation.isPending ? \"Searching...\" : \"Search Patient\"}\n                        </Button>\n                      </form>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Patient Information Display */}\n            <div className=\"space-y-6\">\n              {verifiedPatient ? (\n                <>\n                  <Card className=\"border-green-200 bg-green-50\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2 text-green-800\">\n                        <i className=\"fas fa-check-circle\"></i>\n                        <span>Verification Successful</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-16 h-16 bg-teal-100 rounded-full flex items-center justify-center\">\n                            <i className=\"fas fa-user text-teal-600 text-xl\"></i>\n                          </div>\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-900\">\n                              {verifiedPatient.firstName} {verifiedPatient.lastName}\n                            </h3>\n                            <p className=\"text-gray-600\">ID: {verifiedPatient.patientId}</p>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-gray-500\">DOB:</span>\n                            <span className=\"ml-2 font-medium\">\n                              {new Date(verifiedPatient.dateOfBirth).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <div>\n                            <span className=\"text-gray-500\">Gender:</span>\n                            <span className=\"ml-2 font-medium\">{verifiedPatient.gender}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-gray-500\">Insurance:</span>\n                            <span className=\"ml-2 font-medium\">{verifiedPatient.insuranceProvider}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-gray-500\">Plan:</span>\n                            <span className=\"ml-2 font-medium\">{verifiedPatient.insurancePlan}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Benefits Display */}\n                  {verifiedPatient.benefits && verifiedPatient.benefits.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Current Benefits</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          {verifiedPatient.benefits.map((benefit: any, index: number) => (\n                            <div key={index} className=\"bg-gray-50 rounded-lg p-4\">\n                              <div className=\"flex justify-between items-center mb-2\">\n                                <span className=\"text-sm text-gray-600 capitalize\">\n                                  {benefit.benefitType}\n                                </span>\n                                <span className=\"text-sm font-medium\">\n                                  {benefit.usedCount || 0}/{benefit.totalAllowed}\n                                </span>\n                              </div>\n                              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                <div \n                                  className=\"bg-teal-primary h-2 rounded-full\"\n                                  style={{ \n                                    width: `${((benefit.usedCount || 0) / benefit.totalAllowed) * 100}%` \n                                  }}\n                                ></div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Dependents */}\n                  {verifiedPatient.dependents && verifiedPatient.dependents.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Dependents</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-3\">\n                          {verifiedPatient.dependents.map((dependent: any) => (\n                            <div key={dependent.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                              <div>\n                                <p className=\"font-medium\">{dependent.firstName} {dependent.lastName}</p>\n                                <p className=\"text-sm text-gray-600\">{dependent.relationship}</p>\n                              </div>\n                              <span className=\"text-sm text-gray-500\">\n                                Age {Math.floor((Date.now() - new Date(dependent.dateOfBirth).getTime()) / (365.25 * 24 * 60 * 60 * 1000))}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Action Buttons */}\n                  <div className=\"flex space-x-4\">\n                    <Button className=\"flex-1 teal-button\" asChild>\n                      <a href=\"/claims\">Process Claim</a>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"flex-1\"\n                      onClick={() => setVerifiedPatient(null)}\n                    >\n                      Verify Another\n                    </Button>\n                  </div>\n                </>\n              ) : (\n                <Card className=\"border-dashed border-2 border-gray-300\">\n                  <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                    <i className=\"fas fa-user-check text-4xl text-gray-300 mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-gray-500 mb-2\">\n                      No Patient Verified\n                    </h3>\n                    <p className=\"text-sm text-gray-400 text-center\">\n                      Use one of the verification methods to authenticate a patient\n                      and view their information and benefits.\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13864},"client/src/pages/pharmacy-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertTriangle, Pill, ShieldCheck, CreditCard, User, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { LogoutButton } from \"@/components/ui/logout-button\";\n\ninterface PendingPrescription {\n  id: number;\n  patient: {\n    firstName: string;\n    lastName: string;\n    patientId: string;\n    gender: string;\n    age: number;\n    weight?: number;\n    allergies: string[];\n    currentMedications: string[];\n  };\n  doctor: {\n    firstName: string;\n    lastName: string;\n    registrationNumber: string;\n  };\n  medicationName: string;\n  dosage: string;\n  frequency: string;\n  duration: string;\n  quantity: number;\n  indication: string;\n  diagnosis: string;\n  prescribedAt: string;\n  benefitCategory: string;\n  preauthorizationRequired: boolean;\n  preauthorizationStatus: string;\n}\n\ninterface BenefitInfo {\n  category: string;\n  usedAmount: number;\n  remainingAmount: number;\n  maximumBenefit: number;\n  resetDate: string;\n}\n\ninterface ValidationResult {\n  isValid: boolean;\n  warnings: string[];\n  interactions: string[];\n  recommendations: string[];\n  estimatedCost: number;\n  copayAmount: number;\n}\n\nexport default function PharmacyDashboard() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"prescriptions\");\n  const [selectedPrescription, setSelectedPrescription] = useState<PendingPrescription | null>(null);\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [dispensingQuantity, setDispensingQuantity] = useState(0);\n  const [daysSupply, setDaysSupply] = useState(0);\n\n  // Fetch pending prescriptions\n  const { data: prescriptions = [] } = useQuery({\n    queryKey: [\"/api/pharmacy/prescriptions/pending\"],\n    queryFn: async () => {\n      // Mock prescription data\n      return [\n        {\n          id: 1,\n          patient: {\n            firstName: \"John\",\n            lastName: \"Doe\",\n            patientId: \"P001234\",\n            gender: \"Male\",\n            age: 45,\n            weight: 75,\n            allergies: [\"Penicillin\"],\n            currentMedications: [\"Metformin 500mg\", \"Lisinopril 10mg\"]\n          },\n          doctor: {\n            firstName: \"Dr. Sarah\",\n            lastName: \"Wilson\",\n            registrationNumber: \"KMP/12345\"\n          },\n          medicationName: \"Amoxicillin\",\n          dosage: \"500mg\",\n          frequency: \"Three times daily\",\n          duration: \"7 days\",\n          quantity: 21,\n          indication: \"Bacterial infection\",\n          diagnosis: \"Upper respiratory tract infection\",\n          prescribedAt: \"2024-06-18T10:30:00Z\",\n          benefitCategory: \"outpatient_drugs\",\n          preauthorizationRequired: false,\n          preauthorizationStatus: \"not_required\"\n        },\n        {\n          id: 2,\n          patient: {\n            firstName: \"Mary\",\n            lastName: \"Smith\",\n            patientId: \"P001235\",\n            gender: \"Female\",\n            age: 32,\n            weight: 60,\n            allergies: [],\n            currentMedications: [\"Oral contraceptive\"]\n          },\n          doctor: {\n            firstName: \"Dr. James\",\n            lastName: \"Brown\",\n            registrationNumber: \"KMP/12346\"\n          },\n          medicationName: \"Insulin Glargine\",\n          dosage: \"20 units\",\n          frequency: \"Once daily\",\n          duration: \"30 days\",\n          quantity: 1,\n          indication: \"Type 1 Diabetes\",\n          diagnosis: \"Type 1 Diabetes Mellitus\",\n          prescribedAt: \"2024-06-18T11:15:00Z\",\n          benefitCategory: \"chronic_medications\",\n          preauthorizationRequired: true,\n          preauthorizationStatus: \"approved\"\n        }\n      ] as PendingPrescription[];\n    },\n  });\n\n  // Fetch patient benefits\n  const { data: patientBenefits = [] } = useQuery({\n    queryKey: [\"/api/pharmacy/benefits\", selectedPrescription?.patient.patientId],\n    queryFn: async () => {\n      if (!selectedPrescription) return [];\n      // Mock benefit data\n      return [\n        {\n          category: \"outpatient_drugs\",\n          usedAmount: 15000,\n          remainingAmount: 35000,\n          maximumBenefit: 50000,\n          resetDate: \"2024-12-31\"\n        },\n        {\n          category: \"chronic_medications\",\n          usedAmount: 8000,\n          remainingAmount: 22000,\n          maximumBenefit: 30000,\n          resetDate: \"2024-12-31\"\n        }\n      ] as BenefitInfo[];\n    },\n    enabled: !!selectedPrescription,\n  });\n\n  const validatePrescriptionMutation = useMutation({\n    mutationFn: async (prescriptionId: number) => {\n      // Mock validation logic\n      const prescription = prescriptions.find(p => p.id === prescriptionId);\n      if (!prescription) throw new Error(\"Prescription not found\");\n\n      // Simulate validation checks\n      const warnings = [];\n      const interactions = [];\n      const recommendations = [];\n\n      // Check for allergies\n      if (prescription.patient.allergies.includes(\"Penicillin\") && \n          prescription.medicationName.toLowerCase().includes(\"amoxicillin\")) {\n        warnings.push(\"Patient has documented penicillin allergy - consider alternative antibiotic\");\n      }\n\n      // Check for drug interactions\n      if (prescription.patient.currentMedications.some(med => med.includes(\"Metformin\")) &&\n          prescription.medicationName.toLowerCase().includes(\"insulin\")) {\n        interactions.push(\"Monitor blood glucose closely when combining with Metformin\");\n      }\n\n      // Age/weight-based dosing recommendations\n      if (prescription.patient.age > 65) {\n        recommendations.push(\"Consider reduced dose for elderly patient\");\n      }\n\n      // Calculate estimated cost and copay\n      const baseCost = prescription.quantity * 50; // Mock pricing\n      const benefit = patientBenefits.find(b => b.category === prescription.benefitCategory);\n      const copayPercentage = 10; // 10% copay\n      const copayAmount = Math.round(baseCost * copayPercentage / 100);\n\n      return {\n        isValid: warnings.length === 0,\n        warnings,\n        interactions,\n        recommendations,\n        estimatedCost: baseCost,\n        copayAmount\n      } as ValidationResult;\n    },\n    onSuccess: (result) => {\n      setValidationResult(result);\n      if (result.warnings.length > 0) {\n        toast({\n          title: \"Validation Warnings\",\n          description: `${result.warnings.length} warning(s) found. Please review before dispensing.`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Validation Passed\",\n          description: \"Prescription is safe to dispense\",\n        });\n      }\n    },\n  });\n\n  const dispenseMedicationMutation = useMutation({\n    mutationFn: async (data: {\n      prescriptionId: number;\n      quantityDispensed: number;\n      daysSupply: number;\n      copayAmount: number;\n    }) => {\n      return apiRequest(\"POST\", \"/api/pharmacy/dispense\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Medication Dispensed\",\n        description: \"Prescription has been successfully dispensed and recorded\",\n      });\n      setSelectedPrescription(null);\n      setValidationResult(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/pharmacy/prescriptions/pending\"] });\n    },\n  });\n\n  const validatePrescription = (prescription: PendingPrescription) => {\n    setSelectedPrescription(prescription);\n    setDispensingQuantity(prescription.quantity);\n    setDaysSupply(parseInt(prescription.duration.split(' ')[0]) || 30);\n    validatePrescriptionMutation.mutate(prescription.id);\n  };\n\n  const dispenseMedication = () => {\n    if (!selectedPrescription || !validationResult) return;\n\n    dispenseMedicationMutation.mutate({\n      prescriptionId: selectedPrescription.id,\n      quantityDispensed: dispensingQuantity,\n      daysSupply: daysSupply,\n      copayAmount: validationResult.copayAmount,\n    });\n  };\n\n  const getPreauthorizationBadge = (status: string, required: boolean) => {\n    if (!required) {\n      return <Badge variant=\"secondary\">Not Required</Badge>;\n    }\n    \n    switch (status) {\n      case \"approved\":\n        return <Badge className=\"bg-green-100 text-green-800\">Approved</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      case \"denied\":\n        return <Badge className=\"bg-red-100 text-red-800\">Denied</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const getBenefitUtilization = (benefit: BenefitInfo) => {\n    const percentage = (benefit.usedAmount / benefit.maximumBenefit) * 100;\n    return {\n      percentage,\n      color: percentage > 80 ? \"bg-red-500\" : percentage > 60 ? \"bg-yellow-500\" : \"bg-green-500\"\n    };\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Pharmacy Dashboard</h1>\n          <p className=\"text-gray-600\">Validate prescriptions and manage medication dispensing</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"outline\" className=\"text-teal-600 border-teal-200\">\n            <Pill className=\"w-4 h-4 mr-1\" />\n            Pharmacist\n          </Badge>\n          <LogoutButton variant=\"dropdown\" />\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"prescriptions\">Pending Prescriptions</TabsTrigger>\n          <TabsTrigger value=\"validation\">Prescription Validation</TabsTrigger>\n          <TabsTrigger value=\"dispensing\">Dispensing History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"prescriptions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Pill className=\"w-5 h-5 mr-2\" />\n                Pending Prescriptions ({prescriptions.length})\n              </CardTitle>\n              <CardDescription>\n                Prescriptions awaiting validation and dispensing\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {prescriptions.map((prescription) => (\n                  <Card key={prescription.id} className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <Pill className=\"w-5 h-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">\n                              {prescription.patient.firstName} {prescription.patient.lastName}\n                            </h3>\n                            <p className=\"text-gray-600\">ID: {prescription.patient.patientId}</p>\n                            <p className=\"text-sm text-gray-500\">\n                              {prescription.patient.gender} • {prescription.patient.age} years\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"w-4 h-4 text-gray-400\" />\n                            <span className=\"text-sm text-gray-500\">\n                              {new Date(prescription.prescribedAt).toLocaleTimeString()}\n                            </span>\n                          </div>\n                          <Button\n                            onClick={() => validatePrescription(prescription)}\n                            className=\"bg-teal-600 hover:bg-teal-700\"\n                          >\n                            Validate & Dispense\n                          </Button>\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Prescription Details</h4>\n                          <div className=\"space-y-1 text-sm\">\n                            <div><strong>Medication:</strong> {prescription.medicationName} {prescription.dosage}</div>\n                            <div><strong>Frequency:</strong> {prescription.frequency}</div>\n                            <div><strong>Duration:</strong> {prescription.duration}</div>\n                            <div><strong>Quantity:</strong> {prescription.quantity}</div>\n                            <div><strong>Indication:</strong> {prescription.indication}</div>\n                          </div>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Clinical Information</h4>\n                          <div className=\"space-y-1 text-sm\">\n                            <div><strong>Diagnosis:</strong> {prescription.diagnosis}</div>\n                            <div><strong>Prescriber:</strong> {prescription.doctor.firstName} {prescription.doctor.lastName}</div>\n                            <div><strong>Registration:</strong> {prescription.doctor.registrationNumber}</div>\n                            <div><strong>Benefit Category:</strong> {prescription.benefitCategory.replace('_', ' ')}</div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-4 flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div>\n                            <span className=\"text-sm text-gray-600\">Preauthorization: </span>\n                            {getPreauthorizationBadge(prescription.preauthorizationStatus, prescription.preauthorizationRequired)}\n                          </div>\n                          {prescription.patient.allergies.length > 0 && (\n                            <div className=\"flex items-center space-x-1\">\n                              <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n                              <span className=\"text-sm text-orange-700\">\n                                Allergies: {prescription.patient.allergies.join(', ')}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"validation\" className=\"space-y-4\">\n          {selectedPrescription ? (\n            <div className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <ShieldCheck className=\"w-5 h-5 mr-2\" />\n                    Prescription Validation - {selectedPrescription.patient.firstName} {selectedPrescription.patient.lastName}\n                  </CardTitle>\n                  <CardDescription>\n                    Review safety checks and benefit utilization before dispensing\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Patient Benefits */}\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-3\">Benefit Utilization</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {patientBenefits.map((benefit) => {\n                        const utilization = getBenefitUtilization(benefit);\n                        return (\n                          <Card key={benefit.category} className=\"p-4\">\n                            <div className=\"flex justify-between items-center mb-2\">\n                              <h4 className=\"font-medium capitalize\">\n                                {benefit.category.replace('_', ' ')}\n                              </h4>\n                              <span className=\"text-sm text-gray-600\">\n                                {utilization.percentage.toFixed(1)}% used\n                              </span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n                              <div\n                                className={`h-2 rounded-full ${utilization.color}`}\n                                style={{ width: `${utilization.percentage}%` }}\n                              ></div>\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              KES {benefit.usedAmount.toLocaleString()} / KES {benefit.maximumBenefit.toLocaleString()}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Remaining: KES {benefit.remainingAmount.toLocaleString()}\n                            </div>\n                          </Card>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Validation Results */}\n                  {validationResult && (\n                    <div>\n                      <h3 className=\"font-semibold text-lg mb-3\">Safety Validation</h3>\n                      \n                      {validationResult.warnings.length > 0 && (\n                        <Card className=\"border-orange-200 bg-orange-50 mb-4\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center mb-2\">\n                              <AlertTriangle className=\"w-5 h-5 text-orange-600 mr-2\" />\n                              <h4 className=\"font-medium text-orange-800\">Warnings</h4>\n                            </div>\n                            <ul className=\"space-y-1\">\n                              {validationResult.warnings.map((warning, index) => (\n                                <li key={index} className=\"text-sm text-orange-700\">• {warning}</li>\n                              ))}\n                            </ul>\n                          </CardContent>\n                        </Card>\n                      )}\n\n                      {validationResult.interactions.length > 0 && (\n                        <Card className=\"border-yellow-200 bg-yellow-50 mb-4\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center mb-2\">\n                              <AlertTriangle className=\"w-5 h-5 text-yellow-600 mr-2\" />\n                              <h4 className=\"font-medium text-yellow-800\">Drug Interactions</h4>\n                            </div>\n                            <ul className=\"space-y-1\">\n                              {validationResult.interactions.map((interaction, index) => (\n                                <li key={index} className=\"text-sm text-yellow-700\">• {interaction}</li>\n                              ))}\n                            </ul>\n                          </CardContent>\n                        </Card>\n                      )}\n\n                      {validationResult.recommendations.length > 0 && (\n                        <Card className=\"border-blue-200 bg-blue-50 mb-4\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center mb-2\">\n                              <ShieldCheck className=\"w-5 h-5 text-blue-600 mr-2\" />\n                              <h4 className=\"font-medium text-blue-800\">Recommendations</h4>\n                            </div>\n                            <ul className=\"space-y-1\">\n                              {validationResult.recommendations.map((recommendation, index) => (\n                                <li key={index} className=\"text-sm text-blue-700\">• {recommendation}</li>\n                              ))}\n                            </ul>\n                          </CardContent>\n                        </Card>\n                      )}\n\n                      {validationResult.warnings.length === 0 && \n                       validationResult.interactions.length === 0 && \n                       validationResult.recommendations.length === 0 && (\n                        <Card className=\"border-green-200 bg-green-50\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center\">\n                              <ShieldCheck className=\"w-5 h-5 text-green-600 mr-2\" />\n                              <span className=\"text-green-800 font-medium\">\n                                No safety concerns identified. Safe to dispense.\n                              </span>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Dispensing Details */}\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-3\">Dispensing Information</h3>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"quantity\">Quantity to Dispense</Label>\n                        <Input\n                          id=\"quantity\"\n                          type=\"number\"\n                          value={dispensingQuantity}\n                          onChange={(e) => setDispensingQuantity(parseInt(e.target.value) || 0)}\n                          max={selectedPrescription.quantity}\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Max: {selectedPrescription.quantity}\n                        </p>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"daysSupply\">Days Supply</Label>\n                        <Input\n                          id=\"daysSupply\"\n                          type=\"number\"\n                          value={daysSupply}\n                          onChange={(e) => setDaysSupply(parseInt(e.target.value) || 0)}\n                        />\n                      </div>\n                      <div>\n                        <Label>Patient Copay</Label>\n                        <div className=\"p-2 bg-gray-50 rounded-md\">\n                          <span className=\"font-medium\">\n                            KES {validationResult?.copayAmount?.toLocaleString() || 0}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setSelectedPrescription(null);\n                        setValidationResult(null);\n                        setActiveTab(\"prescriptions\");\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={dispenseMedication}\n                      disabled={dispenseMedicationMutation.isPending || !validationResult}\n                      className=\"bg-teal-600 hover:bg-teal-700\"\n                    >\n                      {dispenseMedicationMutation.isPending ? \"Dispensing...\" : \"Dispense Medication\"}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"flex items-center justify-center h-64\">\n                <div className=\"text-center\">\n                  <ShieldCheck className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Select a prescription to validate</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"dispensing\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <CreditCard className=\"w-5 h-5 mr-2\" />\n                Dispensing History\n              </CardTitle>\n              <CardDescription>\n                Recent medication dispensing records and transactions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <CreditCard className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600\">No dispensing records found</p>\n                <p className=\"text-sm text-gray-500\">Dispensed medications will appear here</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-gray-500 mt-8\">\n        Powered by Aboolean\n      </div>\n    </div>\n  );\n}","size_bytes":26119},"client/src/pages/pharmacy-page.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Pill, Scale, Venus, VenusAndMars, AlertTriangle, CheckCircle, \n  Clock, User, Activity, DollarSign, Shield \n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PrescriptionData {\n  medicationName: string;\n  dosage: string;\n  frequency: string;\n  duration: string;\n  quantity: number;\n  indication: string;\n  patientId: number;\n  prescribedBy: number;\n  cost: number;\n}\n\ninterface ValidationResult {\n  weightBasedCheck: boolean;\n  genderSensitiveCheck: boolean;\n  drugInteractions: string[];\n  benefitCategoryMatch: boolean;\n  safetyFlags: string[];\n  recommendations: string[];\n}\n\nexport default function PharmacyPage() {\n  const [prescription, setPrescription] = useState<Partial<PrescriptionData>>({\n    frequency: \"once-daily\",\n    indication: \"acute-infection\"\n  });\n  const [patientInfo, setPatientInfo] = useState({\n    weight: '',\n    age: '',\n    gender: 'female'\n  });\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n\n  const createPrescriptionMutation = useMutation({\n    mutationFn: async (data: PrescriptionData) => {\n      const response = await apiRequest(\"POST\", \"/api/prescriptions\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Prescription created:', data);\n      // Reset form after successful submission\n      setPrescription({\n        frequency: \"once-daily\",\n        indication: \"acute-infection\"\n      });\n    },\n  });\n\n  const validatePrescriptionMutation = useMutation({\n    mutationFn: async (data: { prescriptionId: number; patientWeight: number; patientAge: number; gender: string }) => {\n      const response = await apiRequest(\"POST\", `/api/prescriptions/${data.prescriptionId}/validate`, data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setValidationResult(data);\n    },\n  });\n\n  const handleSubmitPrescription = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!prescription.medicationName || !prescription.dosage || !prescription.patientId) {\n      return;\n    }\n\n    // Generate prescription ID for validation\n    const prescriptionId = Date.now();\n    \n    createPrescriptionMutation.mutate(prescription as PrescriptionData);\n    \n    // Trigger validation if patient info is provided\n    if (patientInfo.weight && patientInfo.age) {\n      validatePrescriptionMutation.mutate({\n        prescriptionId,\n        patientWeight: parseFloat(patientInfo.weight),\n        patientAge: parseInt(patientInfo.age),\n        gender: patientInfo.gender\n      });\n    }\n  };\n\n  const getBenefitCategoryInfo = (indication: string) => {\n    const categories = {\n      'chronic-condition': { color: 'bg-red-100 text-red-800', name: 'Chronic Medications' },\n      'acute-infection': { color: 'bg-blue-100 text-blue-800', name: 'Acute Medications' },\n      'family-planning': { color: 'bg-green-100 text-green-800', name: 'Family Planning' },\n      'vaccination': { color: 'bg-purple-100 text-purple-800', name: 'Vaccination' },\n      'pain-management': { color: 'bg-orange-100 text-orange-800', name: 'Pain Management' }\n    };\n    return categories[indication as keyof typeof categories] || categories['acute-infection'];\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Pharmacy Validation System</h1>\n          <p className=\"text-gray-600\">Smart medication validation with safety checks and benefit management</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Pill className=\"w-5 h-5 text-purple-600\" />\n          <span className=\"text-sm text-gray-600\">AI-Powered Validation</span>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"prescription\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"prescription\">New Prescription</TabsTrigger>\n          <TabsTrigger value=\"benefits\">Benefit Categories</TabsTrigger>\n          <TabsTrigger value=\"interactions\">Drug Interactions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"prescription\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Patient Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-blue-600\" />\n                  <span>Patient Information</span>\n                </CardTitle>\n                <CardDescription>\n                  Patient details for medication validation\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-blue-900 mb-3\">Current Patient</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-blue-700\">Name:</span>\n                      <span className=\"font-medium\">Emily Rodriguez</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-blue-700\">Age:</span>\n                      <span className=\"font-medium\">38 years</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-blue-700\">Insurance:</span>\n                      <span className=\"font-medium\">Premium Health+</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"weight\">Weight (kg)</Label>\n                    <div className=\"relative\">\n                      <Scale className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                      <Input\n                        id=\"weight\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        placeholder=\"65.0\"\n                        value={patientInfo.weight}\n                        onChange={(e) => setPatientInfo(prev => ({ ...prev, weight: e.target.value }))}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"age\">Age (years)</Label>\n                    <Input\n                      id=\"age\"\n                      type=\"number\"\n                      placeholder=\"38\"\n                      value={patientInfo.age}\n                      onChange={(e) => setPatientInfo(prev => ({ ...prev, age: e.target.value }))}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"gender\">Gender</Label>\n                    <Select \n                      value={patientInfo.gender} \n                      onValueChange={(value) => setPatientInfo(prev => ({ ...prev, gender: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"female\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Venus className=\"w-4 h-4\" />\n                            <span>Female</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"male\">\n                          <div className=\"flex items-center space-x-2\">\n                            <VenusAndMars className=\"w-4 h-4\" />\n                            <span>Male</span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Alert>\n                  <Shield className=\"h-4 w-4\" />\n                  <AlertDescription className=\"text-sm\">\n                    Patient information is used for weight-based dosing and gender-sensitive medication checks.\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n\n            {/* Prescription Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Pill className=\"w-5 h-5 text-purple-600\" />\n                  <span>Prescription Details</span>\n                </CardTitle>\n                <CardDescription>\n                  Enter medication information for validation\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmitPrescription} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"patient-id\">Patient ID</Label>\n                    <Input\n                      id=\"patient-id\"\n                      type=\"number\"\n                      placeholder=\"12345\"\n                      value={prescription.patientId || ''}\n                      onChange={(e) => setPrescription(prev => ({ ...prev, patientId: parseInt(e.target.value) }))}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"medication\">Medication Name</Label>\n                    <Input\n                      id=\"medication\"\n                      placeholder=\"e.g., Amoxicillin\"\n                      value={prescription.medicationName || ''}\n                      onChange={(e) => setPrescription(prev => ({ ...prev, medicationName: e.target.value }))}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"dosage\">Dosage</Label>\n                      <Input\n                        id=\"dosage\"\n                        placeholder=\"500mg\"\n                        value={prescription.dosage || ''}\n                        onChange={(e) => setPrescription(prev => ({ ...prev, dosage: e.target.value }))}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quantity\">Quantity</Label>\n                      <Input\n                        id=\"quantity\"\n                        type=\"number\"\n                        placeholder=\"30\"\n                        value={prescription.quantity || ''}\n                        onChange={(e) => setPrescription(prev => ({ ...prev, quantity: parseInt(e.target.value) }))}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"frequency\">Frequency</Label>\n                      <Select \n                        value={prescription.frequency} \n                        onValueChange={(value) => setPrescription(prev => ({ ...prev, frequency: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"once-daily\">Once daily</SelectItem>\n                          <SelectItem value=\"twice-daily\">Twice daily</SelectItem>\n                          <SelectItem value=\"three-times-daily\">Three times daily</SelectItem>\n                          <SelectItem value=\"four-times-daily\">Four times daily</SelectItem>\n                          <SelectItem value=\"as-needed\">As needed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"duration\">Duration</Label>\n                      <Input\n                        id=\"duration\"\n                        placeholder=\"7 days\"\n                        value={prescription.duration || ''}\n                        onChange={(e) => setPrescription(prev => ({ ...prev, duration: e.target.value }))}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"indication\">Clinical Indication</Label>\n                    <Select \n                      value={prescription.indication} \n                      onValueChange={(value) => setPrescription(prev => ({ ...prev, indication: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"acute-infection\">Acute infection</SelectItem>\n                        <SelectItem value=\"chronic-condition\">Chronic condition management</SelectItem>\n                        <SelectItem value=\"family-planning\">Family planning</SelectItem>\n                        <SelectItem value=\"vaccination\">Vaccination</SelectItem>\n                        <SelectItem value=\"pain-management\">Pain management</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cost\">Cost ($)</Label>\n                    <Input\n                      id=\"cost\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"25.99\"\n                      value={prescription.cost || ''}\n                      onChange={(e) => setPrescription(prev => ({ ...prev, cost: parseFloat(e.target.value) }))}\n                      required\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                    disabled={createPrescriptionMutation.isPending}\n                  >\n                    {createPrescriptionMutation.isPending ? (\n                      <>\n                        <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Pill className=\"w-4 h-4 mr-2\" />\n                        Validate Prescription\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Validation Results */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span>Validation Results</span>\n                </CardTitle>\n                <CardDescription>\n                  Safety checks and benefit verification\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {!validationResult ? (\n                  <div className=\"text-center py-12 text-gray-500\">\n                    <Pill className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No validation yet</p>\n                    <p className=\"text-sm\">Submit a prescription to see validation results</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {/* Weight-based Validation */}\n                    <div className={`flex items-center justify-between p-3 rounded-lg border ${\n                      validationResult.weightBasedCheck \n                        ? 'bg-green-50 border-green-200' \n                        : 'bg-yellow-50 border-yellow-200'\n                    }`}>\n                      <div className=\"flex items-center space-x-3\">\n                        <Scale className={`w-5 h-5 ${\n                          validationResult.weightBasedCheck ? 'text-green-500' : 'text-yellow-500'\n                        }`} />\n                        <span className={`font-medium ${\n                          validationResult.weightBasedCheck ? 'text-green-800' : 'text-yellow-800'\n                        }`}>\n                          Weight-based dosage check\n                        </span>\n                      </div>\n                      {validationResult.weightBasedCheck ? (\n                        <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />\n                      )}\n                    </div>\n\n                    {/* Gender-sensitive Check */}\n                    <div className={`flex items-center justify-between p-3 rounded-lg border ${\n                      validationResult.genderSensitiveCheck \n                        ? 'bg-green-50 border-green-200' \n                        : 'bg-yellow-50 border-yellow-200'\n                    }`}>\n                      <div className=\"flex items-center space-x-3\">\n                        {patientInfo.gender === 'female' ? (\n                          <Venus className={`w-5 h-5 ${\n                            validationResult.genderSensitiveCheck ? 'text-green-500' : 'text-yellow-500'\n                          }`} />\n                        ) : (\n                          <VenusAndMars className={`w-5 h-5 ${\n                            validationResult.genderSensitiveCheck ? 'text-green-500' : 'text-yellow-500'\n                          }`} />\n                        )}\n                        <span className={`font-medium ${\n                          validationResult.genderSensitiveCheck ? 'text-green-800' : 'text-yellow-800'\n                        }`}>\n                          Gender-appropriate medication\n                        </span>\n                      </div>\n                      {validationResult.genderSensitiveCheck ? (\n                        <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />\n                      )}\n                    </div>\n\n                    {/* Drug Interactions */}\n                    <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <Activity className=\"w-4 h-4 text-blue-600\" />\n                        <span className=\"font-medium text-blue-800\">Drug Interactions</span>\n                      </div>\n                      {validationResult.drugInteractions.length === 0 ? (\n                        <p className=\"text-sm text-blue-700\">No known interactions detected</p>\n                      ) : (\n                        <ul className=\"text-sm text-blue-700 space-y-1\">\n                          {validationResult.drugInteractions.map((interaction, index) => (\n                            <li key={index}>• {interaction}</li>\n                          ))}\n                        </ul>\n                      )}\n                    </div>\n\n                    {/* Benefit Category */}\n                    <div className=\"p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <DollarSign className=\"w-4 h-4 text-gray-600\" />\n                          <span className=\"font-medium text-gray-800\">Benefit Category</span>\n                        </div>\n                        <Badge className={getBenefitCategoryInfo(prescription.indication || '').color}>\n                          {getBenefitCategoryInfo(prescription.indication || '').name}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"benefits\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Pharmacy Benefits Overview</CardTitle>\n              <CardDescription>\n                Current patient benefit utilization by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[\n                  { category: 'Chronic Medications', used: 750, total: 1000, color: 'bg-red-500' },\n                  { category: 'Acute Medications', used: 225, total: 500, color: 'bg-blue-500' },\n                  { category: 'Family Planning', used: 60, total: 300, color: 'bg-green-500' },\n                  { category: 'Vaccinations', used: 150, total: 200, color: 'bg-purple-500' },\n                  { category: 'Pain Management', used: 320, total: 400, color: 'bg-orange-500' },\n                  { category: 'Mental Health', used: 180, total: 600, color: 'bg-indigo-500' }\n                ].map((benefit) => {\n                  const percentage = (benefit.used / benefit.total) * 100;\n                  return (\n                    <Card key={benefit.category}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"font-medium text-gray-900\">{benefit.category}</span>\n                          <span className=\"text-sm text-gray-500\">\n                            ${benefit.used}/${benefit.total}\n                          </span>\n                        </div>\n                        <Progress value={percentage} className=\"h-3 mb-2\" />\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">{percentage.toFixed(1)}% used</span>\n                          <span className=\"text-gray-600\">${benefit.total - benefit.used} remaining</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"interactions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Current Medications</CardTitle>\n              <CardDescription>\n                Active prescriptions for drug interaction checking\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    name: \"Lisinopril 10mg\",\n                    frequency: \"Once daily\",\n                    indication: \"Hypertension\",\n                    startDate: \"Jan 2024\",\n                    interactions: 0\n                  },\n                  {\n                    name: \"Metformin 500mg\",\n                    frequency: \"Twice daily\", \n                    indication: \"Diabetes\",\n                    startDate: \"Dec 2023\",\n                    interactions: 1\n                  },\n                  {\n                    name: \"Atorvastatin 20mg\",\n                    frequency: \"Once daily\",\n                    indication: \"High cholesterol\",\n                    startDate: \"Mar 2024\",\n                    interactions: 0\n                  }\n                ].map((med, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{med.name}</h4>\n                      <p className=\"text-sm text-gray-600\">{med.frequency} • {med.indication}</p>\n                      <p className=\"text-xs text-gray-500\">Started: {med.startDate}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      {med.interactions > 0 ? (\n                        <Badge variant=\"destructive\">\n                          {med.interactions} interaction{med.interactions !== 1 ? 's' : ''}\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          No interactions\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":25708},"client/src/pages/pharmacy.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface ValidationResult {\n  isValid: boolean;\n  confidence: number;\n  warnings: string[];\n  recommendations: string[];\n  interactions: string[];\n}\n\nexport default function Pharmacy() {\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n  const [prescriptionData, setPrescriptionData] = useState({\n    medicationName: \"\",\n    dosage: \"\",\n    frequency: \"\",\n    duration: \"\",\n    quantity: \"\",\n    indication: \"\",\n    patientWeight: \"\"\n  });\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const { toast } = useToast();\n\n  const { data: patients } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: patientMedications } = useQuery({\n    queryKey: [\"/api/patients\", selectedPatient?.id, \"medications\"],\n    enabled: !!selectedPatient?.id,\n  });\n\n  const validatePrescriptionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/pharmacy/validate\", data);\n      return await res.json();\n    },\n    onSuccess: (result) => {\n      setValidationResult(result);\n      toast({\n        title: \"Prescription Validated\",\n        description: `Validation ${result.isValid ? 'passed' : 'failed'} with ${result.confidence}% confidence`,\n        variant: result.isValid ? \"default\" : \"destructive\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Validation Error\",\n        description: \"Failed to validate prescription. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPrescriptionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/pharmacy/prescriptions\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Prescription Created\",\n        description: \"Prescription has been successfully processed\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", selectedPatient?.id, \"medications\"] });\n      // Reset form\n      setPrescriptionData({\n        medicationName: \"\",\n        dosage: \"\",\n        frequency: \"\",\n        duration: \"\",\n        quantity: \"\",\n        indication: \"\",\n        patientWeight: \"\"\n      });\n      setValidationResult(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create prescription. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleValidate = () => {\n    if (!selectedPatient) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a patient first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const age = Math.floor((Date.now() - new Date(selectedPatient.dateOfBirth).getTime()) / (365.25 * 24 * 60 * 60 * 1000));\n\n    validatePrescriptionMutation.mutate({\n      patientId: selectedPatient.id,\n      medicationName: prescriptionData.medicationName,\n      dosage: prescriptionData.dosage,\n      frequency: prescriptionData.frequency,\n      patientAge: age,\n      patientWeight: prescriptionData.patientWeight ? parseFloat(prescriptionData.patientWeight) : undefined,\n      patientGender: selectedPatient.gender,\n      indication: prescriptionData.indication,\n      currentMedications: patientMedications || []\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedPatient || !validationResult?.isValid) {\n      toast({\n        title: \"Error\",\n        description: \"Please validate the prescription first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createPrescriptionMutation.mutate({\n      patientId: selectedPatient.id,\n      ...prescriptionData,\n      quantity: parseInt(prescriptionData.quantity),\n      isValidated: true,\n      weightBasedDosing: !!prescriptionData.patientWeight,\n      genderSensitive: selectedPatient.gender === 'female'\n    });\n  };\n\n  const getValidationStatusColor = (isValid: boolean) => {\n    return isValid ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50';\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        \n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Pharmacy Validation</h1>\n            <p className=\"text-gray-600\">Smart medication validation with safety checks</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Patient Information */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-user-circle text-blue-600\"></i>\n                    <span>Patient Selection</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"patient-select\">Select Patient</Label>\n                      <Select onValueChange={(value) => {\n                        const patient = patients?.find((p: any) => p.id.toString() === value);\n                        setSelectedPatient(patient);\n                        setValidationResult(null);\n                      }}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Choose a patient\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {patients?.map((patient: any) => (\n                            <SelectItem key={patient.id} value={patient.id.toString()}>\n                              {patient.firstName} {patient.lastName} - {patient.patientId}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {selectedPatient && (\n                      <div className=\"bg-blue-50 rounded-lg p-4\">\n                        <h4 className=\"font-medium text-blue-900 mb-3\">Patient Details</h4>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-blue-700\">Age:</span>\n                            <span>{Math.floor((Date.now() - new Date(selectedPatient.dateOfBirth).getTime()) / (365.25 * 24 * 60 * 60 * 1000))} years</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-blue-700\">Gender:</span>\n                            <span>{selectedPatient.gender}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-blue-700\">Insurance:</span>\n                            <span>{selectedPatient.insuranceProvider}</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Current Medications */}\n              {selectedPatient && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Current Medications</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {patientMedications && patientMedications.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {patientMedications.map((med: any) => (\n                          <div key={med.id} className=\"p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"font-medium text-gray-900\">{med.medicationName}</div>\n                            <div className=\"text-sm text-gray-600\">{med.dosage} - {med.frequency}</div>\n                            <div className=\"text-xs text-gray-500\">For: {med.indication}</div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-gray-500 text-sm\">No current medications</p>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Prescription Form */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-prescription-bottle-alt text-purple-500\"></i>\n                    <span>Prescription Details</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Enter medication information for validation\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"medicationName\">Medication Name</Label>\n                        <Input\n                          id=\"medicationName\"\n                          placeholder=\"e.g., Amoxicillin\"\n                          value={prescriptionData.medicationName}\n                          onChange={(e) => setPrescriptionData(prev => ({ ...prev, medicationName: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"dosage\">Dosage</Label>\n                        <Input\n                          id=\"dosage\"\n                          placeholder=\"e.g., 500mg\"\n                          value={prescriptionData.dosage}\n                          onChange={(e) => setPrescriptionData(prev => ({ ...prev, dosage: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"frequency\">Frequency</Label>\n                        <Select \n                          value={prescriptionData.frequency}\n                          onValueChange={(value) => setPrescriptionData(prev => ({ ...prev, frequency: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select frequency\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"once-daily\">Once daily</SelectItem>\n                            <SelectItem value=\"twice-daily\">Twice daily</SelectItem>\n                            <SelectItem value=\"three-times-daily\">Three times daily</SelectItem>\n                            <SelectItem value=\"four-times-daily\">Four times daily</SelectItem>\n                            <SelectItem value=\"as-needed\">As needed</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"duration\">Duration</Label>\n                        <Input\n                          id=\"duration\"\n                          placeholder=\"e.g., 7 days\"\n                          value={prescriptionData.duration}\n                          onChange={(e) => setPrescriptionData(prev => ({ ...prev, duration: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"quantity\">Quantity</Label>\n                        <Input\n                          id=\"quantity\"\n                          type=\"number\"\n                          placeholder=\"Number of units\"\n                          value={prescriptionData.quantity}\n                          onChange={(e) => setPrescriptionData(prev => ({ ...prev, quantity: e.target.value }))}\n                          className=\"medical-form-input\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"indication\">Clinical Indication</Label>\n                      <Select \n                        value={prescriptionData.indication}\n                        onValueChange={(value) => setPrescriptionData(prev => ({ ...prev, indication: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select indication\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"acute-infection\">Acute infection</SelectItem>\n                          <SelectItem value=\"chronic-condition\">Chronic condition management</SelectItem>\n                          <SelectItem value=\"family-planning\">Family planning</SelectItem>\n                          <SelectItem value=\"vaccination\">Vaccination</SelectItem>\n                          <SelectItem value=\"pain-management\">Pain management</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"patientWeight\">Patient Weight (kg) - Optional</Label>\n                      <Input\n                        id=\"patientWeight\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        placeholder=\"Weight for pediatric dosing\"\n                        value={prescriptionData.patientWeight}\n                        onChange={(e) => setPrescriptionData(prev => ({ ...prev, patientWeight: e.target.value }))}\n                        className=\"medical-form-input\"\n                      />\n                    </div>\n\n                    <div className=\"flex space-x-4\">\n                      <Button\n                        type=\"button\"\n                        onClick={handleValidate}\n                        className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white\"\n                        disabled={validatePrescriptionMutation.isPending || !selectedPatient}\n                      >\n                        {validatePrescriptionMutation.isPending ? (\n                          <>\n                            <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                            Validating...\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-check-double mr-2\"></i>\n                            Validate Prescription\n                          </>\n                        )}\n                      </Button>\n\n                      <Button\n                        type=\"submit\"\n                        className=\"flex-1 teal-button\"\n                        disabled={createPrescriptionMutation.isPending || !validationResult?.isValid}\n                      >\n                        {createPrescriptionMutation.isPending ? \"Processing...\" : \"Process Prescription\"}\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n\n              {/* Validation Results */}\n              {validationResult && (\n                <Card className={getValidationStatusColor(validationResult.isValid)}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <i className={`fas ${validationResult.isValid ? 'fa-check-circle text-green-600' : 'fa-exclamation-triangle text-red-600'}`}></i>\n                      <span>Validation Results</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">Status:</span>\n                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                          validationResult.isValid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                        }`}>\n                          {validationResult.isValid ? 'VALID' : 'REQUIRES REVIEW'}\n                        </span>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">AI Confidence:</span>\n                        <span className=\"font-bold\">{validationResult.confidence}%</span>\n                      </div>\n\n                      {validationResult.warnings.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium text-yellow-800 mb-2\">Warnings:</h4>\n                          <ul className=\"space-y-1\">\n                            {validationResult.warnings.map((warning, index) => (\n                              <li key={index} className=\"text-sm text-yellow-700 flex items-start space-x-2\">\n                                <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-0.5\"></i>\n                                <span>{warning}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {validationResult.interactions.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium text-red-800 mb-2\">Drug Interactions:</h4>\n                          <ul className=\"space-y-1\">\n                            {validationResult.interactions.map((interaction, index) => (\n                              <li key={index} className=\"text-sm text-red-700 flex items-start space-x-2\">\n                                <i className=\"fas fa-exclamation-circle text-red-600 mt-0.5\"></i>\n                                <span>{interaction}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {validationResult.recommendations.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium text-blue-800 mb-2\">Recommendations:</h4>\n                          <ul className=\"space-y-1\">\n                            {validationResult.recommendations.map((recommendation, index) => (\n                              <li key={index} className=\"text-sm text-blue-700 flex items-start space-x-2\">\n                                <i className=\"fas fa-lightbulb text-blue-600 mt-0.5\"></i>\n                                <span>{recommendation}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20024},"client/src/pages/preauth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AIDecisionPanel } from \"@/components/ai-decision-panel\";\nimport { \n  Brain, FileCheck, Clock, CheckCircle, XCircle, \n  AlertTriangle, Lightbulb, Database, TrendingUp \n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PreauthorizationRequest {\n  patientId: number;\n  serviceType: string;\n  procedureCode: string;\n  clinicalJustification: string;\n  estimatedCost: number;\n  urgency: string;\n}\n\ninterface AIDecision {\n  id: number;\n  decision: string;\n  confidence: number;\n  reasoningChain: any;\n  retrievedContext: any;\n  processingTime: number;\n  createdAt: string;\n}\n\nexport default function PreauthorizationPage() {\n  const [request, setRequest] = useState<Partial<PreauthorizationRequest>>({\n    urgency: 'routine'\n  });\n  const [activeDecision, setActiveDecision] = useState<AIDecision | null>(null);\n\n  const { data: recentDecisions, isLoading: isLoadingDecisions } = useQuery<AIDecision[]>({\n    queryKey: [\"/api/ai/decisions/recent\"],\n  });\n\n  const preauthorizationMutation = useMutation({\n    mutationFn: async (data: PreauthorizationRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/preauthorization\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setActiveDecision(data);\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!request.patientId || !request.serviceType || !request.procedureCode) {\n      return;\n    }\n    preauthorizationMutation.mutate(request as PreauthorizationRequest);\n  };\n\n  const getDecisionIcon = (decision: string) => {\n    switch (decision) {\n      case 'approved':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'denied':\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'review_required':\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getDecisionColor = (decision: string) => {\n    switch (decision) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'denied':\n        return 'bg-red-100 text-red-800';\n      case 'review_required':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">AI Preauthorization</h1>\n          <p className=\"text-gray-600\">Intelligent preauthorization with chain-of-thought reasoning</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Brain className=\"w-5 h-5 text-purple-600\" />\n          <span className=\"text-sm text-gray-600\">GPT-4o Powered</span>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"request\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"request\">New Request</TabsTrigger>\n          <TabsTrigger value=\"decisions\">Recent Decisions</TabsTrigger>\n          <TabsTrigger value=\"analytics\">AI Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"request\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Request Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <FileCheck className=\"w-5 h-5 text-blue-600\" />\n                  <span>Preauthorization Request</span>\n                </CardTitle>\n                <CardDescription>\n                  Submit a request for AI-powered preauthorization analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"patient-id\">Patient ID</Label>\n                    <Input\n                      id=\"patient-id\"\n                      type=\"number\"\n                      placeholder=\"12345\"\n                      value={request.patientId || ''}\n                      onChange={(e) => setRequest(prev => ({ ...prev, patientId: parseInt(e.target.value) }))}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"service-type\">Service/Treatment</Label>\n                    <Input\n                      id=\"service-type\"\n                      placeholder=\"e.g., MRI Brain with contrast\"\n                      value={request.serviceType || ''}\n                      onChange={(e) => setRequest(prev => ({ ...prev, serviceType: e.target.value }))}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"procedure-code\">Procedure Code</Label>\n                    <Input\n                      id=\"procedure-code\"\n                      placeholder=\"CPT/ICD-10 Code\"\n                      value={request.procedureCode || ''}\n                      onChange={(e) => setRequest(prev => ({ ...prev, procedureCode: e.target.value }))}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"justification\">Clinical Justification</Label>\n                    <Textarea\n                      id=\"justification\"\n                      rows={4}\n                      placeholder=\"Provide detailed clinical reasoning for the requested service...\"\n                      value={request.clinicalJustification || ''}\n                      onChange={(e) => setRequest(prev => ({ ...prev, clinicalJustification: e.target.value }))}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"cost\">Estimated Cost ($)</Label>\n                      <Input\n                        id=\"cost\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        value={request.estimatedCost || ''}\n                        onChange={(e) => setRequest(prev => ({ ...prev, estimatedCost: parseFloat(e.target.value) }))}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"urgency\">Urgency Level</Label>\n                      <Select \n                        value={request.urgency} \n                        onValueChange={(value) => setRequest(prev => ({ ...prev, urgency: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"routine\">Routine</SelectItem>\n                          <SelectItem value=\"urgent\">Urgent</SelectItem>\n                          <SelectItem value=\"emergency\">Emergency</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                    disabled={preauthorizationMutation.isPending}\n                  >\n                    {preauthorizationMutation.isPending ? (\n                      <>\n                        <Brain className=\"w-4 h-4 mr-2 animate-pulse\" />\n                        AI Analyzing...\n                      </>\n                    ) : (\n                      <>\n                        <Brain className=\"w-4 h-4 mr-2\" />\n                        Request AI Analysis\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* AI Decision Results */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Brain className=\"w-5 h-5 text-purple-600\" />\n                  <span>AI Decision Analysis</span>\n                </CardTitle>\n                <CardDescription>\n                  Real-time AI reasoning and decision output\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {!activeDecision ? (\n                  <div className=\"text-center py-12 text-gray-500\">\n                    <Brain className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No analysis yet</p>\n                    <p className=\"text-sm\">Submit a preauthorization request to see AI decision</p>\n                  </div>\n                ) : (\n                  <AIDecisionPanel decision={activeDecision} />\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"decisions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent AI Decisions</CardTitle>\n              <CardDescription>\n                History of AI preauthorization decisions with reasoning\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoadingDecisions ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-20 bg-gray-200 rounded-lg\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : !recentDecisions || recentDecisions.length === 0 ? (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <FileCheck className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No decisions found</p>\n                  <p className=\"text-sm\">AI decisions will appear here after requests are processed</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {recentDecisions.map((decision) => (\n                    <div \n                      key={decision.id} \n                      className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors cursor-pointer\"\n                      onClick={() => setActiveDecision(decision)}\n                    >\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          {getDecisionIcon(decision.decision)}\n                          <Badge className={getDecisionColor(decision.decision)} variant=\"secondary\">\n                            {decision.decision.replace('_', ' ').toUpperCase()}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                          <span>{decision.confidence?.toFixed(1)}% confidence</span>\n                          <span>•</span>\n                          <span>{decision.processingTime}ms</span>\n                        </div>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        <p>{new Date(decision.createdAt).toLocaleString()}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Decision Accuracy</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">94.2%</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Based on human feedback\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Avg Processing Time</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">1.3s</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Chain-of-thought analysis\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Auto-approval Rate</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">87.3%</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  High confidence decisions\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Lightbulb className=\"w-5 h-5 text-yellow-600\" />\n                <span>AI Insights</span>\n              </CardTitle>\n              <CardDescription>\n                Recent patterns and improvements in AI decision making\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Alert>\n                  <Database className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>RAG Enhancement:</strong> AI is now retrieving more relevant historical cases, \n                    improving decision accuracy by 3.2% this month.\n                  </AlertDescription>\n                </Alert>\n                \n                <Alert>\n                  <Brain className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Learning Update:</strong> Chain-of-thought reasoning has been enhanced \n                    with new clinical guidelines for better policy compliance.\n                  </AlertDescription>\n                </Alert>\n                \n                <Alert>\n                  <TrendingUp className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Performance:</strong> Processing time improved by 0.4s after model optimization. \n                    Human override rate decreased to 5.1%.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":15983},"client/src/pages/simple-debtors-dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { \n  FileText, \n  Users, \n  AlertTriangle, \n  DollarSign,\n  CheckCircle,\n  Clock,\n  X,\n  Shield\n} from \"lucide-react\";\n\nexport default function SimpleDebtorsDashboard() {\n  const [, setLocation] = useLocation();\n  \n  // Mock user data for demo purposes\n  const user = {\n    id: 13,\n    username: \"debtors1\",\n    email: \"debtors@test.med\",\n    name: \"Mary Njoroge\",\n    role: \"debtors\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Debtors Dashboard</h1>\n              <p className=\"text-sm text-gray-600\">Hospital Accounts Department</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-gray-900\">{user.name}</p>\n                <p className=\"text-xs text-gray-500\">{user.role}</p>\n              </div>\n              <Badge className=\"bg-teal-100 text-teal-800\">Premium Access</Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"space-y-8\">\n          {/* KPI Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <FileText className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Claims</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">247</p>\n                    <p className=\"text-xs text-muted-foreground\">Current Month</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Ready Claims</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">198</p>\n                    <p className=\"text-xs text-muted-foreground\">80% Clean Rate</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Pending Diagnosis</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">49</p>\n                    <p className=\"text-xs text-muted-foreground\">Awaiting doctors</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <DollarSign className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Expected Amount</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">KES 2.4M</p>\n                    <p className=\"text-xs text-muted-foreground\">Total reimbursements</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Features */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Claim Batches */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <FileText className=\"h-5 w-5 text-teal-600\" />\n                  <span>Claim Batches</span>\n                </CardTitle>\n                <CardDescription>\n                  Track claim submissions by insurer\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">SHA Batch #001</p>\n                      <p className=\"text-sm text-gray-600\">145 claims</p>\n                    </div>\n                    <Badge className=\"bg-green-100 text-green-800\">Ready</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">CIC Batch #002</p>\n                      <p className=\"text-sm text-gray-600\">89 claims</p>\n                    </div>\n                    <Badge className=\"bg-yellow-100 text-yellow-800\">In Progress</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">AAR Batch #003</p>\n                      <p className=\"text-sm text-gray-600\">23 claims</p>\n                    </div>\n                    <Badge className=\"bg-blue-100 text-blue-800\">Draft</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Verification Audit */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5 text-teal-600\" />\n                  <span>Verification Audit</span>\n                  <Badge className=\"bg-teal-100 text-teal-800\">Premium</Badge>\n                </CardTitle>\n                <CardDescription>\n                  Biometric verification compliance tracking\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">85%</p>\n                    <p className=\"text-xs text-gray-600\">Verified</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-red-600\">12</p>\n                    <p className=\"text-xs text-gray-600\">Missing</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-orange-600\">5</p>\n                    <p className=\"text-xs text-gray-600\">Mismatches</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      <span>John Wanjiku - Lab Tests</span>\n                    </span>\n                    <span className=\"text-gray-500\">Verified</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-orange-600\" />\n                      <span>Mary Njeri - Pharmacy</span>\n                    </span>\n                    <span className=\"text-gray-500\">+30min</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"flex items-center space-x-2\">\n                      <X className=\"h-4 w-4 text-red-600\" />\n                      <span>David Ochieng - Physio</span>\n                    </span>\n                    <span className=\"text-gray-500\">Missing</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n              <CardDescription>\n                Common debtors department workflows\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Button variant=\"outline\" className=\"h-20 flex flex-col items-center space-y-2\">\n                  <FileText className=\"h-6 w-6\" />\n                  <span className=\"text-sm\">Submit Batch</span>\n                </Button>\n                <Button variant=\"outline\" className=\"h-20 flex flex-col items-center space-y-2\">\n                  <AlertTriangle className=\"h-6 w-6\" />\n                  <span className=\"text-sm\">Send Reminders</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-20 flex flex-col items-center space-y-2\"\n                  onClick={() => setLocation(\"/verification-audit\")}\n                >\n                  <Shield className=\"h-6 w-6\" />\n                  <span className=\"text-sm\">Audit Report</span>\n                </Button>\n                <Button variant=\"outline\" className=\"h-20 flex flex-col items-center space-y-2\">\n                  <Users className=\"h-6 w-6\" />\n                  <span className=\"text-sm\">Verify Claims</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10084},"client/src/pages/support-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  MessageSquare, \n  Clock, \n  CheckCircle, \n  AlertTriangle, \n  Users, \n  TrendingUp, \n  Filter,\n  Search,\n  MoreHorizontal,\n  Eye,\n  MessageCircle,\n  FileText,\n  Calendar\n} from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SupportTicket {\n  id: string;\n  user_id: string;\n  user_role: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'open' | 'in_progress' | 'resolved' | 'closed';\n  created_at: string;\n  updated_at: string;\n  resolved_at?: string;\n  assigned_to?: string;\n}\n\ninterface TicketResponse {\n  id: string;\n  ticket_id: string;\n  responder_id: string;\n  responder_name: string;\n  message: string;\n  created_at: string;\n}\n\nexport default function SupportDashboard() {\n  const [selectedTicket, setSelectedTicket] = useState<SupportTicket | null>(null);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [filterPriority, setFilterPriority] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch tickets\n  const { data: tickets = [], isLoading } = useQuery({\n    queryKey: [\"/api/support/tickets\", filterStatus, filterPriority],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filterStatus !== \"all\") params.append(\"status\", filterStatus);\n      const response = await fetch(`http://localhost:8002/tickets?${params.toString()}`);\n      return response.json();\n    }\n  });\n\n  // Fetch ticket responses\n  const { data: responses = [] } = useQuery({\n    queryKey: [\"/api/support/responses\", selectedTicket?.id],\n    queryFn: async () => {\n      if (!selectedTicket?.id) return [];\n      const response = await fetch(`http://localhost:8002/tickets/${selectedTicket.id}/responses`);\n      return response.json();\n    },\n    enabled: !!selectedTicket?.id\n  });\n\n  // Update ticket mutation\n  const updateTicketMutation = useMutation({\n    mutationFn: async ({ ticketId, update }: { ticketId: string; update: any }) => {\n      const response = await fetch(`http://localhost:8002/tickets/${ticketId}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(update)\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support/tickets\"] });\n      toast({\n        title: \"Ticket Updated\",\n        description: \"The support ticket has been updated successfully.\"\n      });\n    }\n  });\n\n  // Filter tickets\n  const filteredTickets = tickets.filter((ticket: SupportTicket) => {\n    const matchesSearch = ticket.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         ticket.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         ticket.user_role.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = filterStatus === \"all\" || ticket.status === filterStatus;\n    const matchesPriority = filterPriority === \"all\" || ticket.priority === filterPriority;\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  // Calculate statistics\n  const stats = {\n    total: tickets.length,\n    open: tickets.filter((t: SupportTicket) => t.status === 'open').length,\n    inProgress: tickets.filter((t: SupportTicket) => t.status === 'in_progress').length,\n    resolved: tickets.filter((t: SupportTicket) => t.status === 'resolved').length,\n    urgent: tickets.filter((t: SupportTicket) => t.priority === 'urgent').length\n  };\n\n  const handleUpdateTicket = (status: string, priority?: string) => {\n    if (!selectedTicket) return;\n    \n    const update: any = { status };\n    if (priority) update.priority = priority;\n    if (responseMessage.trim()) update.response = responseMessage.trim();\n    \n    updateTicketMutation.mutate({ ticketId: selectedTicket.id, update });\n    setResponseMessage(\"\");\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800 border-red-200';\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'in_progress': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'resolved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'closed': return 'bg-gray-100 text-gray-800 border-gray-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <div className=\"max-w-7xl mx-auto pt-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center\">\n            <div className=\"bg-teal-100 dark:bg-teal-900 p-3 rounded-full mr-4\">\n              <MessageSquare className=\"w-8 h-8 text-teal-600 dark:text-teal-400\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                Support Dashboard\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Manage support tickets and user assistance\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Tickets</CardTitle>\n              <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.total}</div>\n              <p className=\"text-xs text-muted-foreground\">All time</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Open</CardTitle>\n              <Clock className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{stats.open}</div>\n              <p className=\"text-xs text-muted-foreground\">Awaiting response</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">In Progress</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">{stats.inProgress}</div>\n              <p className=\"text-xs text-muted-foreground\">Being handled</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Resolved</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{stats.resolved}</div>\n              <p className=\"text-xs text-muted-foreground\">This month</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Urgent</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{stats.urgent}</div>\n              <p className=\"text-xs text-muted-foreground\">Needs attention</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Search */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Support Tickets</CardTitle>\n            <CardDescription>Manage and respond to user support requests</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search tickets...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"open\">Open</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  <SelectItem value=\"closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={filterPriority} onValueChange={setFilterPriority}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Priority</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Tickets Table */}\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Ticket</TableHead>\n                  <TableHead>User</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTickets.map((ticket: SupportTicket) => (\n                  <TableRow key={ticket.id}>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium\">{ticket.title}</p>\n                        <p className=\"text-sm text-gray-600 line-clamp-1\">{ticket.description}</p>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {ticket.user_role}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"secondary\" className=\"capitalize\">\n                        {ticket.category}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`${getPriorityColor(ticket.priority)} capitalize`}>\n                        {ticket.priority}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`${getStatusColor(ticket.status)} capitalize`}>\n                        {ticket.status.replace('_', ' ')}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-gray-600\">\n                        {formatDate(ticket.created_at)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setSelectedTicket(ticket)}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>{selectedTicket?.title}</DialogTitle>\n                            <DialogDescription>\n                              Ticket #{selectedTicket?.id.slice(-8)} • Created {selectedTicket && formatDate(selectedTicket.created_at)}\n                            </DialogDescription>\n                          </DialogHeader>\n                          \n                          {selectedTicket && (\n                            <div className=\"space-y-6\">\n                              {/* Ticket Details */}\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium\">User Role</Label>\n                                  <Badge variant=\"outline\" className=\"mt-1 capitalize\">\n                                    {selectedTicket.user_role}\n                                  </Badge>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium\">Category</Label>\n                                  <Badge variant=\"secondary\" className=\"mt-1 capitalize\">\n                                    {selectedTicket.category}\n                                  </Badge>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium\">Priority</Label>\n                                  <Badge className={`mt-1 ${getPriorityColor(selectedTicket.priority)} capitalize`}>\n                                    {selectedTicket.priority}\n                                  </Badge>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium\">Status</Label>\n                                  <Badge className={`mt-1 ${getStatusColor(selectedTicket.status)} capitalize`}>\n                                    {selectedTicket.status.replace('_', ' ')}\n                                  </Badge>\n                                </div>\n                              </div>\n\n                              {/* Description */}\n                              <div>\n                                <Label className=\"text-sm font-medium\">Description</Label>\n                                <div className=\"mt-2 p-3 bg-gray-50 rounded-lg text-sm\">\n                                  {selectedTicket.description}\n                                </div>\n                              </div>\n\n                              {/* Responses */}\n                              <div>\n                                <Label className=\"text-sm font-medium\">Conversation</Label>\n                                <div className=\"mt-2 space-y-3 max-h-60 overflow-y-auto\">\n                                  {responses.map((response: TicketResponse) => (\n                                    <div key={response.id} className=\"flex gap-3\">\n                                      <div className=\"w-8 h-8 bg-teal-100 rounded-full flex items-center justify-center text-xs font-medium\">\n                                        {response.responder_name.charAt(0)}\n                                      </div>\n                                      <div className=\"flex-1\">\n                                        <div className=\"flex items-center gap-2 mb-1\">\n                                          <span className=\"text-sm font-medium\">{response.responder_name}</span>\n                                          <span className=\"text-xs text-gray-500\">\n                                            {formatDate(response.created_at)}\n                                          </span>\n                                        </div>\n                                        <div className=\"text-sm text-gray-700 bg-white p-2 rounded border\">\n                                          {response.message}\n                                        </div>\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n\n                              {/* Response Form */}\n                              <div>\n                                <Label className=\"text-sm font-medium\">Add Response</Label>\n                                <Textarea\n                                  placeholder=\"Type your response...\"\n                                  value={responseMessage}\n                                  onChange={(e) => setResponseMessage(e.target.value)}\n                                  className=\"mt-2\"\n                                />\n                              </div>\n\n                              {/* Actions */}\n                              <div className=\"flex gap-2 pt-4 border-t\">\n                                <Button\n                                  onClick={() => handleUpdateTicket('in_progress')}\n                                  disabled={updateTicketMutation.isPending}\n                                  variant=\"outline\"\n                                >\n                                  Mark In Progress\n                                </Button>\n                                <Button\n                                  onClick={() => handleUpdateTicket('resolved')}\n                                  disabled={updateTicketMutation.isPending}\n                                  className=\"bg-green-600 hover:bg-green-700\"\n                                >\n                                  Resolve Ticket\n                                </Button>\n                                <Button\n                                  onClick={() => handleUpdateTicket('closed')}\n                                  disabled={updateTicketMutation.isPending}\n                                  variant=\"outline\"\n                                >\n                                  Close Ticket\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20747},"client/src/pages/verification-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BiometricScanner } from \"@/components/biometric-scanner\";\nimport { \n  Fingerprint, Smartphone, Search, User, Calendar, \n  Shield, CheckCircle, Users, CreditCard \n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PatientData {\n  patient: {\n    id: number;\n    patientId: string;\n    firstName: string;\n    lastName: string;\n    dateOfBirth: string;\n    gender: string;\n    phoneNumber: string;\n    insuranceNumber: string;\n    insurancePlan: string;\n  };\n  benefits: Array<{\n    id: number;\n    benefitType: string;\n    totalAllowed: number;\n    used: number;\n    remainingAmount: string;\n  }>;\n  dependents: Array<{\n    id: number;\n    firstName: string;\n    lastName: string;\n    relationship: string;\n    dateOfBirth: string;\n  }>;\n}\n\nexport default function VerificationPage() {\n  const [verificationMethod, setVerificationMethod] = useState<'fingerprint' | 'otp'>('fingerprint');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [verifiedPatient, setVerifiedPatient] = useState<PatientData | null>(null);\n  const [otpCode, setOtpCode] = useState('');\n  const queryClient = useQueryClient();\n\n  const verifyPatientMutation = useMutation({\n    mutationFn: async (data: { patientId?: string; biometricData?: boolean; otpCode?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/patients/verify\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setVerifiedPatient(data);\n    },\n  });\n\n  const { data: searchResults, isLoading: isSearching } = useQuery({\n    queryKey: [\"/api/patients/search\", { q: searchQuery }],\n    enabled: searchQuery.length > 2,\n  });\n\n  const handleBiometricVerification = () => {\n    verifyPatientMutation.mutate({ \n      patientId: searchQuery,\n      biometricData: true \n    });\n  };\n\n  const handleOtpVerification = () => {\n    verifyPatientMutation.mutate({ \n      patientId: searchQuery,\n      otpCode \n    });\n  };\n\n  const calculateBenefitUsage = (used: number, total: number) => {\n    return Math.round((used / total) * 100);\n  };\n\n  const getBenefitColor = (usage: number) => {\n    if (usage < 50) return 'bg-green-500';\n    if (usage < 80) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Patient Verification</h1>\n          <p className=\"text-gray-600\">Secure biometric and OTP-based patient authentication</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Shield className=\"w-5 h-5 text-teal-600\" />\n          <span className=\"text-sm text-gray-600\">HIPAA Compliant</span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Verification Panel */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Fingerprint className=\"w-5 h-5 text-teal-600\" />\n              <span>Patient Verification</span>\n            </CardTitle>\n            <CardDescription>\n              Verify patient identity using biometric or OTP methods\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Patient Search */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"patient-search\">Patient ID or Insurance Number</Label>\n              <div className=\"flex space-x-2\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"patient-search\"\n                    placeholder=\"Enter Patient ID, Insurance #, or Name\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n                <Button variant=\"outline\" size=\"icon\">\n                  <Search className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              \n              {/* Search Results */}\n              {isSearching && (\n                <div className=\"p-3 bg-gray-50 rounded-lg\">\n                  <p className=\"text-sm text-gray-600\">Searching...</p>\n                </div>\n              )}\n              \n              {searchResults && searchResults.length > 0 && (\n                <div className=\"space-y-2\">\n                  {searchResults.slice(0, 3).map((patient: any) => (\n                    <div\n                      key={patient.id}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100\"\n                      onClick={() => setSearchQuery(patient.patientId)}\n                    >\n                      <div>\n                        <p className=\"font-medium\">{patient.firstName} {patient.lastName}</p>\n                        <p className=\"text-sm text-gray-500\">ID: {patient.patientId}</p>\n                      </div>\n                      <Badge variant=\"outline\">{patient.insurancePlan}</Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Verification Method Selection */}\n            <Tabs value={verificationMethod} onValueChange={(value) => setVerificationMethod(value as 'fingerprint' | 'otp')}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"fingerprint\" className=\"flex items-center space-x-2\">\n                  <Fingerprint className=\"w-4 h-4\" />\n                  <span>Biometric</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"otp\" className=\"flex items-center space-x-2\">\n                  <Smartphone className=\"w-4 h-4\" />\n                  <span>OTP</span>\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"fingerprint\" className=\"space-y-4\">\n                <Alert>\n                  <Fingerprint className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Place patient's finger on the biometric scanner for instant verification.\n                  </AlertDescription>\n                </Alert>\n                \n                <BiometricScanner\n                  onScanComplete={handleBiometricVerification}\n                  isLoading={verifyPatientMutation.isPending}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"otp\" className=\"space-y-4\">\n                <Alert>\n                  <Smartphone className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    A 6-digit OTP will be sent to the patient's registered phone number.\n                  </AlertDescription>\n                </Alert>\n                \n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"otp\">Enter 6-digit OTP</Label>\n                  <Input\n                    id=\"otp\"\n                    type=\"text\"\n                    maxLength={6}\n                    placeholder=\"123456\"\n                    value={otpCode}\n                    onChange={(e) => setOtpCode(e.target.value.replace(/\\D/g, ''))}\n                    className=\"text-center tracking-widest font-mono text-lg\"\n                  />\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={handleOtpVerification}\n                      disabled={otpCode.length !== 6 || verifyPatientMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      Verify OTP\n                    </Button>\n                    <Button variant=\"outline\">\n                      Resend\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Verification Results */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-blue-600\" />\n              <span>Patient Information</span>\n            </CardTitle>\n            <CardDescription>\n              Verified patient details and insurance benefits\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {!verifiedPatient ? (\n              <div className=\"text-center py-12 text-gray-500\">\n                <Shield className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p>Patient verification required</p>\n                <p className=\"text-sm\">Complete biometric or OTP verification to view patient details</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Verification Success */}\n                <Alert className=\"border-green-200 bg-green-50\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <AlertDescription className=\"text-green-800\">\n                    Patient verified successfully\n                  </AlertDescription>\n                </Alert>\n\n                {/* Patient Profile */}\n                <div className=\"bg-gradient-to-r from-teal-50 to-blue-50 rounded-lg p-4\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-16 h-16 bg-teal-200 rounded-full flex items-center justify-center\">\n                      <User className=\"w-8 h-8 text-teal-700\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        {verifiedPatient.patient.firstName} {verifiedPatient.patient.lastName}\n                      </h3>\n                      <p className=\"text-gray-600\">ID: {verifiedPatient.patient.patientId}</p>\n                      <div className=\"grid grid-cols-2 gap-4 mt-3 text-sm\">\n                        <div>\n                          <span className=\"text-gray-500\">DOB:</span>\n                          <span className=\"ml-2 font-medium\">\n                            {new Date(verifiedPatient.patient.dateOfBirth).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-500\">Gender:</span>\n                          <span className=\"ml-2 font-medium\">{verifiedPatient.patient.gender}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-500\">Plan:</span>\n                          <span className=\"ml-2 font-medium\">{verifiedPatient.patient.insurancePlan}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-500\">Phone:</span>\n                          <span className=\"ml-2 font-medium\">{verifiedPatient.patient.phoneNumber}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                  </div>\n                </div>\n\n                {/* Benefits Overview */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900 flex items-center space-x-2\">\n                    <CreditCard className=\"w-4 h-4\" />\n                    <span>Insurance Benefits</span>\n                  </h4>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {verifiedPatient.benefits.map((benefit) => {\n                      const usage = calculateBenefitUsage(benefit.used, benefit.totalAllowed);\n                      return (\n                        <div key={benefit.id} className=\"border border-gray-200 rounded-lg p-4\">\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <span className=\"font-medium capitalize\">\n                              {benefit.benefitType.replace('-', ' ')}\n                            </span>\n                            <span className=\"text-sm text-gray-500\">\n                              {benefit.used}/{benefit.totalAllowed}\n                            </span>\n                          </div>\n                          <Progress value={usage} className=\"h-2 mb-2\" />\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-500\">Usage: {usage}%</span>\n                            {benefit.remainingAmount && (\n                              <span className=\"text-gray-500\">\n                                Remaining: ${benefit.remainingAmount}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* Dependents */}\n                {verifiedPatient.dependents.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium text-gray-900 flex items-center space-x-2\">\n                      <Users className=\"w-4 h-4\" />\n                      <span>Dependents</span>\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {verifiedPatient.dependents.map((dependent) => (\n                        <div key={dependent.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div>\n                            <p className=\"font-medium\">\n                              {dependent.firstName} {dependent.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              {dependent.relationship} • Born {new Date(dependent.dateOfBirth).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge variant=\"outline\">Covered</Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Button */}\n                <Button \n                  className=\"w-full bg-teal-600 hover:bg-teal-700\"\n                  onClick={() => window.location.href = '/claims'}\n                >\n                  Proceed to Claims Processing\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15228},"client/src/utils/autofillClaim.ts":{"content":"import { PDFDocument, PDFTextField, PDFCheckBox } from \"pdf-lib\";\n\nexport interface PatientData {\n  name: string;\n  dateOfBirth: string;\n  gender: string;\n  memberId: string;\n  phoneNumber?: string;\n  address?: string;\n  diagnosis?: string;\n  treatment?: string;\n  serviceDate?: string;\n  providerName?: string;\n  totalAmount?: string;\n}\n\nexport interface ClaimService {\n  serviceCode: string;\n  serviceName: string;\n  quantity: number;\n  unitCost: number;\n  totalCost: number;\n  serviceDate: string;\n}\n\nexport async function generateClaimForm(\n  patientData: PatientData, \n  insurer: string,\n  services: ClaimService[] = []\n): Promise<Uint8Array> {\n  try {\n    // Create a new PDF document for claim forms\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage([595, 842]); // A4 size\n    \n    const { width, height } = page.getSize();\n    const fontSize = 10;\n    const titleFontSize = 14;\n    const headerFontSize = 12;\n\n    // Header with insurer branding\n    const headerY = height - 50;\n    page.drawText(`${insurer.toUpperCase()} MEDICAL CLAIM FORM`, {\n      x: 50,\n      y: headerY,\n      size: titleFontSize,\n    });\n\n    page.drawText(`Claim Date: ${new Date().toLocaleDateString()}`, {\n      x: width - 200,\n      y: headerY,\n      size: fontSize,\n    });\n\n    // Patient Information Section\n    let currentY = headerY - 60;\n    page.drawText('PATIENT INFORMATION', {\n      x: 50,\n      y: currentY,\n      size: headerFontSize,\n    });\n\n    currentY -= 30;\n    const leftColumn = 50;\n    const rightColumn = 300;\n\n    // Patient details\n    page.drawText(`Name: ${patientData.name}`, {\n      x: leftColumn,\n      y: currentY,\n      size: fontSize,\n    });\n\n    page.drawText(`Member ID: ${patientData.memberId}`, {\n      x: rightColumn,\n      y: currentY,\n      size: fontSize,\n    });\n\n    currentY -= 20;\n    page.drawText(`Date of Birth: ${patientData.dateOfBirth}`, {\n      x: leftColumn,\n      y: currentY,\n      size: fontSize,\n    });\n\n    page.drawText(`Gender: ${patientData.gender}`, {\n      x: rightColumn,\n      y: currentY,\n      size: fontSize,\n    });\n\n    if (patientData.phoneNumber) {\n      currentY -= 20;\n      page.drawText(`Phone: ${patientData.phoneNumber}`, {\n        x: leftColumn,\n        y: currentY,\n        size: fontSize,\n      });\n    }\n\n    if (patientData.address) {\n      page.drawText(`Address: ${patientData.address}`, {\n        x: rightColumn,\n        y: currentY,\n        size: fontSize,\n      });\n    }\n\n    // Medical Information Section\n    currentY -= 50;\n    page.drawText('MEDICAL INFORMATION', {\n      x: 50,\n      y: currentY,\n      size: headerFontSize,\n    });\n\n    currentY -= 30;\n    if (patientData.diagnosis) {\n      page.drawText(`Diagnosis: ${patientData.diagnosis}`, {\n        x: leftColumn,\n        y: currentY,\n        size: fontSize,\n      });\n      currentY -= 20;\n    }\n\n    if (patientData.treatment) {\n      page.drawText(`Treatment: ${patientData.treatment}`, {\n        x: leftColumn,\n        y: currentY,\n        size: fontSize,\n      });\n      currentY -= 20;\n    }\n\n    if (patientData.serviceDate) {\n      page.drawText(`Service Date: ${patientData.serviceDate}`, {\n        x: leftColumn,\n        y: currentY,\n        size: fontSize,\n      });\n      currentY -= 20;\n    }\n\n    // Services Table\n    if (services.length > 0) {\n      currentY -= 30;\n      page.drawText('SERVICES PROVIDED', {\n        x: 50,\n        y: currentY,\n        size: headerFontSize,\n      });\n\n      currentY -= 30;\n      // Table header\n      page.drawText('Service Code', { x: 50, y: currentY, size: fontSize });\n      page.drawText('Description', { x: 130, y: currentY, size: fontSize });\n      page.drawText('Qty', { x: 300, y: currentY, size: fontSize });\n      page.drawText('Unit Cost', { x: 350, y: currentY, size: fontSize });\n      page.drawText('Total', { x: 420, y: currentY, size: fontSize });\n      page.drawText('Date', { x: 480, y: currentY, size: fontSize });\n\n      // Draw line under header\n      currentY -= 5;\n      page.drawLine({\n        start: { x: 50, y: currentY },\n        end: { x: 550, y: currentY },\n        thickness: 1,\n      });\n\n      // Service rows\n      let totalAmount = 0;\n      services.forEach((service) => {\n        currentY -= 20;\n        page.drawText(service.serviceCode, { x: 50, y: currentY, size: fontSize });\n        page.drawText(service.serviceName.substring(0, 20), { x: 130, y: currentY, size: fontSize });\n        page.drawText(service.quantity.toString(), { x: 300, y: currentY, size: fontSize });\n        page.drawText(`KES ${service.unitCost.toFixed(2)}`, { x: 350, y: currentY, size: fontSize });\n        page.drawText(`KES ${service.totalCost.toFixed(2)}`, { x: 420, y: currentY, size: fontSize });\n        page.drawText(service.serviceDate, { x: 480, y: currentY, size: fontSize });\n        totalAmount += service.totalCost;\n      });\n\n      // Total line\n      currentY -= 25;\n      page.drawLine({\n        start: { x: 350, y: currentY + 15 },\n        end: { x: 480, y: currentY + 15 },\n        thickness: 1,\n      });\n      page.drawText(`TOTAL: KES ${totalAmount.toFixed(2)}`, {\n        x: 420,\n        y: currentY,\n        size: headerFontSize,\n      });\n    }\n\n    // Provider Information\n    currentY -= 50;\n    page.drawText('PROVIDER INFORMATION', {\n      x: 50,\n      y: currentY,\n      size: headerFontSize,\n    });\n\n    currentY -= 30;\n    if (patientData.providerName) {\n      page.drawText(`Provider: ${patientData.providerName}`, {\n        x: leftColumn,\n        y: currentY,\n        size: fontSize,\n      });\n    }\n\n    page.drawText(`Facility: Erlessed Healthcare Platform`, {\n      x: rightColumn,\n      y: currentY,\n      size: fontSize,\n    });\n\n    // Signature section\n    currentY -= 50;\n    page.drawText('SIGNATURES', {\n      x: 50,\n      y: currentY,\n      size: headerFontSize,\n    });\n\n    currentY -= 40;\n    page.drawText('Patient/Guardian Signature: ________________________', {\n      x: 50,\n      y: currentY,\n      size: fontSize,\n    });\n\n    page.drawText('Date: __________', {\n      x: 400,\n      y: currentY,\n      size: fontSize,\n    });\n\n    currentY -= 30;\n    page.drawText('Provider Signature: ____________________________', {\n      x: 50,\n      y: currentY,\n      size: fontSize,\n    });\n\n    page.drawText('Date: __________', {\n      x: 400,\n      y: currentY,\n      size: fontSize,\n    });\n\n    // Footer\n    page.drawText(`Generated by Erlessed Healthcare Platform - ${new Date().toISOString()}`, {\n      x: 50,\n      y: 30,\n      size: 8,\n    });\n\n    // Insurer-specific customizations\n    if (insurer.toLowerCase() === 'sha') {\n      page.drawText('SHA Member Benefits Apply', {\n        x: width - 200,\n        y: 50,\n        size: fontSize,\n      });\n    } else if (insurer.toLowerCase() === 'cic') {\n      page.drawText('CIC Insurance Policy Coverage', {\n        x: width - 200,\n        y: 50,\n        size: fontSize,\n      });\n    } else if (insurer.toLowerCase() === 'aar') {\n      page.drawText('AAR Insurance Medical Cover', {\n        x: width - 200,\n        y: 50,\n        size: fontSize,\n      });\n    }\n\n    return await pdfDoc.save();\n  } catch (error) {\n    console.error('Error generating claim form:', error);\n    throw new Error('Failed to generate claim form');\n  }\n}\n\n// Helper function to download the generated PDF\nexport function downloadPDF(pdfBytes: Uint8Array, filename: string) {\n  const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n// Generate filename based on patient and insurer data\nexport function generateFilename(patientData: PatientData, insurer: string): string {\n  const date = new Date().toISOString().split('T')[0];\n  const sanitizedName = patientData.name.replace(/[^a-zA-Z0-9]/g, '_');\n  return `${insurer}_Claim_${sanitizedName}_${date}.pdf`;\n}","size_bytes":8029},"client/src/components/layout/header.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { LogoutButton } from \"@/components/ui/logout-button\";\n\nexport function Header() {\n  const { user } = useAuth();\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 sticky top-0 z-40 shadow-sm\">\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Page Context */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-600\">System Healthy</span>\n            </div>\n          </div>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center space-x-6\">\n            {/* AI Status Indicator */}\n            <div className=\"flex items-center space-x-2 bg-teal-50 px-3 py-1 rounded-full\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-teal-primary font-medium\">AI Active</span>\n            </div>\n\n            {/* Current Role */}\n            <div className=\"flex items-center space-x-2 bg-gray-50 px-3 py-2 rounded-lg\">\n              <i className={`fas ${\n                user?.role === 'doctor' ? 'fa-user-md' :\n                user?.role === 'pharmacy' ? 'fa-pills' :\n                user?.role === 'lab' ? 'fa-flask' :\n                user?.role === 'care-manager' ? 'fa-chart-line' :\n                user?.role === 'debtors' ? 'fa-dollar-sign' :\n                'fa-user'\n              } text-teal-primary`}></i>\n              <span className=\"text-sm font-medium text-gray-700 capitalize\">\n                {user?.role?.replace('-', ' ')}\n              </span>\n            </div>\n\n            {/* Notifications */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n              <i className=\"fas fa-bell text-lg\"></i>\n              <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n                3\n              </span>\n            </Button>\n\n            {/* Logout Button */}\n            <LogoutButton variant=\"dropdown\" />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2365},"client/src/components/layout/shared-layout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ErllessedLogo } from \"@/components/erlessed-logo\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Link, useLocation } from \"wouter\";\nimport { LogOut, Clock, User, Settings } from \"lucide-react\";\nimport { DashboardToggle } from \"@/components/dashboard-toggle\";\n\ninterface SharedLayoutProps {\n  children: React.ReactNode;\n  sidebarItems?: Array<{\n    path: string;\n    icon: React.ReactNode;\n    label: string;\n    roles?: string[];\n    badge?: string;\n  }>;\n  title?: string;\n  user?: any;\n  className?: string;\n}\n\nexport function SharedLayout({ children, sidebarItems = [], title, user: propUser, className }: SharedLayoutProps) {\n  const { user: authUser, logout } = useAuth();\n  const user = propUser || authUser;\n  const [location] = useLocation();\n  const [sessionTime, setSessionTime] = useState(23 * 60 + 45); // 23:45 remaining\n\n  // Session timer countdown\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setSessionTime(prev => prev > 0 ? prev - 1 : 0);\n    }, 60000); // Update every minute\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}:${mins.toString().padStart(2, '0')}`;\n  };\n\n  const isActive = (path: string) => {\n    return location === path || (path !== \"/\" && location.startsWith(path));\n  };\n\n  const getRoleColor = (role: string) => {\n    const colors = {\n      doctor: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n      pharmacist: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n      \"care-manager\": \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300\",\n      insurer: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\",\n      patient: \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300\",\n      admin: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n    };\n    return colors[role as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <div className={className || \"min-h-screen bg-background\"}>\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 w-full border-b bg-card shadow-sm\">\n        <div className=\"container flex h-16 items-center justify-between px-4\">\n          <div className=\"flex items-center space-x-4\">\n            <ErllessedLogo className=\"h-8 w-auto\" />\n            {title && (\n              <>\n                <div className=\"h-6 w-px bg-border\" />\n                <h1 className=\"text-lg font-semibold text-foreground\">{title}</h1>\n              </>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Dashboard Toggle Menu */}\n            <DashboardToggle currentPath={location} />\n            {/* Session Timer */}\n            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n              <Clock className=\"h-4 w-4\" />\n              <span>Session: {formatTime(sessionTime)}</span>\n            </div>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={user?.avatar} alt={user?.name} />\n                    <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                      {user?.name ? getInitials(user.name) : 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-80\" align=\"end\" forceMount>\n                <DropdownMenuLabel className=\"font-normal\">\n                  <div className=\"flex flex-col space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <p className=\"text-sm font-medium leading-none\">{user?.name || 'Unknown'}</p>\n                      <Badge className={getRoleColor(user?.role || 'user')} variant=\"secondary\">\n                        {user?.role?.replace('-', ' ').toUpperCase() || 'USER'}\n                      </Badge>\n                    </div>\n                    <p className=\"text-xs leading-none text-muted-foreground\">\n                      {user?.email || user?.username}\n                    </p>\n                    <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                      <Clock className=\"h-3 w-3\" />\n                      <span>Session expires in {formatTime(sessionTime)}</span>\n                    </div>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\" className=\"flex items-center\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    <span>Profile</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/settings\" className=\"flex items-center\">\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    <span>Settings</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"text-destructive focus:text-destructive\"\n                  onSelect={() => logout()}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Sign out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex\">\n        {/* Sidebar - only show if sidebarItems exist */}\n        {sidebarItems.length > 0 && (\n          <aside className=\"fixed left-0 top-16 z-40 h-[calc(100vh-4rem)] w-64 overflow-y-auto border-r bg-card\">\n            <div className=\"flex h-full flex-col\">\n              <nav className=\"flex-1 space-y-2 p-4\">\n                {sidebarItems.map((item) => {\n                if (item.roles && !item.roles.includes(user?.role || '')) {\n                  return null;\n                }\n\n                return (\n                  <Link key={item.path} href={item.path}>\n                    <div\n                      className={`flex items-center space-x-3 rounded-2xl px-4 py-3 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground cursor-pointer ${\n                        isActive(item.path)\n                          ? 'bg-primary text-primary-foreground'\n                          : 'text-muted-foreground hover:text-foreground'\n                      }`}\n                    >\n                      <span className=\"flex-shrink-0\">{item.icon}</span>\n                      <span className=\"flex-1\">{item.label}</span>\n                      {item.badge && (\n                        <Badge variant=\"secondary\" className=\"ml-auto\">\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </div>\n                  </Link>\n                );\n              })}\n            </nav>\n\n            {/* Footer */}\n            <div className=\"border-t p-4\">\n              <p className=\"text-xs text-muted-foreground text-center\">\n                Powered by Aboolean\n              </p>\n            </div>\n          </div>\n        </aside>\n        )}\n\n        {/* Main Content */}\n        <main className={`flex-1 ${sidebarItems.length > 0 ? 'ml-64' : 'ml-0'}`}>\n          <div className=\"container mx-auto p-6\">\n            <div className=\"fade-in\">\n              {children}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":8304},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { ErllessedLogo } from \"@/components/erlessed-logo\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\n\nexport function Sidebar() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const isActive = (path: string) => {\n    return location === path || (path !== \"/\" && location.startsWith(path));\n  };\n\n  const navItems = [\n    { path: \"/\", icon: \"fas fa-chart-line\", label: \"Dashboard\" },\n    { path: \"/patient-queue\", icon: \"fas fa-users\", label: \"Patient Queue\", roles: [\"doctor\"] },\n    { path: \"/consultation\", icon: \"fas fa-stethoscope\", label: \"Consultation Form\", roles: [\"doctor\"] },\n    { path: \"/verification\", icon: \"fas fa-fingerprint\", label: \"Patient Verification\", roles: [\"pharmacy\", \"front-office\"] },\n    { path: \"/claims\", icon: \"fas fa-file-medical\", label: \"Claims Processing\" },\n    { path: \"/ai-preauth\", icon: \"fas fa-brain\", label: \"AI Preauthorization\", badge: \"AI\", roles: [\"pharmacy\", \"front-office\"] },\n    { path: \"/pharmacy\", icon: \"fas fa-pills\", label: \"Pharmacy\" },\n    { path: \"/care-manager\", icon: \"fas fa-chart-bar\", label: \"Analytics\", roles: [\"care-manager\"] },\n    { path: \"/blockchain\", icon: \"fas fa-link\", label: \"Blockchain Audit\", badge: \"Beta\" },\n    { path: \"/debtors\", icon: \"fas fa-dollar-sign\", label: \"Debtors\", roles: [\"debtors\", \"care-manager\"] },\n  ];\n\n  const filteredNavItems = navItems.filter(item => \n    !item.roles || item.roles.includes(user?.role || \"\")\n  );\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg border-r border-gray-200 fixed h-full z-10\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <ErllessedLogo />\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"p-4 space-y-2\">\n        {filteredNavItems.map((item) => (\n          <Link key={item.path} href={item.path}>\n            <div className={`nav-item ${isActive(item.path) ? 'active' : ''}`}>\n              <i className={`${item.icon} w-5`}></i>\n              <span>{item.label}</span>\n              {item.badge && (\n                <div className={`ml-auto px-2 py-1 text-xs rounded-full ${\n                  item.badge === 'AI' ? 'bg-blue-100 text-blue-600' : 'bg-purple-100 text-purple-600'\n                }`}>\n                  {item.badge}\n                </div>\n              )}\n            </div>\n          </Link>\n        ))}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <div className=\"w-8 h-8 bg-teal-primary rounded-full flex items-center justify-center\">\n            <i className=\"fas fa-user text-white text-sm\"></i>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\">{user?.username}</p>\n            <p className=\"text-xs text-gray-500 capitalize\">{user?.role?.replace('-', ' ')}</p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <i className=\"fas fa-sign-out-alt\"></i>\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3384},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/chat-support.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { MessageCircle, X, Send, Phone, Mail, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface ChatMessage {\n  id: string;\n  message: string;\n  timestamp: Date;\n  isUser: boolean;\n  agentName?: string;\n  agentAvatar?: string;\n}\n\ninterface ChatSupportProps {\n  userRole: string;\n  userName: string;\n  className?: string;\n}\n\nexport function ChatSupport({ userRole, userName, className = \"\" }: ChatSupportProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [agentInfo, setAgentInfo] = useState({\n    name: \"Sarah\",\n    avatar: \"\",\n    status: \"online\",\n    responseTime: \"Usually responds in 2-3 minutes\"\n  });\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const chatInputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Focus input when chat opens\n  useEffect(() => {\n    if (isOpen) {\n      setTimeout(() => {\n        chatInputRef.current?.focus();\n      }, 100);\n    }\n  }, [isOpen]);\n\n  // Initialize chat when opened\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      initializeChat();\n    }\n  }, [isOpen]);\n\n  const initializeChat = () => {\n    // Simulate connecting to support\n    setTimeout(() => {\n      setIsConnected(true);\n      addMessage({\n        id: \"welcome\",\n        message: `Hi ${userName}! I'm ${agentInfo.name} from Erlessed Support. How can I help you today?`,\n        timestamp: new Date(),\n        isUser: false,\n        agentName: agentInfo.name\n      });\n    }, 1500);\n\n    // Add welcome message immediately\n    addMessage({\n      id: \"connecting\",\n      message: \"Connecting you to support...\",\n      timestamp: new Date(),\n      isUser: false,\n      agentName: \"System\"\n    });\n  };\n\n  const addMessage = (msg: Omit<ChatMessage, \"id\"> & { id?: string }) => {\n    const newMessage: ChatMessage = {\n      id: msg.id || `msg-${Date.now()}-${Math.random()}`,\n      ...msg\n    };\n    setMessages(prev => [...prev, newMessage]);\n  };\n\n  const handleSendMessage = () => {\n    if (!message.trim() || !isConnected) return;\n\n    // Add user message\n    addMessage({\n      message: message.trim(),\n      timestamp: new Date(),\n      isUser: true\n    });\n\n    const userMessage = message.trim();\n    setMessage(\"\");\n\n    // Simulate agent typing\n    setIsTyping(true);\n\n    // Generate contextual response based on message content\n    setTimeout(() => {\n      setIsTyping(false);\n      const response = generateContextualResponse(userMessage, userRole);\n      addMessage({\n        message: response,\n        timestamp: new Date(),\n        isUser: false,\n        agentName: agentInfo.name\n      });\n    }, 1500 + Math.random() * 2000);\n  };\n\n  const generateContextualResponse = (userMessage: string, role: string): string => {\n    const lowerMessage = userMessage.toLowerCase();\n\n    // Role-specific responses\n    const roleResponses = {\n      doctor: {\n        keywords: {\n          \"patient\": \"I can help you with patient management. Are you having issues with the patient queue, biometric verification, or clinical documentation?\",\n          \"claim\": \"For claim-related issues, you can check the preauthorization status in the Claims section. Would you like me to guide you through the process?\",\n          \"icd\": \"The ICD-10 code suggestions are powered by AI. If you're not seeing accurate suggestions, try being more specific with the diagnosis description.\",\n          \"prescription\": \"The prescription module includes drug interaction checks and benefit validation. Are you experiencing issues with a specific medication?\",\n          \"login\": \"If you're having login issues, try resetting your biometric authentication or contact your administrator for account verification.\"\n        }\n      },\n      pharmacist: {\n        keywords: {\n          \"verification\": \"The patient verification process includes biometric scanning and insurance eligibility checks. Which step is causing issues?\",\n          \"drug\": \"Our drug interaction database is updated regularly. If you're seeing an interaction alert, please review the clinical notes before proceeding.\",\n          \"benefit\": \"Benefit verification happens in real-time. If a patient's benefits appear incorrect, they may need to contact their insurer.\",\n          \"dispensing\": \"The dispensing workflow includes safety checks and documentation. Are you stuck on a particular step?\",\n          \"inventory\": \"Inventory management is handled through the pharmacy dashboard. You can track stock levels and set reorder alerts.\"\n        }\n      },\n      insurer: {\n        keywords: {\n          \"appeal\": \"The appeals process allows for clinical review and additional documentation. You can track appeal status in the Claims section.\",\n          \"preauth\": \"Preauthorization decisions use AI analysis combined with clinical guidelines. You can review the decision reasoning in the claim details.\",\n          \"risk\": \"Risk assessment tools help identify patterns and potential fraud. The analytics dashboard provides detailed insights.\",\n          \"claim\": \"Claims processing is automated with AI review. High-risk claims are flagged for manual review before approval.\"\n        }\n      }\n    };\n\n    const currentRole = roleResponses[role as keyof typeof roleResponses];\n    \n    if (currentRole) {\n      for (const [keyword, response] of Object.entries(currentRole.keywords)) {\n        if (lowerMessage.includes(keyword)) {\n          return response;\n        }\n      }\n    }\n\n    // Generic responses based on common keywords\n    if (lowerMessage.includes(\"help\") || lowerMessage.includes(\"how\")) {\n      return \"I'm here to help! Can you tell me more about what specific task you're trying to accomplish? This will help me provide more targeted assistance.\";\n    }\n    \n    if (lowerMessage.includes(\"error\") || lowerMessage.includes(\"problem\")) {\n      return \"I understand you're experiencing an issue. Can you describe what error message you're seeing or what specific problem you're encountering?\";\n    }\n\n    if (lowerMessage.includes(\"thank\")) {\n      return \"You're welcome! Is there anything else I can help you with today?\";\n    }\n\n    // Default responses\n    const defaultResponses = [\n      \"I understand your question. Let me help you with that. Can you provide a bit more detail about your specific situation?\",\n      \"Thanks for reaching out! I'd be happy to assist you. Could you tell me more about what you're trying to accomplish?\",\n      \"I see what you're asking about. To give you the most accurate help, could you share some additional context about your current workflow?\"\n    ];\n\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <div className={className}>\n      {/* Chat Toggle Button */}\n      {!isOpen && (\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"fixed bottom-20 right-4 h-12 w-12 rounded-full shadow-lg bg-blue-600 hover:bg-blue-700 text-white border-0 z-40\"\n        >\n          <MessageCircle className=\"h-6 w-6\" />\n        </Button>\n      )}\n\n      {/* Chat Window */}\n      {isOpen && (\n        <Card className=\"fixed bottom-4 right-4 w-80 h-96 shadow-xl z-50 flex flex-col\">\n          {/* Chat Header */}\n          <CardHeader className=\"pb-2 bg-blue-600 text-white rounded-t-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={agentInfo.avatar} />\n                  <AvatarFallback className=\"bg-blue-500 text-white text-xs\">\n                    {agentInfo.name.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-sm font-medium\">\n                    {isConnected ? agentInfo.name : \"Erlessed Support\"}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-1 text-xs opacity-90\">\n                    <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-yellow-400'}`} />\n                    {isConnected ? 'Online' : 'Connecting...'}\n                  </div>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                className=\"text-white hover:bg-blue-700 h-8 w-8 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            {isConnected && (\n              <div className=\"text-xs opacity-75 flex items-center gap-1\">\n                <Clock className=\"h-3 w-3\" />\n                {agentInfo.responseTime}\n              </div>\n            )}\n          </CardHeader>\n\n          {/* Messages Area */}\n          <CardContent className=\"flex-1 overflow-y-auto p-3 space-y-3\">\n            {messages.map((msg) => (\n              <div key={msg.id} className={`flex ${msg.isUser ? 'justify-end' : 'justify-start'}`}>\n                <div className={`max-w-[80%] ${msg.isUser ? 'order-2' : 'order-1'}`}>\n                  {!msg.isUser && msg.agentName && msg.agentName !== \"System\" && (\n                    <div className=\"text-xs text-gray-500 mb-1\">{msg.agentName}</div>\n                  )}\n                  <div\n                    className={`rounded-lg px-3 py-2 text-sm ${\n                      msg.isUser\n                        ? 'bg-blue-600 text-white'\n                        : msg.agentName === \"System\"\n                        ? 'bg-gray-100 text-gray-600 italic'\n                        : 'bg-gray-100 text-gray-800'\n                    }`}\n                  >\n                    {msg.message}\n                  </div>\n                  <div className=\"text-xs text-gray-400 mt-1\">\n                    {formatTime(msg.timestamp)}\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {/* Typing Indicator */}\n            {isTyping && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-gray-100 rounded-lg px-3 py-2\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" />\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </CardContent>\n\n          {/* Message Input */}\n          <div className=\"p-3 border-t\">\n            <div className=\"flex gap-2\">\n              <Input\n                ref={chatInputRef}\n                placeholder={isConnected ? \"Type your message...\" : \"Connecting...\"}\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={!isConnected}\n                className=\"flex-1 text-sm\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!message.trim() || !isConnected}\n                size=\"sm\"\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            {/* Quick Actions */}\n            {isConnected && messages.length <= 2 && (\n              <div className=\"mt-2 flex flex-wrap gap-1\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-xs h-6\"\n                  onClick={() => setMessage(\"I need help with login issues\")}\n                >\n                  Login Help\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-xs h-6\"\n                  onClick={() => setMessage(\"How do I process a claim?\")}\n                >\n                  Claim Process\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-xs h-6\"\n                  onClick={() => setMessage(\"I found a bug\")}\n                >\n                  Report Bug\n                </Button>\n              </div>\n            )}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":13454},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/logo.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LogoProps {\n  className?: string;\n}\n\nexport function Logo({ className }: LogoProps) {\n  return (\n    <div className={cn(\"relative flex items-center justify-center\", className)}>\n      <div className=\"w-full h-full bg-teal-primary rounded-lg flex items-center justify-center relative\">\n        {/* Medical Cross Design */}\n        <div className=\"w-3/4 h-3/4 relative\">\n          {/* Horizontal bar */}\n          <div className=\"absolute inset-x-2 top-1/2 transform -translate-y-1/2 h-2 bg-teal-secondary rounded-sm\"></div>\n          {/* Vertical bar */}\n          <div className=\"absolute inset-y-2 left-1/2 transform -translate-x-1/2 w-2 bg-teal-secondary rounded-sm\"></div>\n          {/* Center circle */}\n          <div className=\"absolute top-1/2 left-1/2 w-3 h-3 bg-white rounded-full transform -translate-x-1/2 -translate-y-1/2\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":933},"client/src/components/ui/logout-button.tsx":{"content":"import { LogOut, Clock, AlertTriangle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface LogoutButtonProps {\n  variant?: \"button\" | \"dropdown\";\n  className?: string;\n}\n\nexport function LogoutButton({ variant = \"button\", className = \"\" }: LogoutButtonProps) {\n  const { user, logout, lastActivity } = useAuth();\n\n  if (!user) return null;\n\n  const getTimeUntilLogout = () => {\n    const timeSinceLastActivity = Date.now() - lastActivity;\n    const timeUntilLogout = (15 * 60 * 1000) - timeSinceLastActivity; // 15 minutes\n    const minutesLeft = Math.ceil(timeUntilLogout / 60000);\n    return minutesLeft > 0 ? minutesLeft : 0;\n  };\n\n  const minutesLeft = getTimeUntilLogout();\n  const isNearTimeout = minutesLeft <= 2;\n\n  if (variant === \"dropdown\") {\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className={`relative h-10 w-10 rounded-full ${className}`}>\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src=\"\" />\n              <AvatarFallback className=\"bg-teal-100 text-teal-700\">\n                {user.username.charAt(0).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            {isNearTimeout && (\n              <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full animate-pulse\" />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n          <div className=\"flex flex-col space-y-1 p-2\">\n            <p className=\"text-sm font-medium leading-none\">{user.username}</p>\n            <p className=\"text-xs leading-none text-muted-foreground capitalize\">\n              {user.role.replace('-', ' ')}\n            </p>\n          </div>\n          <DropdownMenuSeparator />\n          <div className=\"p-2\">\n            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n              <Clock className=\"h-3 w-3\" />\n              <span>Session expires in {minutesLeft}m</span>\n              {isNearTimeout && (\n                <Badge variant=\"destructive\" className=\"text-xs px-1 py-0\">\n                  <AlertTriangle className=\"h-2 w-2 mr-1\" />\n                  Soon\n                </Badge>\n              )}\n            </div>\n          </div>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem\n            className=\"text-red-600 focus:text-red-600 focus:bg-red-50 cursor-pointer\"\n            onClick={logout}\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            <span>Log out</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={logout}\n      className={`flex items-center gap-2 text-red-600 border-red-200 hover:bg-red-50 hover:text-red-700 hover:border-red-300 ${className}`}\n    >\n      <LogOut className=\"h-4 w-4\" />\n      <span className=\"hidden sm:inline\">Logout</span>\n      {isNearTimeout && (\n        <Badge variant=\"destructive\" className=\"text-xs px-1 py-0 ml-1\">\n          {minutesLeft}m\n        </Badge>\n      )}\n    </Button>\n  );\n}","size_bytes":3497},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/support-widget.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { HelpCircle, MessageSquare, Book, FileText, Search, X, ChevronRight, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SupportTicket {\n  id?: string;\n  user_id: string;\n  user_role: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'open' | 'in_progress' | 'resolved' | 'closed';\n  created_at?: string;\n  updated_at?: string;\n}\n\ninterface FAQItem {\n  id: string;\n  question: string;\n  answer: string;\n  role?: string;\n  category: string;\n  helpful_count: number;\n}\n\ninterface DocumentationPage {\n  id: string;\n  title: string;\n  content: string;\n  role?: string;\n  category: string;\n  tags: string[];\n}\n\ninterface SupportWidgetProps {\n  userRole: string;\n  className?: string;\n}\n\nexport function SupportWidget({ userRole, className = \"\" }: SupportWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showTicketForm, setShowTicketForm] = useState(false);\n  const [ticketForm, setTicketForm] = useState<Partial<SupportTicket>>({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    priority: \"medium\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch FAQ data\n  const { data: faqData = [] } = useQuery({\n    queryKey: [\"/api/support/faq\", userRole],\n    queryFn: () => fetch(`http://localhost:8002/faq?role=${userRole}`).then(res => res.json()),\n    enabled: isOpen\n  });\n\n  // Fetch documentation\n  const { data: docsData = [] } = useQuery({\n    queryKey: [\"/api/support/documentation\", userRole],\n    queryFn: () => fetch(`http://localhost:8002/documentation?role=${userRole}`).then(res => res.json()),\n    enabled: isOpen\n  });\n\n  // Fetch user tickets\n  const { data: ticketsData = [] } = useQuery({\n    queryKey: [\"/api/support/tickets\"],\n    queryFn: () => fetch(\"http://localhost:8002/tickets\").then(res => res.json()),\n    enabled: isOpen\n  });\n\n  // Create ticket mutation\n  const createTicketMutation = useMutation({\n    mutationFn: (ticket: Partial<SupportTicket>) =>\n      fetch(\"http://localhost:8002/tickets\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ ...ticket, user_role: userRole })\n      }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support/tickets\"] });\n      setShowTicketForm(false);\n      setTicketForm({ title: \"\", description: \"\", category: \"\", priority: \"medium\" });\n      toast({\n        title: \"Support Ticket Created\",\n        description: \"Your support request has been submitted successfully.\",\n      });\n    }\n  });\n\n  // Filter content based on search\n  const filteredFAQ = faqData.filter((item: FAQItem) =>\n    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.answer.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const filteredDocs = docsData.filter((doc: DocumentationPage) =>\n    doc.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doc.content.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleSubmitTicket = () => {\n    if (!ticketForm.title || !ticketForm.description || !ticketForm.category) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createTicketMutation.mutate(ticketForm);\n  };\n\n  const getRoleSpecificContent = () => {\n    const roleContent = {\n      doctor: {\n        quickHelp: [\n          { title: \"Patient Queue\", desc: \"Managing patient flow and triage\" },\n          { title: \"ICD-10 Codes\", desc: \"AI-assisted diagnosis coding\" },\n          { title: \"Prescriptions\", desc: \"Electronic prescription workflow\" }\n        ],\n        categories: [\"clinical\", \"diagnosis\", \"prescriptions\", \"claims\"]\n      },\n      pharmacist: {\n        quickHelp: [\n          { title: \"Drug Verification\", desc: \"Prescription validation process\" },\n          { title: \"Benefit Checks\", desc: \"Insurance coverage verification\" },\n          { title: \"Dispensing\", desc: \"Medication dispensing workflow\" }\n        ],\n        categories: [\"dispensing\", \"verification\", \"benefits\", \"inventory\"]\n      },\n      \"care-manager\": {\n        quickHelp: [\n          { title: \"Fraud Detection\", desc: \"AI-powered pattern analysis\" },\n          { title: \"Analytics\", desc: \"Claims performance metrics\" },\n          { title: \"Provider Management\", desc: \"Network oversight tools\" }\n        ],\n        categories: [\"analytics\", \"fraud\", \"providers\", \"performance\"]\n      },\n      insurer: {\n        quickHelp: [\n          { title: \"Claim Appeals\", desc: \"Appeal processing workflow\" },\n          { title: \"Preauthorization\", desc: \"AI-assisted approval decisions\" },\n          { title: \"Risk Assessment\", desc: \"Claims risk analysis\" }\n        ],\n        categories: [\"appeals\", \"preauth\", \"risk\", \"claims\"]\n      },\n      patient: {\n        quickHelp: [\n          { title: \"Benefits\", desc: \"Understanding your coverage\" },\n          { title: \"Claims History\", desc: \"Viewing your claim status\" },\n          { title: \"Dependents\", desc: \"Managing family members\" }\n        ],\n        categories: [\"benefits\", \"claims\", \"dependents\", \"billing\"]\n      },\n      admin: {\n        quickHelp: [\n          { title: \"User Management\", desc: \"Adding and managing users\" },\n          { title: \"System Config\", desc: \"Platform configuration\" },\n          { title: \"Analytics\", desc: \"System performance metrics\" }\n        ],\n        categories: [\"users\", \"configuration\", \"analytics\", \"security\"]\n      }\n    };\n\n    return roleContent[userRole as keyof typeof roleContent] || roleContent.patient;\n  };\n\n  const roleContent = getRoleSpecificContent();\n\n  return (\n    <div className={className}>\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"fixed bottom-4 right-4 h-12 w-12 rounded-full shadow-lg bg-teal-600 hover:bg-teal-700 text-white border-0 z-50\"\n          >\n            <HelpCircle className=\"h-6 w-6\" />\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <HelpCircle className=\"h-5 w-5 text-teal-600\" />\n              Erlessed Support Center\n            </DialogTitle>\n            <DialogDescription>\n              Get help with your healthcare platform tasks\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search for help...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            <Tabs defaultValue=\"quick-help\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"quick-help\">Quick Help</TabsTrigger>\n                <TabsTrigger value=\"faq\">FAQ</TabsTrigger>\n                <TabsTrigger value=\"guides\">Guides</TabsTrigger>\n                <TabsTrigger value=\"support\">Support</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"quick-help\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {roleContent.quickHelp.map((item, index) => (\n                    <Card key={index} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                      <CardHeader className=\"pb-2\">\n                        <CardTitle className=\"text-sm\">{item.title}</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-xs text-gray-600\">{item.desc}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"font-medium mb-2\">Popular Topics</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {roleContent.categories.map((category) => (\n                      <Badge key={category} variant=\"secondary\" className=\"cursor-pointer\">\n                        {category}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"faq\" className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {filteredFAQ.length === 0 ? (\n                  <p className=\"text-center text-gray-500 py-8\">No FAQ items found.</p>\n                ) : (\n                  filteredFAQ.map((faq: FAQItem) => (\n                    <Card key={faq.id}>\n                      <CardHeader className=\"pb-2\">\n                        <CardTitle className=\"text-sm flex items-center justify-between\">\n                          {faq.question}\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {faq.category}\n                          </Badge>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div \n                          className=\"text-sm text-gray-600 prose prose-sm max-w-none\"\n                          dangerouslySetInnerHTML={{ __html: faq.answer.replace(/\\n/g, '<br />') }}\n                        />\n                        <div className=\"flex items-center justify-between mt-3 pt-2 border-t\">\n                          <span className=\"text-xs text-gray-400\">\n                            {faq.helpful_count} people found this helpful\n                          </span>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-xs\">\n                            Helpful?\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"guides\" className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {filteredDocs.length === 0 ? (\n                  <p className=\"text-center text-gray-500 py-8\">No guides found.</p>\n                ) : (\n                  filteredDocs.map((doc: DocumentationPage) => (\n                    <Card key={doc.id} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                      <CardHeader className=\"pb-2\">\n                        <CardTitle className=\"text-sm flex items-center justify-between\">\n                          {doc.title}\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {doc.category}\n                            </Badge>\n                            <ExternalLink className=\"h-3 w-3\" />\n                          </div>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-xs text-gray-600 line-clamp-3\">\n                          {doc.content.substring(0, 150)}...\n                        </div>\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {doc.tags.map((tag) => (\n                            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"support\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm flex items-center gap-2\">\n                        <MessageSquare className=\"h-4 w-4\" />\n                        Create Support Ticket\n                      </CardTitle>\n                      <CardDescription className=\"text-xs\">\n                        Get personalized help from our support team\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {!showTicketForm ? (\n                        <Button \n                          onClick={() => setShowTicketForm(true)}\n                          className=\"w-full\"\n                          size=\"sm\"\n                        >\n                          New Ticket\n                        </Button>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          <div>\n                            <Label className=\"text-xs\">Title</Label>\n                            <Input\n                              placeholder=\"Brief description of your issue\"\n                              value={ticketForm.title}\n                              onChange={(e) => setTicketForm(prev => ({ ...prev, title: e.target.value }))}\n                              className=\"text-sm\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs\">Category</Label>\n                            <Select onValueChange={(value) => setTicketForm(prev => ({ ...prev, category: value }))}>\n                              <SelectTrigger className=\"text-sm\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"technical\">Technical Issue</SelectItem>\n                                <SelectItem value=\"billing\">Billing</SelectItem>\n                                <SelectItem value=\"training\">Training</SelectItem>\n                                <SelectItem value=\"feature\">Feature Request</SelectItem>\n                                <SelectItem value=\"other\">Other</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label className=\"text-xs\">Priority</Label>\n                            <Select onValueChange={(value) => setTicketForm(prev => ({ ...prev, priority: value as any }))}>\n                              <SelectTrigger className=\"text-sm\">\n                                <SelectValue placeholder=\"Select priority\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"low\">Low</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"high\">High</SelectItem>\n                                <SelectItem value=\"urgent\">Urgent</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label className=\"text-xs\">Description</Label>\n                            <Textarea\n                              placeholder=\"Detailed description of your issue\"\n                              value={ticketForm.description}\n                              onChange={(e) => setTicketForm(prev => ({ ...prev, description: e.target.value }))}\n                              className=\"text-sm min-h-20\"\n                            />\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              onClick={handleSubmitTicket}\n                              disabled={createTicketMutation.isPending}\n                              size=\"sm\"\n                              className=\"flex-1\"\n                            >\n                              {createTicketMutation.isPending ? \"Submitting...\" : \"Submit\"}\n                            </Button>\n                            <Button \n                              onClick={() => setShowTicketForm(false)}\n                              variant=\"outline\"\n                              size=\"sm\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Your Recent Tickets</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {ticketsData.length === 0 ? (\n                        <p className=\"text-xs text-gray-500\">No tickets yet</p>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          {ticketsData.slice(0, 3).map((ticket: SupportTicket) => (\n                            <div key={ticket.id} className=\"flex items-center justify-between p-2 border rounded text-xs\">\n                              <div className=\"flex-1\">\n                                <p className=\"font-medium line-clamp-1\">{ticket.title}</p>\n                                <p className=\"text-gray-500\">{ticket.category}</p>\n                              </div>\n                              <Badge \n                                variant={ticket.status === 'resolved' ? 'default' : 'secondary'}\n                                className=\"text-xs\"\n                              >\n                                {ticket.status}\n                              </Badge>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19301},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","size_bytes":1144},"client/src/components/MultiFingerprintRegistration.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Fingerprint, \n  CheckCircle, \n  AlertCircle, \n  Loader2, \n  Hand, \n  RotateCcw,\n  ArrowRight\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface MultiFingerprintRegistrationProps {\n  patientId: string;\n  patientName?: string;\n  onComplete?: (results: any) => void;\n  onError?: (error: string) => void;\n  className?: string;\n}\n\ninterface FingerData {\n  id: string;\n  name: string;\n  hand: 'left' | 'right';\n  scanned: boolean;\n  scanning: boolean;\n  progress: number;\n  result: 'success' | 'failed' | null;\n  error?: string;\n  fingerprintId?: string;\n}\n\nconst FINGERS: FingerData[] = [\n  // Right Hand\n  { id: 'right_thumb', name: 'Right Thumb', hand: 'right', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'right_index', name: 'Right Index', hand: 'right', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'right_middle', name: 'Right Middle', hand: 'right', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'right_ring', name: 'Right Ring', hand: 'right', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'right_pinky', name: 'Right Pinky', hand: 'right', scanned: false, scanning: false, progress: 0, result: null },\n  // Left Hand\n  { id: 'left_thumb', name: 'Left Thumb', hand: 'left', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'left_index', name: 'Left Index', hand: 'left', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'left_middle', name: 'Left Middle', hand: 'left', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'left_ring', name: 'Left Ring', hand: 'left', scanned: false, scanning: false, progress: 0, result: null },\n  { id: 'left_pinky', name: 'Left Pinky', hand: 'left', scanned: false, scanning: false, progress: 0, result: null },\n];\n\nexport function MultiFingerprintRegistration({\n  patientId,\n  patientName,\n  onComplete,\n  onError,\n  className\n}: MultiFingerprintRegistrationProps) {\n  const [fingers, setFingers] = useState<FingerData[]>(FINGERS);\n  const [activeTab, setActiveTab] = useState<'right' | 'left'>('right');\n  const [currentFinger, setCurrentFinger] = useState<string | null>(null);\n  const [overallProgress, setOverallProgress] = useState(0);\n\n  // Simulate fingerprint scanning\n  const simulateFingerprint = async (fingerId: string): Promise<string> => {\n    const steps = [\n      { progress: 15, message: 'Initializing scanner...' },\n      { progress: 30, message: 'Detecting finger placement...' },\n      { progress: 50, message: 'Capturing ridge patterns...' },\n      { progress: 70, message: 'Analyzing minutiae points...' },\n      { progress: 85, message: 'Generating biometric hash...' },\n      { progress: 100, message: 'Scan complete!' }\n    ];\n\n    for (const step of steps) {\n      await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 200));\n      \n      setFingers(prev => prev.map(finger => \n        finger.id === fingerId \n          ? { ...finger, progress: step.progress }\n          : finger\n      ));\n    }\n\n    // Generate mock fingerprint data\n    const timestamp = Date.now();\n    const randomData = Array.from({length: 64}, () => \n      Math.floor(Math.random() * 256).toString(16).padStart(2, '0')\n    ).join('');\n    \n    return btoa(`fingerprint_${patientId}_${fingerId}_${timestamp}_${randomData}`);\n  };\n\n  const scanFingerprint = async (fingerId: string) => {\n    setCurrentFinger(fingerId);\n    \n    // Update scanning state\n    setFingers(prev => prev.map(finger => \n      finger.id === fingerId \n        ? { ...finger, scanning: true, progress: 0, result: null, error: undefined }\n        : finger\n    ));\n\n    try {\n      const fingerprintData = await simulateFingerprint(fingerId);\n      \n      const response = await fetch('/api/biometric/register-finger', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          patientId,\n          fingerId,\n          fingerprintData,\n          deviceId: `multi_scanner_${Date.now()}`\n        })\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        setFingers(prev => prev.map(finger => \n          finger.id === fingerId \n            ? { \n                ...finger, \n                scanning: false, \n                scanned: true, \n                result: 'success',\n                fingerprintId: result.fingerprintId\n              }\n            : finger\n        ));\n        updateOverallProgress();\n      } else {\n        setFingers(prev => prev.map(finger => \n          finger.id === fingerId \n            ? { \n                ...finger, \n                scanning: false, \n                result: 'failed',\n                error: result.error || 'Registration failed'\n              }\n            : finger\n        ));\n        onError?.(result.error || 'Fingerprint registration failed');\n      }\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : 'Network error occurred';\n      setFingers(prev => prev.map(finger => \n        finger.id === fingerId \n          ? { \n              ...finger, \n              scanning: false, \n              result: 'failed',\n              error: errorMsg\n            }\n          : finger\n      ));\n      onError?.(errorMsg);\n    } finally {\n      setCurrentFinger(null);\n    }\n  };\n\n  const updateOverallProgress = () => {\n    const scannedCount = fingers.filter(f => f.scanned).length;\n    const newProgress = (scannedCount / fingers.length) * 100;\n    setOverallProgress(newProgress);\n    \n    if (scannedCount === fingers.length) {\n      onComplete?.(fingers.filter(f => f.scanned));\n    }\n  };\n\n  const resetFinger = (fingerId: string) => {\n    setFingers(prev => prev.map(finger => \n      finger.id === fingerId \n        ? { \n            ...finger, \n            scanned: false, \n            scanning: false, \n            progress: 0, \n            result: null,\n            error: undefined,\n            fingerprintId: undefined\n          }\n        : finger\n    ));\n    updateOverallProgress();\n  };\n\n  const getHandFingers = (hand: 'left' | 'right') => {\n    return fingers.filter(f => f.hand === hand);\n  };\n\n  const renderFingerCard = (finger: FingerData) => {\n    return (\n      <Card key={finger.id} className=\"relative\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-medium text-gray-900\">{finger.name}</h4>\n            <Badge \n              variant={finger.scanned ? \"default\" : finger.result === 'failed' ? \"destructive\" : \"outline\"}\n              className={cn(\n                finger.scanned && \"bg-green-100 text-green-700 border-green-300\"\n              )}\n            >\n              {finger.scanning ? 'Scanning' : finger.scanned ? 'Complete' : finger.result === 'failed' ? 'Failed' : 'Pending'}\n            </Badge>\n          </div>\n\n          {/* Finger Visualization */}\n          <div className=\"relative mb-4\">\n            <div className={cn(\n              \"w-20 h-20 mx-auto rounded-full border-4 flex items-center justify-center transition-all duration-300\",\n              finger.scanning ? \"border-[#265651] bg-[#265651]/10 animate-pulse\" : \"border-gray-300\",\n              finger.result === 'success' && \"border-green-500 bg-green-50\",\n              finger.result === 'failed' && \"border-red-500 bg-red-50\"\n            )}>\n              {finger.scanning ? (\n                <Loader2 className=\"h-8 w-8 text-[#265651] animate-spin\" />\n              ) : finger.result === 'success' ? (\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              ) : finger.result === 'failed' ? (\n                <AlertCircle className=\"h-8 w-8 text-red-500\" />\n              ) : (\n                <Fingerprint className=\"h-8 w-8 text-gray-400\" />\n              )}\n            </div>\n\n            {/* Progress Ring */}\n            {finger.scanning && (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <svg className=\"w-24 h-24 transform -rotate-90\">\n                  <circle\n                    cx=\"48\"\n                    cy=\"48\"\n                    r=\"44\"\n                    stroke=\"#e5e7eb\"\n                    strokeWidth=\"3\"\n                    fill=\"transparent\"\n                  />\n                  <circle\n                    cx=\"48\"\n                    cy=\"48\"\n                    r=\"44\"\n                    stroke=\"#265651\"\n                    strokeWidth=\"3\"\n                    fill=\"transparent\"\n                    strokeDasharray={276}\n                    strokeDashoffset={276 - (276 * finger.progress) / 100}\n                    className=\"transition-all duration-300 ease-out\"\n                  />\n                </svg>\n              </div>\n            )}\n          </div>\n\n          {/* Progress Bar */}\n          {finger.scanning && (\n            <div className=\"mb-3\">\n              <Progress value={finger.progress} className=\"w-full h-2\" />\n              <p className=\"text-xs text-center text-gray-600 mt-1\">\n                {finger.progress}%\n              </p>\n            </div>\n          )}\n\n          {/* Error Message */}\n          {finger.result === 'failed' && finger.error && (\n            <Alert variant=\"destructive\" className=\"mb-3 text-xs\">\n              <AlertCircle className=\"h-3 w-3\" />\n              <AlertDescription className=\"text-xs\">\n                {finger.error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"space-y-2\">\n            {!finger.scanned && finger.result !== 'failed' && (\n              <Button\n                onClick={() => scanFingerprint(finger.id)}\n                disabled={finger.scanning || currentFinger !== null}\n                className=\"w-full bg-[#265651] hover:bg-[#1d453f] text-white text-sm\"\n                size=\"sm\"\n              >\n                {finger.scanning ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-3 w-3 animate-spin\" />\n                    Scanning...\n                  </>\n                ) : (\n                  <>\n                    <Fingerprint className=\"mr-2 h-3 w-3\" />\n                    Scan\n                  </>\n                )}\n              </Button>\n            )}\n\n            {(finger.result === 'failed' || finger.scanned) && (\n              <Button\n                onClick={() => resetFinger(finger.id)}\n                disabled={finger.scanning || currentFinger !== null}\n                variant=\"outline\"\n                className=\"w-full text-sm\"\n                size=\"sm\"\n              >\n                <RotateCcw className=\"mr-2 h-3 w-3\" />\n                Rescan\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const scannedCount = fingers.filter(f => f.scanned).length;\n  const failedCount = fingers.filter(f => f.result === 'failed').length;\n\n  return (\n    <div className={cn(\"w-full max-w-6xl mx-auto space-y-6\", className)}>\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Hand className=\"h-6 w-6 text-[#265651]\" />\n            Multi-Fingerprint Registration\n          </CardTitle>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Badge variant=\"outline\">Patient ID: {patientId}</Badge>\n              {patientName && (\n                <Badge variant=\"outline\" className=\"ml-2\">{patientName}</Badge>\n              )}\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-600\">\n                Progress: {scannedCount}/{fingers.length} fingers\n              </p>\n              <Progress value={overallProgress} className=\"w-32 mt-1\" />\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{scannedCount}</div>\n            <div className=\"text-sm text-gray-600\">Registered</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-red-600\">{failedCount}</div>\n            <div className=\"text-sm text-gray-600\">Failed</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-gray-600\">{fingers.length - scannedCount - failedCount}</div>\n            <div className=\"text-sm text-gray-600\">Pending</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Hand Tabs */}\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'right' | 'left')}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"right\" className=\"flex items-center gap-2\">\n            <Hand className=\"h-4 w-4\" />\n            Right Hand ({getHandFingers('right').filter(f => f.scanned).length}/5)\n          </TabsTrigger>\n          <TabsTrigger value=\"left\" className=\"flex items-center gap-2\">\n            <Hand className=\"h-4 w-4 scale-x-[-1]\" />\n            Left Hand ({getHandFingers('left').filter(f => f.scanned).length}/5)\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"right\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n            {getHandFingers('right').map(renderFingerCard)}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"left\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n            {getHandFingers('left').map(renderFingerCard)}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Instructions */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <h4 className=\"font-medium text-gray-900 mb-2\">Registration Instructions:</h4>\n          <div className=\"text-sm text-gray-600 space-y-1\">\n            <p>• Ensure hands are clean and dry before scanning</p>\n            <p>• Place each finger firmly on the scanner</p>\n            <p>• Hold steady during the scanning process</p>\n            <p>• Register at least 3 fingers per hand for optimal security</p>\n            <p>• You can rescan any finger if the initial scan fails</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Completion Actions */}\n      {scannedCount >= 6 && (\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"font-medium text-green-800\">Minimum Requirements Met!</h4>\n                <p className=\"text-sm text-green-600\">\n                  You have registered {scannedCount} fingers. You can continue registering more or proceed.\n                </p>\n              </div>\n              <Button \n                onClick={() => onComplete?.(fingers.filter(f => f.scanned))}\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                Continue <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16023}}}